
private class <Module>
{
}

private class <>f__AnonymousType0`2<<key>j__TPar, <value>j__TPar>
{
    private <key>j__TPar <key>i__Field;
    private <value>j__TPar <value>i__Field;
    public <key>j__TPar key { get; set; }
    public <value>j__TPar value { get; set; }
    public bool Equals(object value);
    public int GetHashCode();
    public string ToString();
}

private class <>f__AnonymousType1`2<<content>j__TPar, <index>j__TPar>
{
    private <content>j__TPar <content>i__Field;
    private <index>j__TPar <index>i__Field;
    public <content>j__TPar content { get; set; }
    public <index>j__TPar index { get; set; }
    public bool Equals(object value);
    public int GetHashCode();
    public string ToString();
}

// Namespace: Microsoft.CodeAnalysis
private class EmbeddedAttribute : System.Attribute
{
}

// Namespace: System.Runtime.CompilerServices
private class NullableAttribute : System.Attribute
{
    public byte[] NullableFlags;
}

// Namespace: System.Runtime.CompilerServices
private class NullableContextAttribute : System.Attribute
{
    public byte Flag;
}

public class RandomiseWalkerAnimation : UnityEngine.MonoBehaviour
{
    public UnityEngine.Animator animator;
    private void Start();
}

public class ObservableExtensions
{
    public static System.IDisposable Subscribe<T>(System.IObservable<T> self, System.Action<T> onNext);
    public static System.IDisposable Subscribe<T>(System.IObservable<T> self, System.Action<T> onNext, System.Action<System.Exception> onError);
    public static System.IDisposable Subscribe<T>(System.IObservable<T> self, System.Action<T> onNext, System.Action onCompleted);
    public static System.IDisposable Subscribe<T>(System.IObservable<T> self, System.Action<T> onNext, System.Action<System.Exception> onError, System.Action onCompleted);
    public static System.IDisposable SubscribeWithState<T, TState>(System.IObservable<T> self, TState state, System.Action<T, TState> onNext);
    public static System.IDisposable SubscribeWithState<T, TState>(System.IObservable<T> self, TState state, System.Action<T, TState> onNext, System.Action<System.Exception, TState> onError);
    public static System.IDisposable SubscribeWithState<T, TState>(System.IObservable<T> self, TState state, System.Action<T, TState> onNext, System.Action<TState> onCompleted);
    public static System.IDisposable SubscribeWithState<T, TState>(System.IObservable<T> self, TState state, System.Action<T, TState> onNext, System.Action<System.Exception, TState> onError, System.Action<TState> onCompleted);
    public static System.IDisposable Subscribe<T>(System.IObservable<T> self, System.Func<T, Cysharp.Threading.Tasks.UniTaskVoid> onNextAsync);
    public static System.IDisposable SubscribeWithState<T, TState>(System.IObservable<T> self, TState state, System.Func<T, TState, Cysharp.Threading.Tasks.UniTaskVoid> onNextAsync);
    public static System.IObservable<T> Merge<T>(System.IObservable<T> observable1, System.IObservable<T> observable2);
    public static System.IObservable<T> Merge<T>(System.IObservable<T> observable1, System.IObservable<T> observable2, System.IObservable<T> observable3);

    private class <>c__8`1<T>
    {
        public static <>c__8<T> <>9;
        public static System.Action<T, System.Func<T, Cysharp.Threading.Tasks.UniTaskVoid>> <>9__8_0;
        private void <Subscribe>b__8_0(T x, System.Func<T, Cysharp.Threading.Tasks.UniTaskVoid> func);
    }

    private class <>c__9`2<T, TState>
    {
        public static <>c__9<T, TState> <>9;
        public static System.Action<T, System.ValueTuple<TState, System.Func<T, TState, Cysharp.Threading.Tasks.UniTaskVoid>>> <>9__9_0;
        private void <SubscribeWithState>b__9_0(T x, System.ValueTuple<TState, System.Func<T, TState, Cysharp.Threading.Tasks.UniTaskVoid>> s);
    }
}

public class AppGuardEventType
{

    public class S2Auth
    {
        public static int S2AUTH_RESULT_SUCCESS;
        public static int S2AUTH_RESULT_RETRY;
        public static int S2AUTH_RESULT_FAIL;
    }

    public class Detect
    {
        public static int DETECT_RUNNING_BAD_APPLICATION;
    }

    public class S2AuthRegion
    {
        public static int KOREA;
        public static int JAPAN;
        public static int CHINA;
    }
}

public class AppGuardUnityManager : UnityEngine.MonoBehaviour
{
    public static string APPGUARD_PLUGIN_VERSION;
    private static AppGuardUnityManager _instance;
    private System.Action<int, string> mAppGuardS2AuthCallBack;
    private System.Action<string> mAppGuardDetectCallBack;
    public AppGuardUnityManager Instance { get; set; }
    private void start();
    public void setAppGuardS2AuthCallback(System.Action<int, string> callback);
    public void onS2AuthTryCallback(string data);
    public void setAppGuardDetectCallback(System.Action<string> callback);
    public void onViolationCallback(string data);
    public string getAppGuardUdid();
    public void setUserId(string userid);
    public void setUniqueClientId(string uniqueId, long retryTimeSec);
    public void setReserved1(int value, int option);
    public void setCustomMacroRule();
    public void startCustomMacroMode();
    public void stopCustomMacroMode();
}

public class EfficacyDetailContent : UnityEngine.MonoBehaviour
{
    private UnityEngine.RectTransform contentRectTransform;
    private ENTERPRISE.UI.UITextMeshProUGUI efficacyName;
    private ENTERPRISE.UI.UITextMeshProUGUI efficacyDescription;
    public ENTERPRISE.UI.UITextMeshProUGUI EfficacyName { get; set; }
    public ENTERPRISE.UI.UITextMeshProUGUI EfficacyDescription { get; set; }
    public UnityEngine.RectTransform ContentRectTransform { get; set; }
}

public class CameraWorkEvent : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject _camera;
    private UnityEngine.Camera _cameraCache;
    private UnityEngine.Rendering.PostProcessing.PostProcessVolume[] _postProcessVolumes;
    private UnityEngine.Rendering.PostProcessing.DepthOfField[] _depthOfField;
    private System.Collections.Generic.List<UnityEngine.GameObject> _objects;
    private float _objectScale;
    private System.Collections.Generic.List<CameraWorkData> camWorkData;
    private System.Collections.Generic.List<CameraMoveData> camMoveData;
    private int commonCamMoveDataCount;
    private int currentCamWorkIndex;
    public string currentSceneName;
    private UnityEngine.Playables.PlayableDirector timeline;
    public float timeCount;
    private CameraWorkData <currentCameraWorkData>k__BackingField;
    private CameraWorkData <nextCameraWorkData>k__BackingField;
    private PRISM.LiveCharacterController liveChara;
    private UnityEngine.Vector3[] fixCameraPosition;
    private PRISM.AudienceController _audience;
    private PRISM.Scenario.ScenarioManager _scenario;
    private PRISM.CutScene _cutScene;
    private UnityEngine.Vector3[] currentCameraDir;
    private UnityEngine.Vector3[] currentCameraUp;
    private PRISM.LiveScene liveScene;
    private PRISM.ScreenEffectEx screenEffect;
    private UnityEngine.Camera fadeCamera;
    private static float ZeroFrameEpsilon;
    private static System.Collections.Generic.HashSet<UnityEngine.Rendering.PostProcessing.DepthOfField> AllTimelineDoFs;
    private UnityEngine.Rendering.PostProcessing.DepthOfField timelineDoF;
    private int cameraIndex;
    public UnityEngine.Vector3 centerTarget;
    public int characterNum;
    private UnityEngine.Vector3 targetPosition;
    private UnityEngine.Vector3 targetSpeed;
    private UnityEngine.Vector3 targetOffset;
    private UnityEngine.Vector3 cameraLastPosition;
    public UnityEngine.Vector3 cameraPosition;
    private UnityEngine.Vector3 cameraOffset;
    private UnityEngine.Quaternion cameraLastRotation;
    public UnityEngine.Quaternion cameraRotation;
    private UnityEngine.Quaternion cameraPlusRotation;
    private UnityEngine.Vector3 cameraLastRotEuler;
    private float cameraLastFieldOfView;
    private float cameraFieldOfView;
    private float cameraLastFocus;
    private float cameraFocus;
    private float cameraFocusValue;
    public float cameraPlusZ;
    public float cameraRangeRadius;
    private static float MaxTraceSpeed;
    private static float MinTraceSpeed;
    private static float MinDumper;
    private static float MaxDumper;
    private static float BaseAspect;
    private System.ValueTuple<float, float> cacheForProjectionMatrix;
    public bool cameraEdit;
    private float lastTime;
    public float interRate;
    public float defaultZ;
    private static int BoneNameCount;
    private static string[] boneNames;
    private static int RootBoneIndex;
    private static ShootingTypeTable[] shootingTypeTable;
    private PRISM.Character[] characters;
    private UnityEngine.GameObject[,] boneObjects;
    public bool[] onoff;
    private bool isPresetMode;
    private static float CameraMoveLimitYAxis;
    private float cameraStartPositionY;
    private static string commonCameraMoveFile;
    private System.Collections.Generic.Dictionary<string, int> moveIDTable;
    private UnityEngine.Vector3 adjustForUI;
    private bool isSetCameraSave;
    private UnityEngine.Vector3 saveCameraAngles;
    private UnityEngine.Vector3 saveCameraPosition;
    public CameraWorkData currentCameraWorkData { get; set; }
    public CameraWorkData nextCameraWorkData { get; set; }
    public UnityEngine.Vector3 CameraPosition { get; set; }
    public bool ExistNextCamWorkData { get; set; }
    public System.Collections.Generic.List<CameraWorkData> GetCameraWorkData();
    public System.Collections.Generic.List<CameraMoveData> GetCameraMoveData();
    public CameraMoveData GetCurrentCameraMoveData();
    public PRISM.ScreenEffectEx GetScreenEffect();
    public UnityEngine.Camera GetFadeCamera();
    public void Setup(UnityEngine.GameObject camera, PRISM.LiveCharacterController _liveChara, PRISM.ScreenEffectEx _screenEffect);
    private void _setupPostProcess();
    private UnityEngine.Vector3 DefaultCameraPosition(CameraType t);
    private void OnEnable();
    public void _findTimelineControlledDoF(UnityEngine.Playables.PlayableDirector playableDirector);
    private void Update();
    public void UpdateCameraWork();
    private void _dissolveForChangeCut();
    private void LateUpdate();
    private void OnDestroy();
    public void CalcObjectPosition(bool reset);
    public void SetForceCalcControlPoint();
    public bool IsCommonMove(string moveID);
    public void CalcCamera(bool reset, int p);
    private float _getDefaultZ(float fov);
    private float _calcPlusZ(float fov);
    public void ApplyCamera();
    public void AdjustProjectionMatrix();
    public void ResetCamera();
    public void SetCameraTime(float time);
    private void ForceAnimationUpdate(float time);
    private float _getTime();
    private void CheckCharacterUpdate();
    private void TargetUpdate();
    public void SetTargetObject();
    private void CalcCameraOffsetZ();
    public void SetCharacterActive();
    public void SetCutChange();
    public int GetAnimationTotalFrame();
    public int GetLastCameraFrame();
    public void SetPresetDirect(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot, float fov, float offsetY);
    public void SetAdjustForUI(UnityEngine.Vector3 adjustValue);
    public void _adjustForUI();
    public void _resetAdjustForUI();
    public void RotateCameraX(float angleX);
    public void RotateCameraY(float angleY);
    public void SetCameraFov(float fov);
    public void MoveCameraPosition(UnityEngine.Vector2 axis);
    public void MoveCameraPositionY(float increase, float min, float max);
    public void SetCameraAngleX(float x);
    public void SetCameraPositionY(float positionY);
    public void SetManualCameraTarget(ShootingType shootingType);
    private void _resetCameraStartPositionY();
    public void DisablePresetMode();
    public CameraWorkData AddCameraWorkEvent(CameraWorkData cd);
    public void RemoveCameraWorkEvent(CameraWorkData cd);
    private void _updateMoveIDTable();
    public CameraMoveData AddCameraMoveData(CameraMoveData cd);
    public void RemoveCameraMoveData(CameraMoveData cd);
    public void LoadCameraWorkEventData(string name, int _cameraIndex);
    public void LoadCameraWorkEventData(string name, byte[] fileBytes);
    private void _loadCameraWorkEventDataInner(string name, int _cameraIndex, byte[] fileBytes);
    private static CameraWorkData _createDummyData(int frame);
    public bool IsFocusCamera();

    public class CameraWorkDatas
    {
        public CameraWorkDataSave[] cameraWorkData;
        public CameraMoveData[] customCameraMoveData;
    }

    public class CameraWorkDataSave : UnityEngine.ISerializationCallbackReceiver
    {
        private int frameRate;
        public int startFrame;
        public int[] objectList;
        public string shootingType;
        public string cameraType;
        public string moveID;
        public float moveSpeed;
        public UnityEngine.AnimationCurve easing;
        public float moveTrace;
        public float moveTransition;
        public bool flip;
        public UnityEngine.Vector3 offsetRotate;
        public int[] clippingList;
        public bool swayReset;
        public bool noDissolve;
        public int stopFrame;
        public bool useStartTargetData;
        public UnityEngine.Vector3 targetBasePoint;
        public UnityEngine.Vector3 targetNormalized;
        public int FrameRate { get; set; }
        public void OnBeforeSerialize();
        public void OnAfterDeserialize();
    }

    public class CameraWorkData
    {
        private int startFrame;
        private int stopFrame;
        public int[] objectList;
        public ShootingType shootingType;
        public CameraType cameraType;
        public string moveID;
        public float moveSpeed;
        public UnityEngine.AnimationCurve easing;
        public float moveTrace;
        public float moveTransition;
        public bool flip;
        public UnityEngine.Vector3 offsetRotate;
        public int[] clippingList;
        public bool swayReset;
        public bool noDissolve;
        public bool useStartTargetData;
        public UnityEngine.Vector3 targetBasePoint;
        public UnityEngine.Vector3 targetNormalized;
        private int <FrameRate>k__BackingField;
        private float <StartTime>k__BackingField;
        private float <StopTime>k__BackingField;
        public int FrameRate { get; set; }
        public int StartFrame { get; set; }
        public int StopFrame { get; set; }
        public float StartTime { get; set; }
        public float StopTime { get; set; }
        public bool CanMove();
    }

    public class CameraMoveDatas
    {
        public CameraMoveData[] cameraMoveData;
    }

    public class CameraMoveData
    {
        public string moveID;
        public UnityEngine.Vector3[] cameraPos;
        public UnityEngine.Vector3[] tiltPanRoll;
        public float[] zoom;
        public float[] focus;
    }

    public enum ShootingType : System.Enum
    {
        public int value__;
        public static ShootingType FaceUp;
        public static ShootingType BustUp;
        public static ShootingType UpperUp;
        public static ShootingType LowerUp;
        public static ShootingType FullBody;
        public static ShootingType RootBase;
        public static ShootingType LeftHand;
        public static ShootingType RightHand;
        public static ShootingType Stage;
    }

    public enum CameraType : System.Enum
    {
        public int value__;
        public static CameraType Drone;
        public static CameraType CenterMiddle;
        public static CameraType CenterUp;
        public static CameraType CenterDown;
        public static CameraType LeftMiddle;
        public static CameraType LeftUp;
        public static CameraType LeftDown;
        public static CameraType RightMiddle;
        public static CameraType RightUp;
        public static CameraType RightDown;
        public static CameraType BackMiddle;
        public static CameraType BackUp;
        public static CameraType BackDown;
        public static CameraType HalfLeftMiddle;
        public static CameraType HalfLeftUp;
        public static CameraType HalfLeftDown;
        public static CameraType HalfRightMiddle;
        public static CameraType HalfRightUp;
        public static CameraType HalfRightDown;
        public static CameraType RootFront;
    }

    private class ShootingTypeTable
    {
        public int boneIndex;
        public float offsetY;
        public float rangeRadius;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.Timeline.TrackAsset, bool> <>9__101_0;
        public static System.Comparison<CameraWorkData> <>9__141_0;
        private bool <_findTimelineControlledDoF>b__101_0(UnityEngine.Timeline.TrackAsset t);
        private int <AddCameraWorkEvent>b__141_0(CameraWorkData a, CameraWorkData b);
    }
}

public class CameraWorkTest : UnityEngine.MonoBehaviour
{

    public enum PlayMode : System.Enum
    {
        public int value__;
        public static PlayMode Stop;
        public static PlayMode Normal;
        public static PlayMode Step;
        public static PlayMode Rev;
        public static PlayMode Fast;
        public static PlayMode FastRev;
    }
}

public class SceneCameraController : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject targetObject;
    private UnityEngine.Vector3 targetPoint;
    private static float RotateSpeed;
    private static float ZoomSpeed;
    private static float TranslateSpeed;
    public static bool IsCameraLookChara;
    private UnityEngine.Vector3 lastPos;
    private void Awake();
}

public class SceneCameraController_Stream : UnityEngine.MonoBehaviour
{
    private UnityEngine.Vector3 targetPoint;
    private float rotateSpeed;
    private float translateSpeed;
    private float zoomSpeed;
    private UnityEngine.Vector3 lastPos;
    public bool isUseGyro;
    public bool isActoveControll;
    private UnityEngine.Quaternion _BASE_ROTATION;
    private void Awake();
    private void Update();
    private void OnDrawGizmos();
}

public class ViewerCameraController : UnityEngine.MonoBehaviour
{
    private UnityEngine.Transform _RotationObj;
    public void SetPosition(UnityEngine.Vector3 inPos, UnityEngine.Vector3 inCamPos);
    public void SetRotate(float inRotX, float inRotY);
}

public class InverseConstrain : UnityEngine.MonoBehaviour
{
    public UnityEngine.Transform baseTransform;
    public float x_inv;
    private System.IDisposable updateManagerDisposable;
    private System.Action registerCallback;
    private void OnEnable();
    private void OnDisable();
    private void _lateUpdate();
}

public class PositionConstrainLate : UnityEngine.MonoBehaviour
{
    public UnityEngine.Transform baseTransform;
    private System.IDisposable updateManagerDisposable;
    private System.Action registerCallback;
    private void OnEnable();
    private void OnDisable();
    private void _lateUpdate();
}

public class QuaternionConstrain : UnityEngine.MonoBehaviour
{
    public UnityEngine.Transform baseTransform;
    public float rate;
    private System.IDisposable updateManagerDisposable;
    private System.Action registerCallback;
    private void OnEnable();
    private void OnDisable();
    private void _lateUpdate();
}

public class TwoBoneConstrain : UnityEngine.MonoBehaviour
{
    public UnityEngine.Transform baseTransform0;
    public float rate0;
    public bool x0;
    public bool y0;
    public bool z0;
    public UnityEngine.Transform baseTransform1;
    public float rate1;
    public bool x1;
    public bool y1;
    public bool z1;
    private System.IDisposable updateManagerDisposable;
    private System.Action registerCallback;
    private void OnEnable();
    private void OnDisable();
    private UnityEngine.Vector3 ClampAngle(UnityEngine.Vector3 angle);
    private void _lateUpdate();
}

public class XRotConstrain : UnityEngine.MonoBehaviour
{
    public UnityEngine.Transform baseTransform;
    public float x_rot;
    private float rot_scale;
    private float center_rot;
    private UnityEngine.Transform cachedTransform;
    private System.IDisposable updateManagerDisposable;
    private System.Action registerCallback;
    private void Awake();
    private void OnEnable();
    private void OnDisable();
    private void _lateUpdate();
}

public class DropShadow
{
    public static void DeactivateLegacyDropShadowLight();
    public static void EnableRealtimeRendering(bool enable);
}

public class ExpressionAndIkController : UnityEngine.MonoBehaviour
{
    private PRISM.Character _character;
    private EyeController eyeL;
    private EyeController eyeR;
    private UnityEngine.Animator faceAnimator;
    private FlagSet flagSet;
    private System.Collections.Generic.List<ExpressionData> expData;
    private string animationName;
    private UnityEngine.Playables.PlayableDirector playableDirector;
    private UnityEngine.Transform[] ikTarget;
    private IKSave[] ikTargetSave;
    private bool isDirectTime;
    private float directTime;
    public int defaultCharacterID;
    public string[] customFaceList;
    private bool isExpressionCancel;
    private System.Collections.Generic.Dictionary<string, float> dicValue;
    private System.Collections.Generic.Dictionary<int, bool> hasParameters;
    private ExternalIKData exLeftHandIK;
    private ExternalIKData exRightHandIK;
    public ExpressionData lastEyelidData;
    public ExpressionData lastTargetData;
    private ExpressionData nextTargetData;
    public ExpressionData lastLeftIKData;
    public ExpressionData lastRightIKData;
    public ExpressionData lastEyebrowData;
    public ExpressionData lastEyebrowAddData;
    public ExpressionData lastMouthData;
    public ExpressionData lastEyeLimitData;
    public ExpressionData lastFaceCustomData;
    private float lastEyebrowRate;
    private float lastEyebrowAddRate;
    private float lastMouthRate;
    private float lastFaceCustomRate;
    private string lastFaceCustomStateName;
    private int lastTarget;
    private int lastDataCount;
    private float lastTimeForEyeLid;
    private static UnityEngine.Vector3 handOffsetL;
    private static UnityEngine.Vector3 handOffsetR;
    private static int[] eyebrowIdTable;
    private static string[] eyebrowNameTable;
    private static int[] eyebrowAddIdTable;
    private static string[] eyebrowAddNameTable;
    private static int[] mouthBlendIdTable;
    private static string[] mouseBlendShapeTable;
    private System.Collections.Generic.Dictionary<string, ExpressionEventDataCache> expressionEventDataCacheDictionary;
    public float LerpTime { get; set; }
    private bool IsAlwaysSerious { get; set; }
    public void SetDirectTime(float directTime);
    public void Setup(PRISM.Character character);
    private void _setupPlayableDirector(UnityEngine.GameObject[] rootObjects);
    private void _setupIkTargets(UnityEngine.GameObject[] rootObjects);
    private void _setupEyeControllers(UnityEngine.GameObject rootObject);
    private void _setupFaceAnimator(UnityEngine.GameObject rootObject);
    private static bool _hasParameter(UnityEngine.Animator animator, int hash);
    private void _setFloat(int hash, float value);
    private float _getFloat(int hash);
    public void SetBaseEyeTarget(Target _target);
    public void SetIKTarget(bool left, int targetNo, float rate);
    private void _checkVariation();
    private void _getAnimationName();
    public void SetAnimation(string _animationName);
    public void ResetForLoop();
    private void Update();
    private int _findIndex(float time);
    private void _updateFlags(int begin, int end, FlagSet flagSet);
    private void _updateExpression(float time);
    private void _updateExpressionEyelid(float time);
    private void _updateAutoBlinkForChangeTarget(float time);
    private void OnAnimatorIK();
    private void _onAnimatorIkLeftHand(float time);
    private void _onAnimatorIkRightHand(float time);
    private void LateUpdate();
    private float _getBodyAnimationTime();
    private void _changeTarget(int no, float time);
    public void SetBlink();
    private void SetEyeNoLimit(bool noLimit);
    public Target GetEyeTarget();
    private void _setEyeShape(float eyeLClose, float eyeRClose, float rate, bool isActionSmile, float actionRate);
    private void _clampEyeValue();
    private void SetEyebrow(MoveType moveType, float rate, float actionRate);
    private void SetEyebrowAdd(MoveType moveType, float rate, float actionRate);
    private void SetOverwriteLip(int idx, float rate);
    private void SetResetLip(int idx, float rate);
    private void _setFaceCustom(MoveType moveType, float rate);
    private void ReserveEyeShapeValue();
    private void ReserveEyebrowShapeValue();
    private void _reserveFaceCustomShapeValue();
    public UnityEngine.Animator GetFaceAnimator();
    public void JumpTime(float time);
    private void _loadExpressionEventData(string filePath);
    public bool GetEyeFlip();
    public void SetEyeFlip(bool flipSave);
    private void _saveExpressionEventData(string fileName);
    public ExpressionData AddExpressionEvent(MoveType moveType, int start, int arg1, int arg2);
    public void RemoveExpressionEvent(ExpressionData ed);
    private static float <_updateExpression>g___getTransitionTime|66_0(ExpressionData data, <>c__DisplayClass66_0& );

    public class ExpressionEventData
    {
        public int defaultCharacterID;
        public ExpressionEventIO[] events;
        public string[] customFaceList;
    }

    public class ExpressionEventIO : UnityEngine.ISerializationCallbackReceiver
    {
        public string eventName;
        public int startFrame;
        public string arg1;
        public string arg2;
        private int <FrameRate>k__BackingField;
        public int FrameRate { get; set; }
        public void OnBeforeSerialize();
        public void OnAfterDeserialize();
    }

    public enum MoveType : System.Enum
    {
        public int value__;
        public static MoveType OpenEye;
        public static MoveType CloseEye;
        public static MoveType Blink;
        public static MoveType WinkL;
        public static MoveType WinkR;
        public static MoveType OpenEyeSmile;
        public static MoveType CloseEyeSmile;
        public static MoveType BlinkSmile;
        public static MoveType WinkLSmile;
        public static MoveType WinkRSmile;
        public static MoveType EyelidEnd;
        public static MoveType ChangeTarget;
        public static MoveType LeftIKOn;
        public static MoveType LeftIKOff;
        public static MoveType LeftIKAttract;
        public static MoveType LeftIKEnd;
        public static MoveType RightIKOn;
        public static MoveType RightIKOff;
        public static MoveType RightIKAttract;
        public static MoveType RightIKEnd;
        public static MoveType EyebrowNormal;
        public static MoveType EyebrowSad;
        public static MoveType EyebrowSerious;
        public static MoveType EyebrowUnique;
        public static MoveType EyebrowUp;
        public static MoveType EyebrowDown;
        public static MoveType EyebrowEnd;
        public static MoveType EyebrowAddNone;
        public static MoveType EyebrowAddUp;
        public static MoveType EyebrowAddDown;
        public static MoveType EyebrowAddEnd;
        public static MoveType MouthNormal;
        public static MoveType MouthOverwriteLip;
        public static MoveType MouthLipSerious;
        public static MoveType MouthEnd;
        public static MoveType EyeLimit;
        public static MoveType FaceCustomNone;
        public static MoveType FaceCustom;
    }

    public class ExpressionData
    {
        private int startFrame;
        private int argValue1;
        private int argValue2;
        private int <FrameRate>k__BackingField;
        public MoveType moveType;
        private float <StartTime>k__BackingField;
        private float <ArgValue1Time>k__BackingField;
        private float <ArgValue2Time>k__BackingField;
        public int FrameRate { get; set; }
        public int StartFrame { get; set; }
        public int ArgValue1 { get; set; }
        public int ArgValue2 { get; set; }
        public float StartTime { get; set; }
        public float ArgValue1Time { get; set; }
        public float ArgValue2Time { get; set; }
    }

    private class FlagSet
    {
        public bool eyelid;
        public bool target;
        public bool leftIK;
        public bool rightIK;
        public bool mouth;
        public bool eyebrow;
        public bool browAdd;
        public bool eyeLimit;
        public bool custom;
        public void Clear();
    }

    private class IKSave
    {
        public UnityEngine.Transform t;
        public UnityEngine.Vector3 p;
        public UnityEngine.Quaternion r;
    }

    private struct ExternalIKData : System.ValueType
    {
        public int target;
        public float rate;
    }

    private struct ExpressionEventDataCache : System.ValueType
    {
        private System.Collections.Generic.List<ExpressionData> <ExpressionDataList>k__BackingField;
        private int <DefaultCharacterID>k__BackingField;
        private string[] <CustomFaceList>k__BackingField;
        private bool <IsExpressionCancel>k__BackingField;
        public System.Collections.Generic.List<ExpressionData> ExpressionDataList { get; set; }
        public int DefaultCharacterID { get; set; }
        public string[] CustomFaceList { get; set; }
        public bool IsExpressionCancel { get; set; }
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Comparison<ExpressionData> <>9__100_0;
        public static System.Comparison<ExpressionData> <>9__104_0;
        private int <_loadExpressionEventData>b__100_0(ExpressionData a, ExpressionData b);
        private int <AddExpressionEvent>b__104_0(ExpressionData a, ExpressionData b);
    }

    private struct <>c__DisplayClass66_0 : System.ValueType
    {
        public float merginTime;
    }
}

public class EyeController : UnityEngine.MonoBehaviour
{
    public UnityEngine.GameObject baseObject;
    private UnityEngine.GameObject headObject;
    private UnityEngine.Transform targetTransform;
    private UnityEngine.GameObject[] eyeTargets;
    private UnityEngine.GameObject[] faceTargets;
    private PRISM.Character character;
    private UnityEngine.Transform characterRoot;
    private UnityEngine.Transform boneRightHand;
    private UnityEngine.Transform boneLeftHand;
    private float neckLocalRotY;
    private PRISM.LiveCharacterController liveChara;
    public UnityEngine.Texture2D[] paramTex;
    private FastTexture2D paramTexFast;
    public bool left;
    public float hightLightTraceRate;
    public int eyeTargetNo;
    public int lastTargetNo;
    public bool blinkFlag;
    private bool flipFlag;
    private UnityEngine.Vector3 prevView;
    public Target baseTarget;
    private UnityEngine.Texture2D areaTex;
    private FastTexture2D areaTexFast;
    private bool faceTransform;
    private bool toolEdit;
    private bool isFixPositionRelative;
    private EyeController oppositeEye;
    private bool resetFlipOverwriteFlag;
    private bool resetFlip;
    private bool removeHighLight;
    private bool removeEyeIris;
    private static float OutUvConst;
    public float paramX;
    private UnityEngine.Renderer cachedRenderer;
    private UnityEngine.Camera cachedMainCamera;
    private System.IDisposable registerActionDisposable;
    private System.Action<UnityEngine.Rendering.ScriptableRenderContext, UnityEngine.Camera> registerCallback;
    private static float[] angleHTable;
    private static float[] angleVTable;
    private static float[] lengthTable;
    private UnityEngine.Vector3 lastObjectDir;
    private float moveMax;
    private UnityEngine.Vector3 freeTarget;
    private EyeController mirrorCopy;
    private bool setUvOuter;
    private UnityEngine.Vector4 <IrisUV>k__BackingField;
    private float <Flip>k__BackingField;
    private bool noLimit;
    public UnityEngine.Transform TargetTransform { get; set; }
    public UnityEngine.Vector4 IrisUV { get; set; }
    public float Flip { get; set; }
    public void SetFixPositionRelative(bool torf);
    public void SetBlink();
    public void SetNeckLocalRotY(float rotY);
    public void SetNoLimit(bool torf);
    public void RemoveHighLight(bool torf);
    public void RemoveEyeIris(bool torf);
    private void Start();
    private void OnDestroy();
    public void SetupEyeTargetObjects();
    private void OnEnable();
    private void OnDisable();
    public void _onBeginCameraRendering(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera targetCamera);
    private void _setupBoneHand();
    public static void SetMirrorCopy(UnityEngine.Transform normal, UnityEngine.Transform mirror);
    private void SetMirrorCopy(EyeController[] eyes);
    public void SetMoveMax(float max);
    public void SetEyeTargetNo(int _eyeTargetNo);
    private void SetEyeBallMaterialParameter(UnityEngine.Vector4 iris, float flip);
    private void _setAnimationAngleValue(UnityEngine.Vector3 viewDir);
    private UnityEngine.Color _getParamTex(float up, float vp);
    private UnityEngine.Color _getAreaTex(float up, float vp);
    public void SetIrisUv(UnityEngine.Vector4 irisUv, float flip);
    public void GetIrisUv(UnityEngine.Vector4& irisUv, float& flip);
    public void SetFlipFlag(bool flip);
    public void SetResetFlip(bool flip);
    public bool GetFlipFlag();
    private UnityEngine.Vector3 _getTargetPosition(int targetNo);
    private UnityEngine.Vector3 _getTargetPositionByFixedTargetOrFaceTarget(int targetNo);
    private UnityEngine.Vector3 _getTargetPositionByHand(Target target);
    private bool _tryGetTargetPosition(int targetNo, UnityEngine.Vector3& targetPosition);
    public UnityEngine.Vector3 GetTargetPosition(Target target);
    public UnityEngine.Vector3 GetLastTargetPosition();
    public Target GetLastTarget();
    public void SetFreeTargetPosition(UnityEngine.Vector3 targetPos);
    private static bool _isForcedMainCameraData(UnityEngine.Camera targetCamera);

    public enum Target : System.Enum
    {
        public int value__;
        public static Target Camera;
        public static Target Target1;
        public static Target Target2;
        public static Target Target3;
        public static Target RightHand;
        public static Target LeftHand;
        public static Target FixedTarget;
        public static Target CenterMiddle;
        public static Target CenterUp;
        public static Target CenterDown;
        public static Target LeftMiddle;
        public static Target LeftUp;
        public static Target LeftDown;
        public static Target RightMiddle;
        public static Target RightUp;
        public static Target RightDown;
        public static Target BackMiddle;
        public static Target BackUp;
        public static Target BackDown;
        public static Target HalfLeftMiddle;
        public static Target HalfLeftUp;
        public static Target HalfLeftDown;
        public static Target HalfRightMiddle;
        public static Target HalfRightUp;
        public static Target HalfRightDown;
        public static Target FaceTarget;
        public static Target Character01;
        public static Target Character02;
        public static Target Character03;
        public static Target Character04;
        public static Target Character05;
        public static Target Character06;
        public static Target Character07;
        public static Target Character08;
        public static Target Character09;
        public static Target Character10;
        public static Target Target4;
        public static Target Target5;
        public static Target Target6;
        public static Target Target7;
        public static Target Target8;
        public static Target Target9;
        public static Target Target10;
        public static Target FreeTarget;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Comparison<UnityEngine.GameObject> <>9__48_0;
        private int <SetupEyeTargetObjects>b__48_0(UnityEngine.GameObject a, UnityEngine.GameObject b);
    }
}

public class FaceBoneController : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject baseObject;
    public UnityEngine.GameObject eyeL;
    public UnityEngine.GameObject eyeR;
    public UnityEngine.GameObject nose;
    public UnityEngine.GameObject mouth;
    public UnityEngine.GameObject chin;
    public UnityEngine.GameObject eyeBrowL;
    public UnityEngine.GameObject eyeBrowR;
    private string charaModelName;
    private UnityEngine.Vector3 topDir;
    private UnityEngine.Vector3 frontDir;
    private UnityEngine.Vector3[] basePos;
    public float[] zbiasParam;
    private System.Collections.Generic.List<ZBiasData> zbiasList;
    public float[] animParam;
    public string[] animParamID;
    private UnityEngine.Animator animator;
    public bool editMode;
    private static UnityEngine.Vector3 FaceBasePos;
    private PRISM.Character character;
    private PRISM.Legacy.FaceBoneData faceBoneData;
    private PRISM.Legacy.FaceBonePlayableGraph playableGraph;
    private PRISM.Legacy.FaceBoneDataNativeArray faceBoneDataNativeArray;
    private System.IDisposable registerActionDisposable;
    private System.Action<UnityEngine.Rendering.ScriptableRenderContext, UnityEngine.Camera> registerCallback;
    private void Awake();
    private void Start();
    private void OnDestroy();
    private void OnEnable();
    private void OnDisable();
    public void RebuildPlayableGraph();
    public void UpdateFaceBone(UnityEngine.Camera targetCamera);
    public void _onBeginCameraRendering(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera targetCamera);
    private void SetAnimationAngleValue(UnityEngine.Vector3 viewDir);
    public void SetBlendWeight(PRISM.Legacy.FaceBoneAnimationParamType paramType, float weight);
    private static Unity.Mathematics.float3 _mirrorRot(Unity.Mathematics.float3 v);
    private static Unity.Mathematics.float3 _mirrorTra(Unity.Mathematics.float3 v);
    public void SaveIndexValue(FaceBoneEditAngleType faceBoneEditIndex);
    private static Unity.Mathematics.float3 _rot2Vector(UnityEngine.Transform t, bool xflip);
    private Unity.Mathematics.float3 _pos2Vector(Unity.Mathematics.float3 position, UnityEngine.Transform t, bool xflip);
    public void SetAnimationParameter(string id, float rate);
    public void CorrectBase();
    private PRISM.Legacy.FaceBoneData LoadFaceBoneData(string name);
    public void ResetToBasePositionEach(UnityEngine.GameObject obj);

    public enum ValueType : System.Enum
    {
        public int value__;
        public static ValueType EyeLRot;
        public static ValueType EyeLPos;
        public static ValueType EyeRRot;
        public static ValueType EyeRPos;
        public static ValueType NoseRot;
        public static ValueType NosePos;
        public static ValueType MouthRot;
        public static ValueType MouthPos;
        public static ValueType ChinRot;
        public static ValueType ChinPos;
        public static ValueType ZBiasSet;
        public static ValueType HighLightMouthNoseScale;
        public static ValueType EyeBrowLRot;
        public static ValueType EyeBrowLPos;
        public static ValueType EyeBrowRRot;
        public static ValueType EyeBrowRPos;
        public static ValueType JoeDrawNoseDeleteNoseRot;
        public static ValueType EyeLashOpL;
        public static ValueType EyeLashOpR;
        public static ValueType Max;
    }

    private enum BasePositionType : System.Enum
    {
        public int value__;
        public static BasePositionType EyeL;
        public static BasePositionType Nose;
        public static BasePositionType Mouth;
        public static BasePositionType Chin;
        public static BasePositionType EyeBrowL;
        public static BasePositionType Max;
    }

    public enum FaceBoneEditAngleType : System.Enum
    {
        public int value__;
        public static FaceBoneEditAngleType Minus40Plus40;
        public static FaceBoneEditAngleType Minus40Zero;
        public static FaceBoneEditAngleType ZeroPlus90;
        public static FaceBoneEditAngleType ZeroPlus60;
        public static FaceBoneEditAngleType ZeroPlus30;
        public static FaceBoneEditAngleType ZeroZero;
        public static FaceBoneEditAngleType Plus40Plus40;
        public static FaceBoneEditAngleType Plus40Zero;
        public static FaceBoneEditAngleType Max;
        public static FaceBoneEditAngleType None;
    }

    public struct InterpolateValue : System.ValueType
    {
        public int horizontalInsideIndex;
        public int horizontalOutsideIndex;
        public int verticalInsideIndex;
        public int verticalOutsideIndex;
        public float horizontalRate;
        public float verticalRate;
        public float GetValueFloat(PRISM.Legacy.FaceBoneInterpolateFloatNativeArray& values);
        public void SetToTransform(UnityEngine.Transform target, PRISM.Legacy.FaceBonePostureNativeArray& posture, bool xflip);
    }

    public class ZBiasData
    {
        public UnityEngine.SkinnedMeshRenderer smr;
        public int id;
    }
}

public class FastTexture2D : System.IDisposable
{
    private UnityEngine.Texture2D targetTexture;
    private Unity.Collections.NativeArray<UnityEngine.Color> pixels;
    private int width;
    private int height;
    public UnityEngine.Color GetPixelBilinear(float u, float v);
    public void Dispose();
}

public class NormalView : UnityEngine.MonoBehaviour
{
    public float length;
    public UnityEngine.Vector3 bias;
    public bool tangentOnly;
    private void OnDrawGizmosSelected();
}

public class SwayBoneCollider : UnityEngine.MonoBehaviour
{
    public UnityEngine.Vector3 C0;
    public float R0;
    public UnityEngine.Vector3 C1;
    public float R1;
    private void OnDrawGizmos();
    public static float CapsuleCollide(UnityEngine.Vector3& posIn, UnityEngine.Vector3& pos, UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, float r0, float r1);
    public static float FaceCollide(UnityEngine.Vector3& pos, UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 front, float r);
    public static float PlaneCollide(UnityEngine.Vector3& pos, UnityEngine.Vector4 plane, float r);
    public static void DrawCapsuleCollide(UnityEngine.Vector3 p0, UnityEngine.Vector3 p1, float r0, float r1);
}

public class Utility
{
    public static void DoAllRendererMaterial(UnityEngine.GameObject obj, System.Func<UnityEngine.Material, UnityEngine.Material> func);
    public static UnityEngine.GameObject[] SelectLayerObject(UnityEngine.GameObject obj, string layer);
    public static UnityEngine.GameObject SearchBone(UnityEngine.GameObject obj, string name, bool st);
    public static UnityEngine.GameObject SearchBoneStartsWith(UnityEngine.GameObject obj, string name, bool st);
    public static System.Collections.Generic.List<UnityEngine.GameObject> SearchBoneList(UnityEngine.GameObject obj, string name, bool st);
    public static UnityEngine.GameObject[] GetRootObjectInDanceScene();
    public static UnityEngine.GameObject[] GetRootObjectInThisScene(UnityEngine.GameObject go);
    public static string GetDanceSceneName();
    public static bool IsSubScene(UnityEngine.GameObject go);
    public static void UpdateCameraModes(UnityEngine.Camera src, UnityEngine.Camera dest);
    public static UnityEngine.AnimationCurve KeyToNormalizedCurve(float[] pList);
}

public class Render3DManager : UnityEngine.MonoBehaviour
{
    private PRISM.CameraController _mainCamera;
    private bool frameDebug;
    public static bool forcedDraw;
    public static bool blockUpdate;
    private float lastProcTime;
    private int index;
    public void Setup();
    private void LateUpdate();
    private void _updateRendering();
    private void OnDestroy();
    public static bool IsValidBeginCameraRendering(UnityEngine.Camera targetCamera);
    private void _swayBonePlaying();
    public static Cysharp.Threading.Tasks.UniTask WatchDrawInPauseAsync(System.Threading.CancellationToken token);

    private class <>c__DisplayClass12_0
    {
        public int beforeW;
        public int beforeH;
        public bool beforeFS;
        private bool <WatchDrawInPauseAsync>b__0();
    }

    private struct <WatchDrawInPauseAsync>d__12 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        private <>c__DisplayClass12_0 <>8__1;
        public System.Threading.CancellationToken token;
        private CameraWorkEvent <cwe>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

public class CueVolumePlayableAsset : UnityEngine.Playables.PlayableAsset
{
    private string _cueName;
    private float _volume;
    public UnityEngine.Playables.Playable CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go);
    private bool <CreatePlayable>b__2_0(UnityEngine.Timeline.TimelineClip x);
}

public class CueVolumePlayableBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public float Volume;
    public string CueName;
    public float BackUpVolume;
    public void OnBehaviourPlay(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info);
    public void OnBehaviourPause(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info);
    public void PrepareFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info);
    public void OnGraphStart(UnityEngine.Playables.Playable playable);
    public void OnGraphStop(UnityEngine.Playables.Playable playable);
}

public class CriAtomExPlaybackExtensions
{
    public static Cysharp.Threading.Tasks.UniTask WaitFinishedAsync(CriWare.CriAtomExPlayback self, System.Threading.CancellationToken cancellationToken);
    public static void StopOnCancel(CriWare.CriAtomExPlayback self, System.Threading.CancellationToken ct);

    private class <>c__DisplayClass0_0
    {
        public CriWare.CriAtomExPlayback self;
        private bool <WaitFinishedAsync>b__0();
    }

    private class <>c__DisplayClass1_0
    {
        public CriWare.CriAtomExPlayback self;
        private void <StopOnCancel>b__0();
    }
}

private class UnitySourceGeneratedAssemblyMonoScriptTypes_v1
{
    private static MonoScriptData Get();

    private struct MonoScriptData : System.ValueType
    {
        public byte[] FilePathsData;
        public byte[] TypesData;
        public int TotalTypes;
        public int TotalFiles;
        public bool IsEditorOnly;
    }
}

// Namespace: Growing
public class AttributeTextBase : Growing.CustomText, UnityEngine.EventSystems.IPointerClickHandler, UnityEngine.EventSystems.IEventSystemHandler, UnityEngine.EventSystems.IPointerDownHandler, UnityEngine.EventSystems.IPointerUpHandler
{
    private UnityEngine.Canvas _rootCanvas;
    private System.Collections.Generic.List<ClickableEntry> _clickableEntries;
    public UnityEngine.Canvas rootCanvas { get; set; }
    protected void RegisterClickable(Growing.Attribute attribute, System.Action<Growing.Attribute> onClick);
    public void RemoveClickable();
    protected void RegisterClickable();
    protected void OnRectTransformDimensionsChange();
    private void RefreshClickableEntries();
    private System.Collections.Generic.List<System.Collections.Generic.List<UnityEngine.Rect>> SplitRectsByRow(System.Collections.Generic.List<UnityEngine.Rect> rects);
    private UnityEngine.Rect CalculateAABB(System.Collections.Generic.List<UnityEngine.Rect> rects);
    private UnityEngine.Vector3 ToLocalPosition(UnityEngine.Vector3 position, UnityEngine.Camera camera);
    private void UnityEngine.EventSystems.IPointerDownHandler.OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData);
    private void UnityEngine.EventSystems.IPointerUpHandler.OnPointerUp(UnityEngine.EventSystems.PointerEventData eventData);
    private void UnityEngine.EventSystems.IPointerClickHandler.OnPointerClick(UnityEngine.EventSystems.PointerEventData eventData);

    private struct ClickableEntry : System.ValueType
    {
        public Growing.Attribute attribute;
        public int startIndex;
        public int length;
        public System.Action<Growing.Attribute> onClick;
        public System.Collections.Generic.List<UnityEngine.Rect> rects;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<TMPro.TMP_CharacterInfo, int, <>f__AnonymousType1<TMPro.TMP_CharacterInfo, int>> <>9__9_0;
        private <>f__AnonymousType1<TMPro.TMP_CharacterInfo, int> <RefreshClickableEntries>b__9_0(TMPro.TMP_CharacterInfo c, int i);
    }

    private class <>c__DisplayClass9_0
    {
        public int currentIndex;
    }

    private class <>c__DisplayClass9_1
    {
        public char c;
        public <>c__DisplayClass9_0 CS$<>8__locals1;
        private bool <RefreshClickableEntries>b__1(<>f__AnonymousType1<TMPro.TMP_CharacterInfo, int> x);
    }
}

// Namespace: Growing
public class CustomText : ENTERPRISE.UI.UITextMeshProUGUI
{
    public string customText { get; set; }
}

// Namespace: Growing
public class SourceReplacer
{
    private static string START_MARK;
    private static string END_MARK;
    private static string argCommna;
    private string[] argCommaSeparator;
    public string Replace(string originalSource);
    private System.Collections.Generic.List<string> GetArgs(string baseKey, string[] separator);
    private string GetValue(string baseKey);
    protected string GetValue(string key, System.Collections.Generic.List<string> args);

    private class TargetPart
    {
        public int startPoint;
        public int depth;
        public string substring;
    }

    private class Target
    {
        public string targetString;
        public System.Collections.Generic.List<TargetPart> taggedStrings;
        public int currentDepth;
        private Growing.SourceReplacer _replacer;
        public void Analyze();
        public void Replace();
        public void ReplaceSpecialString();

        private class <>c
        {
            public static <>c <>9;
            public static System.Comparison<TargetPart> <>9__6_0;
            public static System.Text.RegularExpressions.MatchEvaluator <>9__7_0;
            private int <Replace>b__6_0(TargetPart one, TargetPart another);
            private string <ReplaceSpecialString>b__7_0(System.Text.RegularExpressions.Match match);
        }
    }
}

// Namespace: Growing
public struct Attribute : System.ValueType
{
    public int startIndex;
    public int length;
    public string text;
    public string link;
}

// Namespace: Growing
public class XMLAttributeText : Growing.AttributeTextBase
{
    private System.Collections.Generic.List<Entry> _entries;
    public void SetClickable(Growing.Attribute attribute, System.Action<Growing.Attribute> onClick);
    public void RemoveClickable();
    protected void RegisterClickable();

    private struct Entry : System.ValueType
    {
        public Growing.Attribute attribute;
        public System.Action<Growing.Attribute> onClick;
    }
}

// Namespace: Growing
public class XMLImageItemParam : Growing.XMLItemBaseParam
{
    private string <imageUrl>k__BackingField;
    private System.Nullable<float> <width>k__BackingField;
    private System.Nullable<float> <height>k__BackingField;
    private UnityEngine.Texture2D <tex2d>k__BackingField;
    public string imageUrl { get; set; }
    public System.Nullable<float> width { get; set; }
    public System.Nullable<float> height { get; set; }
    public UnityEngine.Texture2D tex2d { get; set; }
    public Cysharp.Threading.Tasks.UniTask GetImageSizeAsync(PRISM.Legacy.WebTextureLoader loader);
    public float CalculateItemHeight(ENTERPRISE.UI.UITextMeshProUGUI textSizeCalculator, float width);

    private struct <GetImageSizeAsync>d__16 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Legacy.WebTextureLoader loader;
        public Growing.XMLImageItemParam <>4__this;
        private Awaiter<UnityEngine.Texture2D> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: Growing
public class XMLImageItem : Growing.XMLItemBase<Growing.XMLImageItemParam>
{
    private UnityEngine.UI.RawImage _image;
    private float _maxWidth;
    private UnityEngine.Texture2D _tex2d;
    private Growing.XMLImageItemParam param;
    public void Hide();
    public void Show();
    protected Cysharp.Threading.Tasks.UniTask UpdateItemAsyncInternal(Growing.XMLImageItemParam itemParam, float maxWidth);
    private void Update();
    private void OnDestroy();
    private void BindImage(UnityEngine.Texture2D texture);
}

// Namespace: Growing
public class XMLItemBase`1<T> : UIKit.UITableViewCell
{
    private ENTERPRISE.UI.UIButton _buttonBase;
    private UnityEngine.RectTransform _rectTransform;
    private bool _isButtonActive;
    protected T _itemParam;
    public UnityEngine.RectTransform rectTransform { get; set; }
    public Cysharp.Threading.Tasks.UniTask UpdateItemAsync(T itemParam, float maxWidth);
    protected Cysharp.Threading.Tasks.UniTask UpdateItemAsyncInternal(T itemParam, float maxWidth);
    private void UpdateButtonStatus();
    protected void SetItemMaxHeight(float maxHeight);
    public void OnClickItem();
    private void <UpdateButtonStatus>b__8_0();

    private struct <UpdateItemAsync>d__6<T> : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public Growing.XMLItemBase<T> <>4__this;
        public T itemParam;
        public float maxWidth;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: Growing
public class XMLItemBaseParam
{
    private string <linkUrl>k__BackingField;
    private Align <align>k__BackingField;
    private ItemType <itemType>k__BackingField;
    public string linkUrl { get; set; }
    public Align align { get; set; }
    public ItemType itemType { get; set; }
    public float CalculateItemHeight(ENTERPRISE.UI.UITextMeshProUGUI textSizeCalculator, float width);

    public enum ItemType : System.Enum
    {
        public int value__;
        public static ItemType Text;
        public static ItemType Image;
        public static ItemType Link;
    }
}

// Namespace: Growing
public class XMLLinkItem : Growing.XMLItemBase<Growing.XMLLinkItemParam>
{
    private System.Collections.Generic.List<UnityEngine.RectTransform> _textItemRootList;
    private System.Collections.Generic.List<UnityEngine.UI.LayoutElement> _layoutElementList;
    private System.Collections.Generic.List<UnityEngine.RectTransform> _arrowItemRootList;
    private static float TEXT_MARGIN;
    private DG.Tweening.Sequence _sequence;
    public System.Collections.Generic.List<UnityEngine.RectTransform> textItemRootList { get; set; }
    protected void Awake();
    public void SetActive(int index, bool enable);
    public void SetLayoutElement(int index, float width, float height);
    public void SetRectTransformHeight(float height);
    public void PlayArrowIconAnimation();
    public void KillTween();
    protected Cysharp.Threading.Tasks.UniTask UpdateItemAsyncInternal(Growing.XMLLinkItemParam itemParam, float maxWidth);

    private struct <UpdateItemAsyncInternal>d__13 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: Growing
public class XMLLinkItemParam : Growing.XMLItemBaseParam
{
    private System.Collections.Generic.List<Growing.XMLTextItemParam> <paramList>k__BackingField;
    public System.Collections.Generic.List<Growing.XMLTextItemParam> paramList { get; set; }
}

// Namespace: Growing
public class XMLPanel : UnityEngine.MonoBehaviour, UIKit.IUITableViewDataSource, UIKit.IUITableViewMargin, UIKit.IUITableViewDelegate
{
    private UnityEngine.UI.ScrollRect _scrollRect;
    private UIKit.UITableView _tableView;
    private Growing.XMLTextItem _xmlTextItemPrefab;
    private Growing.XMLImageItem _xmlImageItemPrefab;
    private Growing.XMLLinkItem _xmlLinkItemPrefab;
    private ENTERPRISE.UI.UITextMeshProUGUI _textSizeCalculator;
    private float _space;
    private float _topMargin;
    private float _bottomMargin;
    private static int DEFAULT_FONT_SIZE;
    private bool <IsLoaded>k__BackingField;
    private static UnityEngine.Color FONT_COLOR;
    private int _fontSize;
    private float _lineSpacing;
    private System.Collections.Generic.List<Growing.XMLItemBaseParam> _xmlItems;
    private System.Collections.Generic.List<Cysharp.Threading.Tasks.UniTask> _activeTasks;
    private float itemWidth;
    public bool IsLoaded { get; set; }
    public UIKit.UITableView tableView { get; set; }
    public Cysharp.Threading.Tasks.UniTask<bool> SetXMLStringAsync(string xmlString, int defaultFontSize, float defaultLineSpacing);
    public Cysharp.Threading.Tasks.UniTask TestAsync();
    public UIKit.UITableViewCell CellAtIndexInTableView(UIKit.UITableView tableView, int index);
    public int NumberOfCellsInTableView(UIKit.UITableView tableView);
    public float ScalarForCellInTableView(UIKit.UITableView tableView, int index);
    public float ScalarForUpperMarginInTableView(UIKit.UITableView tableView, int index);
    public float ScalarForLowerMarginInTableView(UIKit.UITableView tableView, int index);
    public void CellAtIndexInTableViewWillAppear(UIKit.UITableView tableView, int index);
    public void CellAtIndexInTableViewDidDisappear(UIKit.UITableView tableView, int index);

    private struct <SetXMLStringAsync>d__22 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<bool> <>t__builder;
        public Growing.XMLPanel <>4__this;
        public int defaultFontSize;
        public float defaultLineSpacing;
        public string xmlString;
        private Awaiter <>u__1;
        private Awaiter<System.Collections.Generic.List<Growing.XMLItemBaseParam>> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <TestAsync>d__23 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public Growing.XMLPanel <>4__this;
        private Awaiter<bool> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: Growing
public class XMLTextItem : Growing.XMLItemBase<Growing.XMLTextItemParam>
{
    private Growing.XMLAttributeText _text;
    private UnityEngine.UI.Image _backImage;
    private UnityEngine.U2D.SpriteAtlas _atlas;
    private static float TEXT_MARGIN;
    private OnWillSceneChange _willSceneChange;
    private float maxWidth;
    public Growing.XMLAttributeText text { get; set; }
    protected void Awake();
    public void SetDefault(int fontSize, float lineSpacing, UnityEngine.Color fontColor);
    public void CopyTextSettingTo(ENTERPRISE.UI.UITextMeshProUGUI targetText);
    public void SetWillSceneChange(OnWillSceneChange willSceneChange);
    protected Cysharp.Threading.Tasks.UniTask UpdateItemAsyncInternal(Growing.XMLTextItemParam itemParam, float maxWidth);
    private void OnClickText(Growing.Attribute attribute);
    private void Start();
    private void Update();

    public class OnWillSceneChange : System.MulticastDelegate
    {
        public Cysharp.Threading.Tasks.UniTask Invoke();
        public System.IAsyncResult BeginInvoke(System.AsyncCallback callback, object object);
        public Cysharp.Threading.Tasks.UniTask EndInvoke(System.IAsyncResult result);
    }

    private struct <UpdateItemAsyncInternal>d__13 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public Growing.XMLTextItem <>4__this;
        public float maxWidth;
        public Growing.XMLTextItemParam itemParam;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: Growing
public class XMLTextItemParam : Growing.XMLItemBaseParam
{
    private string <text>k__BackingField;
    private System.Nullable<int> <fontSize>k__BackingField;
    private UnityEngine.Color <bgColor>k__BackingField;
    private string <spriteName>k__BackingField;
    private UnityEngine.Vector4 <padding>k__BackingField;
    private System.Collections.Generic.List<Growing.Attribute> <attributes>k__BackingField;
    public string text { get; set; }
    public System.Nullable<int> fontSize { get; set; }
    public UnityEngine.Color bgColor { get; set; }
    public string spriteName { get; set; }
    public UnityEngine.Vector4 padding { get; set; }
    public System.Collections.Generic.List<Growing.Attribute> attributes { get; set; }
    public float CalculateItemHeight(ENTERPRISE.UI.UITextMeshProUGUI textSizeCalculator, float width);
}

// Namespace: Growing
public class XMLTransfer
{
    public static int DEFAULT_FONT_SIZE;
    public static float DEFAULT_LINE_SPACING;
    private static string defaultTextColorCode;
    private static string fullWidthSpace;
    private static int DEFAULT_PADDING_PIXEL;
    private static XMLTransferSourceReplacer _replacer;
    public static string EscapeCanvasGUIRichTextTag(string richText);
    public static Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.List<Growing.XMLItemBaseParam>> ToRichTextAsync(string source, int defaultFontSize, UnityEngine.GameObject go);
    private static System.Collections.Generic.List<Growing.XMLItemBaseParam> CreateUlText(System.Xml.XmlNode node, int defaultFontSize);
    private static string CreateDivText(System.Xml.XmlNode node);
    private static System.Collections.Generic.List<Growing.Attribute> CreateDivAttributeText(System.Xml.XmlNode node);
    private static System.Collections.Generic.List<Growing.Attribute> CreateDivAttributeTextForLinkItem(System.Xml.XmlNode node);
    private static string GetLinkAttribute(System.Xml.XmlNode node);
    private static System.Nullable<int> GetFontSizeAttribute(System.Xml.XmlNode node);
    private static System.Nullable<UnityEngine.Color> GetTextBackgroundColor(System.Xml.XmlNode node);
    private static string GetTextBackgroudSpriteName(System.Xml.XmlNode node);
    private static UnityEngine.Vector4 GetTextPadding(System.Xml.XmlNode node);
    private static Align GetAlignAttribute(System.Xml.XmlNode node, Align defaultAlign);
    private static string GetColorAttribute(System.Xml.XmlNode node);
    private static string GetTextColor(System.Xml.XmlNode colorNode);
    private static string GetTextColor(string colorCode);
    private static string GetTextWithColor(string text, string textColor);
    private static string GetTextWithRichTextTags(System.Xml.XmlNode node, string overrideColorLabel);

    public enum Align : System.Enum
    {
        public int value__;
        public static Align Left;
        public static Align Right;
        public static Align Center;
    }

    public class XMLTransferSourceReplacer : Growing.SourceReplacer
    {
        protected string GetValue(string key, System.Collections.Generic.List<string> args);
    }

    private struct <ToRichTextAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.Collections.Generic.List<Growing.XMLItemBaseParam>> <>t__builder;
        public string source;
        public int defaultFontSize;
        public UnityEngine.GameObject go;
        private System.Collections.Generic.List<Growing.XMLItemBaseParam> <items>5__2;
        private PRISM.Legacy.WebTextureLoader <textureLoader>5__3;
        private System.Collections.IEnumerator <>7__wrap3;
        private Growing.XMLImageItemParam <itemParam>5__5;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: Prism
public class IngestServiceReflection
{
    private static Google.Protobuf.Reflection.FileDescriptor descriptor;
    public Google.Protobuf.Reflection.FileDescriptor Descriptor { get; set; }
}

// Namespace: Prism
public class ArchiveIndex : Google.Protobuf.IMessage<Prism.ArchiveIndex>, Google.Protobuf.IMessage, System.IEquatable<Prism.ArchiveIndex>, Google.Protobuf.IDeepCloneable<Prism.ArchiveIndex>
{
    private static Google.Protobuf.MessageParser<Prism.ArchiveIndex> _parser;
    private Google.Protobuf.UnknownFieldSet _unknownFields;
    public static int StreamingIdFieldNumber;
    private string streamingId_;
    public static int ArchiveIndexUrlFieldNumber;
    private string archiveIndexUrl_;
    public static int CreatedAtFieldNumber;
    private Google.Protobuf.WellKnownTypes.Timestamp createdAt_;
    public Google.Protobuf.MessageParser<Prism.ArchiveIndex> Parser { get; set; }
    public Google.Protobuf.Reflection.MessageDescriptor Descriptor { get; set; }
    private Google.Protobuf.Reflection.MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; set; }
    public string StreamingId { get; set; }
    public string ArchiveIndexUrl { get; set; }
    public Google.Protobuf.WellKnownTypes.Timestamp CreatedAt { get; set; }
    public Prism.ArchiveIndex Clone();
    public bool Equals(object other);
    public bool Equals(Prism.ArchiveIndex other);
    public int GetHashCode();
    public string ToString();
    public void WriteTo(Google.Protobuf.CodedOutputStream output);
    public int CalculateSize();
    public void MergeFrom(Prism.ArchiveIndex other);
    public void MergeFrom(Google.Protobuf.CodedInputStream input);

    private class <>c
    {
        public static <>c <>9;
        private Prism.ArchiveIndex <.cctor>b__35_0();
    }
}

// Namespace: Prism
public class CreateArchiveIndexRequest : Google.Protobuf.IMessage<Prism.CreateArchiveIndexRequest>, Google.Protobuf.IMessage, System.IEquatable<Prism.CreateArchiveIndexRequest>, Google.Protobuf.IDeepCloneable<Prism.CreateArchiveIndexRequest>
{
    private static Google.Protobuf.MessageParser<Prism.CreateArchiveIndexRequest> _parser;
    private Google.Protobuf.UnknownFieldSet _unknownFields;
    public static int StreamingIdFieldNumber;
    private string streamingId_;
    public Google.Protobuf.MessageParser<Prism.CreateArchiveIndexRequest> Parser { get; set; }
    public Google.Protobuf.Reflection.MessageDescriptor Descriptor { get; set; }
    private Google.Protobuf.Reflection.MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; set; }
    public string StreamingId { get; set; }
    public Prism.CreateArchiveIndexRequest Clone();
    public bool Equals(object other);
    public bool Equals(Prism.CreateArchiveIndexRequest other);
    public int GetHashCode();
    public string ToString();
    public void WriteTo(Google.Protobuf.CodedOutputStream output);
    public int CalculateSize();
    public void MergeFrom(Prism.CreateArchiveIndexRequest other);
    public void MergeFrom(Google.Protobuf.CodedInputStream input);

    private class <>c
    {
        public static <>c <>9;
        private Prism.CreateArchiveIndexRequest <.cctor>b__25_0();
    }
}

// Namespace: Prism
public class ListArchiveIndexResponse : Google.Protobuf.IMessage<Prism.ListArchiveIndexResponse>, Google.Protobuf.IMessage, System.IEquatable<Prism.ListArchiveIndexResponse>, Google.Protobuf.IDeepCloneable<Prism.ListArchiveIndexResponse>
{
    private static Google.Protobuf.MessageParser<Prism.ListArchiveIndexResponse> _parser;
    private Google.Protobuf.UnknownFieldSet _unknownFields;
    public static int ArchiveIndicesFieldNumber;
    private static Google.Protobuf.FieldCodec<Prism.ArchiveIndex> _repeated_archiveIndices_codec;
    private Google.Protobuf.Collections.RepeatedField<Prism.ArchiveIndex> archiveIndices_;
    public Google.Protobuf.MessageParser<Prism.ListArchiveIndexResponse> Parser { get; set; }
    public Google.Protobuf.Reflection.MessageDescriptor Descriptor { get; set; }
    private Google.Protobuf.Reflection.MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; set; }
    public Google.Protobuf.Collections.RepeatedField<Prism.ArchiveIndex> ArchiveIndices { get; set; }
    public Prism.ListArchiveIndexResponse Clone();
    public bool Equals(object other);
    public bool Equals(Prism.ListArchiveIndexResponse other);
    public int GetHashCode();
    public string ToString();
    public void WriteTo(Google.Protobuf.CodedOutputStream output);
    public int CalculateSize();
    public void MergeFrom(Prism.ListArchiveIndexResponse other);
    public void MergeFrom(Google.Protobuf.CodedInputStream input);

    private class <>c
    {
        public static <>c <>9;
        private Prism.ListArchiveIndexResponse <.cctor>b__25_0();
    }
}

// Namespace: Prism
public class IngestService
{
    private static string __ServiceName;
    private static Grpc.Core.Marshaller<Prism.Container> __Marshaller_prism_Container;
    private static Grpc.Core.Marshaller<Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty;
    private static Grpc.Core.Marshaller<Prism.CreateArchiveIndexRequest> __Marshaller_prism_CreateArchiveIndexRequest;
    private static Grpc.Core.Marshaller<Prism.ListArchiveIndexResponse> __Marshaller_prism_ListArchiveIndexResponse;
    private static Grpc.Core.Method<Prism.Container, Google.Protobuf.WellKnownTypes.Empty> __Method_CreateContainerChunk;
    private static Grpc.Core.Method<Prism.CreateArchiveIndexRequest, Google.Protobuf.WellKnownTypes.Empty> __Method_CreateArchiveIndex;
    private static Grpc.Core.Method<Google.Protobuf.WellKnownTypes.Empty, Prism.ListArchiveIndexResponse> __Method_ListArchiveIndex;
    public Google.Protobuf.Reflection.ServiceDescriptor Descriptor { get; set; }
    public static Grpc.Core.ServerServiceDefinition BindService(IngestServiceBase serviceImpl);
    public static void BindService(Grpc.Core.ServiceBinderBase serviceBinder, IngestServiceBase serviceImpl);

    public class IngestServiceBase
    {
        public System.Threading.Tasks.Task<Google.Protobuf.WellKnownTypes.Empty> CreateContainerChunk(Prism.Container request, Grpc.Core.ServerCallContext context);
        public System.Threading.Tasks.Task<Google.Protobuf.WellKnownTypes.Empty> CreateArchiveIndex(Prism.CreateArchiveIndexRequest request, Grpc.Core.ServerCallContext context);
        public System.Threading.Tasks.Task<Prism.ListArchiveIndexResponse> ListArchiveIndex(Google.Protobuf.WellKnownTypes.Empty request, Grpc.Core.ServerCallContext context);
    }

    public class IngestServiceClient : Grpc.Core.ClientBase<IngestServiceClient>
    {
        public Google.Protobuf.WellKnownTypes.Empty CreateContainerChunk(Prism.Container request, Grpc.Core.Metadata headers, System.Nullable<System.DateTime> deadline, System.Threading.CancellationToken cancellationToken);
        public Google.Protobuf.WellKnownTypes.Empty CreateContainerChunk(Prism.Container request, Grpc.Core.CallOptions options);
        public Grpc.Core.AsyncUnaryCall<Google.Protobuf.WellKnownTypes.Empty> CreateContainerChunkAsync(Prism.Container request, Grpc.Core.Metadata headers, System.Nullable<System.DateTime> deadline, System.Threading.CancellationToken cancellationToken);
        public Grpc.Core.AsyncUnaryCall<Google.Protobuf.WellKnownTypes.Empty> CreateContainerChunkAsync(Prism.Container request, Grpc.Core.CallOptions options);
        public Google.Protobuf.WellKnownTypes.Empty CreateArchiveIndex(Prism.CreateArchiveIndexRequest request, Grpc.Core.Metadata headers, System.Nullable<System.DateTime> deadline, System.Threading.CancellationToken cancellationToken);
        public Google.Protobuf.WellKnownTypes.Empty CreateArchiveIndex(Prism.CreateArchiveIndexRequest request, Grpc.Core.CallOptions options);
        public Grpc.Core.AsyncUnaryCall<Google.Protobuf.WellKnownTypes.Empty> CreateArchiveIndexAsync(Prism.CreateArchiveIndexRequest request, Grpc.Core.Metadata headers, System.Nullable<System.DateTime> deadline, System.Threading.CancellationToken cancellationToken);
        public Grpc.Core.AsyncUnaryCall<Google.Protobuf.WellKnownTypes.Empty> CreateArchiveIndexAsync(Prism.CreateArchiveIndexRequest request, Grpc.Core.CallOptions options);
        public Prism.ListArchiveIndexResponse ListArchiveIndex(Google.Protobuf.WellKnownTypes.Empty request, Grpc.Core.Metadata headers, System.Nullable<System.DateTime> deadline, System.Threading.CancellationToken cancellationToken);
        public Prism.ListArchiveIndexResponse ListArchiveIndex(Google.Protobuf.WellKnownTypes.Empty request, Grpc.Core.CallOptions options);
        public Grpc.Core.AsyncUnaryCall<Prism.ListArchiveIndexResponse> ListArchiveIndexAsync(Google.Protobuf.WellKnownTypes.Empty request, Grpc.Core.Metadata headers, System.Nullable<System.DateTime> deadline, System.Threading.CancellationToken cancellationToken);
        public Grpc.Core.AsyncUnaryCall<Prism.ListArchiveIndexResponse> ListArchiveIndexAsync(Google.Protobuf.WellKnownTypes.Empty request, Grpc.Core.CallOptions options);
        protected IngestServiceClient NewInstance(ClientBaseConfiguration configuration);
    }

    private class <>c
    {
        public static <>c <>9;
        private byte[] <.cctor>b__14_0(Prism.Container arg);
        private byte[] <.cctor>b__14_1(Google.Protobuf.WellKnownTypes.Empty arg);
        private byte[] <.cctor>b__14_2(Prism.CreateArchiveIndexRequest arg);
        private byte[] <.cctor>b__14_3(Prism.ListArchiveIndexResponse arg);
    }
}

// Namespace: Prism
public class OutgestServiceReflection
{
    private static Google.Protobuf.Reflection.FileDescriptor descriptor;
    public Google.Protobuf.Reflection.FileDescriptor Descriptor { get; set; }
}

// Namespace: Prism
public class Container : Google.Protobuf.IMessage<Prism.Container>, Google.Protobuf.IMessage, System.IEquatable<Prism.Container>, Google.Protobuf.IDeepCloneable<Prism.Container>
{
    private static Google.Protobuf.MessageParser<Prism.Container> _parser;
    private Google.Protobuf.UnknownFieldSet _unknownFields;
    public static int ChunkFieldNumber;
    private static Google.Protobuf.FieldCodec<Google.Protobuf.ByteString> _repeated_chunk_codec;
    private Google.Protobuf.Collections.RepeatedField<Google.Protobuf.ByteString> chunk_;
    public static int StreamingIdFieldNumber;
    private string streamingId_;
    public static int TitleFieldNumber;
    private string title_;
    public static int SequenceNumberFieldNumber;
    private int sequenceNumber_;
    public static int StartAtFieldNumber;
    private Google.Protobuf.WellKnownTypes.Timestamp startAt_;
    public static int EndAtFieldNumber;
    private Google.Protobuf.WellKnownTypes.Timestamp endAt_;
    public static int ServerReceivedAtFieldNumber;
    private Google.Protobuf.WellKnownTypes.Timestamp serverReceivedAt_;
    public Google.Protobuf.MessageParser<Prism.Container> Parser { get; set; }
    public Google.Protobuf.Reflection.MessageDescriptor Descriptor { get; set; }
    private Google.Protobuf.Reflection.MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; set; }
    public Google.Protobuf.Collections.RepeatedField<Google.Protobuf.ByteString> Chunk { get; set; }
    public string StreamingId { get; set; }
    public string Title { get; set; }
    public int SequenceNumber { get; set; }
    public Google.Protobuf.WellKnownTypes.Timestamp StartAt { get; set; }
    public Google.Protobuf.WellKnownTypes.Timestamp EndAt { get; set; }
    public Google.Protobuf.WellKnownTypes.Timestamp ServerReceivedAt { get; set; }
    public Prism.Container Clone();
    public bool Equals(object other);
    public bool Equals(Prism.Container other);
    public int GetHashCode();
    public string ToString();
    public void WriteTo(Google.Protobuf.CodedOutputStream output);
    public int CalculateSize();
    public void MergeFrom(Prism.Container other);
    public void MergeFrom(Google.Protobuf.CodedInputStream input);

    private class <>c
    {
        public static <>c <>9;
        private Prism.Container <.cctor>b__55_0();
    }
}

// Namespace: Prism
public class GetContainerChunkRequest : Google.Protobuf.IMessage<Prism.GetContainerChunkRequest>, Google.Protobuf.IMessage, System.IEquatable<Prism.GetContainerChunkRequest>, Google.Protobuf.IDeepCloneable<Prism.GetContainerChunkRequest>
{
    private static Google.Protobuf.MessageParser<Prism.GetContainerChunkRequest> _parser;
    private Google.Protobuf.UnknownFieldSet _unknownFields;
    public static int StreamingIdFieldNumber;
    private string streamingId_;
    public static int ResumeSequenceNumberFieldNumber;
    private int resumeSequenceNumber_;
    public Google.Protobuf.MessageParser<Prism.GetContainerChunkRequest> Parser { get; set; }
    public Google.Protobuf.Reflection.MessageDescriptor Descriptor { get; set; }
    private Google.Protobuf.Reflection.MessageDescriptor pb::Google.Protobuf.IMessage.Descriptor { get; set; }
    public string StreamingId { get; set; }
    public int ResumeSequenceNumber { get; set; }
    public Prism.GetContainerChunkRequest Clone();
    public bool Equals(object other);
    public bool Equals(Prism.GetContainerChunkRequest other);
    public int GetHashCode();
    public string ToString();
    public void WriteTo(Google.Protobuf.CodedOutputStream output);
    public int CalculateSize();
    public void MergeFrom(Prism.GetContainerChunkRequest other);
    public void MergeFrom(Google.Protobuf.CodedInputStream input);

    private class <>c
    {
        public static <>c <>9;
        private Prism.GetContainerChunkRequest <.cctor>b__30_0();
    }
}

// Namespace: Prism
public class OutgestService
{
    private static string __ServiceName;
    private static Grpc.Core.Marshaller<Prism.GetContainerChunkRequest> __Marshaller_prism_GetContainerChunkRequest;
    private static Grpc.Core.Marshaller<Prism.Container> __Marshaller_prism_Container;
    private static Grpc.Core.Method<Prism.GetContainerChunkRequest, Prism.Container> __Method_GetContainerChunk;
    public Google.Protobuf.Reflection.ServiceDescriptor Descriptor { get; set; }
    public static Grpc.Core.ServerServiceDefinition BindService(OutgestServiceBase serviceImpl);
    public static void BindService(Grpc.Core.ServiceBinderBase serviceBinder, OutgestServiceBase serviceImpl);

    public class OutgestServiceBase
    {
        public System.Threading.Tasks.Task GetContainerChunk(Prism.GetContainerChunkRequest request, Grpc.Core.IServerStreamWriter<Prism.Container> responseStream, Grpc.Core.ServerCallContext context);
    }

    public class OutgestServiceClient : Grpc.Core.ClientBase<OutgestServiceClient>
    {
        public Grpc.Core.AsyncServerStreamingCall<Prism.Container> GetContainerChunk(Prism.GetContainerChunkRequest request, Grpc.Core.Metadata headers, System.Nullable<System.DateTime> deadline, System.Threading.CancellationToken cancellationToken);
        public Grpc.Core.AsyncServerStreamingCall<Prism.Container> GetContainerChunk(Prism.GetContainerChunkRequest request, Grpc.Core.CallOptions options);
        protected OutgestServiceClient NewInstance(ClientBaseConfiguration configuration);
    }

    private class <>c
    {
        public static <>c <>9;
        private byte[] <.cctor>b__10_0(Prism.GetContainerChunkRequest arg);
        private byte[] <.cctor>b__10_1(Prism.Container arg);
    }
}

// Namespace: UnityEngine.Rendering.Universal.PostProcess
public class TimelineExtensionVolumeSettings : UnityEngine.MonoBehaviour
{
    public VolumeAccessType volumeAccessType;
    private UnityEngine.Rendering.Volume _volume;
    private UnityEngine.Rendering.VolumeProfile _volumeProfile;
    private UnityEngine.Rendering.Volume VolumeComponent { get; set; }
    public UnityEngine.Rendering.VolumeProfile VolumeProfile { get; set; }
    private void Reset();

    public enum VolumeAccessType : System.Enum
    {
        public int value__;
        public static VolumeAccessType Profile;
        public static VolumeAccessType SharedProfile;
    }
}

// Namespace: AppGuard.Security
public class AppGuardSecureStream : System.IO.Stream, System.IDisposable
{
    private byte[] _buffer;
    private bool _readable;
    private long _length;
    private long _position;
    private int _byte_array_position;
    public bool CanRead { get; set; }
    public bool CanSeek { get; set; }
    public bool CanWrite { get; set; }
    public long Length { get; set; }
    public long Position { get; set; }
    public long Seek(long offset, System.IO.SeekOrigin origin);
    public void SetLength(long value);
    public void Write(byte[] buffer, int offset, int count);
    public int Read(byte[] buffer, int offset, int count);
    public void Flush();
    protected void Dispose(bool disposing);
    private bool ReadBytesFromStream(System.IO.Stream stream);
    private int RestoreBytes(byte[] bytes, long length, bool alloc);
}

// Namespace: ENTERPRISE
public interface IViewParameter
{
    public int LoadingViewType { get; set; }
}

// Namespace: ENTERPRISE
public class ViewBase : UnityEngine.MonoBehaviour
{
    private ViewStatusType <ViewStatus>k__BackingField;
    private System.Type <ViewType>k__BackingField;
    private ENTERPRISE.IViewParameter <JumpParam>k__BackingField;
    private PRISM.ResourceManagement.IResourceLoader <ResourceLoader>k__BackingField;
    public ViewStatusType ViewStatus { get; set; }
    public System.Type ViewType { get; set; }
    public ENTERPRISE.IViewParameter JumpParam { get; set; }
    protected PRISM.ResourceManagement.IResourceLoader ResourceLoader { get; set; }
    protected bool SkipUnloadUnusedAssets { get; set; }
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(PRISM.ResourceManagement.IResourceLoader resourceLoader);
    public Cysharp.Threading.Tasks.UniTask BeginViewAsync();
    public void StartUpdate();
    public void WaitEnd();
    public Cysharp.Threading.Tasks.UniTask TerminateAsync();
    public bool IsViewIdle();
    protected Cysharp.Threading.Tasks.UniTask _playBgmAsync();
    protected Cysharp.Threading.Tasks.UniTask _initializeAsync();
    protected Cysharp.Threading.Tasks.UniTask _beginViewAsync();
    protected Cysharp.Threading.Tasks.UniTask _onBeginIdleAsync();
    protected Cysharp.Threading.Tasks.UniTask _terminateAsync();
    public Cysharp.Threading.Tasks.UniTask OnBeforeNextViewLoadingAsync();

    public enum ViewStatusType : System.Enum
    {
        public int value__;
        public static ViewStatusType WaitInit;
        public static ViewStatusType Init;
        public static ViewStatusType Begin;
        public static ViewStatusType Idle;
        public static ViewStatusType WaitEnd;
        public static ViewStatusType Term;
        public static ViewStatusType WaitDelete;
        public static ViewStatusType Cancel;
    }

    private struct <BeginViewAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public ENTERPRISE.ViewBase <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <TerminateAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public ENTERPRISE.ViewBase <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: ENTERPRISE
public enum StackOperation : System.Enum
{
    public int value__;
    public static ENTERPRISE.StackOperation Default;
    public static ENTERPRISE.StackOperation Flatten;
    public static ENTERPRISE.StackOperation Ignore;
}

// Namespace: ENTERPRISE
public class JumpViewAction : System.MulticastDelegate
{
    public void Invoke(System.Type viewType, bool withFade, ENTERPRISE.IViewParameter parameter, ENTERPRISE.StackOperation stackOperation);
    public System.IAsyncResult BeginInvoke(System.Type viewType, bool withFade, ENTERPRISE.IViewParameter parameter, ENTERPRISE.StackOperation stackOperation, System.AsyncCallback callback, object object);
    public void EndInvoke(System.IAsyncResult result);
}

// Namespace: ENTERPRISE
public class ViewManager
{
    private UnityEngine.Transform <ParentTransform>k__BackingField;
    private ENTERPRISE.ViewBase <CurrentView>k__BackingField;
    private System.Collections.Generic.List<ViewValue> _viewTypeStacks;
    private bool _isChangeViewFlg;
    private System.Threading.CancellationTokenSource _forceChangeCTS;
    private PRISM.ResourceManagement.IResourceLoader currentResourceLoader;
    private System.Func<int, Cysharp.Threading.Tasks.UniTask> <ExternalFadeOutProcess>k__BackingField;
    private System.Func<Cysharp.Threading.Tasks.UniTask> <ExternalFadeInProcess>k__BackingField;
    private System.Func<System.Exception, Cysharp.Threading.Tasks.UniTask> <ExternalErrorProcess>k__BackingField;
    private System.Func<System.Type, PRISM.ResourceManagement.IResourceLoader, Cysharp.Threading.Tasks.UniTask<ENTERPRISE.ViewBase>> <ExternalAssetBundleLoadProcess>k__BackingField;
    private System.Func<Cysharp.Threading.Tasks.UniTask> <ExternalBeforeLoadProcess>k__BackingField;
    private UnityEngine.Transform ParentTransform { get; set; }
    public ENTERPRISE.ViewBase CurrentView { get; set; }
    public PRISM.ResourceManagement.IResourceLoader CurrentViewResourceLoader { get; set; }
    public bool IsChanging { get; set; }
    private System.Func<int, Cysharp.Threading.Tasks.UniTask> ExternalFadeOutProcess { get; set; }
    private System.Func<Cysharp.Threading.Tasks.UniTask> ExternalFadeInProcess { get; set; }
    private System.Func<System.Exception, Cysharp.Threading.Tasks.UniTask> ExternalErrorProcess { get; set; }
    private System.Func<System.Type, PRISM.ResourceManagement.IResourceLoader, Cysharp.Threading.Tasks.UniTask<ENTERPRISE.ViewBase>> ExternalAssetBundleLoadProcess { get; set; }
    private System.Func<Cysharp.Threading.Tasks.UniTask> ExternalBeforeLoadProcess { get; set; }
    public void JumpView<T>(bool withFade, ENTERPRISE.IViewParameter param, ENTERPRISE.StackOperation stackOperation);
    public Cysharp.Threading.Tasks.UniTask JumpViewAsync<T>(bool withFade, ENTERPRISE.IViewParameter param, ENTERPRISE.StackOperation stackOperation);
    public void JumpView(System.Type iViewType, bool withFade, ENTERPRISE.IViewParameter iParameter, ENTERPRISE.StackOperation stackOperation);
    public Cysharp.Threading.Tasks.UniTask JumpViewAsync(System.Type iViewType, bool withFade, ENTERPRISE.IViewParameter iParameter, ENTERPRISE.StackOperation stackOperation);
    public void JumpViewReturn(int backCount);
    public void SetViewStack(System.Collections.Generic.IEnumerable<ViewValue> iViewTypeList);
    public void AddViewStack(ViewValue viewValue);
    public System.Collections.Generic.IEnumerable<ViewValue> EnumerateViewStack();
    public void ModifyLastViewValue(System.Func<ViewValue, ViewValue> selector);
    public void ClearViewStack();
    public int ViewStackCount();
    public void ForceChangeCurrentView();
    private Cysharp.Threading.Tasks.UniTask _changeViewAsync(System.Type iViewType, ENTERPRISE.IViewParameter iParameter, bool iReturnBack, bool isFade);
    private Cysharp.Threading.Tasks.UniTask _destroyViewAsync(ENTERPRISE.ViewBase view);
    private Cysharp.Threading.Tasks.UniTask _createViewAsync(ENTERPRISE.ViewBase nextView, System.Type iViewType, ENTERPRISE.IViewParameter iParameter);

    public class ViewValue
    {
        public System.Type ViewType;
        public ENTERPRISE.IViewParameter Parameter;
        public bool IsFade;
        public ViewValue WithFade(bool isFade);
    }

    private struct <_changeViewAsync>d__13 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public ENTERPRISE.ViewManager <>4__this;
        public bool isFade;
        public bool iReturnBack;
        public ENTERPRISE.IViewParameter iParameter;
        public System.Type iViewType;
        private System.IDisposable <_>5__2;
        private PRISM.ResourceManagement.IResourceLoader <prevResourceLoader>5__3;
        private ENTERPRISE.ViewBase <prevView>5__4;
        private Awaiter <>u__1;
        private Awaiter <>u__2;
        private object <>7__wrap4;
        private int <>7__wrap5;
        private object <>7__wrap6;
        private int <>7__wrap7;
        private ENTERPRISE.ViewBase <nextView>5__9;
        private Awaiter<ENTERPRISE.ViewBase> <>u__3;
        private Awaiter<bool> <>u__4;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_createViewAsync>d__15 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public ENTERPRISE.ViewManager <>4__this;
        public ENTERPRISE.ViewBase nextView;
        public System.Type iViewType;
        public ENTERPRISE.IViewParameter iParameter;
        private Awaiter <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_destroyViewAsync>d__14 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public ENTERPRISE.ViewBase view;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: ENTERPRISE.OutGame
public class CommonDownloadGauge : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject downloadUI;
    protected ENTERPRISE.UI.UITextMeshProUGUI percentageText;
    private bool isUIVisible;
    protected bool isInternalVisible;
    public bool IsUIActive { get; set; }
    private void Start();
    public void StartDownloading();
    public void UpdateProgress(long downloadedBytes, long totalDownloadedBytes);
    public void FinishDownloading();
    private void UpdateVisibility();
}

// Namespace: ENTERPRISE.OutGame
public class AssetDownloadUI : UnityEngine.MonoBehaviour, PRISM.ResourceManagement.IDownloadEventHandler
{
    private int hideCount;
    private ENTERPRISE.OutGame.ForegroundDownloadGauge foregroundGauge;
    private ENTERPRISE.OutGame.BackgroundDownloadGauge backgroundGauge;
    private bool IsUIActive { get; set; }
    public void RegisterDownloadEventHandler();
    private void _hideStart();
    private void _hideEnd();
    private void Start();
    private void PRISM.ResourceManagement.IDownloadEventHandler.OnDownloadStart(PRISM.ResourceManagement.DownloadCategory category);
    private void PRISM.ResourceManagement.IDownloadEventHandler.OnDownloadProgress(PRISM.ResourceManagement.DownloadCategory category, long downloadedBytes, long totalDownloadBytes, long globalDownloadedBytes, long globalTotalDownloadBytes);
    private void PRISM.ResourceManagement.IDownloadEventHandler.OnDownloadFinish(PRISM.ResourceManagement.DownloadCategory category);
    private Cysharp.Threading.Tasks.UniTask PRISM.ResourceManagement.IDownloadEventHandler.OnDownloadError(Limelight.AssetDownloadError error);

    public class HideScope : System.IDisposable
    {
        private bool disposed;
        public void Dispose();
    }
}

// Namespace: ENTERPRISE.OutGame
public class BackgroundDownloadGauge : ENTERPRISE.OutGame.CommonDownloadGauge
{
    private float peakProgress;
    private ENTERPRISE.UI.RectMaskGauge downloadBar;
    public void StartDownloading();
    public void UpdateProgress(long downloadedBytes, long totalDownloadedBytes);
}

// Namespace: ENTERPRISE.OutGame
public class ForegroundDownloadGauge : ENTERPRISE.OutGame.CommonDownloadGauge
{
    private UnityEngine.UI.Slider downloadBar;
    public void UpdateProgress(long downloadedBytes, long totalDownloadedBytes);
}

// Namespace: ENTERPRISE.OutGame
public class FaqCrypt
{
    private static int KeySize;
    private static int Iterations;
    public static FaqData Crypt(string appUserId, string commonKey, string saltStr);

    public class FaqData
    {
        private string <Uid>k__BackingField;
        private string <Dt>k__BackingField;
        private string <Tm>k__BackingField;
        private string <Rid>k__BackingField;
        public string Uid { get; set; }
        public string Dt { get; set; }
        public string Tm { get; set; }
        public string Rid { get; set; }
    }
}

// Namespace: ENTERPRISE.OutGame
public class BadgeNumber : UnityEngine.MonoBehaviour
{
    public ENTERPRISE.UI.UITextMeshProUGUI textComponent;
    private int Number;
    public void SetNumber(int value);
    private void updateNumber();
}

// Namespace: ENTERPRISE.OutGame
public class ItemIconView : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.RawImage image1;
    private UnityEngine.UI.RawImage image2;
    private UnityEngine.UI.RawImage image3;
    public Cysharp.Threading.Tasks.UniTask UpdateAsync(PRISM.ResourceManagement.IResourceLoader resourceLoader, PRISM.Domain.ProductKey product, bool withFrame, System.Threading.CancellationToken ct);
    private static int <UpdateAsync>g__GetRank|3_0(int id);
}

// Namespace: ENTERPRISE.OutGame
public class RewardItem : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UIButton button;
    private ENTERPRISE.OutGame.ItemIconView icon;
    private ENTERPRISE.UI.UITextMeshProUGUI text;
    public ENTERPRISE.UI.UIButton Button { get; set; }
    public void SetUpItem(PRISM.ResourceManagement.IResourceLoader resourceLoader, PRISM.Module.Networking.IProductStatus product, long amount, bool isShowAmount, bool isShowDetail, bool withFrame, int maxSize, int minSize, System.Threading.CancellationToken token);
    public void SetUpItem(PRISM.ResourceManagement.IResourceLoader resourceLoader, PRISM.Module.Networking.IProductWithAmountStatus productWithAmount, bool isShowAmount, bool isShowDetail, bool withFrame, int maxSize, int minSize, System.Threading.CancellationToken token);
    public void SetUpItem(PRISM.ResourceManagement.IResourceLoader resourceLoader, PRISM.Domain.ProductKeyWithAmount productKeyWithAmount, bool isShowAmount, bool isShowDetail, bool withFrame, int maxSize, int minSize, System.Threading.CancellationToken token);
    public void SetUpItem(PRISM.ResourceManagement.IResourceLoader resourceLoader, PRISM.Domain.ProductKey product, long amount, bool isShowAmount, bool isShowDetail, bool withFrame, int maxSize, int minSize, System.Threading.CancellationToken token);
    private void _setupOnLongPressItemDetail(PRISM.Domain.ProductKey product, System.Threading.CancellationToken ct);

    private class <>c__DisplayClass9_0
    {
        public PRISM.Domain.ProductKey product;
        public System.Threading.CancellationToken ct;
        private void <_setupOnLongPressItemDetail>b__0();
    }
}

// Namespace: ENTERPRISE.OutGame
public class NowLoadingDecorator : PRISM.Module.PrivacyOption.IAsyncDecorator
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.PrivacyOption.ResponseContext> SendAsync(PRISM.Module.PrivacyOption.RequestContext requestContext, System.Func<PRISM.Module.PrivacyOption.RequestContext, System.Threading.CancellationToken, Cysharp.Threading.Tasks.UniTask<PRISM.Module.PrivacyOption.ResponseContext>> nextAsync, System.Threading.CancellationToken ct);

    private struct <SendAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.PrivacyOption.ResponseContext> <>t__builder;
        public System.Func<PRISM.Module.PrivacyOption.RequestContext, System.Threading.CancellationToken, Cysharp.Threading.Tasks.UniTask<PRISM.Module.PrivacyOption.ResponseContext>> nextAsync;
        public PRISM.Module.PrivacyOption.RequestContext requestContext;
        public System.Threading.CancellationToken ct;
        private System.IDisposable <s>5__2;
        private Awaiter<PRISM.Module.PrivacyOption.ResponseContext> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: ENTERPRISE.OutGame
public class ViewAnnouncer : ENTERPRISE.ViewBase
{
    private bool <IsFinished>k__BackingField;
    private float timeLimit;
    protected System.DateTime eventTime;
    public bool IsFinished { get; set; }
    protected bool SkipUnloadUnusedAssets { get; set; }
    protected Cysharp.Threading.Tasks.UniTask _initializeAsync();
    protected void Update();
    protected void _Timeout();
}

// Namespace: ENTERPRISE.OutGame
public class ViewCaution : ENTERPRISE.OutGame.ViewAnnouncer
{
    private UniRx.Triggers.ObservablePointerDownTrigger bgButton;
    private float skipAllowTime;
    protected System.DateTime bgButtonActiveTime;
    protected Cysharp.Threading.Tasks.UniTask _initializeAsync();
    protected void _onInitialized();
    protected void Update();
    protected void _Timeout();
    private void <_initializeAsync>b__2_0(UnityEngine.EventSystems.PointerEventData _);
    private Cysharp.Threading.Tasks.UniTask <>n__0();

    private struct <_initializeAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public ENTERPRISE.OutGame.ViewCaution <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: ENTERPRISE.OutGame
public class ViewCautionDMM : ENTERPRISE.OutGame.ViewCaution
{
    protected void _onInitialized();
    protected void _Timeout();
}

// Namespace: ENTERPRISE.OutGame
public class ItemUtility
{
    private static string ItemNameKey;
    private static string ItemDescKey;
    private static string AchievementNameKey;
    private static string AchievementDescKey;
    private static PRISM.Definitions.LocalizationKey MusicProductNameKey;
    private static string MusicNameKey;
    private static string EventStoryNameKey;
    private static string CostumeSetNameKey;
    private static PRISM.Module.Networking.IJumpStatus EmptyJumpStatus;
    public static string GetName(ProductType productType, int mstItemId, string separator);
    public static string GetCharaNameFromItemId(int mstItemId);
    public static string GetName(PRISM.Domain.ProductKey productKey, string separator);
    public static string GetDesc(ProductType productType, int mstItemId);
    public static string GetDesc(PRISM.Domain.ProductKey productKey);
    public static Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IHavingProductStatus>> GetItemListAsync(System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IHavingProductStatus> GetItemAsync(PRISM.Domain.ProductKey key, System.Threading.CancellationToken ct);
    private static PRISM.Module.Networking.IHavingProductStatus _validateExpire(PRISM.Module.Networking.IHavingProductStatus havingProduct, System.DateTime now);
    public static System.ValueTuple<PRISM.Domain.Jewel, PRISM.Domain.Jewel> CalculateJewelAmount(InGameCurrencyType jewelPurchaseType, int price, PRISM.Domain.Jewel havingJewel, int orderCount);
    public static string GetIconPath(PRISM.Domain.ProductKey key, bool withFrame);
    public static PRISM.Domain.ProductKeyWithAmount ParseProductIdWithAmount(string s);
    public static bool IsPossessionOnlyOne(ProductType productType);
    public static PRISM.Module.Networking.IJumpStatus GetJumpStatus(PRISM.Domain.ProductKey product);
    private static PRISM.Module.Networking.IJumpStatus <GetJumpStatus>g__ToExchange|21_0(ExchangeTabType tabType);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IExpireDateStatus, long> <>9__16_1;
        private long <_validateExpire>b__16_1(PRISM.Module.Networking.IExpireDateStatus x);
    }

    private class <>c__DisplayClass14_0
    {
        public System.DateTime now;
        private PRISM.Module.Networking.IHavingProductStatus <GetItemListAsync>b__0(PRISM.Module.Networking.IHavingProductStatus x);
    }

    private class <>c__DisplayClass16_0
    {
        public System.DateTime now;
        private bool <_validateExpire>b__0(PRISM.Module.Networking.IExpireDateStatus x);
    }

    private struct <GetItemAsync>d__15 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IHavingProductStatus> <>t__builder;
        public PRISM.Domain.ProductKey key;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IHavingProductStatus> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetItemListAsync>d__14 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IHavingProductStatus>> <>t__builder;
        public System.Threading.CancellationToken ct;
        private <>c__DisplayClass14_0 <>8__1;
        private Awaiter<PRISM.Module.Networking.IGetHavingItemAllReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: ENTERPRISE.Webview
public interface INativeWebviewSettings
{
    public void WebviewInitSettings(ENTERPRISE.Webview.NativeWebviewObject webview);
    public void WebviewInitCallback(ENTERPRISE.Webview.NativeWebviewObject webview);
}

// Namespace: ENTERPRISE.Webview
public class NativeWebview : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.Webview.NativeWebviewObject <webview>k__BackingField;
    public string initURL;
    public UnityEngine.Camera cameraObject;
    private UnityEngine.Rect webviewrect;
    public ENTERPRISE.Webview.NativeWebviewObject webview { get; set; }
    private void Start();
    private void OnDestroy();
    private void Update();
    private void OnApplicationPause(bool pauseStatus);
    public void EvaluateJS(string js);
    public void SetVisibility(bool isVisible);
    private void setupWebview();
    private UnityEngine.Rect GetDeviceRect(UnityEngine.GameObject obj);
    private UnityEngine.Rect GetScreenRect(UnityEngine.GameObject obj);
    private void <setupWebview>b__12_0();
}

// Namespace: ENTERPRISE.Webview
public class onInitCompleteDelegate : System.MulticastDelegate
{
    public void Invoke();
    public System.IAsyncResult BeginInvoke(System.AsyncCallback callback, object object);
    public void EndInvoke(System.IAsyncResult result);
}

// Namespace: ENTERPRISE.Webview
public class onConsoleMessageDelegate : System.MulticastDelegate
{
    public bool Invoke(string msg);
    public System.IAsyncResult BeginInvoke(string msg, System.AsyncCallback callback, object object);
    public bool EndInvoke(System.IAsyncResult result);
}

// Namespace: ENTERPRISE.Webview
public class onLoadResourceDelegate : System.MulticastDelegate
{
    public void Invoke(string url);
    public System.IAsyncResult BeginInvoke(string url, System.AsyncCallback callback, object object);
    public void EndInvoke(System.IAsyncResult result);
}

// Namespace: ENTERPRISE.Webview
public class onPageStartedDelegate : System.MulticastDelegate
{
    public void Invoke(string url);
    public System.IAsyncResult BeginInvoke(string url, System.AsyncCallback callback, object object);
    public void EndInvoke(System.IAsyncResult result);
}

// Namespace: ENTERPRISE.Webview
public class onPageFinishedDelegate : System.MulticastDelegate
{
    public void Invoke(string url);
    public System.IAsyncResult BeginInvoke(string url, System.AsyncCallback callback, object object);
    public void EndInvoke(System.IAsyncResult result);
}

// Namespace: ENTERPRISE.Webview
public class onReceivedErrorDelegate : System.MulticastDelegate
{
    public bool Invoke(int errorcode, string error, string failingUrl);
    public System.IAsyncResult BeginInvoke(int errorcode, string error, string failingUrl, System.AsyncCallback callback, object object);
    public bool EndInvoke(System.IAsyncResult result);
}

// Namespace: ENTERPRISE.Webview
public class callFromJSDelegate : System.MulticastDelegate
{
    public bool Invoke(string fname, string args, string& retstr);
    public System.IAsyncResult BeginInvoke(string fname, string args, string& retstr, System.AsyncCallback callback, object object);
    public bool EndInvoke(string& retstr, System.IAsyncResult result);
}

// Namespace: ENTERPRISE.Webview
public class overrideUrlDelegate : System.MulticastDelegate
{
    public bool Invoke(string scheme, string url);
    public System.IAsyncResult BeginInvoke(string scheme, string url, System.AsyncCallback callback, object object);
    public bool EndInvoke(System.IAsyncResult result);
}

// Namespace: ENTERPRISE.Webview
public class NativeWebviewObject
{
    public ENTERPRISE.Webview.onInitCompleteDelegate onInitComplete;
    public ENTERPRISE.Webview.onConsoleMessageDelegate onConsoleMessage;
    public ENTERPRISE.Webview.onLoadResourceDelegate onLoadResource;
    public ENTERPRISE.Webview.onPageStartedDelegate onPageStarted;
    public ENTERPRISE.Webview.onPageFinishedDelegate onPageFinished;
    public ENTERPRISE.Webview.onReceivedErrorDelegate onReceivedError;
    public static ENTERPRISE.Webview.callFromJSDelegate callFromJS;
    public ENTERPRISE.Webview.overrideUrlDelegate overrideUrl;
    public Params settingparams;
    private static ENTERPRISE.Webview.NativeWebviewObject webviewobj;
    private bool <isVisibilitylock>k__BackingField;
    public bool isVisibilitylock { get; set; }
    public static ENTERPRISE.Webview.NativeWebviewObject CreateWebview();
    private void Init();
    private void Init(UnityEngine.Rect rec);
    public void OnPause();
    public void OnResume();
    public static void RemoveWebviewCookie();
    public void ClearRequestHeader();
    public void SetRequestHeader(string key, string value);
    public void LoadURL(string url, string authstr);
    public void Resize(UnityEngine.Rect rec);
    public void SetPadding(int left, int top, int right, int bottom);
    public void EvaluateJS(string js);
    public void SetVisibilityLock(bool f);
    public void SetVisibility(bool isVisible);
    private void OnInitCompleteProc();
    private void onPageStartedProc(string url);
    private void onPageFinishedProc(string url);
    private bool onReceivedErrorProc(int errorcode, string error, string failingUrl);
    private static string callFromJSProc(string fname, string args);
    private bool overrideUrlProc(string scheme, string url);
}

// Namespace: ENTERPRISE.Webview
public class NativeWebviewParameters
{
    public static Params getDefault();

    public struct Params : System.ValueType
    {
    }
}

// Namespace: ENTERPRISE.Webview
public class WebviewController : UnityEngine.MonoBehaviour, ENTERPRISE.Webview.INativeWebviewSettings
{
    private string authStr;
    private ENTERPRISE.Webview.NativeWebviewObject unitywebviewobj;
    private bool isInitialized;
    private bool isPageFinished;
    private bool isOverrideUrl;
    private bool isLoadBlankPage;
    private string targetUrl;
    private string lastUrlPageFinished;
    private string lastSchemeOverrideUrl;
    private string lastUrlOverrideUrl;
    private string lastURL;
    private OverrideUrlDelegate overrideUrlCallBack_;
    private System.Action<string> overridePageFinished_;
    private static bool isSetHeader;
    private void Update();
    public void LoadURL(string url);
    public void StartWebview();
    public void SetVisible(bool value);
    public void SetCloseState();
    public void WebviewInitSettings(ENTERPRISE.Webview.NativeWebviewObject webview);
    public void WebviewInitCallback(ENTERPRISE.Webview.NativeWebviewObject webview);
    public void SetOverrideUrlCallBack(OverrideUrlDelegate iOverrideUrlCallBack);
    public void SetOverridePageFinished(System.Action<string> iOverridePageFinished);
    private System.Collections.IEnumerator LoadURLCoroutine(string url);
    private void SetRequestHeader(ENTERPRISE.Webview.NativeWebviewObject webview, string key, string value);
    private void startLoadUrl();
    private string getOriginalUrl(string url);
    private void <WebviewInitCallback>b__20_0();
    private void <WebviewInitCallback>b__20_2(string url);
    private bool <WebviewInitCallback>b__20_3(int errorcode, string error, string failingUrl);
    private bool <WebviewInitCallback>b__20_4(string scheme, string url);

    public class OverrideUrlDelegate : System.MulticastDelegate
    {
        public void Invoke(string scheme, string url);
        public System.IAsyncResult BeginInvoke(string scheme, string url, System.AsyncCallback callback, object object);
        public void EndInvoke(System.IAsyncResult result);
    }

    private class <>c
    {
        public static <>c <>9;
        public static ENTERPRISE.Webview.onPageStartedDelegate <>9__20_1;
        private void <WebviewInitCallback>b__20_1(string url);
    }

    private class <LoadURLCoroutine>d__24 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
    {
        private int <>1__state;
        private object <>2__current;
        public ENTERPRISE.Webview.WebviewController <>4__this;
        public string url;
        private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; set; }
        private object System.Collections.IEnumerator.Current { get; set; }
        private void System.IDisposable.Dispose();
        private bool MoveNext();
        private void System.Collections.IEnumerator.Reset();
    }
}

// Namespace: ENTERPRISE.UI
public class ExtensionsButton
{
    public static System.IObservable<UnityEngine.EventSystems.PointerEventData> OnLongClickAsObservable(UnityEngine.UI.Button button, float pressSeconds);
}

// Namespace: ENTERPRISE.UI
public class ExtensionsCamera
{
    public static UnityEngine.Vector3 ScreenToWorldPointForActualSize(UnityEngine.Camera camera, UnityEngine.Vector3 pos);
}

// Namespace: ENTERPRISE.UI
public class Toast
{
    public static void Show(string message, bool isLengthLong);
    public static void ResetToast();
}

// Namespace: ENTERPRISE.UI
public class AnimatorWithEvent : UnityEngine.MonoBehaviour
{
    private UniRx.Subject<string> runEventSubject;
    private UnityEngine.Animator thisAnimator;
    public System.IObservable<string> OnRunEvent { get; set; }
    public UnityEngine.Animator HavingAnimator { get; set; }
    public void RunEvent(string eventTag);
    public void ResetEvent();
    public static System.IObservable<string> OnRunEventInChildren(UnityEngine.GameObject rootObject);
    protected void Awake();
    protected void OnDestroy();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<ENTERPRISE.UI.AnimatorWithEvent, System.IObservable<string>> <>9__8_0;
        private System.IObservable<string> <OnRunEventInChildren>b__8_0(ENTERPRISE.UI.AnimatorWithEvent x);
    }
}

// Namespace: ENTERPRISE.UI
public class ButtonBase : UnityEngine.UI.Button, UnityEngine.EventSystems.IBeginDragHandler, UnityEngine.EventSystems.IEventSystemHandler, UnityEngine.EventSystems.IEndDragHandler, UnityEngine.EventSystems.IDragHandler, ENTERPRISE.UI.IRecycleOperator
{
    private bool <IsValidOnClick>k__BackingField;
    private bool <IsValidLongPress>k__BackingField;
    private bool <IsValidRepeatPress>k__BackingField;
    private float pressingTime;
    private static float longPressThreshold;
    private UniRx.ReactiveProperty<ClickerState> currentButtonState;
    private ButtonPressedEvent onLongPress;
    private ButtonPressedEvent onRepeatPress;
    private UnityEngine.MonoBehaviour parentBeginDrag;
    private UnityEngine.MonoBehaviour parentEndDrag;
    private UnityEngine.MonoBehaviour parentDrag;
    private bool <PassDragEventToParent>k__BackingField;
    private System.IDisposable onClickDisposable;
    private System.IDisposable onLongClickDisposable;
    private System.IDisposable onClickFallbackDisposable;
    private UniRx.Subject<UniRx.Unit> onClickSubject;
    private PRISM.Definitions.SoundKey clickSE;
    private PRISM.Definitions.SoundKey longPressSE;
    private bool isPlaySound;
    private bool isPlayLongPressSound;
    private bool isDragging;
    private bool isClickOrLongClicked;
    private bool longPressEnabled;
    private float repeatInterval;
    private float clickedInterval;
    private float pressScale;
    private float scaleSecond;
    private bool enableScaleAnimation;
    private DG.Tweening.Ease scaleEase;
    public float RepeatInterval { get; set; }
    public bool EnableScaleAnimation { get; set; }
    public bool IsValidOnClick { get; set; }
    public bool IsValidLongPress { get; set; }
    public bool IsValidRepeatPress { get; set; }
    public bool PassDragEventToParent { get; set; }
    public void SetOnClick(System.Action onClickCallBack);
    private System.IDisposable _setOnClickCore(System.Action onClickCallBack);
    public void SetOnClick(System.Func<Cysharp.Threading.Tasks.UniTask> onClickCallBack);
    public System.IObservable<UniRx.Unit> OnClickAsObservable();
    public void ClearOnClick();
    public void SetOnLongPress(System.Action onLongPressCallback, float pressSeconds);
    public void SetOnRepeatPress(System.Action onRepeatPressCallback);
    public void ClearOnLongPress();
    public void SetLongPressEnable(bool enabled);
    public void OnPointerClick(UnityEngine.EventSystems.PointerEventData eventData);
    public void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData);
    public void OnPointerUp(UnityEngine.EventSystems.PointerEventData eventData);
    public void OnBeginDrag(UnityEngine.EventSystems.PointerEventData eventData);
    public void OnEndDrag(UnityEngine.EventSystems.PointerEventData eventData);
    public void OnDrag(UnityEngine.EventSystems.PointerEventData eventData);
    protected void OnDestroy();
    protected void Start();
    protected void Update();
    protected void OnApplicationFocus(bool focus);
    protected float GetDeltaTime();
    private void _passBeginDragToParent(UnityEngine.EventSystems.PointerEventData eventData);
    private void _passEndDragToParent(UnityEngine.EventSystems.PointerEventData eventData);
    private void _passDragToParent(UnityEngine.EventSystems.PointerEventData eventData);
    private void _playSE();
    private void _playLongPressSE();
    public void SetSound(bool isPlaySound);
    public void SetSound(PRISM.Definitions.SoundKey key);
    public void SetLongPressSound(bool isPlaySound);
    public void SetLongPressSound(PRISM.Definitions.SoundKey key);
    public void ResetDragging();
    public void BackToPool();
    private void <OnClickAsObservable>b__4_0();
    private void <Start>b__17_0(ClickerState state);

    public class ButtonPressedEvent : UnityEngine.Events.UnityEvent
    {
    }

    private enum ClickerState : System.Enum
    {
        public int value__;
        public static ClickerState None;
        public static ClickerState Down;
        public static ClickerState Up;
        public static ClickerState ParentDragging;
        public static ClickerState LongPressed;
        public static ClickerState Repeating;
    }

    private class <>c__DisplayClass2_0
    {
        public ENTERPRISE.UI.ButtonBase <>4__this;
        public System.Action onClickCallBack;
        private bool <_setOnClickCore>b__0(UniRx.Unit _);
        private void <_setOnClickCore>b__1(UniRx.Unit _);
    }

    private class <>c__DisplayClass3_0
    {
        public System.Func<Cysharp.Threading.Tasks.UniTask> onClickCallBack;
        private void <SetOnClick>b__0();
    }

    private class <>c__DisplayClass6_0
    {
        public ENTERPRISE.UI.ButtonBase <>4__this;
        public System.Action onLongPressCallback;
        private bool <SetOnLongPress>b__0(UnityEngine.EventSystems.PointerEventData _);
        private void <SetOnLongPress>b__1(UnityEngine.EventSystems.PointerEventData eventData);
    }
}

// Namespace: ENTERPRISE.UI
public enum ToggleStatusType : System.Enum
{
    public int value__;
    public static ENTERPRISE.UI.ToggleStatusType NONE;
    public static ENTERPRISE.UI.ToggleStatusType ENTER;
    public static ENTERPRISE.UI.ToggleStatusType PRESS;
    public static ENTERPRISE.UI.ToggleStatusType INVALID;
}

// Namespace: ENTERPRISE.UI
public enum ToggleKindType : System.Enum
{
    public int value__;
    public static ENTERPRISE.UI.ToggleKindType baseNormal;
    public static ENTERPRISE.UI.ToggleKindType basePositive;
    public static ENTERPRISE.UI.ToggleKindType baseWarning;
    public static ENTERPRISE.UI.ToggleKindType baseFunction;
    public static ENTERPRISE.UI.ToggleKindType textNormal;
    public static ENTERPRISE.UI.ToggleKindType textPositive;
    public static ENTERPRISE.UI.ToggleKindType textWarning;
    public static ENTERPRISE.UI.ToggleKindType textFunction;
    public static ENTERPRISE.UI.ToggleKindType basePurchase;
    public static ENTERPRISE.UI.ToggleKindType textPurchase;
}

// Namespace: ENTERPRISE.UI
public enum ButtonColorKind : System.Enum
{
    public int value__;
    public static ENTERPRISE.UI.ButtonColorKind Disabled;
    public static ENTERPRISE.UI.ButtonColorKind White;
    public static ENTERPRISE.UI.ButtonColorKind WhiteAndGreen;
    public static ENTERPRISE.UI.ButtonColorKind Black;
    public static ENTERPRISE.UI.ButtonColorKind Green;
    public static ENTERPRISE.UI.ButtonColorKind Red;
    public static ENTERPRISE.UI.ButtonColorKind Orange;
    public static ENTERPRISE.UI.ButtonColorKind DeepGreen;
    public static ENTERPRISE.UI.ButtonColorKind None;
}

// Namespace: ENTERPRISE.UI
public class ButtonToggleBase : ENTERPRISE.UI.ButtonBase
{
    private UnityEngine.UI.Image buttonImg;
    private UnityEngine.UI.Image warningIco;
    private bool isInitialized;
    private bool <IgnoreClick>k__BackingField;
    private bool forceInvalidClick;
    private bool <IsPositive>k__BackingField;
    private bool <IsWarning>k__BackingField;
    private bool <IsFunction>k__BackingField;
    private bool <IsPurchase>k__BackingField;
    private System.Collections.Generic.List<UnityEngine.UI.Image> mImageList;
    private System.Collections.Generic.List<ENTERPRISE.UI.UITextMeshProUGUI> mTextList;
    private ENTERPRISE.UI.ToggleStatusType mStatus;
    private ENTERPRISE.UI.ButtonColorKind mColorKind;
    public bool IsEnable { get; set; }
    public bool IsShowWarningIco { get; set; }
    public bool IgnoreClick { get; set; }
    public bool ForceInvalidClick { get; set; }
    public bool IsPositive { get; set; }
    public bool IsWarning { get; set; }
    public bool IsFunction { get; set; }
    public bool IsPurchase { get; set; }
    public System.Collections.Generic.List<UnityEngine.UI.Image> ImageList { get; set; }
    public System.Collections.Generic.List<ENTERPRISE.UI.UITextMeshProUGUI> TextList { get; set; }
    public ENTERPRISE.UI.ToggleStatusType Status { get; set; }
    public ENTERPRISE.UI.ButtonColorKind ColorKind { get; set; }
    public ENTERPRISE.UI.ToggleKindType GetBaseType { get; set; }
    public ENTERPRISE.UI.ToggleKindType GetTextType { get; set; }
    protected void Initialize();
    protected void Start();
    protected void Update();
    protected void OnDisable();
    protected void Reset();
    public void OnPointerClick(UnityEngine.EventSystems.PointerEventData iEventData);
    public void OnPointerDown(UnityEngine.EventSystems.PointerEventData iEventData);
    public void OnPointerUp(UnityEngine.EventSystems.PointerEventData iEventData);
    public void OnPointerEnter(UnityEngine.EventSystems.PointerEventData iEventData);
    public void OnPointerExit(UnityEngine.EventSystems.PointerEventData iEventData);
    protected ENTERPRISE.UI.ImageInformation _getImageInfo(UnityEngine.UI.Image iImage, ENTERPRISE.UI.ToggleStatusType iStatus);
    protected ENTERPRISE.UI.TextInformation _getTextInfo(ENTERPRISE.UI.UITextMeshProUGUI iText, ENTERPRISE.UI.ToggleStatusType iStatus);
    private void refreshResources();
    private void _OnChangeStatus(ENTERPRISE.UI.ToggleStatusType iType, System.Func<bool> iCompareFunc);
    private bool <OnPointerDown>b__14_0();
    private bool <OnPointerUp>b__15_0();
    private bool <OnPointerEnter>b__16_0();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<bool> <>9__17_0;
        public static System.Func<UnityEngine.UI.Image, bool> <>9__20_0;
        public static System.Func<ENTERPRISE.UI.UITextMeshProUGUI, bool> <>9__20_1;
        private bool <OnPointerExit>b__17_0();
        private bool <refreshResources>b__20_0(UnityEngine.UI.Image iImage);
        private bool <refreshResources>b__20_1(ENTERPRISE.UI.UITextMeshProUGUI iText);
    }
}

// Namespace: ENTERPRISE.UI
public class ColorToOutlineForTextMeshProUGUI : ENTERPRISE.UI.ColorToUVChannelForTextMeshProUGUI
{
    protected AvailableUVChannel UVChannel { get; set; }
}

// Namespace: ENTERPRISE.UI
public class ColorToUnderlayForTextMeshProUGUI : ENTERPRISE.UI.ColorToUVChannelForTextMeshProUGUI
{
    protected AvailableUVChannel UVChannel { get; set; }
}

// Namespace: ENTERPRISE.UI
public class ColorToUVChannelForTextMeshProUGUI : UnityEngine.MonoBehaviour
{
    protected UnityEngine.Color color;
    private int[] vertexCounts;
    private UnityEngine.Vector4[] colorToUVs;
    private ENTERPRISE.UI.UITextMeshProUGUI tmp;
    private UnityEngine.Color colorOld;
    protected AvailableUVChannel UVChannel { get; set; }
    public UnityEngine.Color Color { get; set; }
    public void UpdateManually();
    private void _initialize();
    private void Start();
    private void Update();

    protected enum AvailableUVChannel : System.Enum
    {
        public int value__;
        public static AvailableUVChannel UV2;
        public static AvailableUVChannel UV3;
    }
}

// Namespace: ENTERPRISE.UI
public class ImageInformation
{
    public UnityEngine.UI.Image Target;
    public UnityEngine.Sprite Sprite;
    public UnityEngine.Color Color;
}

// Namespace: ENTERPRISE.UI
public class TextInformation
{
    public ENTERPRISE.UI.UITextMeshProUGUI Target;
    public string TextKey;
    public UnityEngine.Color Color;
    public ENTERPRISE.UI.TextOutlineColorId OutlineColor;
}

// Namespace: ENTERPRISE.UI
public interface IRecycleOperator
{
    public void BackToPool();
}

// Namespace: ENTERPRISE.UI
public class PRISMEnhancedScroller : EnhancedUI.EnhancedScroller.EnhancedScroller
{
    protected void Start();
    private void _recycleUIs(EnhancedUI.EnhancedScroller.EnhancedScroller scroller, EnhancedUI.EnhancedScroller.EnhancedScrollerCellView cellView);
}

// Namespace: ENTERPRISE.UI
public class RectMaskGauge : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.RectMask2D mask;
    private Direction direction;
    private float fillAmount;
    public Direction Direction { get; set; }
    public float FillAmount { get; set; }
    private void _render();
}

// Namespace: ENTERPRISE.UI
public class SlideWindowBase : UnityEngine.MonoBehaviour
{
    private UnityEngine.CanvasGroup parentCanvasGroup;
    private float hidePosition;
    private float showPosition;
    private UnityEngine.RectTransform windowRect;
    private System.IDisposable hideDisposable;
    private float MoveDuration;
    protected System.IObservable<UniRx.Unit> OnHideRequested { get; set; }
    private void Awake();
    public Cysharp.Threading.Tasks.UniTask ShowAsync();
    public Cysharp.Threading.Tasks.UniTask HideAsync();
    private Cysharp.Threading.Tasks.UniTask _moveAsync(float targetPosition, float targetAlpha);
    private void <ShowAsync>b__9_0(UniRx.Unit _);

    private struct <HideAsync>d__10 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public ENTERPRISE.UI.SlideWindowBase <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ShowAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public ENTERPRISE.UI.SlideWindowBase <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: ENTERPRISE.UI
public class ToggleButton : ENTERPRISE.UI.ButtonToggleBase
{
    protected bool isOn;
    private System.Action subscribedOnClick;
    private UniRx.Subject<bool> statusChangeSubject;
    private UnityEngine.Sprite spriteOn;
    private UnityEngine.Color spriteColorOn;
    private UnityEngine.Color textColorOn;
    private UnityEngine.Sprite spriteOff;
    private UnityEngine.Color spriteColorOff;
    private UnityEngine.Color textColorOff;
    public System.IObservable<bool> OnStatusChanged { get; set; }
    public bool GetStatus();
    public void SetStatus(bool isOn);
    public void SetStatusWithoutNotify(bool isOn);
    public void SetStatusAndEnableToggle(bool isOn);
    public void SetOnClick(System.Action onClickCallBack);
    protected ENTERPRISE.UI.ImageInformation _getImageInfo(UnityEngine.UI.Image iImage, ENTERPRISE.UI.ToggleStatusType iStatus);
    protected ENTERPRISE.UI.TextInformation _getTextInfo(ENTERPRISE.UI.UITextMeshProUGUI iText, ENTERPRISE.UI.ToggleStatusType iStatus);
    protected void OnEnable();
    private void <SetOnClick>b__4_0();
}

// Namespace: ENTERPRISE.UI
public class UIButton : ENTERPRISE.UI.ButtonToggleBase
{
    private ENTERPRISE.UI.ImageSetInformation[] mImageSet;
    private ENTERPRISE.UI.TextSetInformation[] mTextSet;
    protected ENTERPRISE.UI.ImageInformation _getImageInfo(UnityEngine.UI.Image iImage, ENTERPRISE.UI.ToggleStatusType iStatus);
    protected ENTERPRISE.UI.TextInformation _getTextInfo(ENTERPRISE.UI.UITextMeshProUGUI iText, ENTERPRISE.UI.ToggleStatusType iStatus);
}

// Namespace: ENTERPRISE.UI
public class ImageSetInformation : ENTERPRISE.UI.ImageInformation
{
    public ENTERPRISE.UI.ToggleStatusType StatusType;
    public ENTERPRISE.UI.ToggleKindType KindType;
}

// Namespace: ENTERPRISE.UI
public class TextSetInformation : ENTERPRISE.UI.TextInformation
{
    public ENTERPRISE.UI.ToggleStatusType StatusType;
    public ENTERPRISE.UI.ToggleKindType KindType;
}

// Namespace: ENTERPRISE.UI
public class UIDragEffect : UnityEngine.MonoBehaviour
{
    private UnityEngine.Vector3 <LastMousePos>k__BackingField;
    private UnityEngine.Vector3 currentMousePos;
    public UnityEngine.Vector3 LastMousePos { get; set; }
    public void StartDrag(UnityEngine.Vector3 mousePos, float dragDistance);
    public void EndDrag();
    public void SwitchEffect(bool enable);
}

// Namespace: ENTERPRISE.UI
public class UIEffectAlive : UnityEngine.MonoBehaviour
{
    private UnityEngine.Animator animator;
    private void LateUpdate();
    public void Initialize(UnityEngine.Vector3 pos);
}

// Namespace: ENTERPRISE.UI
public class UIPullDown : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.Dropdown dropdown;
    private UniRx.ReactiveProperty<int> dropdownIndex;
    private System.Collections.Generic.List<Item> items;
    public int SelectedIndex { get; set; }
    public System.IObservable<int> OnValueChanged { get; set; }
    public System.Collections.Generic.IList<Item> Items { get; set; }
    public Item SelectedItem { get; set; }
    public string SelectedKey { get; set; }
    public void SetItems(System.Collections.Generic.IEnumerable<Item> newItems);
    private void Awake();
    private void OnDestroy();
    private void _uiValueChanged(int arg0);
    private void _updateUIIndex(int obj);

    public class Item
    {
        public string key;
        public string displayName;
        public UnityEngine.Sprite sprite;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<Item, OptionData> <>9__16_0;
        public static System.Func<OptionData, Item> <>9__17_0;
        private OptionData <SetItems>b__16_0(Item item);
        private Item <Awake>b__17_0(OptionData option);
    }

    private class <>c__DisplayClass15_0
    {
        public string value;
        private bool <set_SelectedKey>b__0(Item item);
    }
}

// Namespace: ENTERPRISE.UI
public class UIRaycastBlocker : UnityEngine.UI.Graphic
{
    protected void OnPopulateMesh(UnityEngine.UI.VertexHelper vh);
}

// Namespace: ENTERPRISE.UI
public class UITabButton : ENTERPRISE.UI.ButtonBase
{
    private ImageInfo[] imageStateList;
    private TextInfo[] textStateList;
    private bool tabEnabled;
    private TabState currentState;
    private string <Param>k__BackingField;
    private ImageInfo[] imagePictogramList;
    public TabState CurrentState { get; set; }
    public bool TabEnabled { get; set; }
    public string Param { get; set; }
    public void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData);
    public void OnPointerClick(UnityEngine.EventSystems.PointerEventData eventData);
    public void OnPointerUp(UnityEngine.EventSystems.PointerEventData eventData);
    public void SetLabelText(string newText);
    public void SetPictogramIcon(UnityEngine.Sprite sprite);
    protected void Start();
    protected void OnApplicationFocus(bool focus);
    private void _moveState(TabState nextState, bool forcedly);

    public class ImageStateInfo
    {
        public UnityEngine.Sprite sprite;
        public UnityEngine.Color color;
    }

    public class ImageInfo
    {
        public UnityEngine.UI.Image target;
        public ImageStateInfo normal;
        public ImageStateInfo pressed;
        public ImageStateInfo selected;
        public ImageStateInfo disabled;
    }

    public class TextStateInfo
    {
        public UnityEngine.Color color;
    }

    public class TextInfo
    {
        public ENTERPRISE.UI.UITextMeshProUGUI target;
        public TextStateInfo normal;
        public TextStateInfo pressed;
        public TextStateInfo selected;
        public TextStateInfo disabled;
    }

    public enum TabState : System.Enum
    {
        public int value__;
        public static TabState BeforeInit;
        public static TabState Unselected;
        public static TabState Disabled;
        public static TabState Selected;
        public static TabState Pressed;
    }
}

// Namespace: ENTERPRISE.UI
public class TabEvent : UnityEngine.Events.UnityEvent<int, ENTERPRISE.UI.UITabGroup>
{
}

// Namespace: ENTERPRISE.UI
public class UITabGroup : UnityEngine.MonoBehaviour
{
    public ENTERPRISE.UI.TabEvent onTabSelected;
    private ENTERPRISE.UI.UITabButton[] tabs;
    private int selectedIndex;
    private bool isRestructTab;
    public bool IsScrollEnable { get; set; }
    public int SelectedIndex { get; set; }
    public ENTERPRISE.UI.UITabButton[] Tabs { get; set; }
    public void RestructTabGroup(System.Collections.Generic.IEnumerable<ENTERPRISE.UI.UITabButton> newTabs, int defaultIndex);
    public ENTERPRISE.UI.UITabGroup SetOnTabSelected(System.Action<int, ENTERPRISE.UI.UITabGroup> action);
    public void ClearOnTabSelected();
    public void SetSound(PRISM.Definitions.SoundKey key);
    public void SetSelectedIndexWithoutNotify(int value);
    public void ForceSetSelectedIndex(int value);
    public void DeleteTab();
    protected void Start();
    private void _restructTab();
    private void _updateStatus();

    private class <>c__DisplayClass12_0
    {
        public int pos;
        public ENTERPRISE.UI.UITabGroup <>4__this;
        private void <_restructTab>b__0();
    }
}

// Namespace: ENTERPRISE.UI
public enum TextFontColorId : System.Enum
{
    public int value__;
    public static ENTERPRISE.UI.TextFontColorId None;
    public static ENTERPRISE.UI.TextFontColorId White;
    public static ENTERPRISE.UI.TextFontColorId Black;
    public static ENTERPRISE.UI.TextFontColorId WarningRed;
    public static ENTERPRISE.UI.TextFontColorId UnitBlue;
    public static ENTERPRISE.UI.TextFontColorId Inactive;
    public static ENTERPRISE.UI.TextFontColorId Inactive2;
    public static ENTERPRISE.UI.TextFontColorId Hint;
    public static ENTERPRISE.UI.TextFontColorId OverFlow;
    public static ENTERPRISE.UI.TextFontColorId LinkPinc;
}

// Namespace: ENTERPRISE.UI
public class TextFontColor
{
    private static System.Collections.Generic.Dictionary<ENTERPRISE.UI.TextFontColorId, UnityEngine.Color> <Dict>k__BackingField;
    public System.Collections.Generic.Dictionary<ENTERPRISE.UI.TextFontColorId, UnityEngine.Color> Dict { get; set; }
    public static UnityEngine.Color Get(ENTERPRISE.UI.TextFontColorId id);
}

// Namespace: ENTERPRISE.UI
public class UITextMeshProUGUI : TMPro.TextMeshProUGUI
{
    private System.ReadOnlySpan<TMPro.TMP_SubMeshUI> SubTexts { get; set; }
    public void SetFontColor(ENTERPRISE.UI.TextFontColorId fontColorId);
    public void SetOutlineColor(ENTERPRISE.UI.TextOutlineColorId outlineColorId);
    public void SetOutlineColor(UnityEngine.Color outlineColor);
}

// Namespace: ENTERPRISE.UI
public enum TextOutlineColorId : System.Enum
{
    public int value__;
    public static ENTERPRISE.UI.TextOutlineColorId None;
    public static ENTERPRISE.UI.TextOutlineColorId White;
    public static ENTERPRISE.UI.TextOutlineColorId Black;
    public static ENTERPRISE.UI.TextOutlineColorId Positive;
    public static ENTERPRISE.UI.TextOutlineColorId Caution;
    public static ENTERPRISE.UI.TextOutlineColorId Pink;
    public static ENTERPRISE.UI.TextOutlineColorId HomeFooter;
}

// Namespace: ENTERPRISE.UI
public class TextOutlineColor
{
    private static System.Collections.Generic.Dictionary<ENTERPRISE.UI.TextOutlineColorId, UnityEngine.Color> dic;
    public static UnityEngine.Color Get(ENTERPRISE.UI.TextOutlineColorId id);
}

// Namespace: ENTERPRISE.UI
public class UITouchEffectManager : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject touchEffectPrefab;
    private UnityEngine.GameObject dragEffectPrefab;
    private ENTERPRISE.UI.UIEffectAlive[] touchEffects;
    private ENTERPRISE.UI.UIDragEffect dragEffect;
    private int touchEffectsMaxNum;
    private int touchEffectsNum;
    private int currentTouchIndex;
    private float dragDistance;
    private PRISM.Definitions.ScopedReactiveProperty<bool> isActive;
    private void Start();
    private void Update();
    private bool TryGetMousePosition(UnityEngine.Vector3& position);
    private ENTERPRISE.UI.UIEffectAlive GetNextEffect();
    public System.IDisposable CreateActiveScope(bool isActive);
}

// Namespace: ENTERPRISE.UI
public class InputBlockController
{
    private static PRISM.Definitions.ScopedReactiveProperty<bool> counter;
    public bool IsBlocking { get; set; }
    public System.IObservable<bool> OnBlockingChanged { get; set; }
    public static System.IDisposable BlockWithUsing();
    public static System.IDisposable TemporarilyDisableBlocking();
    public static void ForceReset();
}

// Namespace: ENTERPRISE.UI
public class InputBlockControllerExtensions
{
    public static Cysharp.Threading.Tasks.UniTask WithInputBlock(Cysharp.Threading.Tasks.UniTask task);
    public static Cysharp.Threading.Tasks.UniTask<T> WithInputBlock<T>(Cysharp.Threading.Tasks.UniTask<T> task);

    private struct <WithInputBlock>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public Cysharp.Threading.Tasks.UniTask task;
        private System.IDisposable <>7__wrap1;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <WithInputBlock>d__1`1<T> : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<T> <>t__builder;
        public Cysharp.Threading.Tasks.UniTask<T> task;
        private System.IDisposable <>7__wrap1;
        private Awaiter<T> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: ENTERPRISE.UI
public class InputFilter
{
    private System.Collections.Generic.HashSet<ulong> denyList;
    private System.Collections.Generic.List<System.ValueTuple<ulong, ulong>> allowList;
    private System.Collections.Generic.HashSet<ulong> fallbackTrimList;
    private System.Collections.Generic.HashSet<ulong> fallbackKeepList;
    private bool <IsInitialized>k__BackingField;
    private bool <IsInitializeFailed>k__BackingField;
    public static string EscapeCharCode;
    public bool IsInitialized { get; set; }
    public bool IsInitializeFailed { get; set; }
    public void Initialize(ENTERPRISE.UI.InputFilterDatabase db);
    public void ResetFallbackList();
    public void AddFallbackTrimCharactor(char chr);
    public void AddFallbackTrimCharactors(System.Collections.Generic.IEnumerable<char> charlist);
    public void AddFallbackKeepCharactor(char chr);
    public void AddFallbackKeepCharactors(System.Collections.Generic.IEnumerable<char> charlist);
    public ulong CharToUtf8(char chr);
    public ulong CharToUtf8(string chrString, bool skipLengthCheck);
    public bool IsIncludeAllowList(ulong code);
    public Manufacturing DefaultDecideManufacuringFromCharactor(char ch, ulong code);
    public string ManufactureIllegalCharacter(string str, System.Func<char, ulong, Manufacturing> fallbackFunc, string substituleChar);

    public enum Manufacturing : System.Enum
    {
        public int value__;
        public static Manufacturing Keep;
        public static Manufacturing Trim;
        public static Manufacturing Replace;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<AllowRange, System.ValueTuple<ulong, ulong>> <>9__13_0;
        private System.ValueTuple<ulong, ulong> <Initialize>b__13_0(AllowRange r);
    }
}

// Namespace: ENTERPRISE.UI
public class InputFilterDatabase : UnityEngine.ScriptableObject, System.IEquatable<ENTERPRISE.UI.InputFilterDatabase>
{
    public System.Collections.Generic.List<ulong> denyList;
    public System.Collections.Generic.List<AllowRange> allowList;
    public void CopyFrom(ENTERPRISE.UI.InputFilterDatabase orig);
    public bool Equals(ENTERPRISE.UI.InputFilterDatabase other);
    public bool Equals(object other);
    public int GetHashCode();

    public struct AllowRange : System.ValueType
    {
        public ulong from;
        public ulong to;
    }
}

// Namespace: ENTERPRISE.UI
public class InputFilterTMP : TMPro.TMP_InputValidator
{
    private ProhibitFlags prohibits;
    private ENTERPRISE.UI.InputFilterDatabase database;
    private ENTERPRISE.UI.InputFilter <CharacterFilter>k__BackingField;
    private int <CharacterLimit>k__BackingField;
    public ENTERPRISE.UI.InputFilter CharacterFilter { get; set; }
    public int CharacterLimit { get; set; }
    private void Awake();
    public char Validate(string& text, int& pos, char ch);

    public enum ProhibitFlags : System.Enum
    {
        public int value__;
        public static ProhibitFlags None;
        public static ProhibitFlags Space;
        public static ProhibitFlags TabNL;
        public static ProhibitFlags Emoji;
    }
}

// Namespace: ENTERPRISE.UI
public class InputUtility
{
    public static string GetStringForDisplayUIText(string str);
    public static ENTERPRISE.UI.InputFilterTMP CloneInputFilter(TMPro.TMP_InputField inputField);
}

// Namespace: ENTERPRISE.UI
public class OverlayInputBlocker : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.Image overlay;
    private void Start();
    private void _toggle(bool isBlock);
}

// Namespace: ENTERPRISE.Localization
public class LocalizationManager
{
    private System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<int, string>> dic;
    public ENTERPRISE.Localization.LocalizationManager Instance { get; set; }
    public void Load();
    private void _load(byte[] data);
    public string GetTextSlow(string key);
    public string GetText(PRISM.Definitions.LocalizationKey key);
    public string GetText(string category, int id);
    public string GetTextOrNull(string category, int id);
}

// Namespace: SRDebugger
public struct SRDebug : System.ValueType
{
    public static SRDebugger.SRDebug Instance;
    public void HideDebugPanel();
}

// Namespace: SRDebugger
public class IncrementAttribute : System.Attribute
{
}

// Namespace: SRDebugger
public class NumberRangeAttribute : System.Attribute
{
}

// Namespace: SRDebugger
public class SortAttribute : System.Attribute
{
}

// Namespace: PRISM
public class AdjustHandler : UnityEngine.MonoBehaviour
{
    private com.adjust.sdk.AdjustEnvironment environment;
    private com.adjust.sdk.AdjustLogLevel logLevel;
    private string appToken { get; set; }
    private void Start();
    private void _PRISMLogger_Adjust(string message);
    private void _setLogDelegate(com.adjust.sdk.AdjustConfig adjustConfig, com.adjust.sdk.AdjustLogLevel adjustLogLevel, System.Action<string> logDelegate);
    private void _setCallbackDelegates(com.adjust.sdk.AdjustConfig adjustConfig);
    private void _attributionChangedCallback(com.adjust.sdk.AdjustAttribution attributionData);
    private void _eventSuccessCallback(com.adjust.sdk.AdjustEventSuccess eventSuccessData);
    private void _eventFailureCallback(com.adjust.sdk.AdjustEventFailure eventFailureData);
    private void _sessionSuccessCallback(com.adjust.sdk.AdjustSessionSuccess sessionSuccessData);
    private void _sessionFailureCallback(com.adjust.sdk.AdjustSessionFailure sessionFailureData);
    private void _deferredDeeplinkCallback(string deeplinkURL);
}

// Namespace: PRISM
public class AdjustTracking : PRISM.IAdjustTracking
{
    private static bool isTracked;
    private static string userIdCache;
    private string trackKey { get; set; }
    private string eventId_Tutorial { get; set; }
    private string eventId_Purchase { get; set; }
    private string _searchUserIdCache { get; set; }
    public void StartTracking();
    public void TrackTutorialCompleted();
    public void TrackPurchaseCompleted(int amount, string currency);
    private string _getLocalTime();
    private static string _getSearchUserIdFromSaveData();
}

// Namespace: PRISM
public class AdjustTrackingDummy : PRISM.IAdjustTracking
{
    private static bool isTracked;
    private static string userIdCache;
    private string _searchUserIdCache { get; set; }
    public void StartTracking();
    public void TrackTutorialCompleted();
    public void TrackPurchaseCompleted(int amount, string currency);
    private string _getLocalTime();
    private static string _getSearchUserIdFromSaveData();
}

// Namespace: PRISM
public class AdjustTrackingFactory
{
    public static PRISM.IAdjustTracking Create();
}

// Namespace: PRISM
public interface IAdjustTracking
{
    public void StartTracking();
    public void TrackTutorialCompleted();
    public void TrackPurchaseCompleted(int amount, string currency);
}

// Namespace: PRISM
public class IStoryAdvScenarioInfoExtensions
{
    public static string GetStorySubTitle(PRISM.Adv.IStoryAdvScenarioInfo storyAdvScenarioInfo, bool forSortFilter);
}

// Namespace: PRISM
public class AssetKeyAttribute : UnityEngine.PropertyAttribute
{
    public System.Type Type;
}

// Namespace: PRISM
public class GameObjectAssetKeyAttribute : PRISM.AssetKeyAttribute
{
}

// Namespace: PRISM
public class SceneAssetKeyAttribute : PRISM.AssetKeyAttribute
{
}

// Namespace: PRISM
public class Texture2DAssetKeyAttribute : PRISM.AssetKeyAttribute
{
}

// Namespace: PRISM
public class SpriteAssetKeyAttribute : PRISM.AssetKeyAttribute
{
}

// Namespace: PRISM
public class MaterialAssetKeyAttribute : PRISM.AssetKeyAttribute
{
}

// Namespace: PRISM
public class EnumNamedArrayAttribute : PRISM.NamedArrayAttribute
{

    private class <>c__DisplayClass0_0
    {
        public System.Type enumType;
        public int offset;
        private string <.ctor>b__0(int i);
    }
}

// Namespace: PRISM
public class NamedArrayAttribute : UnityEngine.PropertyAttribute
{
    private System.Func<int, string> nameConverter;
}

// Namespace: PRISM
public class BootUISingleton : UnityEngine.MonoBehaviour
{
    private static float DefaultUICameraPriority;
    private UnityEngine.Camera uiCamera;
    private UnityEngine.RectTransform displayGroup;
    private ENTERPRISE.OutGame.AssetDownloadUI assetDownloadUI;
    private PRISM.Mission.MissionNoticeSystem missionNotice;
    private ENTERPRISE.UI.UITouchEffectManager touchEffectManager;
    private static PRISM.BootUISingleton <Instance>k__BackingField;
    public UnityEngine.Camera UICamera { get; set; }
    public UnityEngine.RectTransform DisplayGroup { get; set; }
    public ENTERPRISE.OutGame.AssetDownloadUI AssetDownloadUI { get; set; }
    public PRISM.Mission.MissionNoticeSystem MissionNotice { get; set; }
    public ENTERPRISE.UI.UITouchEffectManager TouchEffectManager { get; set; }
    public PRISM.BootUISingleton Instance { get; set; }
    private void Awake();
}

// Namespace: PRISM
public class SceneTransitionManager : UnityEngine.MonoBehaviour
{
    public static UnityEngine.Color FadeColor;
    private static PRISM.SceneTransitionManager instance;
    private static bool isInitialized;
    private UnityEngine.UI.Image fadeImage;
    private UnityEngine.CanvasGroup canvasGroup;
    private UnityEngine.Canvas canvas;
    private bool isFading;
    private DG.Tweening.Tweener tweener;
    private System.IDisposable backKeyDisableScope;
    private static System.Action<UnityEngine.Canvas> <OnBeginFadeOut>k__BackingField;
    private static System.Action<UnityEngine.Canvas> <OnBeginFadeIn>k__BackingField;
    private System.Action<UnityEngine.Canvas> OnBeginFadeOut { get; set; }
    private System.Action<UnityEngine.Canvas> OnBeginFadeIn { get; set; }
    public bool IsInitialized { get; set; }
    public bool IsFading { get; set; }
    public static Cysharp.Threading.Tasks.UniTask SetupAsync();
    private void _initialize();
    public static Cysharp.Threading.Tasks.UniTask FadeOutAsync(float duration, bool ignoreTimeScale, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask FadeInAsync(float duration, bool ignoreTimeScale, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask DisplayFadeInAsync();
    private Cysharp.Threading.Tasks.UniTask _fadeOutAsync(float duration, bool ignoreTimeScale, System.Threading.CancellationToken ct);
    private Cysharp.Threading.Tasks.UniTask _fadeInAsync(float duration, bool ignoreTimeScale, System.Threading.CancellationToken ct);

    private struct <SetupAsync>d__21 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        private Awaiter<UnityEngine.GameObject> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_fadeInAsync>d__27 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.SceneTransitionManager <>4__this;
        public float duration;
        public bool ignoreTimeScale;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class ViewBundle
{
    public string typeName;
    public string reference;
    public string[] tags;
}

// Namespace: PRISM
public class ViewBundleData : UnityEngine.ScriptableObject
{
    private PRISM.ViewBundle[] viewBundles;
    public System.Collections.Generic.IEnumerable<PRISM.ViewBundle> ViewBundles { get; set; }
}

// Namespace: PRISM
public interface ICharacterBaseDetailConnector
{
}

// Namespace: PRISM
public interface ICharacterBaseSelectConnector
{
}

// Namespace: PRISM
public interface IIdolListConnector
{
}

// Namespace: PRISM
public interface IProduceIdolUpgradingConnector
{
}

// Namespace: PRISM
public interface ISupportCharaUpgradingConnector
{
}

// Namespace: PRISM
public class APIProvider
{
    private PRISM.Module.Networking.ChannelHandler channelHandler;
    private bool isInitialized;
    private static bool downloadThrottleEnabled;
    private PRISM.Module.Networking.IServerConfig <ServerConfig>k__BackingField;
    private bool <IsStoreReviewInductionTarget>k__BackingField;
    public PRISM.APIProvider Instance { get; set; }
    public PRISM.Module.Networking.IServerConfig ServerConfig { get; set; }
    public bool IsStoreReviewInductionTarget { get; set; }
    public void Initialize();
    public Cysharp.Threading.Tasks.UniTask<TResponse> RequestAsync<TRequest, TResponse>(PRISM.Module.Networking.Method<TRequest, TResponse> method, TRequest request, bool canRetry, System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask<System.ValueTuple<PRISM.Module.Networking.APIResult<TResponse>, bool>> _request<TRequest, TResponse>(PRISM.Module.Networking.Method<TRequest, TResponse> method, TRequest request, int retryCount, bool canRetry, System.Threading.CancellationToken cancellationToken);
    private static void _enableDownloadThrottle();
    private static void _checkNoticeMissionComplete(PRISM.Module.Networking.IResponseTrailer trailer);
    private static Cysharp.Threading.Tasks.UniTask<bool> showErrorDialog(PRISM.Module.Networking.INetworkError networkError, bool canRetry);
    private static Cysharp.Threading.Tasks.UniTask<bool> showGenericAPIErrorDialog(bool canRetry);
    public Cysharp.Threading.Tasks.UniTask ReconnectAsync(System.Threading.CancellationToken cancellationToken);
    public void Dispose();
    public void ClearCache();

    private struct <RequestAsync>d__14`2<TRequest, TResponse> : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<TResponse> <>t__builder;
        public PRISM.APIProvider <>4__this;
        public PRISM.Module.Networking.Method<TRequest, TResponse> method;
        public TRequest request;
        public bool canRetry;
        public System.Threading.CancellationToken cancellationToken;
        private int <retryCount>5__2;
        private Awaiter<System.ValueTuple<PRISM.Module.Networking.APIResult<TResponse>, bool>> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_request>d__15`2<TRequest, TResponse> : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.ValueTuple<PRISM.Module.Networking.APIResult<TResponse>, bool>> <>t__builder;
        public PRISM.APIProvider <>4__this;
        public PRISM.Module.Networking.Method<TRequest, TResponse> method;
        public TRequest request;
        public System.Threading.CancellationToken cancellationToken;
        public bool canRetry;
        public int retryCount;
        private System.IDisposable <downloadThrottle>5__2;
        private Awaiter<PRISM.Module.Networking.APIResult<TResponse>> <>u__1;
        private Awaiter <>u__2;
        private Awaiter<bool> <>u__3;
        private PRISM.Module.Networking.APIResult<TResponse> <>7__wrap2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <showGenericAPIErrorDialog>d__19 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<bool> <>t__builder;
        public bool canRetry;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class ServiceException : System.Exception
{
    public PRISM.Domain.ServiceResult Result;
    public PRISM.Module.Networking.INetworkError Error;
    public string Message { get; set; }
}

// Namespace: PRISM
public class CommunicationObserver : System.IObserver<bool>
{
    public void OnCompleted();
    public void OnError(System.Exception error);
    public void OnNext(bool value);

    private class <>c__DisplayClass2_0
    {
        public bool value;
        private void <OnNext>b__0();
    }
}

// Namespace: PRISM
private class LogWrapperNetworkLogger : PRISM.Module.Networking.NetworkLoggerBase
{
    public void Info(string message);
    public void Warning(string message);
    public void Error(string message);
    public void DebugLog(string message);
    public void SetChild(PRISM.Module.Networking.NetworkLoggerBase logger);
}

// Namespace: PRISM
public class ServerConfig : UnityEngine.ScriptableObject, PRISM.Module.Networking.IServerConfig, System.IDisposable
{
    private static PRISM.ServerConfig instance;
    private string host;
    private int grpcPort;
    private int grpcKeepAliveTimeMs;
    private int grpcKeepAliveTimeoutMs;
    public int grpcConnectTimeoutMs;
    public int requestTimeOutMs;
    public bool useCredentials;
    public bool useEncryption;
    public bool useTrace;
    public string[] definitions;
    public PRISM.ServerConfig Instance { get; set; }
    public string Host { get; set; }
    public int GrpcPort { get; set; }
    public int GrpcKeepAliveTimeMs { get; set; }
    public int GrpcKeepAliveTimeoutMs { get; set; }
    public int GrpcConnectTimeoutMs { get; set; }
    public bool UseCredentials { get; set; }
    public bool UseEncryption { get; set; }
    public bool UseTrace { get; set; }
    public int RequestTimeOutMs { get; set; }
    public string[] Definitions { get; set; }
    public void Dispose();
    private static PRISM.ServerConfig _getServerConfig();
}

// Namespace: PRISM
public class ServerConfigFactory
{
    public static PRISM.Module.Networking.IServerConfig Create();
}

// Namespace: PRISM
public class AttributeIconViewForLegacy : UnityEngine.MonoBehaviour
{
    public void Show(int attribute);
}

// Namespace: PRISM
public struct AutoCancellationTokenSource : System.ValueType
{
    private System.Threading.CancellationTokenSource cts;
    public System.Threading.CancellationToken GetNewToken();
    public void Cancel();
}

// Namespace: PRISM
public class CameraSizeAdjuster : UnityEngine.MonoBehaviour
{
    private UnityEngine.Vector2Int _baseAspectRatio;
    private float _baseCameraSize;
    private float _baseCameraFOV;
    private bool _showBaseAspectArea;
    private UnityEngine.Color _baseAspectAreaColor;
    private UnityEngine.Camera _camera;
    private UnityEngine.Material _baseAspectAreaMat;
    private float BaseAspect { get; set; }
    private void Awake();
    private void Start();
    private void _adjustCameraSize();
    private void _adjustOrthographicCameraSize();
    private void _adjustPerspectiveCameraSize();
}

// Namespace: PRISM
public class ArrowAttachedCarousel`2<TItemData, TContext> : PRISM.Carousel<TItemData, TContext>
{
    private ENTERPRISE.UI.ButtonBase leftArrow;
    private ENTERPRISE.UI.ButtonBase rightArrow;
    public void SetListData(System.Collections.Generic.IList<TItemData> dataList);
    protected void Initialize();
    private void <Initialize>b__3_0();
    private void <Initialize>b__3_1();
    private void <Initialize>b__3_2(int i);
}

// Namespace: PRISM
public class Carousel`2<TItemData, TContext> : FancyScrollView.FancyScrollView<TItemData, TContext>
{
    protected FancyScrollView.Scroller scroller;
    protected UnityEngine.GameObject cellPrefab;
    protected UnityEngine.GameObject emptyObject;
    protected PRISM.CarouselIndicator indicator;
    private UniRx.Subject<int> onSelectedCellClicked;
    private bool disableSelectionSE;
    protected UnityEngine.GameObject CellPrefab { get; set; }
    public System.IObservable<int> OnSelectionChanged { get; set; }
    public System.IObservable<int> OnSelectedCellClicked { get; set; }
    public System.IObservable<int> OnIndicatorChanged { get; set; }
    public PRISM.CarouselIndicator Indicator { get; set; }
    public void SetResourceLoader(PRISM.ResourceManagement.IResourceLoader resourceLoader);
    public void SetListData(System.Collections.Generic.IList<TItemData> dataList);
    public bool HasPrevious(int index);
    public bool HasNext(int index);
    public void ScrollTo(int index, float duration, System.Action onComplete);
    public void ScrollToPrevious(float duration, System.Action onComplete);
    public void ScrollToNext(float duration, System.Action onComplete);
    public void ScrollToRandom(float duration, System.Action onComplete);
    public void JumpTo(int index, bool disableSE, bool forceNotifyChange);
    public void EnableLoopWithScroller();
    public void DisableLoopWithScroller(FancyScrollView.MovementType movementType);
    protected void Initialize();
    protected void _playSelectionChangedSE();
    private static int _circularIndex(int i, int size);
    private int _validateIndex(int index);
    private void <Initialize>b__27_0(float value);
    private void <Initialize>b__27_1(int i);
    private void <Initialize>b__27_2(int index);

    private class <>c<TItemData, TContext>
    {
        public static <>c<TItemData, TContext> <>9;
        public static System.Func<int, bool> <>9__9_0;
        private bool <get_OnSelectionChanged>b__9_0(int value);
    }
}

// Namespace: PRISM
public class CarouselCell`2<TItemData, TContext> : FancyScrollView.FancyCell<TItemData, TContext>
{
    private static float HORIZONTAL_SCROLL_SIZE;
    private static float VERTICAL_SCROLL_SIZE;
    protected ENTERPRISE.UI.ButtonBase button;
    public void Initialize();
    public void UpdatePosition(float position);
    private void <Initialize>b__3_0();
}

// Namespace: PRISM
public class CarouselIndicator : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.Toggle indicatorDotPrefab;
    private UnityEngine.UI.ToggleGroup toggleGroup;
    private System.Collections.Generic.List<UnityEngine.UI.Toggle> indicatorDots;
    private UniRx.CompositeDisposable toggleClickDisposables;
    private UniRx.Subject<int> <OnIndicatorChanged>k__BackingField;
    private bool <IsActive>k__BackingField;
    public UniRx.Subject<int> OnIndicatorChanged { get; set; }
    public bool IsActive { get; set; }
    public void SetUp(int count, bool isInteractable);
    public void MoveTo(int index);

    private class <>c__DisplayClass11_0
    {
        public int index;
        public PRISM.CarouselIndicator <>4__this;
        private void <SetUp>b__0(UnityEngine.EventSystems.PointerEventData _);
    }
}

// Namespace: PRISM
public class DefaultCarouselContext : PRISM.ICarouselContext
{
    private UniRx.ReactiveProperty<int> <SelectedIndex>k__BackingField;
    private int <PreviousSelectedIndex>k__BackingField;
    private UniRx.Subject<int> <OnCellClicked>k__BackingField;
    private FancyScrollView.ScrollDirection <ScrollDirection>k__BackingField;
    private PRISM.ResourceManagement.IResourceLoader <ResourceLoader>k__BackingField;
    public UniRx.ReactiveProperty<int> SelectedIndex { get; set; }
    public int PreviousSelectedIndex { get; set; }
    public UniRx.Subject<int> OnCellClicked { get; set; }
    public FancyScrollView.ScrollDirection ScrollDirection { get; set; }
    public PRISM.ResourceManagement.IResourceLoader ResourceLoader { get; set; }
}

// Namespace: PRISM
public interface ICarouselContext
{
    public UniRx.ReactiveProperty<int> SelectedIndex { get; set; }
    public int PreviousSelectedIndex { get; set; }
    public UniRx.Subject<int> OnCellClicked { get; set; }
    public FancyScrollView.ScrollDirection ScrollDirection { get; set; }
    public PRISM.ResourceManagement.IResourceLoader ResourceLoader { get; set; }
}

// Namespace: PRISM
public class CommonConstant
{
    public static int INPUT_FORM_OVERFLOW_LENGTH;
    public static float EPSILON;
}

// Namespace: PRISM
public class ClickObservableContext`1<T> : PRISM.Interactions.GridViewContext, PRISM.IContextClick<T>
{
    private UniRx.Subject<T> onClick;
    private UniRx.Subject<T> onLongPressed;
    public System.IObservable<T> OnClickObservable { get; set; }
    public System.IObservable<T> OnLongPressedObservable { get; set; }
    public void ClickOnNext(T value);
    public void LongPressedOnNext(T value);
    public void Dispose();
}

// Namespace: PRISM
public interface IContextClick`1<T>
{
    public void ClickOnNext(T value);
    public void LongPressedOnNext(T value);
}

// Namespace: PRISM
public class DeepLinkParser
{
    public static Cysharp.Threading.Tasks.UniTask ExecuteAsync(string url);
}

// Namespace: PRISM
public class DeviceInfo
{
    public static string GetAdjustAdId();
}

// Namespace: PRISM
public class EnhancedListView`2<TData, TContext> : UnityEngine.MonoBehaviour, EnhancedUI.EnhancedScroller.IEnhancedScrollerDelegate
{
    protected System.Collections.Generic.IReadOnlyList<TData> data;
    protected EnhancedUI.EnhancedScroller.EnhancedScroller scroller;
    protected float cellSize;
    protected PRISM.EnhancedListViewCell<TData, TContext> cellPrefab;
    protected UnityEngine.GameObject emptyView;
    protected bool initialized;
    private TContext <Context>k__BackingField;
    protected TContext Context { get; set; }
    protected float NormalizedScrollPosition { get; set; }
    protected void Initialize();
    public void SetResourceLoader(PRISM.ResourceManagement.IResourceLoader resourceLoader);
    private void OnDestroy();
    protected void ReloadData(float scrollPositionFactor);
    private void ScrollerCellViewVisibilityChanged(EnhancedUI.EnhancedScroller.EnhancedScrollerCellView cellView);
    private void ScrollerCellViewInstantiated(EnhancedUI.EnhancedScroller.EnhancedScroller enhancedScroller, EnhancedUI.EnhancedScroller.EnhancedScrollerCellView cellView);
    public void UpdateContents(System.Collections.Generic.IReadOnlyList<TData> data, float scrollPositionFactor);
    public int GetNumberOfCells(EnhancedUI.EnhancedScroller.EnhancedScroller scroller);
    public float GetCellViewSize(EnhancedUI.EnhancedScroller.EnhancedScroller scroller, int dataIndex);
    public EnhancedUI.EnhancedScroller.EnhancedScrollerCellView GetCellView(EnhancedUI.EnhancedScroller.EnhancedScroller scroller, int dataIndex, int cellIndex);
    public void JumpTo(int index, float offset);
}

// Namespace: PRISM
public class EnhancedListView`1<TData> : PRISM.EnhancedListView<TData, PRISM.EnhancedListViewContext>
{
}

// Namespace: PRISM
public class EnhancedListViewContext
{
    private PRISM.ResourceManagement.IResourceLoader <ResourceLoader>k__BackingField;
    public PRISM.ResourceManagement.IResourceLoader ResourceLoader { get; set; }
}

// Namespace: PRISM
public class EnhancedListViewCell`2<TData, TContext> : EnhancedUI.EnhancedScroller.EnhancedScrollerCellView
{
    private TContext <Context>k__BackingField;
    private TData <Data>k__BackingField;
    private bool isInitialized;
    protected TContext Context { get; set; }
    protected TData Data { get; set; }
    public void SetContext(TContext context);
    protected void _initialize();
    public void UpdateContent(TData data);
}

// Namespace: PRISM
public class EnhancedListViewCell`1<T> : PRISM.EnhancedListViewCell<T, PRISM.EnhancedListViewContext>
{
}

// Namespace: PRISM
public class FrameRateScope
{
    private static bool <FrameRateFixed>k__BackingField;
    public bool FrameRateFixed { get; set; }
    public static System.IDisposable CreateScope(int frameRate, bool frameRateFixed);

    private class Scope : System.IDisposable
    {
        private int savedFrameRate;
        public void Dispose();
    }
}

// Namespace: PRISM
public class HomeBGM
{
    public static string SheetName;
    private static string characterPrefix;
    private static string storyPrefix;
    private static TimeOfDay currentTimeOfDay;
    private static Weather currentWeather;
    private static System.Collections.Generic.Dictionary<TimeOfDay, string> timeOfDayPrefixDict;
    private static System.Collections.Generic.Dictionary<Weather, string> weatherPrefixDict;
    public static Cysharp.Threading.Tasks.UniTask PlayAsync(System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask PlayAsync(TimeOfDay timeOfDay, Weather weather, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask PlayStoryAsync(System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask PlayCharacterAsync(System.Threading.CancellationToken ct);
    private static string _getBgmCueName(TimeOfDay timeOfDay);
    private static string _getSwitchCueName(TimeOfDay timeOfDay, string switchPrefix);
    private static Cysharp.Threading.Tasks.UniTask _playAsync(string bgmCueName, string switchCueName, System.Threading.CancellationToken cancellationToken);

    public enum TimeOfDay : System.Enum
    {
        public int value__;
        public static TimeOfDay Morning;
        public static TimeOfDay Day;
        public static TimeOfDay Night;
    }

    public enum Weather : System.Enum
    {
        public int value__;
        public static Weather Sunny;
        public static Weather Cloudy;
        public static Weather Rainy;
        public static Weather Snowy;
    }

    private struct <_playAsync>d__15 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public string bgmCueName;
        public System.Threading.CancellationToken cancellationToken;
        public string switchCueName;
        private Awaiter<CriWare.CriAtomExPlayback> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class HowToPlayPopupOpener : UnityEngine.MonoBehaviour
{
    protected string howToPlayPopupResourceConfigRef;
    protected string howToPlayPopupResourceConfigRefPc;
    private string _getCurrentHowToPlayResourceConfigRef();
    public Cysharp.Threading.Tasks.UniTask OpenAsync(System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask<bool> TryFirstTimeOpenAsync(string additionalKey, System.Threading.CancellationToken cancellationToken);
}

// Namespace: PRISM
public class HowToPlayPopupResourceConfig : UnityEngine.ScriptableObject
{
    private string title;
    private Item[] items;
    public string Title { get; set; }
    public System.Collections.Generic.IList<Item> Items { get; set; }

    public struct Item : System.ValueType
    {
        private UnityEngine.Texture image;
        private string summary;
        public UnityEngine.Texture Image { get; set; }
        public string Summary { get; set; }
    }
}

// Namespace: PRISM
public class HowToPlayPopupSaveData : ENTERPRISE.Data.LegacySaveDataBase, UnityEngine.ISerializationCallbackReceiver
{
    private string[] onceDisplayed;
    private System.Collections.Generic.HashSet<string> <OnceDisplayed>k__BackingField;
    public System.Collections.Generic.HashSet<string> OnceDisplayed { get; set; }
    public bool IsDefault();
    public void Reset();
    public void OnBeforeSerialize();
    public void OnAfterDeserialize();
}

// Namespace: PRISM
public interface IConnectingView
{
    public void Toggle(bool isOn);
    public System.IDisposable CreateDisplayScope();
}

// Namespace: PRISM
public class ProduceIdolModel
{
    private int <CharaId>k__BackingField;
    private PRISM.Definitions.IdolParameter <CurrentStatus>k__BackingField;
    public PRISM.Module.Networking.IInProduceIdolSkillStatus ActiveSkill;
    private int <BaseIdolVo>k__BackingField;
    private int <BaseIdolDa>k__BackingField;
    private int <BaseIdolVi>k__BackingField;
    private int <BaseIdolMe>k__BackingField;
    private PRISM.UnitIdol trainingWearCostume;
    public PRISM.UnitIdol StageCostume;
    public PRISM.UnitIdol MiniCharaStage1;
    public PRISM.UnitIdol MiniCharaStage2;
    public PRISM.UnitIdol DefaultRoomWearCostume;
    public PRISM.UnitIdol CustomRoomWearCostume;
    public PRISM.UnitIdol MiniCharaTrainingWear;
    public int SelectedMstSkillId;
    public PRISM.Module.Networking.IProduceIdolStatus ProduceIdol;
    public int CharaId { get; set; }
    public PRISM.Definitions.IdolParameter CurrentStatus { get; set; }
    public int BaseIdolVo { get; set; }
    public int BaseIdolDa { get; set; }
    public int BaseIdolVi { get; set; }
    public int BaseIdolMe { get; set; }
    public static Cysharp.Threading.Tasks.UniTask<PRISM.ProduceIdolModel> CreateAsync(PRISM.Module.Networking.IProduceIdolStatus data, int selectedMstSkillId, System.Threading.CancellationToken ct);
    public PRISM.UnitIdol ToUnitIdol(bool isMiniChara);
    public Cysharp.Threading.Tasks.UniTask UpdateProduceIdolStatusAsync(PRISM.Module.Networking.IProduceIdolStatus data, int selectedSkillId, System.Threading.CancellationToken ct);
    public void UpdateMasterSkillID(int mstSkillId);
    public void SetCharaId(int id);
    public PRISM.UnitIdol GetUnitIdolForMiniCharaADV(ScheduleDetailType type, int stageCostumeType);
    public PRISM.UnitIdol GetInGameUnitIdol(ScheduleDetailType scheduleDetailType);
    public PRISM.UnitIdol GetInGameResultUnitIdol(ScheduleDetailType scheduleDetailType);
    private void _registerCostumeData(PRISM.Domain.ICachedCostumeService costumeService, PRISM.Domain.ICachedIdolService idolService);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IIdolBaseCostumeStatus, bool> <>9__42_0;
        private bool <_registerCostumeData>b__42_0(PRISM.Module.Networking.IIdolBaseCostumeStatus x);
    }

    private struct <CreateAsync>d__34 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.ProduceIdolModel> <>t__builder;
        public PRISM.Module.Networking.IProduceIdolStatus data;
        public int selectedMstSkillId;
        public System.Threading.CancellationToken ct;
        private PRISM.ProduceIdolModel <instance>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <UpdateProduceIdolStatusAsync>d__36 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Module.Networking.IProduceIdolStatus data;
        public PRISM.ProduceIdolModel <>4__this;
        public int selectedSkillId;
        public System.Threading.CancellationToken ct;
        private PRISM.Domain.ICachedIdolService <idolService>5__2;
        private Awaiter<PRISM.Domain.ICachedIdolService> <>u__1;
        private Awaiter<PRISM.Domain.ICachedCostumeService> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class UnitIdol : MemoryPack.IMemoryPackable<PRISM.UnitIdol>, MemoryPack.IMemoryPackFormatterRegister
{
    public int charaId;
    public int clothId;
    public int hairId;
    public int[] accessoryIds;
    public static void RegisterFormatter();
    public static void Serialize(MemoryPack.MemoryPackWriter& writer, PRISM.UnitIdol& value);
    public static void Deserialize(MemoryPack.MemoryPackReader& reader, PRISM.UnitIdol& value);

    private class UnitIdolFormatter : MemoryPack.MemoryPackFormatter<PRISM.UnitIdol>
    {
        public void Serialize(MemoryPack.MemoryPackWriter& writer, PRISM.UnitIdol& value);
        public void Deserialize(MemoryPack.MemoryPackReader& reader, PRISM.UnitIdol& value);
    }
}

// Namespace: PRISM
public class UnitIdolWithMstCostume : PRISM.UnitIdol
{
    private System.ValueTuple<int, int> <MstCostume>k__BackingField;
    public System.ValueTuple<int, int> MstCostume { get; set; }
}

// Namespace: PRISM
public class UnitIdolEqualityComparer : System.Collections.Generic.IEqualityComparer<PRISM.UnitIdol>
{
    public static PRISM.UnitIdolEqualityComparer Instance;
    public bool Equals(PRISM.UnitIdol x, PRISM.UnitIdol y);
    public int GetHashCode(PRISM.UnitIdol obj);
}

// Namespace: PRISM
public class UnitIdolDataIO
{
    private static bool isChangeCloth;
    private static System.Collections.Generic.Dictionary<string, PRISM.UnitIdol> changeClothDic;
    private static System.Collections.Generic.Dictionary<string, PRISM.UnitIdol> changeBaseDic;
    public static void Save(string unitPath, PRISM.UnitIdol[] unitIdolData);
    public static PRISM.UnitIdol[] Load(string unitPath);
    public static PRISM.UnitIdol[] LoadInner(byte[] unitData_asset);
    public static PRISM.UnitIdol[] LoadAndPreLoad(PRISM.DownloadKeyContainer downloadKeyContainer, string unitPath, bool sd);
    public static void PreLoad(PRISM.DownloadKeyContainer downloadKeyContainer, System.Collections.Generic.IEnumerable<PRISM.UnitIdol> unitIdolData, bool sd);
    public static void AddChangeCloth(PRISM.UnitIdol from, PRISM.UnitIdol to);
    private static int[] GetDefaultAccessory(int charaId, int clothId);
    private static int GetDefaultHair(int charaId, int clothId);
    private static int _getAccessoryType(int accessoryId);
    public static System.Collections.Generic.IEnumerable<int> ExceptTypeAccessories(int type, System.Collections.Generic.IEnumerable<int> toAcce, System.Collections.Generic.IEnumerable<int>& fromAcce);
    public static void SetChangeClothEnable(bool torf);
    public static PRISM.UnitIdol ChangeCloth(PRISM.UnitIdol from);
    public static PRISM.UnitIdol[] ChangeClothList(PRISM.UnitIdol[] fromList);
    public static PRISM.UnitIdol[] ForcedChangeCharaList(PRISM.UnitIdol[] fromList, PRISM.UnitIdol[] toList);
    public static void ClearChangeCloth();
    public static void SetChangeClothList(PRISM.UnitIdol[] fromList, PRISM.UnitIdol[] toList);
    public static void SetCasualWearList(PRISM.UnitIdol[] casualWearList);
    public static void SetLiveDressList(PRISM.UnitIdol[] liveDressList);
    public static void ResetCasualWear(int _charaID);

    public class UnitIdolDatas
    {
        public UnitIdolData[] unitIdolData;
    }

    public class UnitIdolData
    {
        public int chara_id;
        public int cloth_id;
        public int hair_id;
        public int[] accessory_ids;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Definitions.MstCostumeSet, int[]> <>9__11_1;
        public static System.Func<PRISM.Definitions.MstCostumeSet, int> <>9__12_1;
        public static System.Func<PRISM.Definitions.MstAccessory, int> <>9__14_2;
        private int[] <GetDefaultAccessory>b__11_1(PRISM.Definitions.MstCostumeSet x);
        private int <GetDefaultHair>b__12_1(PRISM.Definitions.MstCostumeSet x);
        private int <ExceptTypeAccessories>b__14_2(PRISM.Definitions.MstAccessory x);
    }

    private class <>c__DisplayClass11_0
    {
        public int charaId;
        public int clothId;
        private bool <GetDefaultAccessory>b__0(PRISM.Definitions.MstCostumeSet x);
    }

    private class <>c__DisplayClass12_0
    {
        public int charaId;
        public int clothId;
        private bool <GetDefaultHair>b__0(PRISM.Definitions.MstCostumeSet x);
    }

    private class <>c__DisplayClass14_0
    {
        public int type;
        private bool <ExceptTypeAccessories>b__0(int acceid);
        private bool <ExceptTypeAccessories>b__1(PRISM.Definitions.MstAccessory x);
    }
}

// Namespace: PRISM
public class UnitIdolUtility
{
    public static PRISM.UnitIdol CreateHazukiUnitIdol();

    private class <>c__DisplayClass0_0
    {
        public System.DateTime nowTime;
        private bool <CreateHazukiUnitIdol>b__0(PRISM.Definitions.MstLoginBonusCostumeSet x);
    }
}

// Namespace: PRISM
public interface ILegacyLocator
{
    private static PRISM.ILegacyLocator <Instance>k__BackingField;
    public PRISM.ILegacyLocator Instance { get; set; }
    public PRISM.Data.LegacySaveDataContainer SaveData { get; set; }
    public PRISM.Legacy.INotificationManagerForLegacy NotificationManager { get; set; }
    public PRISM.Legacy.IServiceContainerForLegacy ServiceContainer { get; set; }
    public PRISM.ICommonSequencerContainerForLegacy CommonSequencerContainer { get; set; }
    public PRISM.ICrashlyticsForLegacy Crashlytics { get; set; }
    public PRISM.IAnalyticsForLegacy Analytics { get; set; }
    public PRISM.Legacy.ISystemCallForLegacy SystemCall { get; set; }
    public PRISM.Legacy.IButtonGotoTypeProcessorForLegacy ButtonGotoTypeProcessor { get; set; }
    public PRISM.Legacy.ILoadingPresenterForLegacy LoadingPresenter { get; set; }
    public PRISM.ResourceManagement.IResourceLoaderContainer ResourceLoaderContainer { get; set; }
    public PRISM.IConnectingView ConnectingView { get; set; }
    public PRISM.ITutorialBuilder TutorialBuilder { get; set; }
    public PRISM.ITutorialSequenceContext TutorialContext { get; set; }
    public PRISM.Definitions.MasterData MasterData { get; set; }
    public PRISM.IBackKeyObservableForLegacy BackKeyObservable { get; set; }
    public PRISM.IOverlayInstantiatorForLegacy OverlayInstantiator { get; set; }
    public PRISM.Legacy.ILegacyCallerResolver LegacyCallerResolver { get; set; }
    public ENTERPRISE.ViewManager ViewManager { get; set; }
    public UniRx.IReadOnlyReactiveProperty<PRISM.Interactions.ScreenWrapper> ScreenWrapper { get; set; }
    public PRISM.ErrorModalWindow ErrorModalWindow { get; set; }
    public PRISM.Definitions.ScopedReactiveProperty<bool> IsForcePortrait { get; set; }
    public void LaunchAdv(PRISM.Adv.AdvParameter parameter);
    public UnityEngine.AsyncOperation UnloadUnusedResource();
}

// Namespace: PRISM
public interface IPausable
{
    public void Pause(bool pause);
}

// Namespace: PRISM
public class CommonListView`3<TCell, TData, TContext> : FancyScrollView.FancyScrollRect<TData, TContext>
{
    protected float cellSize;
    protected UnityEngine.GameObject cellPrefab;
    protected UnityEngine.GameObject emptyView;
    private UniRx.Subject<int> onSelectionChanged;
    protected float CellSize { get; set; }
    protected UnityEngine.GameObject CellPrefab { get; set; }
    public System.IObservable<int> OnSelectionChanged { get; set; }
    public int SelectedIndex { get; set; }
    public float PaddingTop { get; set; }
    public float PaddingBottom { get; set; }
    public float Spacing { get; set; }
    public System.Action<int> OnCellClicked { get; set; }
    public void SetResourceLoader(PRISM.ResourceManagement.IResourceLoader resourceLoader);
    public void UpdateContents(System.Collections.Generic.IList<TData> items);
    public void ScrollTo(int index, float duration, EasingCore.Ease easing, PRISM.ListViewAlignment alignment, bool withoutNotify);
    public void ScrollTo(int index, float duration, PRISM.ListViewAlignment alignment, bool withoutNotify);
    public void JumpTo(int index, PRISM.ListViewAlignment alignment, bool withoutNotify);
    public void UpdateSelection(int index, bool withoutNotify);
}

// Namespace: PRISM
public class CommonListView`2<TCell, TData> : PRISM.CommonListView<TCell, TData, PRISM.CommonListViewContext>
{
}

// Namespace: PRISM
public class CommonListViewCell`2<TData, TContext> : FancyScrollView.FancyScrollRectCell<TData, TContext>
{
    protected ENTERPRISE.UI.ButtonBase button;
    protected UnityEngine.GameObject selectedFrame;
    public void Initialize();
    public void UpdateContent(TData data);
    private void <Initialize>b__2_0();
}

// Namespace: PRISM
public class CommonListViewCell`1<T> : PRISM.CommonListViewCell<T, PRISM.CommonListViewContext>
{
}

// Namespace: PRISM
public class CommonListViewContext : FancyScrollView.FancyScrollRectContext, PRISM.ICommonListViewContext, FancyScrollView.IFancyScrollRectContext
{
    private int <SelectedIndex>k__BackingField;
    private System.Action<int> <OnCellClicked>k__BackingField;
    private System.Action<int> <OnCellLongPressed>k__BackingField;
    private PRISM.ResourceManagement.IResourceLoader <ResourceLoader>k__BackingField;
    public int SelectedIndex { get; set; }
    public System.Action<int> OnCellClicked { get; set; }
    public System.Action<int> OnCellLongPressed { get; set; }
    public PRISM.ResourceManagement.IResourceLoader ResourceLoader { get; set; }
}

// Namespace: PRISM
public interface ICommonListViewContext : FancyScrollView.IFancyScrollRectContext
{
    public int SelectedIndex { get; set; }
    public System.Action<int> OnCellClicked { get; set; }
    public System.Action<int> OnCellLongPressed { get; set; }
    public PRISM.ResourceManagement.IResourceLoader ResourceLoader { get; set; }
}

// Namespace: PRISM
public enum ListViewAlignment : System.Enum
{
    public int value__;
    public static PRISM.ListViewAlignment Upper;
    public static PRISM.ListViewAlignment Middle;
    public static PRISM.ListViewAlignment Lower;
}

// Namespace: PRISM
public class ListViewAlignmentExtensions
{
    public static float ToFloat(PRISM.ListViewAlignment alignment);
}

// Namespace: PRISM
public interface IProduceCardDetailPopupCaller : PRISM.Legacy.ILegacyCaller
{
    public Cysharp.Threading.Tasks.UniTask ShowAsync(PRISM.Module.Networking.IProduceCardStatus produceCard, System.Threading.CancellationToken ct);
}

// Namespace: PRISM
public enum RewardClearStatusType : System.Enum
{
    public int value__;
    public static PRISM.RewardClearStatusType NotCleared;
    public static PRISM.RewardClearStatusType Cleared;
    public static PRISM.RewardClearStatusType NewClear;
}

// Namespace: PRISM
public class SerializableNestedArray`1<T> : System.Collections.Generic.IReadOnlyList<T>, System.Collections.Generic.IEnumerable<T>, System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyCollection<T>
{
    private T[] array;
    public T Item { get; set; }
    public int Count { get; set; }
    public System.Collections.Generic.IEnumerator<T> GetEnumerator();
    private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
}

// Namespace: PRISM
public class SimpleArrowAnimation : UnityEngine.MonoBehaviour
{
    private UnityEngine.RectTransform leftArrow;
    private UnityEngine.RectTransform rightArrow;
    private float punchStrength;
    private float punchDuration;
    private void Start();
    private void _animate(UnityEngine.RectTransform arrow, int direction);
}

// Namespace: PRISM
public class SimpleSlideAnimation : UnityEngine.MonoBehaviour
{
    private UnityEngine.RectTransform body;
    private UnityEngine.CanvasGroup canvasGroup;
    private float duration;
    private UnityEngine.Vector2 inPos;
    private UnityEngine.Vector2 outPos;
    public float Duration { get; set; }
    public Cysharp.Threading.Tasks.UniTask SlideInAsync();
    public Cysharp.Threading.Tasks.UniTask SlideOutAsync();
    private Cysharp.Threading.Tasks.UniTask _toggleAsync(bool isIn);

    private struct <_toggleAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.SimpleSlideAnimation <>4__this;
        public bool isIn;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class StackableDisposable : System.IDisposable
{
    private System.IDisposable baseDisposable;
    private int count;
    public void Increment();
    public void Dispose();
}

// Namespace: PRISM
public class AdvTitleViewModel : PRISM.IAdvTitleViewModel
{
    private string <MainTitle>k__BackingField;
    private string <SubTitle>k__BackingField;
    private bool <IsStoryTitle>k__BackingField;
    public string MainTitle { get; set; }
    public string SubTitle { get; set; }
    public bool IsStoryTitle { get; set; }
}

// Namespace: PRISM
public class AdvTitleViewModelWithCharacterBaseIcon : PRISM.IAdvTitleViewModel
{
    private PRISM.AdvTitleViewModel baseViewModel;
    private int <CharacterId>k__BackingField;
    public string MainTitle { get; set; }
    public string SubTitle { get; set; }
    public bool IsStoryTitle { get; set; }
    public int CharacterId { get; set; }
}

// Namespace: PRISM
public class AdvTitleViewModelWithProduceIdolIcon : PRISM.IAdvTitleViewModel
{
    private PRISM.AdvTitleViewModel baseViewModel;
    private int <MstProduceIdolId>k__BackingField;
    public string MainTitle { get; set; }
    public string SubTitle { get; set; }
    public bool IsStoryTitle { get; set; }
    public int MstProduceIdolId { get; set; }
}

// Namespace: PRISM
public class AdvTitleViewModelWithSupportCharacterIcon : PRISM.IAdvTitleViewModel
{
    private PRISM.AdvTitleViewModel baseViewModel;
    private int <MstSupportCharacterId>k__BackingField;
    public string MainTitle { get; set; }
    public string SubTitle { get; set; }
    public bool IsStoryTitle { get; set; }
    public int MstSupportCharacterId { get; set; }
}

// Namespace: PRISM
public class AdvTitleViewModelWithUnitIcon : PRISM.IAdvTitleViewModel
{
    private PRISM.AdvTitleViewModel baseViewModel;
    private int <UnitId>k__BackingField;
    public string MainTitle { get; set; }
    public string SubTitle { get; set; }
    public bool IsStoryTitle { get; set; }
    public int UnitId { get; set; }
}

// Namespace: PRISM
public interface IAdvTitleViewModel
{
    public string MainTitle { get; set; }
    public string SubTitle { get; set; }
    public bool IsStoryTitle { get; set; }
}

// Namespace: PRISM
public interface IStoryThumbnailViewModel
{
    public static PRISM.IStoryThumbnailViewModel Empty;
}

// Namespace: PRISM
public class ProduceIdolScenarioThumbnailViewModel : PRISM.IStoryThumbnailViewModel
{
    private int <MstProduceIdolId>k__BackingField;
    private int <Rarity>k__BackingField;
    public int MstProduceIdolId { get; set; }
    public int Rarity { get; set; }
}

// Namespace: PRISM
public class StoryThumbnailViewModel : PRISM.IStoryThumbnailViewModel
{
    private string <ThumbnailImageKey>k__BackingField;
    public string ThumbnailImageKey { get; set; }
}

// Namespace: PRISM
public class SupportCharacterScenarioThumbnailViewModel : PRISM.IStoryThumbnailViewModel
{
    private int <MstSupportCharacterId>k__BackingField;
    private int <Rarity>k__BackingField;
    public int MstSupportCharacterId { get; set; }
    public int Rarity { get; set; }
}

// Namespace: PRISM
public class CostumeCategoryExtensions
{
    public static ProductType ToProductType(PRISM.Definitions.CostumeCategory category);
    public static AccessoryType ToAccessoryType(PRISM.Definitions.CostumeCategory category);
    public static PRISM.Definitions.CostumeCategory ToCostumeCategory(AccessoryType type);
    public static System.Collections.Generic.IEnumerable<PRISM.Definitions.CostumePartType> GetPartTypes(PRISM.Definitions.CostumeCategory category);

    private class <>c__DisplayClass3_0
    {
        public PRISM.Definitions.CostumeCategory category;
        private bool <GetPartTypes>b__0(PRISM.Definitions.CostumePartType x);
    }
}

// Namespace: PRISM
public class CostumePartMatcher
{
    private PRISM.Domain.ICachedCostumeService costumeService;
    private CostumeType costumeType;
    private int characterId;
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ICostumeStatus> GetCostumes(bool isUnlimited);
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IHairstyleStatus> GetHairstyles();
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IAccessoryStatus> GetAccessories();
    private bool _isMatchType(CostumeType type);
    private bool <GetHairstyles>b__5_0(PRISM.Module.Networking.IHairstyleStatus x);
    private bool <GetHairstyles>b__5_1(PRISM.Module.Networking.IHairstyleStatus x);
    private bool <GetAccessories>b__6_0(PRISM.Module.Networking.IAccessoryStatus x);
    private bool <GetAccessories>b__6_1(PRISM.Module.Networking.IAccessoryStatus x);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.ICostumeStatus, bool> <>9__4_6;
        public static System.Func<PRISM.Module.Networking.ICostumeStatus, int> <>9__4_10;
        public static System.Func<PRISM.Module.Networking.ICostumeStatus, int> <>9__4_2;
        private bool <GetCostumes>b__4_6(PRISM.Module.Networking.ICostumeStatus x);
        private int <GetCostumes>b__4_10(PRISM.Module.Networking.ICostumeStatus x);
        private int <GetCostumes>b__4_2(PRISM.Module.Networking.ICostumeStatus x);
    }

    private class <>c__DisplayClass4_0
    {
        public bool isUnlimited;
        public PRISM.CostumePartMatcher <>4__this;
        public PRISM.Definitions.SortedMasterTable<int, PRISM.Definitions.MstIdol> mstIdols;
        public PRISM.Definitions.ListComparer<PRISM.Module.Networking.ICostumeStatus> comparer;
        public PRISM.Definitions.SortedMasterTable<int, PRISM.Definitions.MstCostume> mstCostume;
        private bool <GetCostumes>b__5(PRISM.Module.Networking.ICostumeStatus x);
        private bool <GetCostumes>b__7(PRISM.Module.Networking.ICostumeStatus x);
        private bool <GetCostumes>b__8(PRISM.Module.Networking.ICostumeStatus x);
        private bool <GetCostumes>b__9(PRISM.Module.Networking.ICostumeStatus x);
        private bool <GetCostumes>b__0(PRISM.Module.Networking.ICostumeStatus x);
        private bool <GetCostumes>b__1(PRISM.Module.Networking.ICostumeStatus x);
        private PRISM.Module.Networking.ICostumeStatus <GetCostumes>b__3(System.Linq.IGrouping<int, PRISM.Module.Networking.ICostumeStatus> x);
        private bool <GetCostumes>b__4(PRISM.Module.Networking.ICostumeStatus x);
    }
}

// Namespace: PRISM
public class CostumePartTypeExtensions
{
    public static ProductType ToProductType(PRISM.Definitions.CostumePartType partType);
    public static AccessoryType ToAccessoryType(PRISM.Definitions.CostumePartType partType);
    public static PRISM.Definitions.CostumePartType ToCostumePartType(AccessoryType type);
    public static PRISM.Definitions.CostumeCategory GetTabCategory(PRISM.Definitions.CostumePartType partType);
    public static int GetOrder(PRISM.Definitions.CostumePartType partType);
}

// Namespace: PRISM
public class CostumeUtility
{
    public static System.ValueTuple<PRISM.Domain.CostumeSetData, bool> CreateOtherSettingCharacterCostumeSet(PRISM.Domain.ICachedCostumeService service, PRISM.Module.Networking.IIdolBaseStatus idolBase, IdolBaseCostumeTargetSceneType sceneType);
    public static PRISM.Definitions.MstCostumeSet GetDefaultCasualCostumeSetting(int mstIdolId);
    public static string GetCostumeSetName(int id);
    public static System.Collections.Generic.IEnumerable<AccessoryType> GetValidAccessoryTypes();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<AccessoryType, bool> <>9__3_0;
        private bool <GetValidAccessoryTypes>b__3_0(AccessoryType x);
    }

    private class <>c__DisplayClass0_0
    {
        public PRISM.Module.Networking.IIdolBaseStatus idolBase;
        public IdolBaseCostumeTargetSceneType sceneType;
        public PRISM.Domain.ICachedCostumeService service;
        private System.ValueTuple<PRISM.Domain.CostumeSetData, bool> <CreateOtherSettingCharacterCostumeSet>g__getCasualCostumeSetting|0();
        private bool <CreateOtherSettingCharacterCostumeSet>b__1(PRISM.Module.Networking.IIdolBaseCostumeStatus x);
    }
}

// Namespace: PRISM
public class ProduceIdolServiceExtension
{
    public static Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.IEnumerable<PRISM.Common.Model.PIdolIcon>> GetIdolIconListAsync(PRISM.Domain.IProduceIdolService produceIdolService, System.Threading.CancellationToken ct, bool withEventBonus);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IProduceIdolStatus, PRISM.Common.Model.PIdolIcon> <>9__0_0;
        private PRISM.Common.Model.PIdolIcon <GetIdolIconListAsync>b__0_0(PRISM.Module.Networking.IProduceIdolStatus x);
    }

    private struct <GetIdolIconListAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.Collections.Generic.IEnumerable<PRISM.Common.Model.PIdolIcon>> <>t__builder;
        public PRISM.Domain.IProduceIdolService produceIdolService;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetProduceIdolListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class ResourceVersionSyncUtility
{
    public static Cysharp.Threading.Tasks.UniTask InitializeAsync(System.Action<float, float> progressCallback);
    public static bool NeedsCatalogDatabaseRecovery();
    public static Cysharp.Threading.Tasks.UniTask RecoverCatalogDB(System.Action<float, float> progressCallback);

    private struct <InitializeAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Action<float, float> progressCallback;
        private System.IDisposable <_>5__2;
        private PRISM.ResourceManagement.ResourceDownloader <dl>5__3;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <RecoverCatalogDB>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Action<float, float> progressCallback;
        private System.IDisposable <_>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class LiveUnitSlotGenerator
{
    public static PRISM.Module.Networking.ILiveUnitSlotStatus NewLiveUnitSlot(int slot, PRISM.Live.LiveIdol idol);
}

// Namespace: PRISM
public class MvIdolGenerator
{
    public static PRISM.Module.Networking.IMvIdolStatus NewMvIdol(PRISM.Live.ILiveMVIdol idol);
}

// Namespace: PRISM
public class MvUnitSlotGenerator
{
    public static PRISM.Module.Networking.IMvUnitSlotStatus NewMvUnitSlot(int slot, PRISM.Live.ILiveMVIdol idol);
}

// Namespace: PRISM
public class ProduceCardContentExtensions
{
    private static string ProduceCardDescription;
    private static System.Text.RegularExpressions.Regex ReplaceRegex;
    private static System.Text.RegularExpressions.Regex ReplaceRegexAvoidEffect;
    public static string GetBaseDiscription(PRISM.Module.Networking.IProduceCardContentStatus cardContent);
}

// Namespace: PRISM
public interface IDressUpRoomConnector
{
}

// Namespace: PRISM
public interface IFittingRoomConnector
{
}

// Namespace: PRISM
public class InitialScene : UnityEngine.MonoBehaviour
{
    private void Start();
}

// Namespace: PRISM
public class SuppressBackgroundDownloadScope
{
    public static System.IDisposable Create();
}

// Namespace: PRISM
public class MissionNoticeView : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UITextMeshProUGUI missionCompletText;
    private ENTERPRISE.UI.UITextMeshProUGUI missionGroupText;
    private UnityEngine.UI.Image checkMarkImg;
    private UnityEngine.UI.Image missionGroupBackImg;
    private UnityEngine.Animator animator;
    private UnityEngine.GameObject missionGroupObject;
    public UnityEngine.Animator Animator { get; set; }
    public void Setup(int missionId, int missionTypeId, int missionCategoryId, int missionAddMore);
}

// Namespace: PRISM
public interface IAllSongLiveEventConnector
{
}

// Namespace: PRISM
public interface ILiveEventConnector
{
}

// Namespace: PRISM
public interface IMedalGashaConnector
{
}

// Namespace: PRISM
public interface ITechnicalChallengeTopConnector
{
}

// Namespace: PRISM
public class LiveEventUtility
{
    public static string EventTitleTextKey;
    public static string ChallengeTourTitleTextKey;
    public static string GetCharacterRandomPrefabPath(int eventId);
    public static Cysharp.Threading.Tasks.UniTask PlayBgmAsync(PRISM.Definitions.MstEvent eventMaster, System.Threading.CancellationToken cancellationToken);
}

// Namespace: PRISM
public class ColorExtensions
{
    public static UnityEngine.Color AlphaBlend(UnityEngine.Color dest, UnityEngine.Color src);
}

// Namespace: PRISM
public class CriAtomBaseExtensions
{
    public static bool IsEnd(Status status);
}

// Namespace: PRISM
public class EnumerableExtensions
{
    public static System.Linq.IOrderedEnumerable<T> OrderByIdolStandingPositions<T>(System.Collections.Generic.IEnumerable<T> self, int unitId, System.Func<T, int> characterIdSelector);

    private class <>c__DisplayClass0_0`1<T>
    {
        public System.Func<T, int> characterIdSelector;
        public System.Collections.Generic.IReadOnlyList<int> orders;
        private int <OrderByIdolStandingPositions>b__0(T x);
    }
}

// Namespace: PRISM
public class GameObjectExtensions
{
    public static void SetActiveFromParent(UnityEngine.GameObject self, bool active);
    public static void SetOn(System.Collections.Generic.IList<UnityEngine.GameObject> gameObjects, int onIndex);
}

// Namespace: PRISM
public class GraphicExtensions
{
    private static UnityEngine.Material loadingMaterial;
    private static System.Collections.Generic.Dictionary<UnityEngine.UI.Graphic, System.ValueTuple<UnityEngine.Material, UnityEngine.Color>> originalSettings;
    public static void SetAlpha(UnityEngine.UI.Graphic graphic, float alpha);
    public static Cysharp.Threading.Tasks.UniTask BindAsync(Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> textureLoadingTask, UnityEngine.UI.RawImage rawImage, System.Threading.CancellationToken cancellationToken);
    public static Cysharp.Threading.Tasks.UniTask BindAsync(Cysharp.Threading.Tasks.UniTask<UnityEngine.Sprite> spriteLoadingTask, UnityEngine.UI.Image image, System.Threading.CancellationToken cancellationToken);
    private static Cysharp.Threading.Tasks.UniTask _bindAsync<TSource, TGraphic>(Cysharp.Threading.Tasks.UniTask<TSource> loadingTask, TGraphic graphic, System.Action<TSource, TGraphic> onLoad, System.Threading.CancellationToken cancellationToken);
    public static void Clean();
    private static void <_bindAsync>g__FinishLoading|5_0<TSource, TGraphic>(TSource source, <>c__DisplayClass5_0<TSource, TGraphic>& );

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<UnityEngine.Texture2D, UnityEngine.UI.RawImage> <>9__3_0;
        public static System.Action<UnityEngine.Sprite, UnityEngine.UI.Image> <>9__4_0;
        public static System.Func<System.Collections.Generic.KeyValuePair<UnityEngine.UI.Graphic, System.ValueTuple<UnityEngine.Material, UnityEngine.Color>>, bool> <>9__6_0;
        private void <BindAsync>b__3_0(UnityEngine.Texture2D t, UnityEngine.UI.RawImage g);
        private void <BindAsync>b__4_0(UnityEngine.Sprite s, UnityEngine.UI.Image g);
        private bool <Clean>b__6_0(System.Collections.Generic.KeyValuePair<UnityEngine.UI.Graphic, System.ValueTuple<UnityEngine.Material, UnityEngine.Color>> x);
    }

    private struct <>c__DisplayClass5_0`2<TSource, TGraphic> : System.ValueType
    {
        public System.Threading.CancellationToken cancellationToken;
        public TGraphic graphic;
        public bool hasOriginalSetting;
        public System.ValueTuple<UnityEngine.Material, UnityEngine.Color> originalSetting;
        public System.Action<TSource, TGraphic> onLoad;
    }

    private struct <_bindAsync>d__5`2<TSource, TGraphic> : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Threading.CancellationToken cancellationToken;
        public TGraphic graphic;
        public System.Action<TSource, TGraphic> onLoad;
        public Cysharp.Threading.Tasks.UniTask<TSource> loadingTask;
        private <>c__DisplayClass5_0<TSource, TGraphic> <>8__1;
        private Awaiter<TSource> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public struct AutoReleaseScope`1<T> : System.ValueType, System.IDisposable
{
    private UnityEngine.Pool.IObjectPool<T> pool;
    public T instance;
    public void Dispose();
}

// Namespace: PRISM
public class ObjectPoolExtension
{
    public static PRISM.AutoReleaseScope<T> GetAutoReleaseScope<T>(UnityEngine.Pool.IObjectPool<T> pool, T& instance);
}

// Namespace: PRISM
public class PointerEventDataExtensions
{
    public static bool IsValidEvent(UnityEngine.EventSystems.PointerEventData eventData);
    public static System.IObservable<UnityEngine.EventSystems.PointerEventData> AsValidEventObservable(System.IObservable<UnityEngine.EventSystems.PointerEventData> self);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.EventSystems.PointerEventData, bool> <>9__1_0;
        private bool <AsValidEventObservable>b__1_0(UnityEngine.EventSystems.PointerEventData e);
    }
}

// Namespace: PRISM
public class RectTransformExtensions
{
    public static void SetAnchoredPositionX(UnityEngine.RectTransform self, float x);
    public static void AddAnchoredPositionX(UnityEngine.RectTransform self, float x);
    public static void SetAnchoredPositionY(UnityEngine.RectTransform self, float y);
    public static void AddAnchoredPositionY(UnityEngine.RectTransform self, float y);
    public static void SetSizeDeltaX(UnityEngine.RectTransform self, float x);
    public static void AddSizeDeltaX(UnityEngine.RectTransform self, float x);
    public static void SetSizeDeltaY(UnityEngine.RectTransform self, float y);
    public static void AddSizeDeltaY(UnityEngine.RectTransform self, float y);
}

// Namespace: PRISM
public class TextureExtensions
{
    public static void SetAutoDestroy(UnityEngine.Texture targetTex, UnityEngine.GameObject go);
    public static UnityEngine.Texture2D Copy(UnityEngine.Texture sourceTexture);

    private class <>c__DisplayClass0_0
    {
        public UnityEngine.Texture targetTex;
        public UniRx.CompositeDisposable disposables;
        private void <SetAutoDestroy>b__0(UniRx.Unit _);
    }
}

// Namespace: PRISM
public class ToggleExtensions
{
    public static void SeOnToggleWithSE(UnityEngine.UI.Toggle toggle, System.Action<bool> onToggle);
    public static void SetOnToggle(ENTERPRISE.UI.ToggleButton toggleButton, System.Action<bool> onToggle);

    private class <>c__DisplayClass0_0
    {
        public System.Action<bool> onToggle;
        private void <SeOnToggleWithSE>b__0(bool isOn);
    }

    private class <>c__DisplayClass1_0
    {
        public ENTERPRISE.UI.ToggleButton toggleButton;
        public System.Action<bool> onToggle;
        private void <SetOnToggle>b__0();
    }
}

// Namespace: PRISM
public class TransformExtensions
{
    public static void DestroyChildren(UnityEngine.Transform self);
    public static string GetPath(UnityEngine.Transform self);
    public static System.Collections.Generic.IEnumerable<UnityEngine.Transform> GetParents(UnityEngine.Transform self);
    public static System.Collections.Generic.IEnumerable<UnityEngine.Transform> GetChildren(UnityEngine.Transform self);
    public static void SetPositionX(UnityEngine.Transform self, float x);
    public static void AddPositionX(UnityEngine.Transform self, float x);
    public static void SetPositionY(UnityEngine.Transform self, float y);
    public static void AddPositionY(UnityEngine.Transform self, float y);
    public static void SetPositionZ(UnityEngine.Transform self, float z);
    public static void AddPositionZ(UnityEngine.Transform self, float z);
    public static void SetPositionXY(UnityEngine.Transform self, float x, float y);
    public static void AddPositionXY(UnityEngine.Transform self, float x, float y);
    public static void SetPositionYZ(UnityEngine.Transform self, float y, float z);
    public static void AddPositionYZ(UnityEngine.Transform self, float y, float z);
    public static void SetPositionXZ(UnityEngine.Transform self, float x, float z);
    public static void AddPositionXZ(UnityEngine.Transform self, float x, float z);
    public static void SetLocalPositionX(UnityEngine.Transform self, float x);
    public static void AddLocalPositionX(UnityEngine.Transform self, float x);
    public static void SetLocalPositionY(UnityEngine.Transform self, float y);
    public static void AddLocalPositionY(UnityEngine.Transform self, float y);
    public static void SetLocalPositionZ(UnityEngine.Transform self, float z);
    public static void AddLocalPositionZ(UnityEngine.Transform self, float z);
    public static void SetLocalPositionXY(UnityEngine.Transform self, float x, float y);
    public static void AddLocalPositionXY(UnityEngine.Transform self, float x, float y);
    public static void SetLocalPositionYZ(UnityEngine.Transform self, float y, float z);
    public static void AddLocalPositionYZ(UnityEngine.Transform self, float y, float z);
    public static void SetLocalPositionXZ(UnityEngine.Transform self, float x, float z);
    public static void AddLocalPositionXZ(UnityEngine.Transform self, float x, float z);
    public static void SetLocalScaleX(UnityEngine.Transform self, float x);
    public static void AddLocalScaleX(UnityEngine.Transform self, float x);
    public static void SetLocalScaleY(UnityEngine.Transform self, float y);
    public static void AddLocalScaleY(UnityEngine.Transform self, float y);
    public static void SetLocalScaleZ(UnityEngine.Transform self, float z);
    public static void AddLocalScaleZ(UnityEngine.Transform self, float z);
    public static void SetLocalScaleXY(UnityEngine.Transform self, float x, float y);
    public static void AddLocalScaleXY(UnityEngine.Transform self, float x, float y);
    public static void SetLocalScaleYZ(UnityEngine.Transform self, float y, float z);
    public static void AddLocalScaleYZ(UnityEngine.Transform self, float y, float z);
    public static void SetLocalScaleXZ(UnityEngine.Transform self, float x, float z);
    public static void AddLocalScaleXZ(UnityEngine.Transform self, float x, float z);
    public static void SetEulerAnglesX(UnityEngine.Transform self, float x);
    public static void AddEulerAnglesX(UnityEngine.Transform self, float x);
    public static void SetEulerAnglesY(UnityEngine.Transform self, float y);
    public static void AddEulerAnglesY(UnityEngine.Transform self, float y);
    public static void SetEulerAnglesZ(UnityEngine.Transform self, float z);
    public static void AddEulerAnglesZ(UnityEngine.Transform self, float z);
    public static void SetEulerAnglesXY(UnityEngine.Transform self, float x, float y);
    public static void AddEulerAnglesXY(UnityEngine.Transform self, float x, float y);
    public static void SetEulerAnglesYZ(UnityEngine.Transform self, float y, float z);
    public static void AddEulerAnglesYZ(UnityEngine.Transform self, float y, float z);
    public static void SetEulerAnglesXZ(UnityEngine.Transform self, float x, float z);
    public static void AddEulerAnglesXZ(UnityEngine.Transform self, float x, float z);
    public static void SetLocalEulerAnglesX(UnityEngine.Transform self, float x);
    public static void AddLocalEulerAnglesX(UnityEngine.Transform self, float x);
    public static void SetLocalEulerAnglesY(UnityEngine.Transform self, float y);
    public static void AddLocalEulerAnglesY(UnityEngine.Transform self, float y);
    public static void SetLocalEulerAnglesZ(UnityEngine.Transform self, float z);
    public static void AddLocalEulerAnglesZ(UnityEngine.Transform self, float z);
    public static void SetLocalEulerAnglesXY(UnityEngine.Transform self, float x, float y);
    public static void AddLocalEulerAnglesXY(UnityEngine.Transform self, float x, float y);
    public static void SetLocalEulerAnglesYZ(UnityEngine.Transform self, float y, float z);
    public static void AddLocalEulerAnglesYZ(UnityEngine.Transform self, float y, float z);
    public static void SetLocalEulerAnglesXZ(UnityEngine.Transform self, float x, float z);
    public static void AddLocalEulerAnglesXZ(UnityEngine.Transform self, float x, float z);

    private class <GetChildren>d__3 : System.Collections.Generic.IEnumerable<UnityEngine.Transform>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<UnityEngine.Transform>, System.Collections.IEnumerator, System.IDisposable
    {
        private int <>1__state;
        private UnityEngine.Transform <>2__current;
        private int <>l__initialThreadId;
        private UnityEngine.Transform self;
        public UnityEngine.Transform <>3__self;
        private int <i>5__2;
        private System.Collections.Generic.IEnumerator<UnityEngine.Transform> <>7__wrap2;
        private UnityEngine.Transform System.Collections.Generic.IEnumerator<UnityEngine.Transform>.Current { get; set; }
        private object System.Collections.IEnumerator.Current { get; set; }
        private void System.IDisposable.Dispose();
        private bool MoveNext();
        private void <>m__Finally1();
        private void System.Collections.IEnumerator.Reset();
        private System.Collections.Generic.IEnumerator<UnityEngine.Transform> System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator();
        private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
    }

    private class <GetParents>d__2 : System.Collections.Generic.IEnumerable<UnityEngine.Transform>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<UnityEngine.Transform>, System.Collections.IEnumerator, System.IDisposable
    {
        private int <>1__state;
        private UnityEngine.Transform <>2__current;
        private int <>l__initialThreadId;
        private UnityEngine.Transform self;
        public UnityEngine.Transform <>3__self;
        private UnityEngine.Transform System.Collections.Generic.IEnumerator<UnityEngine.Transform>.Current { get; set; }
        private object System.Collections.IEnumerator.Current { get; set; }
        private void System.IDisposable.Dispose();
        private bool MoveNext();
        private void System.Collections.IEnumerator.Reset();
        private System.Collections.Generic.IEnumerator<UnityEngine.Transform> System.Collections.Generic.IEnumerable<UnityEngine.Transform>.GetEnumerator();
        private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
    }
}

// Namespace: PRISM
public interface IAnalyticsForLegacy
{
    public void SetUserId(string userId);
    public void TrackLogin();
    public void TrackTutorialComplete();
    public void TrackPurchase(int amount, string currency);
    public void LogEvent(string message);
    public void LogEvent(string eventName, string name, int value);
    public void LogException(System.Exception exception);
}

// Namespace: PRISM
public interface IBackKeyObservableForLegacy : System.IObservable<UniRx.Unit>
{
    public void ShowDisabledMessage();
    public System.IDisposable CreateDisableScope();
}

// Namespace: PRISM
public interface ICommonSequencerContainerForLegacy
{
    public PRISM.IErrorPopupSequencerForLegacy Error { get; set; }
    public PRISM.IHowToPlayPopupSequencerForLegacy HowToPlay { get; set; }
    public PRISM.Adapters.IMessagePopupBuilderEmpty CreateMessagePopupBuilder(PopupSizeType sizeType, bool isEnableOutOfRange);
    public PRISM.Adapters.IMessagePopupBuilderEmpty CreateMessageScrollPopupBuilder(PopupSizeType sizeType, bool isEnableOutOfRange);
    public Cysharp.Threading.Tasks.UniTask ShowMessagePopupAsync(PRISM.Definitions.LocalizationKey title, PRISM.Definitions.LocalizationKey message, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask ShowItemDetailAsync(PRISM.Domain.ProductKey productKey, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ShowGlobalMenuAsync(System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask ShowReceiveRewardPopupAsync(PRISM.Adapters.Common.ReceiveRewardPopupViewModel viewModel, System.Threading.CancellationToken cancellationToken);
}

// Namespace: PRISM
public interface ICrashlyticsForLegacy
{
    public void SetUserId(string id);
    public void Log(string log);
    public void LogException(System.Exception exception);
    public void SetCustomKey(string key, string value);
}

// Namespace: PRISM
public interface IErrorPopupSequencerForLegacy
{
    public Cysharp.Threading.Tasks.UniTask ShowAsync(string message, bool canRetry, string title);
    public Cysharp.Threading.Tasks.UniTask ShowClientErrorAsync(int clientErrorCode, bool canRetry, string title);
    public Cysharp.Threading.Tasks.UniTask ShowTitleJumpAsync(string errorCode);
    public Cysharp.Threading.Tasks.UniTask<bool> ShowAPIErrorAsync(PRISM.Module.Networking.INetworkError networkError, bool canRetry);
}

// Namespace: PRISM
public interface IHowToPlayPopupSequencerForLegacy
{
    public Cysharp.Threading.Tasks.UniTask ShowAsync(PRISM.HowToPlayPopupResourceConfig config, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ShowAsync(string configKey, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<bool> ShowIfUnreadAsync(string configKey, string additionalKey, System.Threading.CancellationToken ct);
}

// Namespace: PRISM
public interface IOverlayInstantiatorForLegacy
{
    public UnityEngine.GameObject Instantiate(UnityEngine.GameObject prefab, bool enableBackgroundBlur);
}

// Namespace: PRISM
public class DMMGameGuard
{
    private static int NPGAMEMON_UNDEFINED;
    private static int NPGAMEMON_COMM_ERROR;
    private static int NPGAMEMON_COMM_CLOSE;
    private static int NPGAMEMON_SPEEDHACK;
    private static int NPGAMEMON_GAMEHACK_KILLED;
    private static int NPGAMEMON_GAMEHACK_DETECT;
    private static int NPGAMEMON_INIT_ERROR;
    private static int NPGAMEMON_GAMEHACK_DOUBT;
    private static int NPGAMEMON_CHECK_CSAUTH;
    private static int NPGAMEMON_CHECK_CSAUTH2;
    private static int NPGAMEMON_GAMEHACK_REPORT;
    private static int NPGAMEMON_CHECK_CSAUTH3;
    private static int NPGAMEMON_ERROR_EXIST;
    private static int NPGAMEMON_ERROR_CREATE;
    private static int NPGAMEMON_ERROR_NPSCAN;
    private static int NPGAMEMON_ERROR_THREAD;
    private static int NPGAMEMON_ERROR_INIT;
    private static int NPGAMEMON_ERROR_GAME_EXIST;
    private static int NPGAMEMON_ERROR_AUTH_INI;
    private static int NPGAMEMON_ERROR_AUTH_NPGMUP;
    private static int NPGAMEMON_ERROR_AUTH_GAMEMON;
    private static int NPGAMEMON_ERROR_AUTH_NEWUP;
    private static int NPGAMEMON_ERROR_AUTH_GAMEGUARD;
    private static int NPGAMEMON_ERROR_AUTH_DLL;
    private static int NPGAMEMON_ERROR_DECRYPT;
    private static int NPGAMEMON_ERROR_CORRUPT_INI;
    private static int NPGAMEMON_ERROR_CORRUPT_INI2;
    private static int NPGAMEMON_ERROR_NFOUND_INI;
    private static int NPGAMEMON_ERROR_NFOUND_NPGMUP;
    private static int NPGAMEMON_ERROR_NFOUND_NEWUP;
    private static int NPGAMEMON_ERROR_NFOUND_GG;
    private static int NPGAMEMON_ERROR_NFOUND_GM;
    private static int NPGAMEMON_ERROR_CRYPTOAPI;
    private static int NPGAMEMON_ERROR_COMM;
    private static int NPGAMEMON_ERROR_EXECUTE;
    private static int NPGAMEMON_ERROR_EVENT;
    private static int NPGAMEMON_ERROR_NPGMUP;
    private static int NPGAMEMON_ERROR_MOVE_INI;
    private static int NPGAMEMON_ERROR_MOVE_NEWUP;
    private static int NPGAMEMON_ERROR_ILLEGAL_PRG;
    private static int NPGAMEMON_ERROR_GAMEMON;
    private static int NPGAMEMON_ERROR_SPEEDCHECK;
    private static int NPGAMEMON_ERROR_GAMEGUARD;
    private static int NPGMUP_ERROR_PARAM;
    private static int NPGMUP_ERROR_INIT;
    private static int NPGMUP_ERROR_DOWNCFG;
    private static int NPGMUP_ERROR_ABORT;
    private static int NPGMUP_ERROR_AUTH;
    private static int NPGMUP_ERROR_AUTH_INI;
    private static int NPGMUP_ERROR_DECRYPT;
    private static int NPGMUP_ERROR_CONNECT;
    private static int NPGMUP_ERROR_INI;
    private static int NPGG_ERROR_COLLISION;
    private static int NPGAMEMON_SUCCESS;
    private static bool _bAppExit;
    private static string _strMsg;
    private static int _errCode;
    private static bool _isInit;
    private static bool _isCheck;
    private static System.IDisposable _checkDisposable;
    public static void SetCallbackToGameMon(NPGMCALLBACK fnCallback);
    public static uint PreInitNPGameMonW(string szGameName);
    public static uint InitNPGameMon();
    public static bool CloseNPGameMon();
    public static void SetHwndToGameMon(System.IntPtr hWnd);
    public static bool SendUserIDToGameMonW(string szID);
    public static uint CheckNPGameMon();
    public static bool SendCSAuth3ToGameMon(System.IntPtr pbPacket, uint dwPacketSize, uint dwServerNumber);
    public static System.IntPtr GetCSAuth3CallbackData(uint& pdwServerNumber, uint& pdwPacketSize);
    private static System.IntPtr GetActiveWindow();
    public static System.IntPtr FindWindow(string className, string windowName);
    public static void Setup();
    public static void OnApplicationQuit();
    public static void SetCheckMode(bool isCheck);
    public static int NPGameMonCallback(uint dwMsg, uint dwArg);

    public class NPGMCALLBACK : System.MulticastDelegate
    {
        public int Invoke(uint dwMsg, uint dwArg);
        public System.IAsyncResult BeginInvoke(uint dwMsg, uint dwArg, System.AsyncCallback callback, object object);
        public int EndInvoke(System.IAsyncResult result);
    }

    private class <>O
    {
        public static NPGMCALLBACK <0>__NPGameMonCallback;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<long> <>9__74_0;
        private void <SetCheckMode>b__74_0(long x);
    }
}

// Namespace: PRISM
public class GGIregualDetector : PRISM.IGGIregualDetector
{
    private bool _isError;
    private int _result;
    private static bool _isPopupReady;
    private static bool _isShowPopup;
    public PRISM.GGIregualDetector Instance { get; set; }
    public int Result { get; set; }
    public void Start();
    public void End();
    public void SetUserId(string userId);
    public void SetError(int code);
    public void CheckErrorPopup();
    public void ShowPopup(int code);

    private class <>c
    {
        public static <>c <>9;
        public static System.Action <>9__13_0;
        private void <ShowPopup>b__13_0();
    }
}

// Namespace: PRISM
public interface IGGIregualDetector
{
    public void Start();
    public void SetUserId(string userId);
    public void SetError(int code);
    public void CheckErrorPopup();
    public void ShowPopup(int code);
}

// Namespace: PRISM
public interface IHomeConnector
{
}

// Namespace: PRISM
public interface IIntroductionCharacterSelectConnector
{
}

// Namespace: PRISM
public interface IIntroductionLauncherConnector
{
}

// Namespace: PRISM
public interface IIntroductionRewardConnector
{
}

// Namespace: PRISM
public class LiveInGameView : ENTERPRISE.ViewBase
{
    private UnityEngine.RectTransform leftBox;
    private UnityEngine.RectTransform rightBox;
    private PRISM.Live.ILiveStartData startData;
    private PRISM.SceneLoader sceneLoader;
    protected Cysharp.Threading.Tasks.UniTask _initializeAsync();
    private void _setUpBox(bool isPortrait);
    public Cysharp.Threading.Tasks.UniTask ReloadAsync();
    private Cysharp.Threading.Tasks.UniTask _receiverParameterAsync();
    protected Cysharp.Threading.Tasks.UniTask _terminateAsync();
    private Cysharp.Threading.Tasks.UniTask <>n__0();
    private void <_setUpBox>b__6_0(UniRx.Unit _);
    private Cysharp.Threading.Tasks.UniTask <>n__1();

    public class Parameter : ENTERPRISE.IViewParameter
    {
        public PRISM.Live.ILiveStartData LiveStartData;
    }

    private struct <ReloadAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.LiveInGameView <>4__this;
        private System.IDisposable <_>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_initializeAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.LiveInGameView <>4__this;
        private object <>7__wrap1;
        private int <>7__wrap2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_terminateAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.LiveInGameView <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class LiveSkillEffectDisplayTypeExtensions
{
    public static string GetText(PRISM.Definitions.LiveSkillEffectDisplayType type, int value);
}

// Namespace: PRISM
public class MstEventExtensions
{
    public static bool IsAllSongEvent(PRISM.Definitions.MstEvent eventMaster);
    public static bool IsTechnicalChallenge(PRISM.Definitions.MstEvent eventMaster);
    public static string GetPointName(PRISM.Definitions.MstEvent eventMaster);
    public static string GetPointUnit(PRISM.Definitions.MstEvent eventMaster);
}

// Namespace: PRISM
public class AuditionModel : PRISM.Produce.ProduceBaseModel
{
    private float[] auditionUnitSkillExecuteTime;
    private PRISM.Module.Networking.IOpponentStatus opponent;
    public InGameType InGameType { get; set; }
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(System.Threading.CancellationToken token);
    protected bool IsWinEnemy();
    protected float _getStartTimeSecond();
    protected void _enemyAttackReadyAction();
    protected float _getSkillExecuteTime();
    protected void _onPostExecuteEnemySkill();
    protected bool _isInGameEnd(ResultStatus& resultStatus, GameEndStatus& gameEndStatus);
    private Cysharp.Threading.Tasks.UniTask <>n__0(System.Threading.CancellationToken token);

    private struct <InitializeAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.AuditionModel <>4__this;
        public System.Threading.CancellationToken token;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public interface IProduceAutoModeConnector
{
}

// Namespace: PRISM
public interface IChallengeTourResultConnector
{
}

// Namespace: PRISM
public interface IChallengeTourTopConnector
{
}

// Namespace: PRISM
public interface IChallengeTourUnitEditConnector
{
}

// Namespace: PRISM
public class DebugPMVListData : UnityEngine.ScriptableObject
{
    public System.Collections.Generic.List<PMVData> PMVDataList;

    public class PMVData
    {
        public string MvName;
        public int UnitID;
    }
}

// Namespace: PRISM
public interface IProduceFriendSupportSelectConnector
{
}

// Namespace: PRISM
public class IdolSelectFooterColorData : UnityEngine.ScriptableObject
{
    private System.Collections.Generic.List<ColorData> dataList;
    public UnityEngine.Color GetFooterColorByUnitId(int unitId);

    public class ColorData
    {
        public int MstUnitId;
        public UnityEngine.Color Color;
    }

    private class <>c__DisplayClass2_0
    {
        public int unitId;
        private bool <GetFooterColorByUnitId>b__0(ColorData x);
    }
}

// Namespace: PRISM
public class AiScoreBaseModel
{
    public int CalcScore();
    public int GetUseAppelPoint();
}

// Namespace: PRISM
public interface IProduceIdolSelectConnector
{
}

// Namespace: PRISM
public interface IProducePolicyConnector
{
}

// Namespace: PRISM
public interface IScheduleSelectionConnector
{
}

// Namespace: PRISM
public interface IProduceConfirmConnector
{
}

// Namespace: PRISM
public class PlayScenarioController
{
    private PRISM.Legacy.Produce.ProduceTopBgmVolumeAdjuster produceTopBgmVolumeAdjuster;
    private PRISM.Legacy.Model3dLoaderForPlayScenarioController model3dLoader;
    public PRISM.Legacy.IModel3dLoaderForPlayScenarioController Model3dLoader { get; set; }
    public Cysharp.Threading.Tasks.UniTask PlayScenarioAsync(string scenarioNameId, System.Type nextViewType, int overridePIdolCharaId, PRISM.Adv.AdvChoiceButtonGroupViewModel advChoiceButtonGroupViewModel, bool isSubSeason, bool isAddLog, PRISM.Module.Networking.IProduceAdvStateStatus readStateInfo, bool needRelease, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishProduceAdvReply> PlayAdvScenarioAsync(UnityEngine.RectTransform safeAreaRoot, PRISM.Produce.SupportEffectDemonstrateUIContent supportEffectDemonstrateUIContent, PRISM.Legacy.IScheduleVitalityGaugeForLegacy vitalityGauge, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishProduceAdvReply> PlayAdvScenarioAsync(UnityEngine.RectTransform safeAreaRoot, PRISM.Module.Networking.IStartProduceAdvReply startProduceAdvReply, PRISM.Produce.SupportEffectDemonstrateUIContent supportEffectDemonstrateUIContent, PRISM.Legacy.IScheduleVitalityGaugeForLegacy vitalityGauge, System.Threading.CancellationToken cancellationToken);
    public void UpdateTargetScenarioBGMInformation(string cueName, int label, bool isSubSeason);
    public void CalculateBGM(PRISM.Module.Networking.IProduceBaseInfoStatus produceBaseInfo);
    private Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishProduceAdvReply> _playAdvScenarioAsync(UnityEngine.RectTransform safeAreaRoot, PRISM.Module.Networking.IStartProduceAdvReply startProduceAdvReply, PRISM.Produce.SupportEffectDemonstrateUIContent supportEffectDemonstrateUIContent, PRISM.Legacy.IScheduleVitalityGaugeForLegacy vitalityGauge, System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask _playScenarioAsync(string scenarioNameId, System.Type nextViewType, int overridePIdolCharaId, PRISM.Adv.AdvChoiceButtonGroupViewModel advChoiceButtonGroupViewModel, bool isSubSeason, bool isAddLog, PRISM.Module.Networking.IProduceAdvStateStatus readStateInfo, bool needRelease, bool suppressBackgroundDownload, bool isShowADVTitle, System.Threading.CancellationToken cancellationToken);
    private static Cysharp.Threading.Tasks.UniTask<System.ValueTuple<System.Collections.Generic.IReadOnlyList<string>, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISelectionSupportSkillStatus>>> _checkDisplayPopupAsync(PRISM.Module.Networking.IStartProduceAdvReply startProduceAdvReply, UnityEngine.RectTransform safeAreaRoot, PRISM.Legacy.IScheduleVitalityGaugeForLegacy vitalityGauge, System.Threading.CancellationToken ct);

    private class <>O
    {
        public static System.Func<bool> <0>__IsAdvFinished;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IProduceAdvOptionStatus, int> <>9__9_2;
        public static System.Func<PRISM.Module.Networking.IProduceAdvOptionStatus, PRISM.Adv.AdvChoiceButtonViewModel> <>9__9_3;
        public static System.Func<PRISM.Module.Networking.IInProduceIdolStatus, int> <>9__9_5;
        public static System.Func<int, int> <>9__9_6;
        public static System.Func<int, PRISM.Adv.AdvChoiceButtonViewModel> <>9__9_7;
        public static System.Func<bool> <>9__9_1;
        public static System.Func<PRISM.Module.Networking.IInProduceIdolStatus, int> <>9__9_10;
        public static System.Func<int, int> <>9__9_11;
        public static System.Func<PRISM.ProduceIdolModel, PRISM.UnitIdol> <>9__10_0;
        public static System.Func<PRISM.ProduceIdolModel, int> <>9__10_2;
        public static System.Func<PRISM.Produce.SupportCharacterModel, int> <>9__10_3;
        public static System.Func<bool> <>9__11_0;
        public static System.Func<PRISM.Module.Networking.IGettablePotentialSupportSkillStatus, PRISM.Module.Networking.IPotentialSupportSkillStatus> <>9__11_1;
        public static System.Func<bool> <>9__11_2;
        private int <_playAdvScenarioAsync>b__9_2(PRISM.Module.Networking.IProduceAdvOptionStatus x);
        private PRISM.Adv.AdvChoiceButtonViewModel <_playAdvScenarioAsync>b__9_3(PRISM.Module.Networking.IProduceAdvOptionStatus x);
        private int <_playAdvScenarioAsync>b__9_5(PRISM.Module.Networking.IInProduceIdolStatus x);
        private int <_playAdvScenarioAsync>b__9_6(int x);
        private PRISM.Adv.AdvChoiceButtonViewModel <_playAdvScenarioAsync>b__9_7(int _);
        private bool <_playAdvScenarioAsync>b__9_1();
        private int <_playAdvScenarioAsync>b__9_10(PRISM.Module.Networking.IInProduceIdolStatus x);
        private int <_playAdvScenarioAsync>b__9_11(int x);
        private PRISM.UnitIdol <_playScenarioAsync>b__10_0(PRISM.ProduceIdolModel x);
        private int <_playScenarioAsync>b__10_2(PRISM.ProduceIdolModel x);
        private int <_playScenarioAsync>b__10_3(PRISM.Produce.SupportCharacterModel x);
        private bool <_checkDisplayPopupAsync>b__11_0();
        private PRISM.Module.Networking.IPotentialSupportSkillStatus <_checkDisplayPopupAsync>b__11_1(PRISM.Module.Networking.IGettablePotentialSupportSkillStatus x);
        private bool <_checkDisplayPopupAsync>b__11_2();
    }

    private class <>c__DisplayClass10_0
    {
        public int overridePIdolCharaId;
        public bool isEnd;
        private bool <_playScenarioAsync>b__4(int x);
        private void <_playScenarioAsync>b__5();
        private bool <_playScenarioAsync>b__1();
    }

    private class <>c__DisplayClass9_0
    {
        public PRISM.Module.Networking.IStartProduceAdvReply startProduceAdvReply;
        public bool isGetAdvOptionResponse;
        public PRISM.Module.Networking.ISelectProduceAdvOptionReply advOptionReply;
        public PRISM.Scenario.ScenarioId scenarioId;
        private Cysharp.Threading.Tasks.UniTask <_playAdvScenarioAsync>g___onSelectedChoiceParamAsync|4(int choiceNumber, System.Threading.CancellationToken token);
        private bool <_playAdvScenarioAsync>b__8(PRISM.Definitions.MstSupportCharacterEvent x);
        private bool <_playAdvScenarioAsync>b__9();
        private bool <_playAdvScenarioAsync>b__0();
        private bool <_playAdvScenarioAsync>b__12(PRISM.Definitions.MstSubSeasonOpeningAdvOption x);

        private struct <<_playAdvScenarioAsync>g___onSelectedChoiceParamAsync|4>d : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
        {
            public int <>1__state;
            public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
            public <>c__DisplayClass9_0 <>4__this;
            public int choiceNumber;
            public System.Threading.CancellationToken token;
            private Awaiter<PRISM.Module.Networking.ISelectProduceAdvOptionReply> <>u__1;
            private void MoveNext();
            private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
        }
    }

    private struct <PlayAdvScenarioAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishProduceAdvReply> <>t__builder;
        public System.Threading.CancellationToken cancellationToken;
        public PRISM.PlayScenarioController <>4__this;
        public UnityEngine.RectTransform safeAreaRoot;
        public PRISM.Produce.SupportEffectDemonstrateUIContent supportEffectDemonstrateUIContent;
        public PRISM.Legacy.IScheduleVitalityGaugeForLegacy vitalityGauge;
        private Awaiter<PRISM.Module.Networking.IStartProduceAdvReply> <>u__1;
        private Awaiter<PRISM.Module.Networking.IFinishProduceAdvReply> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_checkDisplayPopupAsync>d__11 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.ValueTuple<System.Collections.Generic.IReadOnlyList<string>, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISelectionSupportSkillStatus>>> <>t__builder;
        public PRISM.Module.Networking.IStartProduceAdvReply startProduceAdvReply;
        public UnityEngine.RectTransform safeAreaRoot;
        public System.Threading.CancellationToken ct;
        public PRISM.Legacy.IScheduleVitalityGaugeForLegacy vitalityGauge;
        private System.Collections.Generic.IReadOnlyList<string> <selectCardIds>5__2;
        private System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISelectionSupportSkillStatus> <selectSupportSkills>5__3;
        private Enumerator<ProduceAdvRewardType> <>7__wrap3;
        private Awaiter<int> <>u__1;
        private Awaiter<System.Collections.Generic.IReadOnlyList<string>> <>u__2;
        private Awaiter<System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISelectionSupportSkillStatus>> <>u__3;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_playAdvScenarioAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishProduceAdvReply> <>t__builder;
        public PRISM.Module.Networking.IStartProduceAdvReply startProduceAdvReply;
        public PRISM.PlayScenarioController <>4__this;
        private <>c__DisplayClass9_0 <>8__1;
        public System.Threading.CancellationToken cancellationToken;
        public UnityEngine.RectTransform safeAreaRoot;
        public PRISM.Legacy.IScheduleVitalityGaugeForLegacy vitalityGauge;
        public PRISM.Produce.SupportEffectDemonstrateUIContent supportEffectDemonstrateUIContent;
        private System.IDisposable <_>5__2;
        private bool <isOptionAdv>5__3;
        private System.Collections.Generic.IReadOnlyList<string> <selectCardIds>5__4;
        private System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISelectionSupportSkillStatus> <selectSupportSkills>5__5;
        private PRISM.Module.Networking.IFinishProduceAdvReply <finishProduceAdvReplyDto>5__6;
        private Awaiter <>u__1;
        private Awaiter<System.ValueTuple<System.Collections.Generic.IReadOnlyList<string>, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISelectionSupportSkillStatus>>> <>u__2;
        private Awaiter<int> <>u__3;
        private Awaiter<PRISM.Module.Networking.ISelectSubSeasonIdolReply> <>u__4;
        private Awaiter<PRISM.Module.Networking.IFinishProduceAdvReply> <>u__5;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_playScenarioAsync>d__10 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public int overridePIdolCharaId;
        public bool suppressBackgroundDownload;
        public string scenarioNameId;
        public bool isSubSeason;
        private <>c__DisplayClass10_0 <>8__1;
        public PRISM.PlayScenarioController <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        public bool isShowADVTitle;
        public PRISM.Adv.AdvChoiceButtonGroupViewModel advChoiceButtonGroupViewModel;
        public PRISM.Module.Networking.IProduceAdvStateStatus readStateInfo;
        public bool needRelease;
        private System.IDisposable <_>5__2;
        private PRISM.Scenario.ScenarioId <scenarioId>5__3;
        private System.Collections.Generic.Dictionary<string, int> <additionalSetValues>5__4;
        private PRISM.UnitIdol[] <unitIdols>5__5;
        private bool <isContinueBGM>5__6;
        private PRISM.Scenario.ScenarioManager <scenarioManager>5__7;
        private Awaiter <>u__1;
        private Awaiter<PRISM.UnitIdol[]> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class UvAdjuster : UnityEngine.MonoBehaviour
{
    private float scaleRate;
    private UnityEngine.UI.RawImage _rawImage;
    private void Awake();
}

// Namespace: PRISM
public class SkillCardContent : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.Image cardImage;
    private UnityEngine.UI.Text costText;
    private UnityEngine.GameObject[] rankIconObjects;
    private ENTERPRISE.UI.ButtonBase skillCardButton;
    private UnityEngine.UI.Text descriptionText;
    private UnityEngine.UI.Image activeImage;
    public ENTERPRISE.UI.ButtonBase SkillCardButton { get; set; }
    public void UpdateCostView(int cost);
    public void UpdateRankIconView(int rank);
    public void UpdateDescriptionView(string text);
    public void UpdateActiveImage(bool active);
}

// Namespace: PRISM
public class SubSeasonDearnessAndFanConditionContent : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject conditionCheckMarkOn;
    private UnityEngine.GameObject conditionCheckMarkOff;
    private TMPro.TextMeshProUGUI conditionText;
    public void Setup(System.Collections.Generic.IReadOnlyList<DearnessCondition> conditionList);
    public void Setup(System.Collections.Generic.IReadOnlyList<FanCondition> conditionList);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<DearnessCondition, bool> <>9__3_0;
        public static System.Func<FanCondition, bool> <>9__4_0;
        private bool <Setup>b__3_0(DearnessCondition x);
        private bool <Setup>b__4_0(FanCondition x);
    }
}

// Namespace: PRISM
public class SubSeasonDetailContent : UnityEngine.MonoBehaviour
{
    private PRISM.SubSeasonDetailContentElement element;
    public void Setup(System.Collections.Generic.List<ConditionDetail> details);
    public void Setup(System.Collections.Generic.List<ConditionDetail> details, PRISM.Module.Networking.IProduceParameterStatus unitParam);
}

// Namespace: PRISM
public class SubSeasonDetailContentElement : UnityEngine.MonoBehaviour
{
    private TMPro.TextMeshProUGUI eventTitleText;
    private TMPro.TextMeshProUGUI eventText;
    private TMPro.TextMeshProUGUI stateTitleText;
    private TMPro.TextMeshProUGUI stateText;
    private TMPro.TextMeshProUGUI timingTitleText;
    private TMPro.TextMeshProUGUI timingText;
    private TMPro.TextMeshProUGUI conditionTitleText;
    private TMPro.TextMeshProUGUI noConditionText;
    private PRISM.SubSeasonParameterConditionContent parameterContent;
    private PRISM.SubSeasonDearnessAndFanConditionContent fanContant;
    private PRISM.SubSeasonDearnessAndFanConditionContent dearnessContent;
    public void Setup(ConditionDetail model, PRISM.Module.Networking.IProduceParameterStatus unitParam);
}

// Namespace: PRISM
public class SubSeasonDetailContentViewModel
{
    public System.Collections.Generic.List<ConditionDetail> ConditionDetailList;
    private System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISubSeasonConditionStatus> conditionList;
    private System.Collections.Generic.IReadOnlyList<int> selectedSubSeasonIdList;
    private System.Collections.Generic.IReadOnlyList<int> selectedSubSeasonNumList;
    private int nowSeason;
    public void UpdateConditionDetailList();
    public bool IsClearParamCondition(PRISM.Module.Networking.IProduceParameterStatus unitParam);
    public bool IsClearDearnessCondition();
    public bool IsClearFanCondition();
    private System.Collections.Generic.IReadOnlyList<int> _getSelectedSeasonNumList(System.Collections.Generic.List<PRISM.Module.Networking.ISubSeasonConditionStatus> conditionList, System.Collections.Generic.IReadOnlyList<int> selectedSubSeasonIdList);

    public enum JoinState : System.Enum
    {
        public int value__;
        public static JoinState Joinable;
        public static JoinState NonJoinable;
        public static JoinState AlreadyJoin;
    }

    public class Condition
    {
        public bool IsClear;
    }

    public class ParameterCondition : Condition
    {
        public PRISM.Module.Networking.IProduceParameterStatus RequiredParam;
        public PRISM.Module.Networking.IProduceParameterStatus UnitParam;
    }

    public class DearnessCondition : Condition
    {
        public int RequiredDearness;
        public int Dearness;
        public int MstIdolId;
        public string GetConditionText();
    }

    public class FanCondition : Condition
    {
        public int RequiredFan;
        public int Fan;
        public int MstIdolId;
        public string GetConditionText();
    }

    public class ConditionDetail
    {
        public int MstSubSeasonId;
        public JoinState JoinState;
        public int Season;
        public string EventTitle;
        public ParameterCondition ParamCondition;
        public System.Collections.Generic.IReadOnlyList<DearnessCondition> DearnessConditionList;
        public System.Collections.Generic.IReadOnlyList<FanCondition> FanConditionList;
        public string EventName { get; set; }
        public string JoinStateTitle { get; set; }
        public string JoinStateText { get; set; }
        public string EmergenceSeasonTitleText { get; set; }
        public string EmergenceSeasonText { get; set; }
        public string ConditionTitle { get; set; }

        private class <>c
        {
            public static <>c <>9;
            public static System.Func<PRISM.Module.Networking.IIdolDearnessConditionStatus, DearnessCondition> <>9__19_0;
            public static System.Func<PRISM.Module.Networking.IIdolFanConditionStatus, FanCondition> <>9__19_1;
            public static System.Func<DearnessCondition, bool> <>9__19_2;
            public static System.Func<FanCondition, bool> <>9__19_3;
            private DearnessCondition <.ctor>b__19_0(PRISM.Module.Networking.IIdolDearnessConditionStatus x);
            private FanCondition <.ctor>b__19_1(PRISM.Module.Networking.IIdolFanConditionStatus x);
            private bool <.ctor>b__19_2(DearnessCondition x);
            private bool <.ctor>b__19_3(FanCondition x);
        }
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<DearnessCondition, bool> <>9__14_0;
        public static System.Func<FanCondition, bool> <>9__15_0;
        private bool <IsClearDearnessCondition>b__14_0(DearnessCondition x);
        private bool <IsClearFanCondition>b__15_0(FanCondition x);
    }

    private class <>c__DisplayClass12_0
    {
        public PRISM.SubSeasonDetailContentViewModel <>4__this;
        public PRISM.Module.Networking.IProduceParameterStatus unitParameter;
        private ConditionDetail <UpdateConditionDetailList>b__0(PRISM.Module.Networking.ISubSeasonConditionStatus x);
    }
}

// Namespace: PRISM
public class SubSeasonParameterConditionContent : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject conditionCheckMarkOn;
    private UnityEngine.GameObject conditionCheckMarkOff;
    private TMPro.TextMeshProUGUI voBorderText;
    private TMPro.TextMeshProUGUI daBorderText;
    private TMPro.TextMeshProUGUI viBorderText;
    private TMPro.TextMeshProUGUI meBorderText;
    private TMPro.TextMeshProUGUI voShortageText;
    private TMPro.TextMeshProUGUI daShortageText;
    private TMPro.TextMeshProUGUI viShortageText;
    private TMPro.TextMeshProUGUI meShortageText;
    private UnityEngine.GameObject voAchieveObject;
    private UnityEngine.GameObject daAchieveObject;
    private UnityEngine.GameObject viAchieveObject;
    private UnityEngine.GameObject meAchieveObject;
    public void Setup(PRISM.Module.Networking.IProduceParameterStatus requiredParam, PRISM.Module.Networking.IProduceParameterStatus unitParam);
}

// Namespace: PRISM
public class ProduceTutorialShowArrowEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Func<UnityEngine.Vector3> getPosFanc;
    private System.Func<UnityEngine.Vector2> getOffsetFanc;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);

    private class <>c__DisplayClass3_0
    {
        public PRISM.TutorialExternalAccess tutorialExternalAccess;
        public int index;
        private UnityEngine.Vector3 <.ctor>b__0();
        private UnityEngine.Vector2 <.ctor>b__1();
    }
}

// Namespace: PRISM
public class ProduceTutorialShowCommonPUEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private System.Action onTapClose;
    private string configPath;
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);

    private struct <EnterAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.ProduceTutorialShowCommonPUEvent <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class ProduceTutorialShowInfoHandEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Func<UnityEngine.Vector3> getHandPosFanc;
    private UnityEngine.Vector2 moveOffset;
    private UnityEngine.Vector2 localOffset;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);

    private class <>c__DisplayClass4_0
    {
        public PRISM.TutorialExternalAccess tutorialExternalAccess;
        public int cardIndex;
        private UnityEngine.Vector3 <.ctor>b__0();
    }
}

// Namespace: PRISM
public class ProduceTutorialStopGameEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM
public class TutorialExternalAccess
{
    private System.Func<int, UnityEngine.RectTransform> <GetCardPos>k__BackingField;
    private System.Func<UnityEngine.RectTransform> <GetAvoidRateIconPos>k__BackingField;
    private System.Func<int, UnityEngine.RectTransform> <GetStatusIconPos>k__BackingField;
    private System.Func<UnityEngine.RectTransform> <GetStatusContentRectTransform>k__BackingField;
    private System.Func<UnityEngine.RectTransform> <GetAppealContentRectTransform>k__BackingField;
    private System.Func<UnityEngine.RectTransform> <GetExclusionCardCounttRectTransform>k__BackingField;
    private System.Func<UnityEngine.RectTransform> <GetCardAndCharaSkillDetailPanelRectTransform>k__BackingField;
    private System.Func<UnityEngine.RectTransform> <GetBaffDebaffDetailRectTransform>k__BackingField;
    private System.Func<int, UnityEngine.RectTransform> <GetIdolSkillPos>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnShowFade>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnHideFade>k__BackingField;
    private UniRx.Subject<float> <OnSetFadeAlpha>k__BackingField;
    private System.Action<UnityEngine.Vector3, UnityEngine.Vector2, UnityEngine.Vector2, float> <OnShowInfoHand>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnHideInfoHand>k__BackingField;
    private System.Action<UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, int> <OnShowMask>k__BackingField;
    private System.Action<UnityEngine.Vector3, UnityEngine.Vector2, UnityEngine.Vector2, int> <OnShowMaskWorldPos>k__BackingField;
    private UniRx.Subject<System.ValueTuple<string, float>> <OnShowInfoText>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnHideInfoText>k__BackingField;
    private UniRx.Subject<float> <OnSetInfoTextAlpha>k__BackingField;
    private UniRx.Subject<int> <OnHideMask>k__BackingField;
    private System.Action<UnityEngine.Vector3, UnityEngine.Vector2> <OnShowArrow>k__BackingField;
    private System.Action<UnityEngine.Vector3, UnityEngine.Vector2> <OnShowAvoidArrow>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnHideArrow>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnHideAvoidArrow>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnTryShowInputBlock>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnTryHideInputBlock>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnTryShowInputDragBlock>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnTryHideInputDragBlock>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnShowInputDragBlock>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnHideInputDragBlock>k__BackingField;
    private UniRx.Subject<System.ValueTuple<string, float>> <OnTryShowTextInfo>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnTryHideTextInfo>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnShowInputBlock>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnHideInputBlock>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnTryShowFade>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnTryHideFade>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnShowAllTap>k__BackingField;
    private UniRx.Subject<System.Action> <OnSetAllTap>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnHideAllTap>k__BackingField;
    private System.Action <OnHideSkipBtn>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnDisableFixDrowSbuject>k__BackingField;
    private UniRx.Subject<UniRx.Unit> <OnCanselCardSelect>k__BackingField;
    private System.Action<bool> <OnSetGameStop>k__BackingField;
    private System.Action<int> <OnSetPP>k__BackingField;
    private System.Action<float> <OnSetMentalRate>k__BackingField;
    private System.Action <OnResetGame>k__BackingField;
    private System.Action <OnBrekeMental>k__BackingField;
    private System.Action <OnDebffSkill>k__BackingField;
    private System.Action<int> <OnSetDrowTargetCard>k__BackingField;
    private System.Action<int[]> <OnSetDrowStartTargetCardList>k__BackingField;
    private System.Action<bool> <OnDisableNPC>k__BackingField;
    private System.Action<bool> <OnNotMaxAppeal>k__BackingField;
    private System.Action<System.Action> <OnAddUseCardAction>k__BackingField;
    private System.Action<System.Action> <OnRemoveUseCardAction>k__BackingField;
    private System.Action<System.Action> <OnAddUseEnemyCardAction>k__BackingField;
    private System.Action<System.Action> <OnRemoveUseEnemyCardAction>k__BackingField;
    private System.Action<System.Action<int>> <OnAddUseUnitSkillAction>k__BackingField;
    private System.Action<System.Action<int>> <OnRemoveUseUnitSkillAction>k__BackingField;
    private System.Action<System.Action<int, int>> <OnAddChangePPAction>k__BackingField;
    private System.Action<System.Action<int, int>> <OnRemoveChangePPAction>k__BackingField;
    private System.Action<System.Action> <OnAddStartMentalBreak>k__BackingField;
    private System.Action<System.Action> <OnRemoveStartMentalBreak>k__BackingField;
    private System.Action<System.Action> <OnAddRecoverMentalBreak>k__BackingField;
    private System.Action<System.Action> <OnRemoveRecoverMentalBreak>k__BackingField;
    private System.Action<System.Action<float>> <OnAddGetCurrentTimeLimit>k__BackingField;
    private System.Action<System.Action<float>> <OnRemoveGetCurrentTimeLimit>k__BackingField;
    private System.Action<System.Action> <OnEndIngame>k__BackingField;
    private System.Action<System.Action> <OnStartIngame>k__BackingField;
    private UniRx.Subject<System.Action> <OnAddTapCanselSbuject>k__BackingField;
    private UniRx.Subject<System.Action> <OnRemoveTapCanselSbuject>k__BackingField;
    private UniRx.Subject<System.Action> <OnAddTapCardSbuject>k__BackingField;
    private UniRx.Subject<System.Action> <OnRemoveTapCardSbuject>k__BackingField;
    private UniRx.Subject<System.Action> <OnAddTapBuffIconSbuject>k__BackingField;
    private UniRx.Subject<System.Action> <OnRemoveTapBuffIconSbuject>k__BackingField;
    public System.Func<int, UnityEngine.RectTransform> GetCardPos { get; set; }
    public System.Func<UnityEngine.RectTransform> GetAvoidRateIconPos { get; set; }
    public System.Func<int, UnityEngine.RectTransform> GetStatusIconPos { get; set; }
    public System.Func<UnityEngine.RectTransform> GetStatusContentRectTransform { get; set; }
    public System.Func<UnityEngine.RectTransform> GetAppealContentRectTransform { get; set; }
    public System.Func<UnityEngine.RectTransform> GetExclusionCardCounttRectTransform { get; set; }
    public System.Func<UnityEngine.RectTransform> GetCardAndCharaSkillDetailPanelRectTransform { get; set; }
    public System.Func<UnityEngine.RectTransform> GetBaffDebaffDetailRectTransform { get; set; }
    public System.Func<int, UnityEngine.RectTransform> GetIdolSkillPos { get; set; }
    public UniRx.Subject<UniRx.Unit> OnShowFade { get; set; }
    public UniRx.Subject<UniRx.Unit> OnHideFade { get; set; }
    public UniRx.Subject<float> OnSetFadeAlpha { get; set; }
    public System.Action<UnityEngine.Vector3, UnityEngine.Vector2, UnityEngine.Vector2, float> OnShowInfoHand { get; set; }
    public UniRx.Subject<UniRx.Unit> OnHideInfoHand { get; set; }
    public System.Action<UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, UnityEngine.Vector2, int> OnShowMask { get; set; }
    public System.Action<UnityEngine.Vector3, UnityEngine.Vector2, UnityEngine.Vector2, int> OnShowMaskWorldPos { get; set; }
    public UniRx.Subject<System.ValueTuple<string, float>> OnShowInfoText { get; set; }
    public UniRx.Subject<UniRx.Unit> OnHideInfoText { get; set; }
    public UniRx.Subject<float> OnSetInfoTextAlpha { get; set; }
    public UniRx.Subject<int> OnHideMask { get; set; }
    public System.Action<UnityEngine.Vector3, UnityEngine.Vector2> OnShowArrow { get; set; }
    public System.Action<UnityEngine.Vector3, UnityEngine.Vector2> OnShowAvoidArrow { get; set; }
    public UniRx.Subject<UniRx.Unit> OnHideArrow { get; set; }
    public UniRx.Subject<UniRx.Unit> OnHideAvoidArrow { get; set; }
    public UniRx.Subject<UniRx.Unit> OnTryShowInputBlock { get; set; }
    public UniRx.Subject<UniRx.Unit> OnTryHideInputBlock { get; set; }
    public UniRx.Subject<UniRx.Unit> OnTryShowInputDragBlock { get; set; }
    public UniRx.Subject<UniRx.Unit> OnTryHideInputDragBlock { get; set; }
    public UniRx.Subject<UniRx.Unit> OnShowInputDragBlock { get; set; }
    public UniRx.Subject<UniRx.Unit> OnHideInputDragBlock { get; set; }
    public UniRx.Subject<System.ValueTuple<string, float>> OnTryShowTextInfo { get; set; }
    public UniRx.Subject<UniRx.Unit> OnTryHideTextInfo { get; set; }
    public UniRx.Subject<UniRx.Unit> OnShowInputBlock { get; set; }
    public UniRx.Subject<UniRx.Unit> OnHideInputBlock { get; set; }
    public UniRx.Subject<UniRx.Unit> OnTryShowFade { get; set; }
    public UniRx.Subject<UniRx.Unit> OnTryHideFade { get; set; }
    public UniRx.Subject<UniRx.Unit> OnShowAllTap { get; set; }
    public UniRx.Subject<System.Action> OnSetAllTap { get; set; }
    public UniRx.Subject<UniRx.Unit> OnHideAllTap { get; set; }
    public System.Action OnHideSkipBtn { get; set; }
    public UniRx.Subject<UniRx.Unit> OnDisableFixDrowSbuject { get; set; }
    public UniRx.Subject<UniRx.Unit> OnCanselCardSelect { get; set; }
    public System.Action<bool> OnSetGameStop { get; set; }
    public System.Action<int> OnSetPP { get; set; }
    public System.Action<float> OnSetMentalRate { get; set; }
    public System.Action OnResetGame { get; set; }
    public System.Action OnBrekeMental { get; set; }
    public System.Action OnDebffSkill { get; set; }
    public System.Action<int> OnSetDrowTargetCard { get; set; }
    public System.Action<int[]> OnSetDrowStartTargetCardList { get; set; }
    public System.Action<bool> OnDisableNPC { get; set; }
    public System.Action<bool> OnNotMaxAppeal { get; set; }
    public System.Action<System.Action> OnAddUseCardAction { get; set; }
    public System.Action<System.Action> OnRemoveUseCardAction { get; set; }
    public System.Action<System.Action> OnAddUseEnemyCardAction { get; set; }
    public System.Action<System.Action> OnRemoveUseEnemyCardAction { get; set; }
    public System.Action<System.Action<int>> OnAddUseUnitSkillAction { get; set; }
    public System.Action<System.Action<int>> OnRemoveUseUnitSkillAction { get; set; }
    public System.Action<System.Action<int, int>> OnAddChangePPAction { get; set; }
    public System.Action<System.Action<int, int>> OnRemoveChangePPAction { get; set; }
    public System.Action<System.Action> OnAddStartMentalBreak { get; set; }
    public System.Action<System.Action> OnRemoveStartMentalBreak { get; set; }
    public System.Action<System.Action> OnAddRecoverMentalBreak { get; set; }
    public System.Action<System.Action> OnRemoveRecoverMentalBreak { get; set; }
    public System.Action<System.Action<float>> OnAddGetCurrentTimeLimit { get; set; }
    public System.Action<System.Action<float>> OnRemoveGetCurrentTimeLimit { get; set; }
    public System.Action<System.Action> OnEndIngame { get; set; }
    public System.Action<System.Action> OnStartIngame { get; set; }
    public UniRx.Subject<System.Action> OnAddTapCanselSbuject { get; set; }
    public UniRx.Subject<System.Action> OnRemoveTapCanselSbuject { get; set; }
    public UniRx.Subject<System.Action> OnAddTapCardSbuject { get; set; }
    public UniRx.Subject<System.Action> OnRemoveTapCardSbuject { get; set; }
    public UniRx.Subject<System.Action> OnAddTapBuffIconSbuject { get; set; }
    public UniRx.Subject<System.Action> OnRemoveTapBuffIconSbuject { get; set; }
    public void Terminate();
}

// Namespace: PRISM
public class AddPlaneForFarFit : UnityEngine.MonoBehaviour
{
    private PRISM.FarPlaneFitter farPlaneFitter;
    private UnityEngine.Rect uvRect;
    private float zRate;
    private UnityEngine.Camera targetCam;
    private bool initialized;
    private UnityEngine.Vector2 offset;
    private UnityEngine.Vector2 scale;
    private UnityEngine.Vector3[] initialVertices;
    private void Start();
    private void Initialize();
    private void LateUpdate();
    private void _updateMeshVertices();
}

// Namespace: PRISM
public class BgObjectManager : UnityEngine.MonoBehaviour
{
    private string[] timeOfDayTable;
    private string[] weatherTable;
    private string[] seasonTable;
    private string[] natureEventTable;
    private string[] cultureEventTable;
    public string[][] tables;
    public void ResetTable();
    public string[] GetTable(Condition cond);
    public void SelectCondition(SwitchObjectCondition[] switchCondition);

    public enum Condition : System.Enum
    {
        public int value__;
        public static Condition TimeOfDay;
        public static Condition Weather;
        public static Condition Season;
        public static Condition NatureEvent;
        public static Condition CultureEvent;
    }
}

// Namespace: PRISM
public class FarPlaneFitter : UnityEngine.MonoBehaviour
{
    private bool moveFlag;
    private float moveMargin;
    private float moveTrans;
    private UnityEngine.Vector2 offset;
    private UnityEngine.Color color;
    private bool isForcedAspect;
    private UnityEngine.Vector2 forcedAspect;
    private UnityEngine.Vector4 <UvParam>k__BackingField;
    private UnityEngine.Vector4 <AspectRatio>k__BackingField;
    private bool initialized;
    private UnityEngine.Texture farTexture;
    private UnityEngine.Quaternion startQ;
    private float startFovY;
    private UnityEngine.Vector3 startPos;
    private CameraWorkData currentCamera;
    public UnityEngine.Vector4 UvParam { get; set; }
    public UnityEngine.Vector4 AspectRatio { get; set; }
    private void OnEnable();
    private void OnDisable();
    private void _onBeginCameraRendering(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera targetCamera);
    private void _updateStartParameter(UnityEngine.Camera targetCam);
    private void _updatePosition(UnityEngine.Camera targetCam);
    public void Reset();
}

// Namespace: PRISM
public class LightBeam : UnityEngine.MonoBehaviour
{
    private UnityEngine.Renderer _flareRenderer;
    private UnityEngine.Renderer _beamRenderer;
    private UnityEngine.Transform _myTransform;
    private UnityEngine.LensFlare _myLensFlare;
    private UnityEngine.Camera _targetCamera;
    private UnityEngine.Color _color;
    public UnityEngine.Color color { get; set; }
    public void Setup(UnityEngine.Camera cam);
    private void LateUpdate();
}

// Namespace: PRISM
public class ReflectionPlane : UnityEngine.MonoBehaviour, PRISM.Rendering.IReflectionPlane
{
    private static UnityEngine.Plane HorizontalPlane;
    private static UnityEngine.Vector3 ViewportPointBottomLeft;
    private static UnityEngine.Vector3 ViewportPointBottomRight;
    public float clipPlaneOffset;
    private PRISM.SplitScreen[] splitScreens;
    private bool <ForcedEnableReflection>k__BackingField;
    private static Resolution <ForceResolution>k__BackingField;
    private static Resolution keepForceResolution;
    public bool ForcedEnableReflection { get; set; }
    public Resolution ForceResolution { get; set; }
    public void SetupReflectionCameraTargetTexture(UnityEngine.Camera baseCamera, UnityEngine.Camera refCamera, UnityEngine.Vector3& newPosition);
    private void OnEnable();
    private void OnDisable();
    private static void _copyCameraModes(UnityEngine.Camera src, UnityEngine.Camera dest);
    public UnityEngine.Camera CreateReflectionCamera();
    public UnityEngine.Vector2Int GetNeedRenderTextureSize(UnityEngine.Camera currentCamera);
    public bool IsValidReflection(UnityEngine.Camera targetCamera);
    private bool _existsIgnoreDrawSplitScreen();
    public void OnBeforeDrawing();
    public void OnAfterDrawing();
    private static bool _isHitStagePlaneToViewportBottomRay(UnityEngine.Camera baseCamera);
    private static bool _isHitViewportRayToHorizontalPlane(UnityEngine.Vector3 viewportPoint, UnityEngine.Camera baseCamera);

    public enum Resolution : System.Enum
    {
        public int value__;
        public static Resolution Unknown;
        public static Resolution x256;
        public static Resolution x512;
        public static Resolution x1024;
        public static Resolution SameAsModelBuffer;
    }
}

// Namespace: PRISM
public class RenderQueueHolder : UnityEngine.MonoBehaviour
{
    private int renderQueue;
    private UnityEngine.Renderer renderer;
    private bool lastEnable;
    private void OnEnable();
    private void OnDisable();
    private void LateUpdate();
}

// Namespace: PRISM
public class SelectObject : UnityEngine.MonoBehaviour
{
    private SelectObjectData[] selectObjects;
    public void SelectCondition(Condition[] selectCondition);

    public class Condition
    {
        public string key;
        public string value;
    }

    public class SelectObjectData
    {
        public Condition condition;
        public UnityEngine.GameObject objectsRoot;
    }
}

// Namespace: PRISM
public class SelectObjectManager : UnityEngine.MonoBehaviour
{
    private string[] selectObjectKeyTable;
    private string[] selectObjectValueTable;
    public string[] GetKeyTable();
    public string[] GetValueTable();
    public void SelectCondition(Condition[] selectCondition);
}

// Namespace: PRISM
public class SwitchIDHolder : UnityEngine.MonoBehaviour
{
    public string switchID;
    public int switchUnitNo;
}

// Namespace: PRISM
public class SwitchObject : UnityEngine.MonoBehaviour
{
    private SwitchObjectData[] switchObject;
    public void SelectCondition(SwitchObjectCondition[] switchCondition);

    public class SwitchObjectCondition
    {
        public Condition condition;
        public string value;
    }

    public class SwitchObjectData
    {
        public SwitchObjectCondition[] conditions;
        public UnityEngine.GameObject objectsRoot;
    }
}

// Namespace: PRISM
public class AdaptiveScale : UnityEngine.MonoBehaviour
{
    private PRISM.Character[] characters;
    private bool yAxis;
    private bool xzPlane;
    private bool heightMapping;
    private MixData[] mixData;
    private bool whichMin;
    private bool whichMax;
    private float scaleMin;
    private float scaleMax;
    public void Setup(PRISM.Character[] characterTable);

    public class MixData
    {
        public int charaIndex;
        public float rate;
    }
}

// Namespace: PRISM
public class AttachBoneObject : PRISM.AttachCharacterObject
{
    private System.Collections.Generic.Dictionary<UnityEngine.Transform, TransformValue> handTransform;
    protected UnityEngine.GameObject attachObject;
    protected UnityEngine.HumanBodyBones bone;
    protected string customBone;
    protected UnityEngine.Vector3 offsetPos;
    protected UnityEngine.Vector3 offsetRot;
    protected string onTriggerName;
    protected string offTriggerName;
    protected UnityEngine.TextAsset handPose;
    protected string handPoseAsset;
    protected bool characterScale;
    private UnityEngine.Transform lastParent;
    private UnityEngine.Vector3 lastPosition;
    private UnityEngine.Quaternion lastRotation;
    protected SaveHandValue handValue;
    protected bool attachFlag;
    private System.IDisposable updateManagerDisposable;
    private System.Action registerCallback;
    private UnityEngine.Transform[] characterTransformsCache;
    private void OnEnable();
    private void AttachObject();
    private void DetachObject();
    private void _setupHandPose();
    private void OnDisable();
    private void Update();
    private void _lateUpdate();
    public void ReturnObject();
    public void ToHandValue();
    public void Attach();
    public void Detach();

    public class TransformValue
    {
        public string idName;
        public UnityEngine.Vector3 rotation;
        public UnityEngine.Vector3 position;
    }

    public class SaveHandValue
    {
        public TransformValue[] transformValueList;
        public string attachBone;
    }
}

// Namespace: PRISM
public class AttachCharacterObject : UnityEngine.MonoBehaviour
{
    private int charaIndex;
    protected PRISM.Character character;
    public void Setup(PRISM.Character[] characterTable);
    public void Attach();
    public void Detach();
}

// Namespace: PRISM
public class AttachEyeIrisObject : PRISM.AttachCharacterObject
{
    private UnityEngine.GameObject attachObjectLeft;
    private UnityEngine.GameObject attachObjectRight;
    private UnityEngine.Vector2 moveRate;
    private string onTriggerName;
    private string offTriggerName;
    private bool removeHighLight;
    private bool removeEyeIris;
    private bool attachFlag;
    private EyeController eyeL;
    private EyeController eyeR;
    private void AttachObject();
    private void DetachObject();
    private void Update();
    private void _updateIrisPosition();
    private void _doIrisAnimation(UnityEngine.GameObject _attachObject, bool onTrig);
    public void Attach();
    public void Detach();
}

// Namespace: PRISM
public class AxisConstraintSettings : PRISM.IAxisConstraintSettings
{
    private bool constrainX;
    private bool constrainY;
    private bool constrainZ;
    private UnityEngine.Vector3 offset;
    public bool ConstraintEnable { get; set; }
    public bool ConstrainX { get; set; }
    public bool ConstrainY { get; set; }
    public bool ConstrainZ { get; set; }
    public UnityEngine.Vector3 Offset { get; set; }
}

// Namespace: PRISM
public interface IAxisConstraintSettings
{
    public bool ConstraintEnable { get; set; }
    public bool ConstrainX { get; set; }
    public bool ConstrainY { get; set; }
    public bool ConstrainZ { get; set; }
    public UnityEngine.Vector3 Offset { get; set; }
}

// Namespace: PRISM
public class AxisConstraintSettingsExtensions
{
    public static UnityEngine.Vector3 LerpVector(PRISM.IAxisConstraintSettings settings, UnityEngine.Vector3 a, UnityEngine.Vector3 b, float t);
    public static UnityEngine.Quaternion SlerpQuaternion(PRISM.IAxisConstraintSettings settings, UnityEngine.Quaternion a, UnityEngine.Quaternion b, float t);
    public static UnityEngine.Vector3 GetAppliedPosition(PRISM.IAxisConstraintSettings settings, UnityEngine.Transform transform, UnityEngine.Vector3 targetPosition, float weight);
    public static UnityEngine.Vector3 GetAppliedPosition(PRISM.IAxisConstraintSettings settings, UnityEngine.Transform transform, UnityEngine.Vector3 targetPosition, UnityEngine.Vector3 offset, float weight);
    public static UnityEngine.Quaternion GetAppliedRotation(PRISM.IAxisConstraintSettings settings, UnityEngine.Transform transform, UnityEngine.Quaternion targetRotation, float weight);
    public static UnityEngine.Vector3 GetAppliedLocalScale(PRISM.IAxisConstraintSettings settings, UnityEngine.Transform transform, UnityEngine.Vector3 targetLossyScale, float weight);
    public static void ApplyToPosition(PRISM.IAxisConstraintSettings settings, UnityEngine.Transform transform, UnityEngine.Vector3 targetPosition, float weight);
    public static void ApplyToRotation(PRISM.IAxisConstraintSettings settings, UnityEngine.Transform transform, UnityEngine.Quaternion targetRotation, float weight);
    public static void ApplyToLocalScale(PRISM.IAxisConstraintSettings settings, UnityEngine.Transform transform, UnityEngine.Vector3 targetLossyScale, float weight);
}

// Namespace: PRISM
public class ConeConstrain : UnityEngine.MonoBehaviour
{
    public ConeInfo[] leftCones;
    public ConeInfo[] rightCones;
    public bool collideOn;
    public bool bendOn;
    private UnityEngine.Transform lhand;
    private UnityEngine.Transform rhand;
    private UnityEngine.Transform hips;
    private float foreLen;
    private CalcCollidePos leftCollide;
    private CalcCollidePos rightCollide;
    private bool isForcedMoveEndPosition;
    private static string treeL;
    private static string treeR;
    private static string treeHips;
    private static float ConstLerpCount;
    private System.IDisposable updateManagerDisposable;
    private System.Action registerCallback;
    private void OnEnable();
    private void OnDisable();
    public void LateUpdateInner();
    private void _calcCollideHand(CalcCollidePos c, UnityEngine.Transform hand);
    public void CalcCollideInLerp();
    private void _calcCollideHandInLerp(UnityEngine.Transform hand, ConeInfo[] cones);
    private bool _tryGetCollisionHitPosition(UnityEngine.Vector3 handPosition, ConeInfo cone, UnityEngine.Vector3& hitPosition);
    private void _updateArmAndForeArmTransform(UnityEngine.Transform hand, UnityEngine.Vector3 pos);
    public void SetCone(bool left, UnityEngine.Transform _baseBone, UnityEngine.Vector3 _summit, UnityEngine.Vector3 _downward, float _spread);
    public void SetForcedMoveEndPosition();

    public class ConeInfo
    {
        public UnityEngine.Transform baseBone;
        public UnityEngine.Vector3 summit;
        public UnityEngine.Vector3 downward;
        public float spread;
        public float from;
        public float to;
        public bool IsSkirt(UnityEngine.Transform hipsTransform);
    }

    private class CalcCollidePos
    {
        public ConeInfo collideCone;
        public ConeInfo lastCollideCone;
        public UnityEngine.Vector3 handEndPositionWS;
        public UnityEngine.Vector3 handPosSave;
        public UnityEngine.Vector3 handCurrentPos;
        public UnityEngine.Vector3 handCalcedPos;
        public bool hitFlag;
        public float handLerpCount;
    }
}

// Namespace: PRISM
public interface IConstraintTarget
{
    public UnityEngine.Transform Target { get; set; }
    public float Weight { get; set; }
}

// Namespace: PRISM
public class ConstraintTarget : PRISM.IConstraintTarget
{
    private UnityEngine.Transform target;
    private float weight;
    public UnityEngine.Transform Target { get; set; }
    public float Weight { get; set; }
}

// Namespace: PRISM
public class HumanoidIKTarget : UnityEngine.MonoBehaviour
{
    private float weightHandL;
    private UnityEngine.Transform targetTransformHandL;
    private float weightHandR;
    private UnityEngine.Transform targetTransformHandR;
    private float weightFootL;
    private UnityEngine.Transform targetTransformFootL;
    private float weightFootR;
    private UnityEngine.Transform targetTransformFootR;
    private float weightHip;
    private UnityEngine.Transform targetTransformHipOffset;
    private float weightLookAt;
    private UnityEngine.Transform targetTransformLookAt;
    private float weightBody;
    private float weightNeck;
    public float WeightHandL { get; set; }
    public bool IsHandL { get; set; }
    public UnityEngine.Transform TargetTransformHandL { get; set; }
    public float WeightHandR { get; set; }
    public bool IsHandR { get; set; }
    public UnityEngine.Transform TargetTransformHandR { get; set; }
    public float WeightFootL { get; set; }
    public bool IsFootL { get; set; }
    public UnityEngine.Transform TargetTransformFootL { get; set; }
    public float WeightFootR { get; set; }
    public bool IsFootR { get; set; }
    public UnityEngine.Transform TargetTransformFootR { get; set; }
    public float WeightHip { get; set; }
    public bool IsHipOffset { get; set; }
    public UnityEngine.Transform TargetTransformHipOffset { get; set; }
    public float WeightLookAt { get; set; }
    public bool IsHead { get; set; }
    public UnityEngine.Transform TargetTransformLookAt { get; set; }
    public float WeightBody { get; set; }
    public float WeightNeck { get; set; }
}

// Namespace: PRISM
public class LookAtConstraint : UnityEngine.MonoBehaviour
{
    private PRISM.TransformConstraintSettings constraintSettings;
    private bool useUpObject;
    private UnityEngine.Transform upObject;
    private System.IDisposable updateManagerDisposable;
    private System.Action registerCallback;
    private void OnEnable();
    private void OnDisable();
    private void _applyConstraint();
}

// Namespace: PRISM
public class ParentConstraint : PRISM.TransformConstraintBase
{
    private PRISM.ParentConstraintSettings constraintSettings;
    private System.IDisposable updateManagerDisposable;
    private System.Action registerCallback;
    public PRISM.ParentConstraintSettings ConstraintSettings { get; set; }
    public PRISM.TransformConstraintSettings TransformConstraintSettings { get; set; }
    private void OnEnable();
    private void OnDisable();
    private void _applyConstraint();
}

// Namespace: PRISM
public class ParentConstraintSettings
{
    private PRISM.TransformConstraintSettings constraintSettings;
    private PRISM.AxisConstraintSettings positionAxisSettings;
    private PRISM.AxisConstraintSettings rotationAxisSettings;
    private PRISM.AxisConstraintSettings scaleAxisSettings;
    private bool IsActive { get; set; }
    public ConstraintUpdateMode UpdateMode { get; set; }
    public PRISM.TransformConstraintSettings ConstraintSettings { get; set; }
    public void ApplyTo(UnityEngine.Transform transform);
    private bool _tryGetTargetTransformData(UnityEngine.Vector3& targetPosition, UnityEngine.Quaternion& targetRotation, UnityEngine.Vector3& targetLossyScale);
}

// Namespace: PRISM
public class PositionConstraint : UnityEngine.MonoBehaviour
{
    private PRISM.TransformConstraintSettings constraintSettings;
    private System.IDisposable updateManagerDisposable;
    private System.Action registerCallback;
    private void OnEnable();
    private void OnDisable();
    private void _applyConstraint();
}

// Namespace: PRISM
public class RotationConstraint : UnityEngine.MonoBehaviour
{
    private PRISM.TransformConstraintSettings constraintSettings;
    private System.IDisposable updateManagerDisposable;
    private System.Action registerCallback;
    private void OnEnable();
    private void OnDisable();
    private void _applyConstraint();
}

// Namespace: PRISM
public class ScaleConstraint : UnityEngine.MonoBehaviour
{
    private PRISM.TransformConstraintSettings constraintSettings;
    private System.IDisposable updateManagerDisposable;
    private System.Action registerCallback;
    public PRISM.TransformConstraintSettings ConstraintSettings { get; set; }
    private void OnEnable();
    private void OnDisable();
    private void _applyConstraint();
}

// Namespace: PRISM
public class TransformConstraintBase : UnityEngine.MonoBehaviour
{
    public PRISM.TransformConstraintSettings TransformConstraintSettings { get; set; }
}

// Namespace: PRISM
public class TransformConstraintSettings : PRISM.IAxisConstraintSettings
{
    private bool isActive;
    private ConstraintUpdateMode updateMode;
    private float weight;
    private bool constrainX;
    private bool constrainY;
    private bool constrainZ;
    private UnityEngine.Vector3 offset;
    private System.Collections.Generic.List<PRISM.ConstraintTarget> targets;
    private float targetWeightSum;
    public bool IsActive { get; set; }
    public bool IsActiveValue { get; set; }
    public ConstraintUpdateMode UpdateMode { get; set; }
    public float Weight { get; set; }
    public bool ConstraintEnable { get; set; }
    public bool ConstrainX { get; set; }
    public bool ConstrainY { get; set; }
    public bool ConstrainZ { get; set; }
    public UnityEngine.Vector3 Offset { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.IConstraintTarget> Targets { get; set; }
    public float TargetWeightSum { get; set; }
    public bool TryGetTargetPosition(UnityEngine.Vector3& targetPosition);
    public bool TryGetTargetRotation(UnityEngine.Quaternion& targetRotation);
    public bool TryGetTargetLossyScale(UnityEngine.Vector3& targetLossyScale);
    public void ApplyToPosition(UnityEngine.Transform transform);
    public void ApplyToRotation(UnityEngine.Transform transform);
    public void ApplyToScale(UnityEngine.Transform transform);
    public bool ExistsTarget(UnityEngine.Transform check);
    public void AddTarget(UnityEngine.Transform target, float weight);
    public void RemoveAtTarget(int index);
    public void SetActive(bool active);
    public void SetAxis(bool x, bool y, bool z);
    public void SetTargetWeight(int index, float targetWeight);
    private void _calcTargetWeightSum();

    public enum ConstraintUpdateMode : System.Enum
    {
        public int value__;
        public static ConstraintUpdateMode Update;
        public static ConstraintUpdateMode LateUpdate;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.ConstraintTarget, UnityEngine.Transform, bool> <>9__39_0;
        public static System.Func<PRISM.ConstraintTarget, int, float> <>9__45_0;
        private bool <ExistsTarget>b__39_0(PRISM.ConstraintTarget target, UnityEngine.Transform state);
        private float <_calcTargetWeightSum>b__45_0(PRISM.ConstraintTarget e, int _);
    }
}

// Namespace: PRISM
public class AdditiveAnimation : UnityEngine.MonoBehaviour
{
    private AdditiveAnimationData[] additiveAnimationData;
    private System.Collections.Generic.List<AdditiveAnimationData> currentAdditiveAnimationDataList;
    private PRISM.Character character;
    private UnityEngine.Animator animator;
    public bool noStateFlag;
    private static System.Collections.Generic.List<PRISM.AdditiveAnimation> additiveAnimationList;
    private bool <IgnoreOverwriteAnimFrame>k__BackingField;
    public AdditiveAnimationData[] DataArray { get; set; }
    public bool IgnoreOverwriteAnimFrame { get; set; }
    public bool IsExistAdditiveAnim { get; set; }
    public void SetAnimation(string animationName);
    public bool CheckAddAnimation(string animationName);
    private static bool _checkMatchWildcardName(string setBodyAnim, string bodyAmimWildcard);
    public void EvaluateOverwriteClip();
    private float _getAnimationTime();
    private void Awake();
    private void OnDestroy();
    private static void AddAdditiveAnimation(PRISM.AdditiveAnimation aa);
    private static void DeleteAdditiveAnimation(PRISM.AdditiveAnimation aa);
    public static void DoOverwrite();

    public class AdditiveAnimationData : UnityEngine.ISerializationCallbackReceiver
    {
        public string bodyAnimName;
        public int offsetFrame;
        public UnityEngine.Animation addtiveAnimation;
        public PRISM.AnimationClipHolder animationClipHolder;
        public int clipIndex;
        private int <FrameRate>k__BackingField;
        public string clipName;
        public UnityEngine.AnimationClip clip;
        private UnityEngine.Playables.PlayableGraph graph;
        private UnityEngine.Animations.AnimationPlayableOutput output;
        private UnityEngine.Animations.AnimationClipPlayable clipPlayable;
        public int FrameRate { get; set; }
        public float OffsetTime { get; set; }
        public void OnBeforeSerialize();
        public void OnAfterDeserialize();
        public void SetupPlayable(UnityEngine.AnimationClip clip);
        public void SampleAnimation(double time);
        public void CleanupPlayable();
    }
}

// Namespace: PRISM
public class AngelRingController : UnityEngine.MonoBehaviour
{
    public static UnityEngine.Vector3 DefaultOffset;
    public UnityEngine.GameObject baseObject;
    private UnityEngine.Vector3 offset;
    private float tiltTopRate;
    private float sphereRadius;
    private UnityEngine.Vector3 axisY;
    private bool left;
    private Render3DManager manager;
    private PRISM.Character _character;
    public UnityEngine.Matrix4x4 ringRot;
    public UnityEngine.Vector3 center;
    private System.IDisposable registerActionDisposable;
    private System.Action<UnityEngine.Rendering.ScriptableRenderContext, UnityEngine.Camera> registerCallback;
    public UnityEngine.Vector3 Offset { get; set; }
    public float TiltTopRate { get; set; }
    public float SphereRadius { get; set; }
    public void Setup(PRISM.Character character);
    private void Start();
    private void OnEnable();
    private void OnDisable();
    private void _onBeginCameraRendering(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera targetCamera);
    private void _setObjectTransform(UnityEngine.Vector3 viewDir);
    public static UnityEngine.Matrix4x4 CalculateRingMatrix(UnityEngine.Vector3 viewDir, UnityEngine.GameObject baseObject, float tiltTopRate, bool left);
    public static UnityEngine.Vector3 CalculateCenterPos(UnityEngine.Transform baseTransform, UnityEngine.Vector3 offset);
    public static float CalculateRadius(float baseRadius, UnityEngine.Transform baseTransform);
}

// Namespace: PRISM
public class AnimationClipHolder : UnityEngine.MonoBehaviour
{
    private UnityEngine.AnimationClip[] animations;
    public UnityEngine.AnimationClip[] AnimationClipArray { get; set; }
}

// Namespace: PRISM
public class AssembleCharacter
{
    private static System.Collections.Generic.Dictionary<string, PRISM.BodyParameter> paramDic;
    private static PRISM.ResourceManagement.IResourceLoader paramDicLoader;
    private static bool flagSD;
    public static void SetSD(bool onoff);
    public static bool IsSD();
    public static float GetSDScale();
    public static FileNameInfo GetFileNameExist(AssembleInfo asm);
    public static bool ExistsHead(int headID);
    public static bool ExistsHair(int headID, int hairID, int headWaerID);
    public static bool ExistsDress(int headID, string dressID);
    public static bool ExistsAccesory(int headID, int hairID, string acceID);
    public static bool ExistsBG(string bgPrefabName);
    public static void GatherSwayString(PRISM.DressMetaComponent dress, PRISM.HairMetaComponent hair, System.Collections.Generic.IReadOnlyList<PRISM.AccessoryMetaComponent> accessories);
    private static void OrganizeHierarchy(PRISM.DressMetaComponent dress, PRISM.HairMetaComponent hair, PRISM.FaceMetaComponent face, System.Collections.Generic.IReadOnlyList<PRISM.AccessoryMetaComponent> accessory);
    private static void _safeDestroy(UnityEngine.GameObject target);
    private static void _initializeMagicaCloth(PRISM.DressMetaComponent dress, PRISM.HairMetaComponent hair, PRISM.FaceMetaComponent face, System.Collections.Generic.IReadOnlyList<PRISM.AccessoryMetaComponent> accessory);
    private static bool ChangeSkinBone(UnityEngine.GameObject geom, UnityEngine.GameObject from_bone, UnityEngine.GameObject to_bone);
    private static void SettingComponentAndParameter(PRISM.Character character, string faceName);
    private static void InitializeSwayBone(PRISM.DressMetaComponent dress);
    public static PRISM.Character Assemble(AssembleInfo asm, UnityEngine.Transform parent);
    private static T _instantiateParts<T>(UnityEngine.GameObject prefab, UnityEngine.Transform parent);
    private static UnityEngine.GameObject InstantiateGameObject(UnityEngine.GameObject target, UnityEngine.Transform parent);
    private static UnityEngine.GameObject _instantiateFaceObject(string faceFileName, UnityEngine.Transform parent);
    private static UnityEngine.GameObject _instantiateHairObject(string hairFileName, UnityEngine.Transform parent);
    private static UnityEngine.GameObject _loadDressObject(string dressFileName);
    private static UnityEngine.GameObject _loadAccessoryObject(string fname);
    private static void LoadBodyParameters();
    private static void AssembleFileCache(PRISM.DownloadKeyContainer downloadKeyContainer, AssembleInfo asm);
    public static void AssembleFileCache(PRISM.DownloadKeyContainer downloadKeyContainer, PRISM.UnitIdol idol, bool isCoordinationEnabled);
    public static void ApplyParamFromMaster(PRISM.Character character, string charaID, float height);
    public static void ApplyParam(PRISM.Character character, float height, float bust, float head, float arm, float hand);
    public static void ClearBodyParameterCache();
    public static float GetHeightParam(string id);
    public static float GetBustParam(string id);
    public static float GetHeadParam(string id);
    private static UnityEngine.Color _convertColor(string hexString);
    public static void ApplyMaterial(PRISM.Character character, int skin, int color, string charaID);
    private static void SetBounds(PRISM.Character character);
    public static string ParseFaceFileName(AssembleInfo asm, bool isSD);
    public static string ParseHeadWearFileName(AssembleInfo asm, bool isSD);
    public static string ParseHairFileName(AssembleInfo asm, bool isSD);
    public static string ParseDressFileName(AssembleInfo asm, bool isSD);
    public static string ParseAccessoryFileName(string accessoryName, AssembleInfo asm, bool isSD);
    private static void _addHandConstrain(UnityEngine.GameObject dress);
    private static void <ApplyParam>g___applyBodyparamToMagicaCloth|32_0(PRISM.Module.CustomMagicaCloth.MagicaClothGroup clothGroup, <>c__DisplayClass32_0& );
    private static void <SetBounds>g___setBounds|39_0(System.Collections.Generic.IReadOnlyList<UnityEngine.SkinnedMeshRenderer> meshRenderers, <>c__DisplayClass39_0& );

    public class AssembleInfo
    {
        public string idName;
        public string allinName;
        public string faceName;
        public string hairName;
        public string headwearName;
        public string dressName;
        public string[] accessoryName;
    }

    public class FileNameInfo
    {
        public string allinFileName;
        public string faceFileName;
        public string hairFileName;
        public string headwearFileName;
        public string dressFileName;
        public string[] accessoryFileName;
        public string faceName;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.SkinnedMeshRenderer, string, bool> <>9__15_0;
        public static System.Func<UnityEngine.SkinnedMeshRenderer, string, bool> <>9__15_1;
        public static System.Func<PRISM.AccessoryMetaComponent, bool> <>9__17_0;
        public static System.Comparison<PRISM.ApplyMaterialData> <>9__38_0;
        private bool <OrganizeHierarchy>b__15_0(UnityEngine.SkinnedMeshRenderer e, string state);
        private bool <OrganizeHierarchy>b__15_1(UnityEngine.SkinnedMeshRenderer e, string state);
        private bool <_initializeMagicaCloth>b__17_0(PRISM.AccessoryMetaComponent e);
        private int <ApplyMaterial>b__38_0(PRISM.ApplyMaterialData a, PRISM.ApplyMaterialData b);
    }

    private struct <>c__DisplayClass32_0 : System.ValueType
    {
        public float height;
        public float bust;
        public float head;
    }

    private struct <>c__DisplayClass39_0 : System.ValueType
    {
        public UnityEngine.Transform hipBone;
    }
}

// Namespace: PRISM
public class BodyAnimationAsset : UnityEngine.ScriptableObject
{
    public UnityEngine.AnimationClip clip;
    public static UnityEngine.AnimationClip Load(string name);
}

// Namespace: PRISM
public class BodyParameter
{
    public string charaName;
    public string charaID;
    public float height;
    public int skin;
    public int color;
    public UnityEngine.Color bodySkinBright;
    public UnityEngine.Color bodySkinDark;
    public UnityEngine.Color faceSkinBright;
    public UnityEngine.Color faceSkinDark;
}

// Namespace: PRISM
public class BodyParameterScriptableObject : UnityEngine.ScriptableObject
{
    public static string FileName;
    public System.Collections.Generic.List<PRISM.BodyParameter> BodyParameters;
}

// Namespace: PRISM
public class DropShadowParameter : UnityEngine.MonoBehaviour
{
}

// Namespace: PRISM
public class FaceAnimParam : UnityEngine.MonoBehaviour
{
    private EyeController eyeL;
    private EyeController eyeR;
    private UnityEngine.Animator faceAnimator;
    private PRISM.Character character;
    private AnimParamCurve animParamCurve;
    private System.Collections.Generic.Dictionary<int, float> dicValue;
    private int[] mouthList;
    private int[] eyeLidList;
    private int[] eyeBrowList;
    private UnityEngine.AnimationCurve[] mouthCurve;
    private UnityEngine.AnimationCurve[] eyeLidCurve;
    private UnityEngine.AnimationCurve[] eyeBrowCurve;
    private float neckLocalRotY;
    private float timePreset;
    private float interFrame;
    private bool isDirectTime;
    private float directTime;
    private int currentFaceCustomIndex;
    public float seriousRate;
    private bool <eyeAnimation>k__BackingField;
    private bool <eyeOverwrite>k__BackingField;
    private bool lastMouthInFaceCustom;
    private bool lastEyelidInFaceCustom;
    private bool lastEyebrowInFaceCustom;
    public bool eyeAnimation { get; set; }
    private bool eyeOverwrite { get; set; }
    public void SetDirectTime(float directTime);
    public void Setup(PRISM.Character character);
    public void ResetBlendValue();
    public void SetAnimation(string animationName, float transitionFrame);
    private void Update();
    public void UpdateInner(float deltaTime);
    private void UpdateAnimationParameter();
    private void CheckSeriousRate();
    public bool IsEyeCustom();
    public void SetEvaluateValueToEyeTarget(UnityEngine.AnimationCurve curve, UnityEngine.Vector3[] posList, float frame);
    private void _setLipSyncRate(UnityEngine.AnimationCurve curve, int[] list, float frame, bool resetValue);
    private void _setExpRate(UnityEngine.AnimationCurve[] curve, int[] list, float frame);
    private UnityEngine.Vector3 toG(UnityEngine.Vector3 point);
    public void SetEyeTargetNo(int _eyeTargetNo);
    public void SetTarget(UnityEngine.Vector3 _eyeTarget);
    public void SetFixPositionRelative(bool torf);
    public void SetNeckLocalRotY(float r);
    private bool CheckResetParts(UnityEngine.AnimationCurve[] curveList);
    private void _setEvaluateValueToParam(UnityEngine.AnimationCurve curve, float frame, int paramName, bool resetValue);
    private float GetBodyAnimationTime();
    private void _loadAnimParamData(string animName, float transitionFrame);
    private void _resetAnimationCurveList();
    public static string GetAnimParamPath(string fileName);
    public void SetCurve(AnimParamCurve curve);
    public void Reset();

    public class AnimParamCurve : UnityEngine.ISerializationCallbackReceiver
    {
        public bool isPreset;
        public UnityEngine.Vector3[] positionList;
        public UnityEngine.AnimationCurve positionIndex;
        public UnityEngine.AnimationCurve Mouth_A;
        public UnityEngine.AnimationCurve Mouth_I;
        public UnityEngine.AnimationCurve Mouth_U;
        public UnityEngine.AnimationCurve Mouth_E;
        public UnityEngine.AnimationCurve Mouth_O;
        public UnityEngine.AnimationCurve Mouth_SA;
        public UnityEngine.AnimationCurve Mouth_SI;
        public UnityEngine.AnimationCurve Mouth_SE;
        public UnityEngine.AnimationCurve MouthSerious;
        public UnityEngine.AnimationCurve MouthShy;
        public UnityEngine.AnimationCurve MouthSurprise;
        public UnityEngine.AnimationCurve MouthAnger;
        public UnityEngine.AnimationCurve EyeLClose;
        public UnityEngine.AnimationCurve EyeRClose;
        public UnityEngine.AnimationCurve EyeLSmile;
        public UnityEngine.AnimationCurve EyeRSmile;
        public UnityEngine.AnimationCurve EyeBrowSerious;
        public UnityEngine.AnimationCurve EyeBrowSad;
        public UnityEngine.AnimationCurve EyeBrowUnique;
        public UnityEngine.AnimationCurve EyeBrowUp;
        public UnityEngine.AnimationCurve EyeBrowDown;
        public UnityEngine.AnimationCurve LipSyncRate;
        public FaceCustomData[] faceCustom;
        private int <FrameRate>k__BackingField;
        public int FrameRate { get; set; }
        public void OnBeforeSerialize();
        public void OnAfterDeserialize();
    }

    public class FaceCustomData
    {
        public bool isMouthShape;
        public bool isEyelidShape;
        public bool isEyebrowShape;
        public UnityEngine.AnimationCurve rate;
        public string stateName;
    }
}

// Namespace: PRISM
public class FaceBoneControllerForSD : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject baseObject;
    private UnityEngine.Texture2D paramTex;
    private UnityEngine.AnimationClip noseDeleteClip;
    private UnityEngine.Animator animator;
    private UnityEngine.Playables.PlayableGraph graph;
    private UnityEngine.Animations.AnimationPlayableOutput output;
    private UnityEngine.Animations.AnimationLayerMixerPlayable mixer;
    private UnityEngine.Animations.AnimationClipPlayable noseDeleteClipPlayable;
    private UnityEngine.Camera cachedMainCamera;
    private void Awake();
    private void OnDisable();
    private void Update();
    private void SetAnimationAngleValue(UnityEngine.Vector3 viewDir);
    private void OnDestroy();
    private void _setupPlayableGraph();
    private void _cleanupPlayableGraph();
}

// Namespace: PRISM
public class HairZBiasController : UnityEngine.MonoBehaviour
{
    private PRISM.Character _character;
    public UnityEngine.GameObject atama;
    public UnityEngine.GameObject kataL;
    public UnityEngine.GameObject kataR;
    public UnityEngine.GameObject spine;
    private UnityEngine.Vector3 referencePosition;
    private UnityEngine.Vector3 planePosition;
    private UnityEngine.Vector3 planeNormal;
    private UnityEngine.Vector3 cameraDir;
    public UnityEngine.GameObject rootBone;
    private System.IDisposable registerActionDisposable;
    private System.Action<UnityEngine.Rendering.ScriptableRenderContext, UnityEngine.Camera> registerCallback;
    public void Setup(PRISM.Character character);
    private void Start();
    private void _onBeginCameraRendering(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera targetCamera);
    private void OnEnable();
    private void OnDisable();
    private void _calcPlane();
    public void ResetBone(UnityEngine.GameObject _root);
}

// Namespace: PRISM
public class HumanoidIKEvent : UnityEngine.MonoBehaviour
{
    private static UnityEngine.Quaternion HandBaseRotL;
    private static UnityEngine.Quaternion HandBaseRotR;
    private static UnityEngine.Quaternion FootBaseRot;
    private UnityEngine.Animator animator;
    private PRISM.HumanoidIKTarget ikTarget;
    public PRISM.HumanoidIKTarget IkTarget { get; set; }
    public void Setup(PRISM.Character character, UnityEngine.GameObject target);
    private void _setupIKTargets(UnityEngine.GameObject rootObject, int charactorIndex);
    private void OnAnimatorIK();
    private void _onAnimatorIkHipOffsetAndLegs();
    private void _onAnimatorIkLookAt();
    private void _onAnimatorIkHands();
    private void _onAnimatorIkSet(UnityEngine.AvatarIKGoal goal, float weight, UnityEngine.Transform t, UnityEngine.Quaternion rot);
}

// Namespace: PRISM
public class ApplyMaterialData
{
    private string id;
    private System.Collections.Generic.List<UnityEngine.Material> materials;
    private int applyOrder;
    public string Id { get; set; }
    public System.Collections.Generic.IReadOnlyList<UnityEngine.Material> Materials { get; set; }
    public int ApplyOrder { get; set; }
}

// Namespace: PRISM
public class MaterialHolderComponent : UnityEngine.MonoBehaviour
{
    private System.Collections.Generic.List<PRISM.ApplyMaterialData> applyMaterialDataList;
    public System.Collections.Generic.IReadOnlyList<PRISM.ApplyMaterialData> ApplyMaterialDataList { get; set; }
}

// Namespace: PRISM
public class MirrorCharacter : UnityEngine.MonoBehaviour
{
    private float adjustOutline;
    private System.Collections.Generic.List<PRISM.Legacy.ReflectedCharacter> reflectedCharacters;
    public float AdjustOutline { get; set; }
    public void SetupCharacter(PRISM.Character character);
}

// Namespace: PRISM
public class MotionSequence
{
    private static string PostNameData;
    private static string PostNameActSet;
    public static string CustomFaceActID;
    private static System.Collections.Generic.Dictionary<string, SequenceData> dicSequence;
    private static System.Collections.Generic.Dictionary<string, FaceAct> dicFaceAct;
    public static string GetMotionSequencePath(string name);
    public static string GetActSetPath(string name);
    public static Data LoadOrCreateSequenceData(string msName, bool additive);
    public static FaceActSet LoadOrCreateActSetData(string faceActName);
    public static System.Collections.Generic.Dictionary<string, SequenceData> GetSequenceDictionary();
    public static System.Collections.Generic.Dictionary<string, FaceAct> GetFaceActDictionary();
    public static void PrePreLoad(PRISM.DownloadKeyContainer downloadKeyContainer, string msName, PRISM.UnitIdol[] _unitIdol);
    private static void _facePrePreLoad(PRISM.DownloadKeyContainer downloadKeyContainer, string faName);
    public static void LoadAndPreLoad(PRISM.DownloadKeyContainer downloadKeyContainer, string msName);
    public static void LoadAndPreLoadFaceAnimation(PRISM.DownloadKeyContainer downloadKeyContainer, PRISM.UnitIdol[] _unitIdol);
    private static void _facePreLoad(PRISM.DownloadKeyContainer downloadKeyContainer, string faName);

    public class Data
    {
        public SequenceData[] sequenceDatas;
    }

    public class SequenceData : UnityEngine.ISerializationCallbackReceiver
    {
        private int startFrame;
        private int endFrame;
        public string id;
        public ActData[] actDataBody;
        public ActData[] actDataFace;
        public NeckIKData[] neckIK;
        public EyeTargetData[] eyeTarget;
        public bool seriousClose;
        public FaceAct customFaceAct;
        public UnityEngine.AnimationCurve seriousRate;
        public HandIKData[] handIK;
        private int <FrameRate>k__BackingField;
        private float <StartTime>k__BackingField;
        private float <EndTime>k__BackingField;
        public int FrameRate { get; set; }
        public int StartFrame { get; set; }
        public int EndFrame { get; set; }
        public float StartTime { get; set; }
        public float EndTime { get; set; }
        public float GetSeriousRate(float time);
        private float _getCurveValue(UnityEngine.AnimationCurve curve, float time);
        public void OnBeforeSerialize();
        public void OnAfterDeserialize();
    }

    public class ActData : UnityEngine.ISerializationCallbackReceiver
    {
        private int startFrame;
        private int transitionFrame;
        private int offsetFrame;
        public string actionID;
        public int rate;
        private int <FrameRate>k__BackingField;
        private float <StartTime>k__BackingField;
        private float <TransitionTime>k__BackingField;
        private float <OffsetTime>k__BackingField;
        public int FrameRate { get; set; }
        public int StartFrame { get; set; }
        public int TransitionFrame { get; set; }
        public int OffsetFrame { get; set; }
        public float StartTime { get; set; }
        public float TransitionTime { get; set; }
        public float OffsetTime { get; set; }
        public void OnBeforeSerialize();
        public void OnAfterDeserialize();
    }

    public class NeckIKData : UnityEngine.ISerializationCallbackReceiver
    {
        private int startFrame;
        private int neckLerpFrame;
        public int hangle;
        public int vangle;
        public int neckRate;
        public bool handIKOn;
        private int <FrameRate>k__BackingField;
        private float <StartTime>k__BackingField;
        private float <NeckLerpSpeed>k__BackingField;
        public int FrameRate { get; set; }
        public int StartFrame { get; set; }
        public int NeckLerpFrame { get; set; }
        public float StartTime { get; set; }
        public float NeckLerpSpeed { get; set; }
        public void OnBeforeSerialize();
        public void OnAfterDeserialize();
    }

    public class EyeTargetData : UnityEngine.ISerializationCallbackReceiver
    {
        private int startFrame;
        public Target target;
        private int <FrameRate>k__BackingField;
        private float <StartTime>k__BackingField;
        public int FrameRate { get; set; }
        public int StartFrame { get; set; }
        public float StartTime { get; set; }
        public void OnBeforeSerialize();
        public void OnAfterDeserialize();
    }

    public class HandIKData : UnityEngine.ISerializationCallbackReceiver
    {
        private int startFrame;
        private int handLerpFrame;
        public int leftTarget;
        public int rightTarget;
        private int <FrameRate>k__BackingField;
        private float <StartTime>k__BackingField;
        private float <HandLerpTime>k__BackingField;
        public int FrameRate { get; set; }
        public int StartFrame { get; set; }
        public int HandLerpFrame { get; set; }
        public float StartTime { get; set; }
        public float HandLerpTime { get; set; }
        public void OnBeforeSerialize();
        public void OnAfterDeserialize();
    }

    public class FaceActSet
    {
        public FaceAct[] faceAct;
    }

    public class FaceAct : UnityEngine.ISerializationCallbackReceiver
    {
        private int duration;
        public string actionID;
        public string explain;
        public FaceAnimData[] faceAnim;
        public UnityEngine.AnimationCurve neckVertical;
        public UnityEngine.AnimationCurve neckHorizontal;
        public UnityEngine.AnimationCurve neckRoll;
        public UnityEngine.AnimationCurve eyeClose;
        public UnityEngine.AnimationCurve eyeCloseSmile;
        public UnityEngine.Vector3[] positionList;
        public UnityEngine.AnimationCurve positionIndex;
        private int <FrameRate>k__BackingField;
        private float <DurationTime>k__BackingField;
        public int FrameRate { get; set; }
        public int Duration { get; set; }
        public float DurationTime { get; set; }
        public bool NeckVerticalEnable { get; set; }
        public bool NeckHorizontalEnable { get; set; }
        public bool NeckRollEnable { get; set; }
        public bool EyeCloseEnable { get; set; }
        public bool EyeCloseSmileEnable { get; set; }
        public float GetNeckVertical(float time);
        public float GetNeckHorizontal(float time);
        public float GetNeckRoll(float time);
        public float GetEyeClose(float time);
        public float GetEyeCloseSmile(float time);
        private float _getCurveValue(UnityEngine.AnimationCurve curve, float time);
        public void OnBeforeSerialize();
        public void OnAfterDeserialize();
    }

    public class FaceAnimData : UnityEngine.ISerializationCallbackReceiver
    {
        private int startFrame;
        private int transitionFrame;
        public string faceAnimParamID;
        private int <FrameRate>k__BackingField;
        private float <StartTime>k__BackingField;
        private float <TransitionTime>k__BackingField;
        public int FrameRate { get; set; }
        public int StartFrame { get; set; }
        public int TransitionFrame { get; set; }
        public float StartTime { get; set; }
        public float TransitionTime { get; set; }
        public void OnBeforeSerialize();
        public void OnAfterDeserialize();
    }
}

// Namespace: PRISM
public class OutlineController : UnityEngine.MonoBehaviour
{
    private PRISM.CameraController _camera;
    private UnityEngine.GameObject baseObject;
    private float OutlineAdjust;
    private UnityEngine.Color colorAdd;
    private float OutlineInclusive;
    private float OutlineResizeRate;
    private PRISM.Character _character;
    private bool isEnablePass;
    private System.IDisposable registerActionDisposable;
    private System.Action<UnityEngine.Rendering.ScriptableRenderContext, UnityEngine.Camera> registerCallback;
    public UnityEngine.GameObject BaseObject { get; set; }
    public bool IsEnablePass { get; set; }
    public void Setup(PRISM.Character character, PRISM.CameraController cameraController);
    private void OnEnable();
    private void OnDisable();
    private void _onBeginCameraRendering(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera targetCamera);
    private void Start();
    private void _calcOutlineFromCamera(UnityEngine.Camera cam);
    public static float CalculateAdjustValue(UnityEngine.Camera targetCamera, UnityEngine.GameObject baseObject, float resizeRate, float adjust);
    public void SetEnablePass(bool enable);

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<UnityEngine.Material, bool> <>9__21_0;
        private void <SetEnablePass>b__21_0(UnityEngine.Material mat, bool state);
    }
}

// Namespace: PRISM
public class OutlineParameterHolder : UnityEngine.MonoBehaviour
{
    public float OutlineAdjust;
    public float OutlineInclusive;
    public float OutlineResizeRate;
}

// Namespace: PRISM
public class AccessoryMetaComponent : UnityEngine.MonoBehaviour, PRISM.IPartsMeta
{
    private System.Collections.Generic.List<UnityEngine.Transform> searchTargetBones;
    private System.Collections.Generic.List<UnityEngine.SkinnedMeshRenderer> meshRenderers;
    private UnityEngine.MeshRenderer[] materialHolderMeshRenderers;
    private PRISM.SwayBone swayBone;
    private PRISM.Module.CustomMagicaCloth.MagicaClothGroup magicaClothGroup;
    private PRISM.MaterialHolderComponent materialHolderComponent;
    private System.Collections.Generic.IReadOnlyList<PRISM.ApplyMaterialData> applyMaterialDataList;
    public System.Collections.Generic.IReadOnlyList<UnityEngine.SkinnedMeshRenderer> MeshRenderers { get; set; }
    public PRISM.SwayBone SwayBone { get; set; }
    public PRISM.Module.CustomMagicaCloth.MagicaClothGroup MagicaClothGroup { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.ApplyMaterialData> ApplyMaterialDataList { get; set; }
    public void LoadMeta(bool loadIfNeed);
    public UnityEngine.Transform SearchBone(string name);
    public UnityEngine.Transform SearchBoneStartsWith(string name);
    public void DestroyMeshRenderer(UnityEngine.SkinnedMeshRenderer meshRenderer);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.MeshRenderer, PRISM.ApplyMaterialData> <>9__14_0;
        public static System.Func<UnityEngine.Transform, string, bool> <>9__16_0;
        public static System.Func<UnityEngine.Transform, string, bool> <>9__17_0;
        private PRISM.ApplyMaterialData <get_ApplyMaterialDataList>b__14_0(UnityEngine.MeshRenderer e);
        private bool <SearchBone>b__16_0(UnityEngine.Transform e, string state);
        private bool <SearchBoneStartsWith>b__17_0(UnityEngine.Transform e, string state);
    }
}

// Namespace: PRISM
public class DressMetaComponent : UnityEngine.MonoBehaviour, PRISM.IPartsMeta
{
    private System.Collections.Generic.List<UnityEngine.Transform> searchTargetBones;
    private UnityEngine.SkinnedMeshRenderer[] meshRenderers;
    private UnityEngine.MeshRenderer[] materialHolderMeshRenderers;
    private PRISM.SwayBone swayBone;
    private PRISM.Module.CustomMagicaCloth.MagicaClothGroup magicaClothGroup;
    private PRISM.ConeConstrain coneConstrain;
    private System.Collections.Generic.List<PRISM.Module.CustomMagicaCloth.SkirtConstraint.SkirtConstraint> skirtConstraints;
    private PRISM.MaterialHolderComponent materialHolderComponent;
    private System.Collections.Generic.IReadOnlyList<PRISM.ApplyMaterialData> applyMaterialDataList;
    public System.Collections.Generic.IReadOnlyList<UnityEngine.SkinnedMeshRenderer> MeshRenderers { get; set; }
    public PRISM.SwayBone SwayBone { get; set; }
    public PRISM.Module.CustomMagicaCloth.MagicaClothGroup MagicaClothGroup { get; set; }
    public PRISM.ConeConstrain ConeConstrain { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.CustomMagicaCloth.SkirtConstraint.SkirtConstraint> SkirtConstraints { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.ApplyMaterialData> ApplyMaterialDataList { get; set; }
    public void LoadMeta(bool loadIfNeed);
    public UnityEngine.Transform SearchBone(string name);
    public UnityEngine.Transform SearchBoneStartsWith(string name);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.MeshRenderer, PRISM.ApplyMaterialData> <>9__20_0;
        public static System.Func<UnityEngine.Transform, string, bool> <>9__22_0;
        public static System.Func<UnityEngine.Transform, string, bool> <>9__23_0;
        private PRISM.ApplyMaterialData <get_ApplyMaterialDataList>b__20_0(UnityEngine.MeshRenderer e);
        private bool <SearchBone>b__22_0(UnityEngine.Transform e, string state);
        private bool <SearchBoneStartsWith>b__23_0(UnityEngine.Transform e, string state);
    }
}

// Namespace: PRISM
public class FaceMetaComponent : UnityEngine.MonoBehaviour, PRISM.IPartsMeta
{
    private System.Collections.Generic.List<UnityEngine.Transform> searchTargetBones;
    private UnityEngine.SkinnedMeshRenderer[] meshRenderers;
    private PRISM.Module.CustomMagicaCloth.AMagicaBodyParamColliderController[] magicaColliders;
    public System.Collections.Generic.IReadOnlyList<UnityEngine.SkinnedMeshRenderer> MeshRenderers { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.CustomMagicaCloth.AMagicaBodyParamColliderController> MagicaColliders { get; set; }
    public void LoadMeta(bool loadIfNeed);
    public UnityEngine.Transform SearchBone(string name);
    public UnityEngine.Transform SearchBoneStartsWith(string name);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.Transform, string, bool> <>9__8_0;
        public static System.Func<UnityEngine.Transform, string, bool> <>9__9_0;
        private bool <SearchBone>b__8_0(UnityEngine.Transform e, string state);
        private bool <SearchBoneStartsWith>b__9_0(UnityEngine.Transform e, string state);
    }
}

// Namespace: PRISM
public class HairMetaComponent : UnityEngine.MonoBehaviour, PRISM.IPartsMeta
{
    private System.Collections.Generic.List<UnityEngine.Transform> searchTargetBones;
    private UnityEngine.SkinnedMeshRenderer[] meshRenderers;
    private UnityEngine.MeshRenderer[] materialHolderMeshRenderers;
    private PRISM.SwayBone swayBone;
    private PRISM.Module.CustomMagicaCloth.MagicaClothGroup magicaClothGroup;
    private PRISM.AngelRingController angelRingController;
    private PRISM.HairZBiasController zBiasController;
    private PRISM.MaterialHolderComponent materialHolderComponent;
    private System.Collections.Generic.IReadOnlyList<PRISM.ApplyMaterialData> applyMaterialDataList;
    public System.Collections.Generic.IReadOnlyList<UnityEngine.SkinnedMeshRenderer> MeshRenderers { get; set; }
    public PRISM.SwayBone SwayBone { get; set; }
    public PRISM.Module.CustomMagicaCloth.MagicaClothGroup MagicaClothGroup { get; set; }
    public PRISM.AngelRingController AngelRingController { get; set; }
    public PRISM.HairZBiasController ZBiasController { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.ApplyMaterialData> ApplyMaterialDataList { get; set; }
    public void LoadMeta(bool loadIfNeed);
    public UnityEngine.Transform SearchBone(string name);
    public UnityEngine.Transform SearchBoneStartsWith(string name);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.MeshRenderer, PRISM.ApplyMaterialData> <>9__20_0;
        public static System.Func<UnityEngine.Transform, string, bool> <>9__22_0;
        public static System.Func<UnityEngine.Transform, string, bool> <>9__23_0;
        private PRISM.ApplyMaterialData <get_ApplyMaterialDataList>b__20_0(UnityEngine.MeshRenderer e);
        private bool <SearchBone>b__22_0(UnityEngine.Transform e, string state);
        private bool <SearchBoneStartsWith>b__23_0(UnityEngine.Transform e, string state);
    }
}

// Namespace: PRISM
public interface IPartsMeta
{
    public System.Collections.Generic.IReadOnlyList<UnityEngine.SkinnedMeshRenderer> MeshRenderers { get; set; }
    public void LoadMeta(bool loadIfNeed);
    public UnityEngine.Transform SearchBone(string name);
    public UnityEngine.Transform SearchBoneStartsWith(string name);
}

// Namespace: PRISM
public class RecordedAnim
{
    private static int convertToFixed;
    public static Data Load(string name);
    public static Data LoadDirect(byte[] txtAsset);
    public static Data ConvertFixedToFloat(DataInt fromData);
    private static float ToFloat(int value);
    private static UnityEngine.Vector3 ToFloat3(int[] v);
    private static UnityEngine.Vector4 ToFloat4(int[] v);

    public enum FaceParam : System.Enum
    {
        public int value__;
        public static FaceParam Mouth_A;
        public static FaceParam Mouth_I;
        public static FaceParam Mouth_U;
        public static FaceParam Mouth_E;
        public static FaceParam Mouth_O;
        public static FaceParam Mouth_SA;
        public static FaceParam Mouth_SI;
        public static FaceParam Mouth_SE;
        public static FaceParam MouthSerious;
        public static FaceParam MouthShy;
        public static FaceParam MouthSurprise;
        public static FaceParam MouthAnger;
        public static FaceParam EyeLClose;
        public static FaceParam EyeRClose;
        public static FaceParam EyeLSmile;
        public static FaceParam EyeRSmile;
        public static FaceParam EyeBrowSerious;
        public static FaceParam EyeBrowSad;
        public static FaceParam EyeBrowUnique;
        public static FaceParam EyeBrowUp;
        public static FaceParam EyeBrowDown;
        public static FaceParam LastParam;
    }

    public class BoneAxis
    {
        public UnityEngine.Vector3 forward;
        public UnityEngine.Vector3 up;
    }

    public class FrameData : UnityEngine.ISerializationCallbackReceiver
    {
        private int frameRate;
        private float frameCount;
        public UnityEngine.Vector4 eyeIrisUvL;
        public UnityEngine.Vector4 eyeIrisUvR;
        public float eyeFlip;
        public float[] faceParams;
        public BoneAxis[] bodyBones;
        public UnityEngine.Vector3 hipsTrans;
        private float <Time>k__BackingField;
        public int FrameRate { get; set; }
        public float FrameCount { get; set; }
        public float Time { get; set; }
        public void OnBeforeSerialize();
        public void OnAfterDeserialize();
    }

    public class Data
    {
        public FrameData[] frameData;
    }

    public class BoneAxisInt
    {
        public int[] q;
    }

    public class FrameDataInt : UnityEngine.ISerializationCallbackReceiver
    {
        public int frameCount;
        public int[] eyeIrisUvL;
        public int[] eyeIrisUvR;
        public int eyeFlip;
        public int[] faceParams;
        public BoneAxisInt[] bodyBones;
        public int[] hipsTrans;
        private int <FrameRate>k__BackingField;
        public int FrameRate { get; set; }
        public void OnBeforeSerialize();
        public void OnAfterDeserialize();
    }

    public class DataInt
    {
        public bool intFormat;
        public FrameDataInt[] frameData;
    }
}

// Namespace: PRISM
public class RecordedAnimPlayer : UnityEngine.MonoBehaviour
{
    private EyeController eyeL;
    private EyeController eyeR;
    private UnityEngine.Animator faceAnimator;
    private UnityEngine.Animator bodyAnimator;
    private PRISM.Character character;
    private Data recordedAnimData;
    private UnityEngine.Transform[] transBones;
    private int currentDataCount;
    private int totalDataCount;
    private float time;
    public void Setup(UnityEngine.Animator faceAnimator, UnityEngine.Animator bodyAnimator, Data recordedAnimationData);
    public void SetupBone(UnityEngine.Animator bodyAnimator);
    public void Play(float time);
    private float _calcFrameDataRate(FrameData& fd0, FrameData& fd1);
    private void Update();
    private void LateUpdate();
}

// Namespace: PRISM
public class RootAnimation : UnityEngine.MonoBehaviour
{
    private PRISM.Character _character;
    private UnityEngine.Playables.PlayableDirector timeline;
    private RootCurveData rootCurveData;
    private UnityEngine.Vector3 startPos;
    private bool useTimelineTime;
    private static float commonHipsHight;
    public bool UseTimelineTime { get; set; }
    public void Setup(PRISM.Character character);
    public void SetAnimation(string animName);
    private float GetBodyAnimationTime();
    public void UpdateRootPosition();
    public void SetAnimationTime(float t);
    private void _syncTimelineTimeIfNeed();

    public class RootCurveData
    {
        public bool root;
        public bool rootScaling;
        public UnityEngine.AnimationCurve pos_x;
        public UnityEngine.AnimationCurve pos_y;
        public UnityEngine.AnimationCurve pos_z;
        public UnityEngine.AnimationCurve rot_x;
        public UnityEngine.AnimationCurve rot_y;
        public UnityEngine.AnimationCurve rot_z;
        public UnityEngine.AnimationCurve rot_w;
    }
}

// Namespace: PRISM
public class RootAnimationAsset : UnityEngine.ScriptableObject
{
    public RootCurveData rootCurveData;
    public static RootCurveData Load(string name);
}

// Namespace: PRISM
public class SwayBone : UnityEngine.MonoBehaviour
{
    private PRISM.Character _character;
    public UnityEngine.GameObject root;
    public UnityEngine.GameObject atama;
    public UnityEngine.GameObject kataL;
    public UnityEngine.GameObject kataR;
    public UnityEngine.GameObject armL;
    public UnityEngine.GameObject armR;
    public UnityEngine.GameObject chestL;
    public UnityEngine.GameObject chestR;
    public UnityEngine.GameObject thighL;
    public UnityEngine.GameObject thighR;
    public UnityEngine.GameObject spine1;
    public UnityEngine.GameObject spine2;
    public UnityEngine.GameObject calfL;
    public UnityEngine.GameObject calfR;
    public UnityEngine.GameObject foreArmL;
    public UnityEngine.GameObject foreArmR;
    public UnityEngine.GameObject tempAtama;
    public UnityEngine.Vector4 groundPlane;
    private UnityEngine.Transform[] additionalSearchBone;
    private System.Collections.Generic.List<PRISM.SwayString> listStrings;
    public void Setup(PRISM.Character character);
    private void SearchCollideBone(UnityEngine.GameObject& obj, string name);
    public void CalcPlane();
    public void SearchSwayStrings();
    public void CalcSwayStringsInitialPosition();
    public void SearchSwayStringsFromChild(string parent_name);
    public void SearchSwayStringsFromChild(UnityEngine.Transform pt);
    public void SearchSwayStrings(string name);
    public void AddSwayStrings(UnityEngine.GameObject top);
    public void ClearListStrings();
    public System.Collections.Generic.List<PRISM.SwayString> GetListStrings();
    public void RemoveString(PRISM.SwayString swayString);
}

// Namespace: PRISM
public class SwayBoneManager : PRISM.DesignPattern.SingletonBehaviour<PRISM.SwayBoneManager>
{
    private static bool parallelCalc;
    private static bool parallelTransform;
    private static bool pauseFlag;
    public static bool isAdv;
    public static float EPS;
    public static float MoveAdjustRate;
    private static UnityEngine.GameObject baseObject;
    public static UnityEngine.Vector3 windVector;
    public static float timeRate;
    private static float setDeltaTime;
    private float deltaTime;
    private bool skipFrame;
    private static System.Collections.Generic.List<PRISM.SwayString> swayString;
    public static System.Collections.Generic.Dictionary<UnityEngine.GameObject, int> colliderDic;
    private static bool changeFlag;
    public static bool paramChangeFlag;
    private static bool allocFlag;
    public Unity.Collections.NativeArray<SwayStringData> ssd;
    public Unity.Collections.NativeArray<ColliderFlag> cf;
    public Unity.Collections.NativeArray<ColliderParam> cp;
    public Unity.Collections.NativeArray<BoneColliderParam> bcp;
    public Unity.Collections.NativeArray<Point> point;
    public Unity.Collections.NativeArray<int> idx;
    public UnityEngine.Jobs.TransformAccessArray transforms;
    public System.Collections.Generic.List<UnityEngine.Transform> transformList;
    public bool ExistSwayBone { get; set; }
    public static void SetParallelCalc(bool onoff);
    public static void SetParallelTransform(bool onoff);
    public static void AddCalc(PRISM.SwayString ss);
    public static void DeleteCalc(PRISM.SwayString ss);
    protected void Awake();
    private void Update();
    public void Do();
    public static void ResetMove();
    public static void Pause(bool torf);
    public static void SetDeltaTime(float _deltaTime);
    private void OnDestroy();
    public static Point& GetPoint(SwayStringData& ss, int i);
    public static void SetPoint(SwayStringData& ss, int i, Point pp);
    public static UnityEngine.Matrix4x4& GetBoneMatrix(BoneColliderParam& bcp, int i);
    public static UnityEngine.Matrix4x4& GetBoneInvMatrix(BoneColliderParam& bcp, int i);
    public static float& GetAllowRadius(Point& p, int i);
    private void DisposeAll();
    private void ApplyJobExecuteNotParallel();

    public struct ForceParam : System.ValueType
    {
        public bool notRotate;
        public float bendStrength;
        public float baseGravity;
        public float inertiaMoment;
        public float airResistance;
        public float deformResistance;
    }

    public struct ColliderFlag : System.ValueType
    {
        public bool on;
        public int paramIdx;
    }

    public struct ColliderParam : System.ValueType
    {
        public UnityEngine.Vector3 c0;
        public UnityEngine.Vector3 c1;
        public float r0;
        public float r1;
    }

    public struct MeshColliderParam : System.ValueType
    {
        public UnityEngine.Vector3 position;
        public UnityEngine.Vector3 normal;
    }

    public struct BoneColliderParam : System.ValueType
    {
        public UnityEngine.Matrix4x4 matBone0;
        public UnityEngine.Matrix4x4 matBone1;
        public UnityEngine.Matrix4x4 matBone2;
        public UnityEngine.Matrix4x4 matBone3;
        public UnityEngine.Matrix4x4 matBone4;
        public UnityEngine.Matrix4x4 matBone5;
        public UnityEngine.Matrix4x4 matBone6;
        public UnityEngine.Matrix4x4 matBone7;
        public UnityEngine.Matrix4x4 matBone8;
        public UnityEngine.Matrix4x4 invBone0;
        public UnityEngine.Matrix4x4 invBone1;
        public UnityEngine.Matrix4x4 invBone2;
        public UnityEngine.Matrix4x4 invBone3;
        public UnityEngine.Matrix4x4 invBone4;
        public UnityEngine.Matrix4x4 invBone5;
        public UnityEngine.Matrix4x4 invBone6;
        public UnityEngine.Matrix4x4 invBone7;
        public UnityEngine.Matrix4x4 invBone8;
        public UnityEngine.Vector4 hitPlane;
    }

    public enum PointFlag : System.Enum
    {
        public uint value__;
        public static PointFlag None;
        public static PointFlag notRotate;
        public static PointFlag notUpdate;
        public static PointFlag posUpdate;
    }

    public struct Point : System.ValueType
    {
        public UnityEngine.Matrix4x4 matParent;
        public int point_start;
        public int parentIdx;
        public float lenFromParent;
        public float allowRadius0;
        public float allowRadius1;
        public float allowRadius2;
        public float allowRadius3;
        public float allowRadius4;
        public float allowRadius5;
        public float allowRadius6;
        public float allowRadius7;
        public float allowRadius8;
        public float allowRadius9;
        public float allowRadius10;
        public float allowRadius11;
        public float allowRadius12;
        public float allowRadius13;
        public UnityEngine.Vector3 pos;
        public UnityEngine.Vector3 v;
        public UnityEngine.Vector3 feedback;
        public UnityEngine.Vector3 initPos;
        public UnityEngine.Vector3 zeroPos;
        public UnityEngine.Vector3 boneInitPos;
        public int collideOffset;
        public int stringIdx;
        public int selfIdx;
        public UnityEngine.Quaternion initRot;
        public UnityEngine.Vector3 initPosSelf;
        private PointFlag flag;
        public bool notUpdate { get; set; }
        public bool notRotate { get; set; }
        public bool posUpdate { get; set; }
        private bool _hasFlag(PointFlag filter);
    }

    public enum SwayStringFlag : System.Enum
    {
        public uint value__;
        public static SwayStringFlag None;
        public static SwayStringFlag headZCollide;
        public static SwayStringFlag headXCollide;
        public static SwayStringFlag skirtCollide;
        public static SwayStringFlag planeCollide;
        public static SwayStringFlag sleeveCollide;
        public static SwayStringFlag chestMoveCollide;
        public static SwayStringFlag xzPlaneCollide;
        public static SwayStringFlag stopFlag;
        public static SwayStringFlag notUpdate;
        public static SwayStringFlag skipFrame;
    }

    public struct SwayStringData : System.ValueType
    {
        public ForceParam fp;
        public int point_start;
        public int point_count;
        public float dtime;
        public UnityEngine.Vector3 baseMove;
        public UnityEngine.Vector3 windVector;
        public UnityEngine.Matrix4x4 baseMat;
        public int chestConstaint;
        public int collideIdx;
        public float collideMinimum;
        public int angleCap;
        public float addCollideRoot;
        public float addCollideEnd;
        public Point point0;
        public Point point1;
        public Point point2;
        public Point point3;
        public Point point4;
        public Point point5;
        public Point point6;
        public Point point7;
        private SwayStringFlag flag;
        public bool headZCollide { get; set; }
        public bool headXCollide { get; set; }
        public bool skirtCollide { get; set; }
        public bool planeCollide { get; set; }
        public bool sleeveCollide { get; set; }
        public bool chestMoveCollide { get; set; }
        public bool stopFlag { get; set; }
        public bool xzPlaneCollide { get; set; }
        public bool notUpdate { get; set; }
        public bool skipFrame { get; set; }
        private bool _hasFlag(SwayStringFlag filter);
    }

    private struct ResetJob : System.ValueType, UnityEngine.Jobs.IJobParallelForTransform
    {
        public Unity.Collections.NativeArray<Point> point;
        public Unity.Collections.NativeArray<int> idx;
        public void Execute(int t, UnityEngine.Jobs.TransformAccess transform);
    }

    private struct CalcJob : System.ValueType, Unity.Jobs.IJobParallelFor
    {
        public Unity.Collections.NativeArray<ColliderFlag> cf;
        public Unity.Collections.NativeArray<ColliderParam> cp;
        public Unity.Collections.NativeArray<BoneColliderParam> bcp;
        public Unity.Collections.NativeArray<SwayStringData> ssd;
        public void Execute(int t);
    }

    private struct CopyJob : System.ValueType, Unity.Jobs.IJobParallelFor
    {
        public Unity.Collections.NativeArray<SwayStringData> ssd;
        public Unity.Collections.NativeArray<Point> point;
        public void Execute(int t);
    }

    private struct ApplyJob : System.ValueType, UnityEngine.Jobs.IJobParallelForTransform
    {
        public Unity.Collections.NativeArray<Point> point;
        public Unity.Collections.NativeArray<int> idx;
        public void Execute(int t, UnityEngine.Jobs.TransformAccess transform);
    }
}

// Namespace: PRISM
public class SwayString : UnityEngine.MonoBehaviour
{
    public UnityEngine.Transform rootBone;
    public PRISM.SwayBone swayBone;
    public bool headCollide;
    public bool headZCollide;
    public bool headXCollide;
    public bool shoulderCollide;
    public bool spineCollide;
    public bool chestCollide;
    public bool armCollide;
    public bool thighCollide;
    public bool skirtCollide;
    public bool planeCollide;
    public bool sleeveCollide;
    public bool xzPlaneCollide;
    public bool neckCollide;
    public bool collideBothUpper;
    public int chestConstaint;
    public int angleCap;
    public bool chestMoveCollide;
    public static float speedToCollideSize;
    public static float shoulderCollideSize;
    public static float shoulderCollideShrinkRate;
    public static float elbowCollideSize;
    public static float elbowCollideShrinkRate;
    public static float handCollideSize;
    public static float handCollideShrinkRate;
    private int collideIdx;
    private float collideMinimum;
    private System.Collections.Generic.List<UnityEngine.Vector3> initialLocalPos;
    private System.Collections.Generic.List<int> collideOffset;
    private UnityEngine.Vector3 gravityDir;
    private UnityEngine.Vector3 gravityLocalDir;
    private float addCollideRoot;
    private float addCollideEnd;
    public ForceParam[] forceParam;
    public Type swayType;
    public Type swaySubType;
    public float subRate;
    public ColliderParam[] colliderParam;
    private bool isLeft;
    private UnityEngine.Vector3 headC0;
    private UnityEngine.Vector3 headC1;
    private float headR0;
    private float headR1;
    private bool stopFlag;
    private UnityEngine.Matrix4x4 baseMat;
    private bool prevStopFlag;
    private float lastArmLV;
    private float lastArmRV;
    private System.Collections.Generic.List<Point> points;
    private bool addedCalc;
    public ForceParam currentForceParam;
    public ColliderParam[] calcedParam;
    private UnityEngine.Matrix4x4[] invHitBase;
    private UnityEngine.Matrix4x4[] matHitBase;
    private UnityEngine.Vector4 hitPlane;
    public void SetupForEditor(bool torf);
    public void SetupForEditor(int typeId, float bendStrength, float baseGravity, float inertiaMoment, float airResistance);
    public void SetRate(float rate);
    public float GetRate();
    public void SetupInitialPosition();
    private void SetupInitialPositionPoint(UnityEngine.Transform t);
    public void Setup();
    public void SetupPoint();
    private void _addPointRecursivity(UnityEngine.Transform rootTransform, int parentIndex);
    private void CalcZeroGravityPoint();
    public void ResetToInitPoint();
    private void _addCalc();
    private void OnEnable();
    private void OnDisable();
    private void OnValidate();
    public void CalcSwayString(float _dtime);
    private void _calcCollideParam(float dtime);
    public void SetSwayParam(int i, Unity.Collections.NativeArray<SwayStringData> swayStringData, Unity.Collections.NativeArray<ColliderFlag> colliderFlag, int countPoint);
    public void SetSwayPoint(int i, Unity.Collections.NativeArray<SwayStringData> ssd, Unity.Collections.NativeArray<Point> p, System.Collections.Generic.List<int> iList, System.Collections.Generic.List<UnityEngine.Transform> tList, UnityEngine.Jobs.TransformAccessArray transformAccessArray);
    public void SetSwayCollider(int i, Unity.Collections.NativeArray<ColliderParam> cp, Unity.Collections.NativeArray<BoneColliderParam> bcp, float _dtime);
    public void SetSwayCalc(int i, Unity.Collections.NativeArray<SwayStringData> ssd, float _dtime, bool skipFrame);
    public void ChangeSwayParam(int i, Unity.Collections.NativeArray<SwayStringData> ssd);
    public void ResetMove();
    public void SetActive(bool torf);

    public enum Type : System.Enum
    {
        public int value__;
        public static Type Test;
        public static Type HairPointed;
        public static Type HairSmooth;
        public static Type HairBundle;
        public static Type HairFront;
        public static Type ClothPointed;
        public static Type ClothSmooth;
        public static Type BreastPointed;
        public static Type BreastSmooth;
        public static Type AccessoryBundle;
        public static Type AccessoryPendulum;
        public static Type ClothBundle;
        public static Type HairLong;
        public static Type Max;
    }

    public class ForceParam
    {
        public bool notRotate;
        public float bendStrength;
        public float baseGravity;
        public float inertiaMoment;
        public float airResistance;
        public float deformResistance;
        public void Set(ForceParam m, ForceParam s, float rate);
    }

    public enum Collide : System.Enum
    {
        public int value__;
        public static Collide Head;
        public static Collide Shoulder;
        public static Collide ArmL;
        public static Collide ArmR;
        public static Collide ChestL;
        public static Collide ChestR;
        public static Collide Spine;
        public static Collide ThighL;
        public static Collide ThighR;
        public static Collide Neck;
        public static Collide ForeArmL;
        public static Collide ForeArmR;
        public static Collide ForeArmLForChest;
        public static Collide ForeArmRForChest;
        public static Collide Max;
    }

    public class ColliderParam
    {
        public bool on;
        public UnityEngine.Vector3 c0;
        public UnityEngine.Vector3 c1;
        public float r0;
        public float r1;
    }

    public class Point
    {
        public UnityEngine.Matrix4x4 matParent;
        public UnityEngine.Transform transform;
        public int parentIdx;
        public float lenFromParent;
        public float[] allowRadius;
        public UnityEngine.Vector3 pos;
        public UnityEngine.Vector3 v;
        public UnityEngine.Vector3 feedback;
        public UnityEngine.Vector3 initPos;
        public UnityEngine.Vector3 zeroPos;
        public UnityEngine.Quaternion initRot;
        public UnityEngine.Vector3 boneInitPos;
        public int collideOffset;
    }
}

// Namespace: PRISM
public class SwitchModel : UnityEngine.MonoBehaviour
{
    private string switchID;
    private SwitchUnitData[] switchUnitData;
    private UnityEngine.Renderer[] switchMaterialRenderer;
    private UnityEngine.Texture2D[] texture;
    private int currentTargetIndex;
    private PRISM.Character character;
    public int CurrentTargetIndex { get; set; }
    public int DataSize { get; set; }
    private void Awake();
    public void DoSwitch(int targetIndex, string switchId);
    public int GetUnitID(string id);
    private void _setAllActive(bool active);
    private void _setActive(int index, bool active);

    private class SwitchUnitData
    {
        public UnityEngine.GameObject[] listMesh;
        public PRISM.SwayString[] listSwayString;
    }
}

// Namespace: PRISM
public class AdaptiveFrameRate
{
    private static bool <pause3DFlag>k__BackingField;
    public bool pause3DFlag { get; set; }
    public static void Pause3D();
    public static void Resume3D();
}

// Namespace: PRISM
public class CallbackHolder : UnityEngine.MonoBehaviour
{
    private string cutSceneName;
    private System.Action<string> callbackOnTriggerWithRootName;
    private System.Action callbackOnTrigger;
    private System.Action callbackOffTrigger;
    private void OnEnable();
    private void OnDisable();
    public void SetOnEnable(System.Action _callbackOnTrigger);
    public void SetOnEnable(System.Action<string> _callbackOnTrigger, string _cutSceneName);
    public void SetOnDisable(System.Action _callbackOffTrigger);
}

// Namespace: PRISM
public class CameraController : UnityEngine.MonoBehaviour
{
    private UnityEngine.Camera _baseCamera;
    private UnityEngine.RenderTexture offscreenImage;
    private PRISM.ScreenEffectCapture frameBufferCapture;
    private int srpCameraCaptureId;
    public UnityEngine.Camera BaseCamera { get; set; }
    public void Setup();
    public UnityEngine.RenderTexture EnableOffscreen();
    public void DisableOffscreen();
    public UnityEngine.RenderTexture GetBackbufferTexture();
    private void OnDestroy();
    public void SetCanvasCamera(UnityEngine.Canvas canvas, bool isGasha);
    private void SetLayer(UnityEngine.GameObject obj, int layer);
    public static UnityEngine.Camera FindMainCamera();
}

// Namespace: PRISM
public class Character : UnityEngine.MonoBehaviour, PRISM.Legacy.ICharacter, PRISM.Rendering.ICharacterRenderController
{
    public static int EmptyId;
    public static int ProducerId;
    public static int UnknownId;
    private UnityEngine.Animator _myAnimator;
    private UnityEngine.Animator _faceAnimator;
    private UnityEngine.Vector3 _basePosition;
    public bool isStreamingCharacter;
    private bool isStopUpdate;
    public bool isRecordedAnimation;
    private bool animationOverwrite;
    private bool isNoPersonalLight;
    private PRISM.OutlineController _outlineController;
    private PRISM.HairZBiasController _hairZBiasController;
    private PRISM.LipSyncController _lipSyncController;
    private PRISM.AngelRingController _angelRingController;
    private PRISM.RecordedAnimPlayer _recordedAnimPlayer;
    private ExpressionAndIkController _expressionAndIkController;
    private PRISM.FaceAnimParam _faceAnimParam;
    private PRISM.HumanoidIKEvent _humanoidIKEvent;
    public PRISM.Definitions.MstCharacterInfo masterCharaData;
    private PRISM.PlaneDropShadow _planeDropShadow;
    private UnityEngine.Playables.PlayableDirector _playableDirector;
    public int CharacterIndex;
    private float lipSyncOffsetTime;
    public PRISM.Legacy.CharacterMaterialSetter MaterialSetter;
    private PRISM.SwitchModel[] switchModels;
    public static float NearBorder;
    public static float IntermediateBorder;
    private UnityEngine.Quaternion handBaseRotL;
    private UnityEngine.Quaternion handBaseRotR;
    private bool flagNeckControl;
    private float neckRate;
    private float neckWeight;
    private UnityEngine.Vector3 neckTarget;
    private bool flagHandControl;
    private float heightScale;
    private float <BustScale>k__BackingField;
    private float <HeadScale>k__BackingField;
    private float <ArmScale>k__BackingField;
    private float <HandScale>k__BackingField;
    private UnityEngine.Matrix4x4 angelRingRot;
    private float angelRingRadius;
    private UnityEngine.Vector3 angelRingCenter;
    private UnityEngine.Color outlineAddColor;
    private float outlineAdjust;
    private float outlineInclusize;
    private UnityEngine.Vector4 hairZBiasReference;
    private UnityEngine.Vector4 hairZBiasPlane;
    private UnityEngine.Vector4 hairZBiasNormal;
    private UnityEngine.Vector4 hairZBiasCameraDir;
    private UnityEngine.Color personalLightColor;
    private float highlightShake;
    private float scaleZ;
    private float raiseBaseLightInfluence;
    private float highlightLightInfluence;
    private float highlightMaxColor;
    public System.Collections.Generic.List<UnityEngine.Renderer> allRenderers;
    public bool useCustomCharacterBoundCenter;
    public UnityEngine.Transform customCharacterBoundCenter;
    public float characterBoundRadius;
    public PRISM.DressMetaComponent DressMetaComponent;
    public PRISM.FaceMetaComponent FaceMetaComponent;
    public PRISM.HairMetaComponent HairMetaComponent;
    private System.Collections.Generic.List<PRISM.AccessoryMetaComponent> <AccessoryMetaComponents>k__BackingField;
    private int <CharacterID>k__BackingField;
    private float animationOffsetTime;
    private PRISM.RootAnimation rootAnimation;
    private System.Collections.Generic.List<UnityEngine.AnimatorClipInfo> clipInfoCache;
    private UnityEngine.AnimatorOverrideController overrideController;
    public UnityEngine.Animator faceAnimator { get; set; }
    public PRISM.HumanoidIKEvent HumanoidIKEvent { get; set; }
    public PRISM.PlaneDropShadow PlaneDropShadow { get; set; }
    public float HeightScale { get; set; }
    public float BustScale { get; set; }
    public float HeadScale { get; set; }
    public float ArmScale { get; set; }
    public float HandScale { get; set; }
    public System.Collections.Generic.List<PRISM.AccessoryMetaComponent> AccessoryMetaComponents { get; set; }
    public int CharacterID { get; set; }
    public bool IsActiveAndEnable { get; set; }
    public void SetAutoUpdateStop(bool torf);
    public void SetupAnimator();
    public void SetAnimatorController(UnityEngine.RuntimeAnimatorController animatorController);
    public void SetupController(PRISM.CameraController cameraController);
    public void SetupRenderer();
    public void SetupLip(PRISM.LipSyncTable lipSyncTable, float offsetTime);
    public void SetFocusCamera(int _cameraIndex);
    public void SetupLip(string lipSyncTableName, float offsetTime);
    public void SetupRecordedAnim(string recordedAnimName, float offsetTime);
    public void SetupShadow();
    public void SetPlaneDropShadowColor(UnityEngine.Color color);
    public void SetupAnimation(string animName);
    public void SetLayer(int layerId);
    public bool IsProducer();
    public void SetAnimationNormalizeTime(float time, string name);
    public float GetAnimationNormalizeTime(int layerIndex);
    public void AnimationBlend(string name, float duration, float offset, float time);
    public void SetIK(UnityEngine.AvatarIKGoal goal, UnityEngine.Transform tra, float weight, UnityEngine.HumanBodyBones bone, UnityEngine.Vector3 offset);
    public void SetIKFixedHand(UnityEngine.AvatarIKGoal goal, UnityEngine.HumanBodyBones bone, UnityEngine.Vector3 pos, float weight);
    public void AttachIKTarget(UnityEngine.HumanBodyBones bone, UnityEngine.Transform target, UnityEngine.Vector3 offset);
    public void SetNeckIKTarget(UnityEngine.Vector3 target, float weight, float rate, bool handOn);
    public void DisableNeckIK();
    private void OnAnimatorIK();
    public void UpdateLip(float time);
    public void UpdateRecordedAnim(float time);
    public UnityEngine.Animator GetAnimator();
    public UnityEngine.AnimationClip GetFirstClip();
    public void SetAngelRing(UnityEngine.Matrix4x4 ringRot, float radius, UnityEngine.Vector3 center);
    public void SetOutlineAddColor(UnityEngine.Color color);
    public void SetOutlineAdjust(float adjust, float inclusive);
    public void SetHairZBiasPlane(UnityEngine.Vector4 reference, UnityEngine.Vector4 plane, UnityEngine.Vector4 normal, UnityEngine.Vector4 cameraDir);
    public void SetScaleZ(float value);
    public void SetPersonalLight(UnityEngine.Color value);
    public void SetHighlightShake(float value);
    public void SetEyeParameter(float raiseBaseLightInfluence, float highlightLightInfluence, float highlightMaxColor);
    public int SetSwitchModel(int unitID, string switchID);
    public void SetupSwitchModel();
    private void Awake();
    private void FindTimeline();
    private void OnEnable();
    private void OnDisable();
    private void Update();
    private void LateUpdate();
    public void SetAnimationOffsetTime(float offsetTime);
    private void UpdateAnimation();
    public void SetAnimationTime(float time, float forceOffset);
    private void _setAnimationTimeInner(UnityEngine.AnimationClip clip, float time, float lipSyncOffsetTime);
    public void SetAnimationTimeExtraData(float time);
    public void SetOverwriteFlag();
    public bool IsOverwriteLiveAnimation();
    private void OnRenderObject();
    public float GetAnimationLength();
    private void Cleanup();
    public void CleanupShadow();
    private void OnDestroy();
    public UnityEngine.Color GetAudienceColor();
    public static PRISM.Character Create(PRISM.UnitIdol idol, UnityEngine.Transform parent, bool isEnabledCoordination);
    public static PRISM.Character Create(PRISM.UnitIdol idol, UnityEngine.Transform parent, PRISM.Definitions.MasterData masterData, bool isEnabledCoordination);
    public static PRISM.Character Create(AssembleInfo info, UnityEngine.Transform parent);
    public void SetHeightScale(float scale);
    public void ChangeAnimation(string path, bool faceFlag);
    public void PlayAnimationNormalizeTime(float normalizeTime);
    public void ChangeRootAnimation(string path);
    public void ChangeAnimationExtraData(string path, float transitionFrame);
    public void ResetAnimation();
    public void CheckAdditiveAnimation(string path);
    public static AssembleInfo GetAssembleInfo(PRISM.UnitIdol idol, bool isEnabledCoordination);
    public static AssembleInfo GetAssembleInfo(PRISM.UnitIdol idol, PRISM.Definitions.MasterData masterData, bool isEnabledCoordination);
    public static void SetCoordination(PRISM.UnitIdol idol, PRISM.Definitions.MasterData masterData);
    private static bool _isValidHair(int charaId, int hairId, PRISM.Definitions.MasterData masterData);
    private static bool _isValidAccessory(int charaId, int hairId, int accessoryId, PRISM.Definitions.MasterData masterData);
    public float GetCharacterBoundRadius();
    public UnityEngine.Vector3 GetCharacterBoundCenter();
    private void <SetupAnimator>g__PlayFaceAnimation|97_0(string name);

    public enum ShaderLODMode : System.Enum
    {
        public int value__;
        public static ShaderLODMode Near;
        public static ShaderLODMode Intermediate;
        public static ShaderLODMode Far;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.Renderer, bool> <>9__100_0;
        private bool <SetupRenderer>b__100_0(UnityEngine.Renderer x);
    }

    private class <>c__DisplayClass166_0
    {
        public PRISM.UnitIdol idol;
        private bool <SetCoordination>b__0(PRISM.Definitions.MstCostumeSet x);
        private bool <SetCoordination>b__1(PRISM.Definitions.MstCostumeSet x);
    }
}

// Namespace: PRISM
public class CutScene : UnityEngine.MonoBehaviour, UnityEngine.ISerializationCallbackReceiver
{
    private Data sceneCreateData;
    private PRISM.UnitIdol[] unitIdols;
    private int endFrame;
    private bool movieOnly;
    public int loopFrameForADV;
    private bool cameraLoop;
    private bool loopWait;
    private bool forcedOverrideCameraForFocusCameraMode;
    private PRISM.LiveCharacterController liveCharacterController;
    private PRISM.CameraController cameraController;
    private CameraWorkEvent camEvent;
    private UnityEngine.Playables.PlayableDirector timeline;
    private CriWare.CriAtomExPlayer sceneBgm;
    private PRISM.Character[] characterTable;
    private bool isInitializeEnd;
    private bool isEndLoop;
    private PRISM.MoviePlayer moviePlayer;
    private bool isBaseScene;
    private bool isNoSound;
    private System.Nullable<float> endTime;
    private System.Nullable<float> loopTimeForAdv;
    private int <FrameRate>k__BackingField;
    private System.Collections.Generic.List<VoiceRequest> voiceList;
    private PRISM.MvCutSceneSoundResources soundResources;
    private SwitchCharacter switchCahacter;
    private SwitchMovie switchMovie;
    private float <AnimationTime>k__BackingField;
    private VoiceRequest currentVoice;
    public bool ForcedOverrideCameraForFocusCameraMode { get; set; }
    public PRISM.Character[] CharacterTable { get; set; }
    public bool IsInitializeEnd { get; set; }
    public bool IsOnlyMovie { get; set; }
    public int FrameRate { get; set; }
    public float EndTime { get; set; }
    public float LoopTimeForAdv { get; set; }
    public PRISM.MvCutSceneSoundResources SoundResources { get; set; }
    public float AnimationTime { get; set; }
    public void SetEndLoop();
    public bool IsLoopWait();
    public PRISM.MoviePlayer GetMoviePlayer();
    public void SetBaseScene();
    public void SetNoSound(bool torf);
    public void SetSwitchCharacter(SwitchCharacter sc);
    public void SetSwitchMovie(SwitchMovie sm);
    public void DisabledCameras();
    public Cysharp.Threading.Tasks.UniTask SetupAsync();
    private Cysharp.Threading.Tasks.UniTask TimelineSoundProcessAsync();
    public void SetTime(float time);
    private void OnEnable();
    private void OnDisable();
    private void Update();
    private void CheckVoice();
    public void ResetVoice();
    public void PlayVoice(float time, bool first);
    public void Pause();
    public void Resume();
    public void SetCameraEvent(CameraWorkEvent _cameraEvent);
    public void SetCharacterTable(PRISM.Character[] c);
    public void DoAnimation(bool reset);
    public void CharacterActive(bool torf);
    public void SetMovieTime(float time);
    public void SetMovieTimeForRecorder(float time);
    public void PlayForRecorder(float time);
    public void SetManualFrameSyncMode(bool isManualFrameSync);
    public bool IsFrameSyncMode();
    public TimerType GetCurFrameSyncMode();
    public void UnpauseMovie();
    public SceneType GetSceneType();
    public float GetOffsetTime();
    public float GetEndTime();
    public void SaveData();
    public void LoadData();
    public void SetSoundResources(PRISM.MvCutSceneSoundResources resources);
    private void AttachCharactersToTimeline(PRISM.LiveCharacterController lcc);
    private void AttachCharacter(string trackGroupName, PRISM.Character character);
    public void BindObject(UnityEngine.Timeline.TrackAsset targetTrack, UnityEngine.Object bindObject);
    private UnityEngine.Timeline.TrackAsset GetTrackAsset(string trackPath);
    public int GetCharacterNum();
    public static void PrePreLoad(PRISM.DownloadKeyContainer downloadKeyContainer, string cutName);
    public static void LoadAndPreLoad(PRISM.DownloadKeyContainer downloadKeyContainer, string cutName);
    public Cysharp.Threading.Tasks.UniTask StopMoviePlayAsync();
    public void OnBeforeSerialize();
    public void OnAfterDeserialize();

    private class VoiceRequest
    {
        public string cueSheet;
        public string cueName;
        public double start;
        public double offsetTime;
        public float volume;
        public bool played;
    }

    public class SwitchCharacter
    {
        public PRISM.UnitIdol[] unitIdols;
        public string[] animationName;
    }

    public class SwitchMovie
    {
        public string moviePath;
        public string cueSheetName;
        public string cueName;
        public double startSec;
    }

    private class <>c__DisplayClass90_0
    {
        public string trackName;
        private bool <GetTrackAsset>b__0(UnityEngine.Timeline.TrackAsset t);
    }

    private struct <SetupAsync>d__58 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.CutScene <>4__this;
        private Awaiter <>u__1;
        private Awaiter<System.ValueTuple<bool, PRISM.CriAtomCache>> <>u__2;
        private Awaiter <>u__3;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StopMoviePlayAsync>d__94 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.CutScene <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <TimelineSoundProcessAsync>d__59 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.CutScene <>4__this;
        private PRISM.TimelineController <tc>5__2;
        private System.Collections.Generic.List<UnityEngine.Timeline.TrackAsset> <trackAssetList>5__3;
        private UnityEngine.Pool.PooledObject<System.Collections.Generic.List<UnityEngine.Timeline.TrackAsset>> <>7__wrap3;
        private Enumerator<UnityEngine.Timeline.TrackAsset> <>7__wrap4;
        private UnityEngine.Timeline.TrackAsset <track>5__6;
        private UnityEngine.Timeline.TimelineClip[] <>7__wrap6;
        private int <>7__wrap7;
        private Awaiter<System.ValueTuple<bool, PRISM.CriAtomCache>> <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class DataFile
{
    private static PRISM.ResourceManagement.IResourceLoader loader;
    private static System.Collections.Generic.Dictionary<string, byte[]> rawCache;
    public static PRISM.DownloadKeyContainer CreateDownloadKeyContainer();
    public static string NormalizePath(string key);
    public static UnityEngine.AnimationClip LoadAnimationClip(string path);
    public static bool IsKeyExist(string key);
    public static void ClearCache();
    public static T Get<T>(string path);
    public static byte[] GetBytes(string path);

    private class <>O
    {
        public static System.Func<string, string> <0>__NormalizePath;
    }
}

// Namespace: PRISM
public class DownloadKeyContainer
{
    private System.Collections.Generic.HashSet<string> keys;
    private System.Func<string, string> keyNormalizer;
    public System.Collections.Generic.IReadOnlyCollection<string> Keys { get; set; }
    public void Enqueue(string key);
    public void EnqueueAnimationKeys(string animationName);
    public Cysharp.Threading.Tasks.UniTask ExecuteDownloadAsync();
    public void Clear();

    private struct <ExecuteDownloadAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.DownloadKeyContainer <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class EffectPlayer : PRISM.NotificationReceiverBase
{
    private bool isInCutScene;
    private System.Collections.Generic.List<PRISM.EffectController> effectControllerList;
    private System.Collections.Generic.List<PRISM.EffectPlayMarker> markerList;
    private int noRenderEffectLayer;
    private int defaultLayer;
    private int postprocessLayer;
    private bool <IsIgnore>k__BackingField;
    public bool IsShowUnitTrackEffect;
    public bool IsShowAlwayTrackEffect;
    private PRISM.Legacy.ISystemSettingsCaller systemSettingsCaller;
    public bool IsIgnore { get; set; }
    private void Start();
    public void SetManagedByRhythmGameOption(PRISM.Legacy.ISystemSettingsCaller systemSettingsCaller);
    public void Setup(bool isShowUnitTrackEffect);
    public void PlayEffect(string effectObjectName);
    public void PrewarmEffects(float currentTime);
    public void StopPlayingEffects();
    private bool _isPlayableEffect(PRISM.EffectPlayMarker marker);
    public void SetCutSceneMode(bool isOn);
    public void PlayEffectWithOutTimeline(float time);
    public void SetMarkers(System.Collections.Generic.List<PRISM.EffectPlayMarker> markers);
    public void OnNotify(UnityEngine.Playables.Playable origin, UnityEngine.Playables.INotification notification, object context);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.EffectPlayMarker, string> <>9__18_0;
        private string <StopPlayingEffects>b__18_0(PRISM.EffectPlayMarker x);
    }

    private class <>c__DisplayClass17_0
    {
        public PRISM.EffectController effect;
        private bool <PrewarmEffects>b__0(PRISM.EffectPlayMarker x);
    }
}

// Namespace: PRISM
public enum GameMode : System.Enum
{
    public int value__;
    public static PRISM.GameMode DevelopViewer;
    public static PRISM.GameMode RhythmGame;
    public static PRISM.GameMode LiveExperience;
    public static PRISM.GameMode MVMode;
    public static PRISM.GameMode MVExtra;
    public static PRISM.GameMode Walk;
    public static PRISM.GameMode ProduceIngameLesson;
    public static PRISM.GameMode ProduceIngameAudition;
    public static PRISM.GameMode ProduceMV;
    public static PRISM.GameMode None;
}

// Namespace: PRISM
public class GameObjectUtility
{
    public static void SetLayer(UnityEngine.GameObject target, int layer, bool overwrite);
}

// Namespace: PRISM
public class GlobalDataManager
{
    public PRISM.Produce.ProduceUnitModel produceUnitModel;
    private PRISM.GameMode <gameMode>k__BackingField;
    public ProduceParameterRank produceRank;
    private PRISM.Module.Networking.IEpisodeStatus <CurrentEpisode>k__BackingField;
    private ProduceDifficultyType <CurrentProduceDifficulty>k__BackingField;
    private string <Model3DScene>k__BackingField;
    public static PRISM.UnitIdol[] dummyIdolArray;
    public System.Action<bool> SkitAction;
    public PRISM.GlobalDataManager Instance { get; set; }
    public PRISM.Produce.ProduceUnitModel ProduceUnitModel { get; set; }
    public PRISM.GameMode gameMode { get; set; }
    public PRISM.Module.Networking.IEpisodeStatus CurrentEpisode { get; set; }
    public ProduceDifficultyType CurrentProduceDifficulty { get; set; }
    public string Model3DScene { get; set; }
    public static void ResetInstance();
}

// Namespace: PRISM
public class LessonAudition : UnityEngine.MonoBehaviour
{
    private Data sceneCreateData;
    private PRISM.UnitIdol[] unitIdols;
    private PRISM.LiveCharacterController liveCharacterController;
    private static string AuditionCueSuffix;
    private static float fadeOutTime;
    private CriWare.CriAtomExPlayback playback;
    private UnityEngine.GameObject characterParent;
    private UnityEngine.GameObject bg;
    private UnityEngine.Playables.PlayableDirector timeline;
    private bool isExistTimeline;
    private PRISM.Character[] character;
    private PRISM.Character[] mirrorChara;
    private PRISM.ScreenEffectEx screenEffect;
    private static StartData baseSceneData;
    private bool isInitializeEnd;
    private static System.Collections.Generic.List<StartData> preloadedList;
    private float animationTime;
    private float fadeCountTime;
    private bool isEnd;
    private bool isPause;
    private CameraWorkEvent camEvent;
    private bool isExistCamEvent;
    private bool isClearClothListOnDestroy;
    private UniRx.CompositeDisposable disposables;
    private string cueSheetLoaded;
    private static PRISM.UnitIdol[] dressList;
    private PRISM.CameraController cameraController;
    public bool IsInitializeEnd { get; set; }
    public static void SetChangeClothList(PRISM.UnitIdol[] _dressList);
    public Cysharp.Threading.Tasks.UniTask SetupAsync(StartData startData, bool isClearClothListOnDestroy);
    public void SetPause(bool pause);
    private void Update();
    public void FadeOut();
    public bool IsEnd();
    private void OnDestroy();
    public static Cysharp.Threading.Tasks.UniTask PreLoadAsync(StartData startData);
    public static bool IsPreLoaded(StartData startData);
    public void FadeIn();
    public Cysharp.Threading.Tasks.UniTask BgmSetUpAsync();
    public void BgmStart();

    public class StartData : UnityEngine.ISerializationCallbackReceiver
    {
        public string bgPrefabName;
        public string sceneName;
        public string soundName;
        public float frame;
        public float delayFrame;
        public UnityEngine.Vector3 camPos;
        public UnityEngine.Vector3 camRot;
        public float fieldOfView;
        public float spread;
        public float stageZ;
        private int <FrameRate>k__BackingField;
        public int FrameRate { get; set; }
        public float Time { get; set; }
        public float DelayTime { get; set; }
        public void OnBeforeSerialize();
        public void OnAfterDeserialize();
    }

    private class <>c__DisplayClass38_0
    {
        public StartData startData;
        private bool <IsPreLoaded>b__0(StartData x);
    }

    private struct <BgmSetUpAsync>d__40 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.LessonAudition <>4__this;
        private string <cueSheet>5__2;
        private string <cueName>5__3;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <PreLoadAsync>d__37 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public StartData startData;
        private PRISM.DownloadKeyContainer <downloadKeyContainer>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetupAsync>d__31 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public StartData startData;
        public PRISM.LessonAudition <>4__this;
        public bool isClearClothListOnDestroy;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class LightDirectionConstraint : UnityEngine.MonoBehaviour
{
    private UnityEngine.Vector3 offsetEuler;
    private UnityEngine.Transform baseTransform;
    private UnityEngine.Light[] lights;
    private bool isDirty;
    public UnityEngine.Vector3 OffsetEuler { get; set; }
    public void Setup(UnityEngine.Transform base);
    private void OnTransformChildrenChanged();
    private void LateUpdate();
    private void _updateLightDir();
    public static PRISM.LightDirectionConstraint Setup(UnityEngine.GameObject lightRootObject, UnityEngine.Transform baseTransform);
    public static void Cleanup(UnityEngine.GameObject lightRootObject);
}

// Namespace: PRISM
public class LiveCharacterController : UnityEngine.MonoBehaviour
{
    public static int MAX_CHARACTER;
    private PRISM.Character[] _characters;
    private float liveOffsetTime;
    private CharacterCreateData[] characterCreateDataArray;
    public PRISM.Character[] characters { get; set; }
    public void CreateCharacter(PRISM.UnitIdol idol, PRISM.CameraController cameraController, UnityEngine.Transform characterParent, int index);
    public PRISM.Character CreateCharacter(PRISM.UnitIdol idol, UnityEngine.Transform parent, int index, bool isEnabledCoordination);
    public void SetCharacterMove(CharacterCreateData[] _characterCreateData, float offsetTime, bool reset);
    public void ResetCharacterMove(CharacterCreateData[] _characterCreateData);
    private void _applyCreateData(PRISM.Character newCharacter, CharacterCreateData characterCreateData);
    public Cysharp.Threading.Tasks.UniTask CreateCharactersAsync(int charNum, PRISM.UnitIdol[] idols, PRISM.CameraController cameraController, UnityEngine.Transform characterParent);
    public void CreateCharactersAfterPreload(int charNum, PRISM.UnitIdol[] idols, PRISM.CameraController cameraController, UnityEngine.Transform characterParent);
    public void DestroyCharacter(PRISM.Character target);
    public PRISM.Character[] GetCharacters();
    public PRISM.Character GetCharacter(int index);
    public int GetCharacterNum();
    public void Pause();
    public void SetEnableAnimator(bool isEnable);
    public void SetCharacter(PRISM.Character[] _c);
    public UnityEngine.Transform GetBoneTransform(int i, string boneName);
    public CharacterCreateData[] GetCharacterCreateData();
    public void SetCharacterCreateData(CharacterCreateData[] _characterCreateData, float offsetTime);
    public void CharacterActive(bool torf);
    public void SetupShadow();
    public void CleanupShadow();

    public enum Position : System.Enum
    {
        public int value__;
        public static Position Center;
        public static Position CenterLeft;
        public static Position CenterRight;
        public static Position Left;
        public static Position Right;
        public static Position Max;
    }

    private struct <CreateCharactersAsync>d__12 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.LiveCharacterController <>4__this;
        public int charNum;
        public PRISM.UnitIdol[] idols;
        public PRISM.CameraController cameraController;
        public UnityEngine.Transform characterParent;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class LiveEventMarkerReceiver : UnityEngine.MonoBehaviour, UnityEngine.Playables.INotificationReceiver
{
    private PRISM.LiveScene liveScene;
    public void OnNotify(UnityEngine.Playables.Playable origin, UnityEngine.Playables.INotification notification, object context);
    private void _applyClightControl(PRISM.ClightControlMarker eventMarker);
    public static bool CheckValidMarker(UnityEngine.Playables.Playable origin, UnityEngine.Timeline.Marker marker);
}

// Namespace: PRISM
public class MoviePlayer : UnityEngine.MonoBehaviour
{
    private string usmMoviePath;
    private int startFrame;
    private CriWare.CriManaMovieControllerForUI controller;
    private UnityEngine.UI.AspectRatioFitter aspectRatioFitter;
    private UniRx.Subject<CueEventMessage> onCueEventSubject;
    private System.Threading.CancellationTokenSource canceller;
    public string UsmMoviePath { get; set; }
    public float Volume { get; set; }
    public System.IObservable<CueEventMessage> OnCueEventReceived { get; set; }
    public Cysharp.Threading.Tasks.UniTask PlayAsync(string path, bool loop, System.Action onStartPlay, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask PlayAsync(bool loop);
    public Cysharp.Threading.Tasks.UniTask LoadUsmAsync(string path, System.Threading.CancellationToken token);
    public Cysharp.Threading.Tasks.UniTask Prepare(string path, bool loop, System.Threading.CancellationToken ct);
    public void PlayPreparedMovie();
    public bool IsPrepared();
    public bool IsPlaying();
    public bool IsStop();
    public bool IsPaused();
    public uint GetTotalFrame();
    public int GetFrame();
    public int GetStartFrame();
    public Status GetStatus();
    public void PauseForSeek();
    public void SeekAndPlay(int frame);
    public void PlayForRecorder(int frame);
    public void SeekAndPlayForRecorder(int frame);
    public void UpdateForRecorder();
    public uint GetFrameRate();
    public float GetTime();
    public void Pause(bool isActive);
    public void SetManualFrameSyncMode(bool isManualMode);
    public bool IsManualFrameSyncMode();
    public TimerType GetCurFrameSyncMode();
    public void Stop();
    public Cysharp.Threading.Tasks.UniTask AssureStopAsync();
    public Cysharp.Threading.Tasks.UniTask FadeOutBgmAsync(float time);
    public void SetSoundCategory(PRISM.SoundCategory category);
    public void SetLoop(bool isLoop);
    public void SetSpeed(float speed);
    private void _onCueEventReceived(CriWare.CriMana.EventPoint& message);
    private void Awake();
    private void Start();
    private void OnDestroy();
    private bool <PlayAsync>b__14_0();
    private bool <PlayAsync>b__14_1();
    private bool <Prepare>b__17_0();
    private bool <AssureStopAsync>b__39_0();
    private float <FadeOutBgmAsync>b__40_0();
    private void <FadeOutBgmAsync>b__40_1(float x);
    private System.Nullable<Status> <Start>b__46_0(UniRx.Unit _);
    private void <Start>b__46_2(System.Nullable<Status> _);

    public class CueEventMessage
    {
        public ulong time;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<System.Nullable<Status>, bool> <>9__46_1;
        private bool <Start>b__46_1(System.Nullable<Status> x);
    }

    private struct <FadeOutBgmAsync>d__40 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.MoviePlayer <>4__this;
        public float time;
        private TweenAwaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <LoadUsmAsync>d__16 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public string path;
        public System.Threading.CancellationToken token;
        public PRISM.MoviePlayer <>4__this;
        private Awaiter<string> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <PlayAsync>d__14 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.MoviePlayer <>4__this;
        public System.Threading.CancellationToken ct;
        public string path;
        public bool loop;
        public System.Action onStartPlay;
        private System.Threading.CancellationToken <linkedToken>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <PlayAsync>d__15 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.MoviePlayer <>4__this;
        public bool loop;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <Prepare>d__17 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.MoviePlayer <>4__this;
        public System.Threading.CancellationToken ct;
        public string path;
        public bool loop;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class MvPlayCutSceneContent
{
    public UnityEngine.GameObject gameObject;
    public CameraWorkEvent cameraWorkEvent;
    public SceneType sceneType;
    public PRISM.CutScene cutScene;
    public UnityEngine.Transform characterRootTransform;
    public PRISM.Character[] characters;
}

// Namespace: PRISM
public class MvSequencer : UnityEngine.MonoBehaviour
{
    private UnityEngine.TextAsset startScene;
    public static SequenceData sequenceData;
    private static System.Collections.Generic.List<PlayCutSceneData> playCutSceneData;
    public static PRISM.SceneLoader sceneLoader;
    public static string startSceneName;
    private UnityEngine.GameObject liveCamera;
    private UnityEngine.GameObject liveTopObject;
    private UnityEngine.GameObject effectPlayerCanvasObject;
    private PRISM.EffectPlayer effectPlayer;
    private CameraWorkEvent camEventLive;
    private PRISM.TimelineController timelineController;
    private static Data sceneCreateData;
    private static PlayFadeData liveInFade;
    private static PlayFadeData liveOutFade;
    private System.ValueTuple<UnityEngine.Light, bool>[] lucsReturnBackLiveLights;
    private bool isKeepLightActives;
    private PRISM.MvPlayCutSceneContent[] playCutSceneContents;
    private PRISM.ScreenEffectEx screenEffect;
    private PRISM.UnitIdol[] poolUnit;
    private PRISM.Character[] poolCharacter;
    private float sequenceTime;
    private int currentCutSceneId;
    private int prevCutSceneId;
    private static int LiveSceneID;
    private static float defaultAudioVolume;
    private float currentAudioVolume;
    private bool isFade;
    private float endTime;
    private UnityEngine.GameObject poolParentObject;
    private UnityEngine.GameObject mainCameraObject;
    private UnityEngine.Camera mainCamera;
    private bool isInitializeEnd;
    private static bool isPreLoaded;
    private bool isEnd;
    private PRISM.MvCutSceneSoundResources soundResources;
    private bool isReleased;
    private static string postName;
    private static string savePostName;
    private CriWare.CriAtomExPlayback bgmPlayBack;
    private bool isPause;
    private bool isPlayBgm;
    public string[] idNameList;
    private static System.Collections.Generic.Dictionary<string, int> dicCutSceneSelect;
    private static System.Collections.Generic.Dictionary<string, string> dicCutSceneSelectDirect;
    private bool noDispID;
    private static PRISM.UnitIdol[] dressList;
    private static PRISM.UnitIdol[] clothList;
    public System.Collections.Generic.IReadOnlyList<PlayCutSceneData> PlayCutSceneDataOut { get; set; }
    public bool IsInitializeEnd { get; set; }
    public bool IsPreLoaded { get; set; }
    public bool IsEnd { get; set; }
    public string SceneName { get; set; }
    public PRISM.EffectPlayer EffectPlayer { get; set; }
    public Cysharp.Threading.Tasks.UniTask SetupAsync(string liveSceneName);
    private Cysharp.Threading.Tasks.UniTask _setupFloorMeshAsync();
    private void _keepLightsForLUCS(UnityEngine.GameObject[] rootGameObjects);
    private Cysharp.Threading.Tasks.UniTask<int[][]> _setupCharacterPoolAsync(PRISM.CameraController cameraController);
    private static bool _isMirror(int charaId, int startIndex, System.Collections.Generic.IReadOnlyList<PRISM.UnitIdol> unitIdols);
    private static int _indexOfSameCharaIdAndSameClothId(int charaId, int clothId, System.Collections.Generic.List<PRISM.UnitIdol> unitIdols);
    private PRISM.Character _createPoolCharacter(PRISM.UnitIdol unit, PRISM.CameraController cameraController);
    private Cysharp.Threading.Tasks.UniTask _instantiateCutSceneAsync();
    private Cysharp.Threading.Tasks.UniTask _instantiateCutSceneAsync(string playCutSceneDataName, PRISM.MvPlayCutSceneContent content, bool backGround);
    private Cysharp.Threading.Tasks.UniTask _releaseCutSceneAsync(int i);
    private void ReturnAttachObject(UnityEngine.GameObject cutScene);
    public Cysharp.Threading.Tasks.UniTask ReleaseAsync();
    private Cysharp.Threading.Tasks.UniTaskVoid _selfUpdateAsync(System.Threading.CancellationToken cancellationToken);
    private void _setEnabledURPPP(bool enabled);
    private void _copyToVolume();
    private float _getDeltaTimeAndUpdateSequenceTime();
    private void _updateSequenceTime();
    private Cysharp.Threading.Tasks.UniTask<bool> _update3DAnimationAsync(float deltaTime);
    private void _getCurrentCutSceneIdAndNextCutSceneId(int& current, int& next);
    private Cysharp.Threading.Tasks.UniTask _updateLiveSceneAsync(float deltaTime);
    private Cysharp.Threading.Tasks.UniTask _onChangeCutSceneOrLiveAsync(int prevCutSceneId, int currentCutSceneId);
    private void _onChangeCutSceneLightForLUCS();
    private void _onChangeLiveScene();
    private void CheckAndSetFadeIn(PlayFadeData pfd);
    private void _checkAndSetFadeOut(float endTime, PlayFadeData playFadeData);
    private void BgmStart();
    public void SaveSequenceData(string name);
    public static Cysharp.Threading.Tasks.UniTask<SequenceData> LoadSequenceDataAsync(string name, System.Threading.CancellationToken cancellationToken);
    public static void SetCutSceneSelect(System.Collections.Generic.Dictionary<string, int> _dicCutSceneSelect);
    public static void SetCutSceneSelect(System.Collections.Generic.Dictionary<string, string> _dicCutSceneSelectDirect);
    public static void SelectPlayScene();
    private static PlayFadeData ConvertFadeData(FadeData fd);
    public static void SetChangeClothList(PRISM.UnitIdol[] _dressList, PRISM.UnitIdol[] _clothList);
    public static Cysharp.Threading.Tasks.UniTask PreLoadAsync(string mvName, bool reload);
    public float GetTime();
    private void _addAudioVolume(float addVolume);
    private bool <_selfUpdateAsync>b__74_0();

    public class SequenceData : UnityEngine.ISerializationCallbackReceiver
    {
        private float duration;
        public string liveScene;
        public CutSceneData[] cutSceneData;
        public FadeData inFade;
        public FadeData outFade;
        private int <FrameRate>k__BackingField;
        private float <TotalTime>k__BackingField;
        public int FrameRate { get; set; }
        public float Duration { get; set; }
        public float TotalTime { get; set; }
        public void OnBeforeSerialize();
        public void OnAfterDeserialize();
    }

    public class CutSceneData : UnityEngine.ISerializationCallbackReceiver
    {
        private float startFrame;
        private float duration;
        public string id;
        public string[] cutSceneList;
        public FadeData outBeforeIn;
        public FadeData inFade;
        public FadeData outFade;
        public FadeData inAfterOut;
        private int <FrameRate>k__BackingField;
        private float <StartTime>k__BackingField;
        private float <TotalTime>k__BackingField;
        public float StartFrame { get; set; }
        public float Duration { get; set; }
        public int FrameRate { get; set; }
        public float StartTime { get; set; }
        public float TotalTime { get; set; }
        public void OnBeforeSerialize();
        public void OnAfterDeserialize();
    }

    public class FadeData : UnityEngine.ISerializationCallbackReceiver
    {
        private float duration;
        public string fadeType;
        public string effectType;
        private int <FrameRate>k__BackingField;
        private float <TotalTime>k__BackingField;
        public int FrameRate { get; set; }
        public float Duration { get; set; }
        public float TotalTime { get; set; }
        public void OnBeforeSerialize();
        public void OnAfterDeserialize();
    }

    public class PlayCutSceneData
    {
        private float startFrame;
        private float duration;
        public string name;
        public PlayFadeData outBeforeInFadeData;
        public PlayFadeData inFadeData;
        public PlayFadeData outFadeData;
        public PlayFadeData inAfterOutFadeData;
        private int <FrameRate>k__BackingField;
        private float <StartTime>k__BackingField;
        private float <TotalTime>k__BackingField;
        public int FrameRate { get; set; }
        public float StartFrame { get; set; }
        public float Duration { get; set; }
        public float StartTime { get; set; }
        public float TotalTime { get; set; }
    }

    public class PlayFadeData
    {
        private float duration;
        public FadeType fadeType;
        public EffectType effectType;
        private int <FrameRate>k__BackingField;
        private float <TotalTime>k__BackingField;
        public int FrameRate { get; set; }
        public float Duration { get; set; }
        public float TotalTime { get; set; }
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<bool> <>9__62_0;
        public static System.Func<PRISM.MvPlayCutSceneContent, PRISM.CutScene> <>9__73_0;
        public static System.Func<PRISM.CutScene, bool> <>9__73_1;
        public static System.Func<PRISM.CutScene, Cysharp.Threading.Tasks.UniTask> <>9__73_2;
        public static System.Func<UnityEngine.Rendering.PostProcessing.PostProcessVolume, bool> <>9__76_0;
        public static System.Func<UnityEngine.Rendering.Volume, bool> <>9__76_1;
        private bool <SetupAsync>b__62_0();
        private PRISM.CutScene <ReleaseAsync>b__73_0(PRISM.MvPlayCutSceneContent c);
        private bool <ReleaseAsync>b__73_1(PRISM.CutScene cutSceneComponent);
        private Cysharp.Threading.Tasks.UniTask <ReleaseAsync>b__73_2(PRISM.CutScene cutSceneComponent);
        private bool <_copyToVolume>b__76_0(UnityEngine.Rendering.PostProcessing.PostProcessVolume volume);
        private bool <_copyToVolume>b__76_1(UnityEngine.Rendering.Volume volume);
    }

    private class <>c__DisplayClass62_0
    {
        public PRISM.LiveScene liveScene;
        private bool <SetupAsync>b__1();
    }

    private class <>c__DisplayClass63_0
    {
        public PRISM.AudienceController audienceController;
        private bool <_setupFloorMeshAsync>b__0();
    }

    private struct <LoadSequenceDataAsync>d__89 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<SequenceData> <>t__builder;
        public string name;
        private string <key>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <PreLoadAsync>d__97 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public string mvName;
        public bool reload;
        private PRISM.DownloadKeyContainer <downloadKeyContainer>5__2;
        private Awaiter<SequenceData> <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ReleaseAsync>d__73 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.MvSequencer <>4__this;
        private Awaiter <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetupAsync>d__62 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.MvSequencer <>4__this;
        public string liveSceneName;
        private <>c__DisplayClass62_0 <>8__1;
        private UnityEngine.GameObject[] <rootGameObjects>5__2;
        private Awaiter <>u__1;
        private UnityEngine.GameObject[] <>7__wrap2;
        private int <>7__wrap3;
        private UnityEngine.GameObject <go>5__5;
        private PRISM.LiveScene <ls>5__6;
        private Awaiter<int[][]> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_instantiateCutSceneAsync>d__69 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.MvSequencer <>4__this;
        private int <i>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_instantiateCutSceneAsync>d__70 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public string playCutSceneDataName;
        public PRISM.MvSequencer <>4__this;
        public PRISM.MvPlayCutSceneContent content;
        public bool backGround;
        private UnityEngine.GameObject <newCutSceneObject>5__2;
        private PRISM.CutScene <newCutScene>5__3;
        private SceneType <newSceneType>5__4;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_onChangeCutSceneOrLiveAsync>d__82 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.MvSequencer <>4__this;
        public int prevCutSceneId;
        public int currentCutSceneId;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_releaseCutSceneAsync>d__71 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public int i;
        public PRISM.MvSequencer <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_selfUpdateAsync>d__74 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskVoidMethodBuilder <>t__builder;
        public PRISM.MvSequencer <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private Awaiter<bool> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_setupCharacterPoolAsync>d__65 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<int[][]> <>t__builder;
        public PRISM.MvSequencer <>4__this;
        public PRISM.CameraController cameraController;
        private int[][] <cIndexTables>5__2;
        private int <i>5__3;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_setupFloorMeshAsync>d__63 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.MvSequencer <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_update3DAnimationAsync>d__79 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<bool> <>t__builder;
        public PRISM.MvSequencer <>4__this;
        public float deltaTime;
        private bool <isLiveScene>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_updateLiveSceneAsync>d__81 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.MvSequencer <>4__this;
        public float deltaTime;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class PlaySoundObject : UnityEngine.MonoBehaviour
{
    public string cueSheetName;
    public string cueName;
    private void OnEnable();
}

// Namespace: PRISM
public class Render3DMode
{
    private static bool <DofOff>k__BackingField;
    private static bool <BloomOff>k__BackingField;
    private static bool <LdrBloomOff>k__BackingField;
    private static bool <SoftOverlayOff>k__BackingField;
    private static bool <ColorGradingOff>k__BackingField;
    private static bool <EdgeColorOff>k__BackingField;
    private static bool <VignetteOff>k__BackingField;
    private static bool <RadialBlurOff>k__BackingField;
    private static bool <SMAAOff>k__BackingField;
    public bool DofOff { get; set; }
    public bool BloomOff { get; set; }
    public bool LdrBloomOff { get; set; }
    public bool SoftOverlayOff { get; set; }
    public bool ColorGradingOff { get; set; }
    public bool EdgeColorOff { get; set; }
    public bool VignetteOff { get; set; }
    public bool RadialBlurOff { get; set; }
    public bool SMAAOff { get; set; }
}

// Namespace: PRISM
public class SceneCreate
{
    private static string postName;
    private static string savePostName;
    public static void SaveData(string name, Data scc);
    public static Data LoadData(string name);
    public static Data LoadAndPreLoad(PRISM.DownloadKeyContainer downloadKeyContainer, string name);

    public enum SceneType : System.Enum
    {
        public int value__;
        public static SceneType Live;
        public static SceneType CS;
        public static SceneType UCS;
        public static SceneType LCS;
        public static SceneType LUCS;
        public static SceneType CutScene;
        public static SceneType UnitCutScene;
        public static SceneType LiveCutScene;
        public static SceneType LiveUnitCutScene;
    }

    public class Data
    {
        public SceneType type;
        public float offsetTime;
        public string sharedLipSyncName;
        public CharacterCreateData[] characterCreateData;
        public bool simpleShadow;
        public string[] cueSheetList;
        public bool useSubSequence;
    }

    public class CharacterCreateData
    {
        public UnityEngine.Vector3 position;
        public float rotationY;
        public string animName;
        public string lipSyncName;
        public string recordedAnimName;
    }
}

// Namespace: PRISM
public enum ShadowType : System.Enum
{
    public int value__;
    public static PRISM.ShadowType RealTimeRendering;
    public static PRISM.ShadowType Plane;
}

// Namespace: PRISM
public class CameraDisplay : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.RawImage _rawImage;
    public float BlurRatio;
    private void Awake();
    private void Update();
}

// Namespace: PRISM
public class EffectController : UnityEngine.MonoBehaviour
{
    private float _lifeTime;
    private float _lifeTimer;
    private UnityEngine.ParticleSystem[] _particleSystems;
    private bool _isCompletedSetup;
    private bool _isReusable;
    private PRISM.EffectManager _pool;
    private UnityEngine.GameObject _loadedObj;
    public System.Action onEnd;
    private UnityEngine.Transform[] children;
    private UnityEngine.Transform[] childrenPostProcessVolumes;
    public float LifeTime { get; set; }
    public UnityEngine.Transform[] Children { get; set; }
    public UnityEngine.Transform[] ChildrenPostProcessVolumes { get; set; }
    public bool IsPlaying { get; set; }
    public void Setup(PRISM.EffectManager affiliationPool, UnityEngine.GameObject loadedObj);
    public void Setup(bool reusable);
    public void Play();
    public void SimulateElapsedTime(float elapsedTime);
    public void Stop();
    private void Update();
    public void SetEmissionRateOverDistance(int rate);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.Transform, bool> <>9__19_0;
        public static System.Func<UnityEngine.Transform, bool> <>9__19_1;
        private bool <Setup>b__19_0(UnityEngine.Transform x);
        private bool <Setup>b__19_1(UnityEngine.Transform x);
    }
}

// Namespace: PRISM
public class EffectManager
{
    private System.Collections.Generic.Dictionary<UnityEngine.GameObject, System.Collections.Generic.List<UnityEngine.GameObject>> _pool;
    public Cysharp.Threading.Tasks.UniTask<PRISM.EffectController> Create(string effectName, UnityEngine.Transform parent);
    private PRISM.EffectController InstantiateOrPopObject(UnityEngine.GameObject loadedEffect, UnityEngine.Transform parent);
    private PRISM.EffectController PopObject(UnityEngine.GameObject loadedObj);
    public void PushObject(UnityEngine.GameObject loadedObj, UnityEngine.GameObject pushObject);
}

// Namespace: PRISM
public class FillExpandCanvas : UnityEngine.MonoBehaviour
{
    private bool copyImage;
    private UnityEngine.Material copyMaterial;
    private bool magX;
    private bool magY;
    private UnityEngine.GameObject originalImage;
    private void Start();
    private void OnDisable();
}

// Namespace: PRISM
public class GraphicsLocator
{
    public static PRISM.GraphicsManager GraphicsManager;
    public static PRISM.EffectManager EffectManager;
    public static PRISM.Rendering.CameraCaptureManager CameraCaptureManager;
    public static PRISM.PhysicsManager PhysicsManager;
    public static PRISM.SelfUpdateManager SelfUpdateManager;
}

// Namespace: PRISM
public enum PostProcessingType : System.Enum
{
    public int value__;
    public static PRISM.PostProcessingType None;
    public static PRISM.PostProcessingType ColorGrading;
    public static PRISM.PostProcessingType LdrBloom;
    public static PRISM.PostProcessingType DepthOfField;
    public static PRISM.PostProcessingType ScreenEdgeColor;
    public static PRISM.PostProcessingType SoftOverlay;
    public static PRISM.PostProcessingType Vignette;
    public static PRISM.PostProcessingType FXAA;
}

// Namespace: PRISM
public class GraphicsManager
{
    private float displayBufferScale;
    private PRISM.ShadowType <ShadowType>k__BackingField;
    private bool <NoPostProcess>k__BackingField;
    public PRISM.ShadowType ShadowType { get; set; }
    public bool NoPostProcess { get; set; }
    public Cysharp.Threading.Tasks.UniTask SetupAsync();
    public void SetPostEffect(bool torf);
    public void ChangeActivePostProcess(PRISM.PostProcessingType type);
}

// Namespace: PRISM
public class GraphicsUtil
{
    public static UnityEngine.Camera GetSceneRootCamera(string sceneName, string cameraObjectName);
    public static UnityEngine.Rect GetOffscreenUVRect(UnityEngine.Vector2 offscreenSize, UnityEngine.Vector2 destinationSize);

    private class <>c__DisplayClass0_0
    {
        public string cameraObjectName;
        private bool <GetSceneRootCamera>b__0(UnityEngine.GameObject g);
    }
}

// Namespace: PRISM
public class PatternAnimation : UnityEngine.MonoBehaviour
{
    private int _rowCount;
    private int _colCount;
    private float _spaceTime;
    private UnityEngine.Renderer _myRenderer;
    private float _timer;
    private int _id;
    public void Setup(UnityEngine.Texture2D patternTexture);
    private void Awake();
    private void Update();
}

// Namespace: PRISM
public class PhysicsManager
{
    private bool initializedGlobalObject;
    private PRISM.Module.CustomMagicaCloth.MagicaBodyParamPlaneColliderController floorColliderController;
    private MagicaCloth2.MagicaWindZone magicaWindZone;
    private MagicaCloth2.MagicaWindZone MagicaWindZone { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.CustomMagicaCloth.MagicaClothController> ActiveClothControllers { get; set; }
    public PRISM.Module.CustomMagicaCloth.MagicaBodyParamPlaneColliderController FloorColliderController { get; set; }
    public void SetGlobalTimeScale(float rate);
    public void ResetSimulation(bool resetTimeScaleAndWind, bool keepPose);
    public void SetGlobalWindVector(UnityEngine.Vector3 vector, float turbulence);
    public System.IDisposable CreateAvoidShakeScope();
    public void ChangeSimulationSettings(PhysicsSetting physicsSetting, PowerSaving powerSaving);
    private void _initializeGlobalObject();
    private static System.ValueTuple<int, int> _getSimulationSettings(PhysicsSetting physicsSetting, PowerSaving powerSaving);
}

// Namespace: PRISM
public class PlaneDropShadowData
{
    public UnityEngine.Transform targetTransform;
    public UnityEngine.MeshRenderer renderer;
}

// Namespace: PRISM
public class PlaneDropShadow : UnityEngine.MonoBehaviour
{
    private static string[] SearchPaths;
    private UnityEngine.MeshRenderer _meshRenderer;
    private UnityEngine.Color _baseColor;
    private float _maxHeight;
    private System.Collections.Generic.List<PRISM.PlaneDropShadowData> _dataList;
    private float zbias;
    private float offsetY;
    private float leftLocalOffsetY;
    private float rightLocalOffsetY;
    private float characterHeightWeight;
    public UnityEngine.Color BaseColor { get; set; }
    public float OffsetY { get; set; }
    public float LeftLocalOffsetY { get; set; }
    public float RightLocalOffsetY { get; set; }
    public float CharacterHeightWeight { get; set; }
    public void Setup(PRISM.Character character);
    private void LateUpdate();
    public void SetZBias(float _zbias);
    public void Cleanup();
}

// Namespace: PRISM
public class ScreenEffectCapture
{
    private ENTERPRISE.DisposableRenderTexture renderTexture;
    private string captureName;
    private float scale;
    public void Setup(string _captureName, float _scale);
    public bool IsValid();
    public UnityEngine.RenderTexture GetOrCreateRenderTexture();
    public void Cleanup();
}

// Namespace: PRISM
public class ScreenEffectEx : UnityEngine.MonoBehaviour, PRISM.IPausable, PRISM.Rendering.IScreenEffectEx
{
    private int tmpRTId;
    private UnityEngine.Canvas canvas;
    private UnityEngine.UI.CanvasScaler canvasScale;
    private UnityEngine.Material[] fadeMat;
    private UnityEngine.Texture2D white;
    private UnityEngine.Texture2D black;
    private UnityEngine.Texture2D fadeImage;
    private UnityEngine.Color fadeColor;
    private UnityEngine.Material copyForDissolve;
    private FadeType fadeType;
    private FadeType lastFadeType;
    private EffectType effectType;
    private float esing;
    private UnityEngine.UI.RawImage img;
    private PRISM.ScreenEffectCapture oneShotCapture;
    private PRISM.ScreenEffectCapture frameBufferCapture;
    private float lastRatio;
    private int frameUpdate;
    private bool isExistSplitScreen;
    private bool isNeedFrameBuffer;
    private float fadeCount;
    private float timeScale;
    private bool fadeOut;
    private bool reverseFlag;
    private bool isFirst;
    private bool isPause;
    private void Awake();
    public void InitForPlayEnd();
    private void OnEnable();
    private void OnDisable();
    private void _onBeginContextRendering(UnityEngine.Rendering.ScriptableRenderContext context, System.Collections.Generic.List<UnityEngine.Camera> cameras);
    private static bool _isValidOnBeginFrameRendering(UnityEngine.Camera canvasWorldCamera, System.Collections.Generic.List<UnityEngine.Camera> cameras);
    private static bool _isExistSplitScreen(System.Collections.Generic.List<UnityEngine.Camera> cameras);
    private bool _isDisplayFrameBuffer();
    public bool IsNeedCaptureFrameBuffer(UnityEngine.Camera targetCamera);
    private void Update();
    private void _updateInner(float deltaTime);
    private void _updateLastScreen(FadeType _fadeType);
    private UnityEngine.Texture _getBaseScreen(FadeType _fadeType);
    public UnityEngine.RenderTexture GetRenderTextureForCaptureFrameBuffer();
    private void _cleanup();
    private void _updateMaterial(EffectType _effectType);
    private void _adjustScreen(UnityEngine.Texture lastScreen);
    private UnityEngine.RenderTexture _getReservedBufferOrFrameBuffer();
    public void ChangeViewOut(float _time, FadeType _type, EffectType _effectType);
    public void ChangeView(float _time, FadeType _type, EffectType _effectType, int _fadeFrame);
    public void ChangeViewOut(bool _reverse, float _time, FadeType _type, EffectType _effectType);
    public void ChangeViewIn(bool _reverse, float _time, FadeType _type, EffectType _effectType, int _fadeFrame);
    public void ChangeView(bool _reverse, bool _fade, float _time, FadeType _type, EffectType _effectType, int _fadeFrame);
    public void UpdateScreen();
    public bool IsFade();
    public void FastForward();
    public void FastForward(float time);
    private void OnDestroy();
    public void Pause(bool torf);
    public void ResizeCaptureScale(float scale);
    public void LastScreenEjectForUI(UnityEngine.Transform parentTransform);

    public enum EffectType : System.Enum
    {
        public int value__;
        public static EffectType Alpha;
        public static EffectType Dia;
        public static EffectType DiaCenter;
        public static EffectType Hex;
        public static EffectType Mark;
        public static EffectType Cloud;
        public static EffectType ProceedTime;
        public static EffectType MovePlace;
        public static EffectType Fainted;
        public static EffectType MeltDown;
    }

    public enum FadeType : System.Enum
    {
        public int value__;
        public static FadeType LastIn;
        public static FadeType Dissolve;
        public static FadeType Black;
        public static FadeType White;
        public static FadeType Image;
        public static FadeType ClearDummy;
    }
}

// Namespace: PRISM
public class UpdaterItem : Cysharp.Threading.Tasks.IPlayerLoopItem
{
    private System.Collections.Generic.Dictionary<ExecutionOrder, System.Collections.Generic.List<System.Action>> callbackDic;
    public System.IDisposable Register(System.Action action, ExecutionOrder executionOrder);
    public bool MoveNext();

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<System.ValueTuple<System.Action, System.Collections.Generic.List<System.Action>>> <>9__2_0;
        private void <Register>b__2_0(System.ValueTuple<System.Action, System.Collections.Generic.List<System.Action>> x);
    }
}

// Namespace: PRISM
public class SelfUpdateManager
{
    private PRISM.UpdaterItem postLateUpdater;
    private PRISM.UpdaterItem updater;
    private PRISM.UpdaterItem preLateUpdater;
    private PRISM.UpdaterItem lastPreLateUpdater;
    public System.IDisposable RegisterPostLateUpdate(System.Action action, ExecutionOrder executionOrder);
    public System.IDisposable RegisterUpdate(System.Action action, ExecutionOrder executionOrder);
    public System.IDisposable RegisterPreLateUpdate(System.Action action, ExecutionOrder executionOrder);
    public System.IDisposable RegisterLastPreLateUpdate(System.Action action, ExecutionOrder executionOrder);

    public enum ExecutionOrder : System.Enum
    {
        public int value__;
        public static ExecutionOrder Default;
        public static ExecutionOrder Priority_Minus1;
        public static ExecutionOrder Priority_Minus2;
        public static ExecutionOrder Priority_Minus3;
        public static ExecutionOrder Priority_10;
    }
}

// Namespace: PRISM
public struct ShaderKeywordStrings : System.ValueType
{
    public static string USE_REALTIME_SHADOW;
}

// Namespace: PRISM
public struct ShaderPropertyIDs : System.ValueType
{
    public static int _Color;
    public static int _MainTex;
    public static int _MainTex_ST;
    public static int _LightTex;
    public static int _OutlineAdjust;
    public static int _OutlineColorAdd;
    public static int _PersonalLight;
    public static int _CenterPos;
    public static int _Radius;
    public static int _RingRotation;
    public static int _CharacterIndex;
    public static int _RimPower;
    public static int _RimIntensity;
    public static int _RimWidth;
    public static int _RimSpread;
    public static int _RimColor;
    public static int _RimLightDirection;
    public static int _RimFeather;
    public static int _RimDiffuseRate;
    public static int _GlobalCubeMap;
    public static int _RimBorder;
    public static int _RimBlur;
    public static int _RimAntiAlias;
    public static int _DiffuseBlur;
    public static int _DiffuseBorder;
    public static int _DarkColor;
    public static int _BrightColor;
    public static int _SSSColor;
    public static int _ShadowDir;
    public static int _ShadowPoint;
    public static int _LightDir;
    public static int _FaceRadius;
    public static int _ZBias;
    public static int _ReflectionTex;
    public static int _IrisUV;
    public static int _Flip;
    public static int _StencilRef;
    public static int _SrcBlend;
    public static int _DstBlend;
    public static int _Cull;
    public static int _ZWrite;
    public static int _Ratio;
    public static int _Aspect;
    public static int _UvParam;
    public static int _BlurRatio;
    public static int _LightTex_ST;
    public static int _TimeRatio;
    public static int _GradeTex;
    public static int _LastScreen;
    public static int _ShadeZOffset;
    public static int _TintColor2;
    public static int _AudienceMainTex;
    public static int id_CPs;
    public static int id_Mag;
    public static int id_SilRatio;
    public static int id_CyaBriAdd;
    public static int id_CyaBriMul;
    public static int id_UoColor;
    public static int id_UoRatio;
    public static int id_UNITXS;
    public static int id_UNITYS;
    public static int id_OFSS;
    public static int id_VERTS;
    public static int id_BODYOFSS;
    public static int id_CoronaOn;
    public static int id_TinyCorona;
    public static int id_CoronaWidthShift;
    public static int id_Fats;
    public static int _MainAlpha;
    public static int _SubAlpha;
    public static int _EmissionMap_ST;
    public static int _Intensity;
    public static int _LightInfluence;
    public static int _SpeedL;
    public static int _SPECULAR;
    public static int _TimelineTime;
    public static int _Alpha;
    public static int _Wlen;
    public static int _Wstr;
    public static int _MainRotate;
    public static int _Roughness;
    public static int _Metallic;
    public static int _MaskTex;
    public static int _MaskVector;
    public static int _SpecularMap;
    public static int _RoughnessMap;
    public static int _MetallicMap;
    public static int _FaceTex;
    public static int _BaseColor;
    public static int _SubTex_ST;
    public static int _SubAutoScrollY;
    public static int _SubAutoScrollX;
    public static int _EmissionColor;
    public static int _BumpMap_ST;
    public static int _BumpScale;
    public static int _BaseColorRGBIntensity;
    public static int _MaskAutoScrollX;
    public static int _DistortAmount;
    public static int _FlickerAnimSpeed;
    public static int _ZWriteMode;
    public static int _WaveSwitch;
    public static int _Wofy;
    public static int _MaskTex_ST;
    public static int _SpecularColor;
    public static int _MaskAlpha;
    public static int _MainAutoScrollX;
    public static int _CutOffAmount;
    public static int _Threshold;
    public static int _Margin;
    public static int _BaseMap;
    public static int _BaseMap_ST;
    public static int _RemoveTextureArtifact;
    public static int _UsePreMultiplyAlpha;
    public static int _LightSourceViewSpaceRadius;
    public static int _DepthOcclusionTestZBias;
    public static int _StartFadeinDistanceWorldUnit;
    public static int _EndFadeinDistanceWorldUnit;
    public static int _ShouldDoFlicker;
    public static int _FlickerTimeDelay;
    public static int _FlickResultIntensityLowestPoint;
    public static int _SpeedM;
    public static int _SpecularSettingGroup;
    public static int _RoughnessMap_ST;
    public static int _MetallicMap_ST;
    public static int _UseNormalMap;
    public static int _BumpMap;
    public static int _SEPARATE_MAIN_AND_BUMP_UV;
    public static int _LightScale;
    public static int _SpeedMY;
    public static int _SpeedLY;
    public static int _BloomThreshold;
    public static int _Overlay;
    public static int _EmissionMap;
    public static int _RenderSettingGroup;
    public static int _AlphaTex;
    public static int _AlphaTex_ST;
    public static int _Cutoff;
    public static int _LightmapTex;
    public static int _LightmapTex_ST;
    public static int _SpeedMainX;
    public static int _SpeedMainY;
    public static int _TextureColorInfluence;
    public static int _Distortion;
    public static int _Distortion_ST;
    public static int _DistortionStrength;
    public static int _DistortionSpeed;
    public static int _ReflectionStrength;
    public static int _RefrectionDistortionScale;
    public static int _ScatteringSettingGroup;
    public static int _ScatteringColor;
    public static int _ScatteringDensity;
    public static int _ScatteringIntensity;
    public static int _DepthThreshold;
    public static int _WaterSurfaceHeight;
    public static int _WaveSettingGroup;
    public static int _NoiseStrength;
    public static int _Wave1Speed;
    public static int _Wave1Size;
    public static int _Wave1Height;
    public static int _Wave1Direction;
    public static int _Wave2Speed;
    public static int _Wave2Size;
    public static int _Wave2Height;
    public static int _Wave2Direction;
    public static int _Wave3Speed;
    public static int _Wave3Size;
    public static int _Wave3Height;
    public static int _Wave3Direction;
    public static int _SpecularRoughness;
    public static int _SubTex;
    public static int _ColInb;
    public static int _LightRatio;
    public static int _MainAutoScrollY;
    public static int _MainAutoRotate;
    public static int _SubAutoRotate;
    public static int _SubRotate;
    public static int _MaskAutoScrollY;
    public static int _MaskAutoRotate;
    public static int _MaskRotate;
    public static int _CenterEditX;
    public static int _CenterEditY;
    public static int _Pow;
    public static int _Con;
    public static int _Off;
    public static int _Inb;
    public static int _Wofx;
}

// Namespace: PRISM
public class UIPolygonImage : UnityEngine.UI.Graphic
{
    private VertexParameter[] vertecies;
    private UnityEngine.Texture2D texture;
    public UnityEngine.Texture mainTexture { get; set; }
    protected void OnPopulateMesh(UnityEngine.UI.VertexHelper vh);

    public class VertexParameter
    {
        public UnityEngine.Vector2 position;
        public UnityEngine.Color32 color;
        public UnityEngine.Vector2 uv;
    }
}

// Namespace: PRISM
public class UIThemeColor : UnityEngine.MonoBehaviour
{
    private UnityEngine.Material runtimeMaterial;
    private ColorCalcParam colorCalcParam;
    private UnityEngine.UI.Image image;
    private UnityEngine.Color lastColor;
    private UnityEngine.Color tintColor2;
    private void Update();
    private UnityEngine.Color _calcTintColor2(UnityEngine.Color inColor);
    private UnityEngine.Color _calcBlendColor(UnityEngine.Vector3 color2, UnityEngine.Vector3 color1, BlendMode blend);
    private UnityEngine.Vector3 _lerpOuter(UnityEngine.Vector3 v0, UnityEngine.Vector3 v1, float t);

    private enum BlendMode : System.Enum
    {
        public int value__;
        public static BlendMode AlphaBlend;
        public static BlendMode Additive;
        public static BlendMode Multiply;
    }

    private class ColorCalcParam
    {
        public float brightRangeThreshold;
        public float brightRangeMultiply;
        public float brightRangeOffset;
        public float brightRangeSaturate;
        public BlendMode brightRangeBlend;
        public float midRangeMultiply;
        public float midRangeOffset;
        public float midRangeSaturate;
        public BlendMode midRangeBlend;
        public float darkRangeThreshold;
        public float darkRangeMultiply;
        public float darkRangeOffset;
        public float darkRangeSaturate;
        public BlendMode darkRangeBlend;
    }
}

// Namespace: PRISM
public class UVScroller : UnityEngine.MonoBehaviour
{
    private UnityEngine.Renderer _myRenderer;
    private UnityEngine.Vector4 _mainTexSt;
    private UnityEngine.Vector2 _scrollSpeed;
    private bool _isClamp;
    private UnityEngine.Vector2 _clampMin;
    private UnityEngine.Vector2 _clampMax;
    private UnityEngine.Vector2 _step;
    private void Awake();
    private void Update();
}

// Namespace: PRISM
public class LipSyncController : UnityEngine.MonoBehaviour
{
    private PRISM.LipSyncTable _lipSyncTable;
    private UnityEngine.Animator _animator;
    private int _charaID;
    private System.Collections.Generic.List<PRISM.LipData> _lips;
    private bool isSerious;
    private bool isAlwaysSerious;
    private bool isSeriousCloseReverse;
    private bool isOverwrite;
    public void Setup(PRISM.LipSyncTable table, int id, UnityEngine.Animator _faceAnimator);
    public void SetSerious(bool torf);
    public void SetOverwrite(bool torf);
    public void UpdateLip(float time);
    private int TimeToTableIndex(float time);
    private int TimeToTableIndexNoOffset(float time);
    public PRISM.LipData GetCurrentLip(float time);
    public PRISM.LipSyncTable GetLipSyncTable();
}

// Namespace: PRISM
public class LipData
{
    public float tongue;
    public float a;
    public float i;
    public float u;
    public float e;
    public float o;
    public float db;
}

// Namespace: PRISM
public class LipCurveData
{
    public UnityEngine.AnimationCurve a;
    public UnityEngine.AnimationCurve i;
    public UnityEngine.AnimationCurve u;
    public UnityEngine.AnimationCurve e;
    public UnityEngine.AnimationCurve o;
}

// Namespace: PRISM
public class LipSyncTable : UnityEngine.ScriptableObject
{
    private static int defaultFrameRate;
    private static int defaultOffsetFrame;
    public int frameRate;
    public int offsetFrame;
    public PRISM.LipData[] datas;
    public double lastFrame;
    public PRISM.LipCurveData curveData;
    public double GetDuration();
}

// Namespace: PRISM
public class AttachCharacterObjectBehaviour : UnityEngine.Playables.PlayableBehaviour
{
}

// Namespace: PRISM
public class AttachCharacterObjectClip : PRISM.PlayableAssetBase<PRISM.AttachCharacterObjectBehaviour>
{
}

// Namespace: PRISM
public class AttachCharacterObjectMixerBehaviour : PRISM.MixerBehaviourBase<PRISM.AttachCharacterObject>
{
    private UnityEngine.Timeline.TimelineClip _currentClip;
    public void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, object playerData);
    private void OnEnterClip();
    private void OnExitClip();
    private UnityEngine.Timeline.TimelineClip GetCurrentClip(double time);
}

// Namespace: PRISM
public class AttachCharacterObjectTrack : PRISM.TrackAssetBase<PRISM.AttachCharacterObject, PRISM.AttachCharacterObjectMixerBehaviour>
{
}

// Namespace: PRISM
public class AudienceControllerBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public float ArmDrawInRange;
    public float BodyDrawInRange;
}

// Namespace: PRISM
public class AudienceControllerClip : PRISM.PlayableAssetBase<PRISM.AudienceControllerBehaviour>
{
}

// Namespace: PRISM
public class AudienceControllerMixerBehaviour : PRISM.MixerBehaviourBase<PRISM.AudienceController>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM
public class AudienceControllerTrack : PRISM.TrackAssetBase<PRISM.AudienceController, PRISM.AudienceControllerMixerBehaviour>
{
}

// Namespace: PRISM
public class ConstraintTargetWeightBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    private int index;
    private float weight;
    public int Index { get; set; }
    public float Weight { get; set; }
}

// Namespace: PRISM
public class ConstraintTargetWeightClip : PRISM.PlayableAssetBase<PRISM.ConstraintTargetWeightBehaviour>
{
}

// Namespace: PRISM
public class ConstraintTargetWeightMixerBehaviour : PRISM.MixerBehaviourBase<PRISM.TransformConstraintBase>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM
public class ConstraintTargetWeightTrack : PRISM.TrackAssetBase<PRISM.TransformConstraintBase, PRISM.ConstraintTargetWeightMixerBehaviour>
{
}

// Namespace: PRISM
public class HighlightShakeBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public float shakeRate;
}

// Namespace: PRISM
public class HighlightShakeClip : PRISM.PlayableAssetBase<PRISM.HighlightShakeBehaviour>
{
}

// Namespace: PRISM
public class HighlightShakeMixerBehaviour : PRISM.MixerBehaviourBase<PRISM.Character>
{
    private static float shakeMax;
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM
public class HighlightShakeTrack : PRISM.TrackAssetBase<PRISM.Character, PRISM.HighlightShakeMixerBehaviour>
{
}

// Namespace: PRISM
public class LipSyncBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public PRISM.LipSyncTable data;
    public void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, object playerData);
}

// Namespace: PRISM
public class LipSyncClip : PRISM.PlayableAssetBase<PRISM.LipSyncBehaviour>
{
}

// Namespace: PRISM
public class LipSyncMixerBehaviour : PRISM.MixerBehaviourBase<PRISM.Character>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
}

// Namespace: PRISM
public class LipSyncTrack : PRISM.TrackAssetBase<PRISM.Character, PRISM.LipSyncMixerBehaviour>
{
}

// Namespace: PRISM
public class PersonalLightBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public UnityEngine.Color color;
    public UnityEngine.Color planeDropShadowColor;
    public float raiseBaseLightInfluence;
    public float highlightLightInfluence;
    public float highlightMaxColor;
}

// Namespace: PRISM
public class PersonalLightClip : PRISM.PlayableAssetBase<PRISM.PersonalLightBehaviour>
{
}

// Namespace: PRISM
public class PersonalLightMixerBehaviour : PRISM.MixerBehaviourBase<PRISM.Character>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM
public class PersonalLightTrack : UnityEngine.Timeline.TrackAsset
{
    private PRISM.PersonalLightMixerBehaviour mixerBehaviour;
    public UnityEngine.Playables.Playable CreateTrackMixer(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject owner, int inputCount);
    public void UpdateBindObject(PRISM.Character character);
}

// Namespace: PRISM
public class SwitchModelBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public int unitID;
    public string switchID;
    public int targetNum;
    public void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, object playerData);
}

// Namespace: PRISM
public class SwitchModelClip : PRISM.PlayableAssetBase<PRISM.SwitchModelBehaviour>
{
}

// Namespace: PRISM
public class SwitchModelMixerBehaviour : PRISM.MixerBehaviourBase<PRISM.Character>
{
    private int lastUnitID;
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
}

// Namespace: PRISM
public class SwitchModelTrack : UnityEngine.Timeline.TrackAsset
{
    private PRISM.SwitchModelMixerBehaviour mixerBehaviour;
    public UnityEngine.Playables.Playable CreateTrackMixer(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject owner, int inputCount);
    public void UpdateBindObject(PRISM.Character character);
}

// Namespace: PRISM
public class CharacterLightingBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public UnityEngine.Color _RimColor;
    public UnityEngine.Vector3 _RimLightDirection;
    public float _RimFeather;
    public float _RimDiffuseRate;
    public bool _EnableDepthOffsetRimLight;
    public bool _EnableToonRimLight;
    public float _RimPower;
    public float _RimIntensity;
    public float _RimWidth;
    public float _RimSpread;
    public float _RimBorder;
    public float _RimBlur;
    public float _RimAntiAlias;
}

// Namespace: PRISM
public class CharacterLightingClip : PRISM.PlayableAssetBase<PRISM.CharacterLightingBehaviour>
{
}

// Namespace: PRISM
public class CharacterLightingMixerBehaviour : PRISM.MixerBehaviourBase<PRISM.Legacy.CharacterLighting>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM
public class CharacterLightingTrack : PRISM.TrackAssetBase<PRISM.Legacy.CharacterLighting, PRISM.CharacterLightingMixerBehaviour>
{
}

// Namespace: PRISM
public class ClightControlMarker : UnityEngine.Timeline.Marker, UnityEngine.Playables.INotification
{
    private UnityEngine.PropertyName <id>k__BackingField;
    public PRISM.ClightControlType Type;
    public int[] Values;
    public UnityEngine.PropertyName id { get; set; }
}

// Namespace: PRISM
public enum ClightControlType : System.Enum
{
    public int value__;
    public static PRISM.ClightControlType Colors;
    public static PRISM.ClightControlType Ratio;
    public static PRISM.ClightControlType UORatio;
    public static PRISM.ClightControlType NumberRatios;
}

// Namespace: PRISM
public class ConeConstrainActivationMixerPlayable : UnityEngine.Playables.PlayableBehaviour
{
    private PostPlaybackStateType postPlaybackState;
    private bool boundConeConstrainInitialStateIsEnable;
    private PRISM.ConeConstrain coneConstrain;
    public PostPlaybackStateType PostPlaybackState { get; set; }
    public static UnityEngine.Playables.ScriptPlayable<PRISM.ConeConstrainActivationMixerPlayable> Create(UnityEngine.Playables.PlayableGraph graph, int inputCount);
    public void OnPlayableDestroy(UnityEngine.Playables.Playable playable);
    public void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, object playerData);
}

// Namespace: PRISM
public class ConeConstrainActivationPlayableAsset : UnityEngine.Playables.PlayableAsset, UnityEngine.Timeline.ITimelineClipAsset
{
    public UnityEngine.Timeline.ClipCaps clipCaps { get; set; }
    public UnityEngine.Playables.Playable CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go);
}

// Namespace: PRISM
public class ConeConstrainActivationTrack : UnityEngine.Timeline.TrackAsset
{
    public static string SearchName;
    private PostPlaybackStateType postPlaybackState;
    private PRISM.ConeConstrainActivationMixerPlayable mixer;
    public PostPlaybackStateType PostPlaybackState { get; set; }
    public UnityEngine.Playables.Playable CreateTrackMixer(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, int inputCount);
    private void UpdateTrackMode();
    public void GatherProperties(UnityEngine.Playables.PlayableDirector director, UnityEngine.Timeline.IPropertyCollector driver);
    protected void OnCreateClip(UnityEngine.Timeline.TimelineClip clip);

    public enum PostPlaybackStateType : System.Enum
    {
        public int value__;
        public static PostPlaybackStateType Active;
        public static PostPlaybackStateType Inactive;
        public static PostPlaybackStateType Revert;
        public static PostPlaybackStateType LeaveAsIs;
    }
}

// Namespace: PRISM
public class EffectPlayMarker : UnityEngine.Timeline.Marker, UnityEngine.Playables.INotification
{
    private int _index;
    private string _effectName;
    private string _value;
    public UnityEngine.PropertyName id { get; set; }
    public int index { get; set; }
    public string effectName { get; set; }
    public string value { get; set; }
}

// Namespace: PRISM
public class EventReciever : UnityEngine.MonoBehaviour, UnityEngine.Playables.INotificationReceiver
{
    public void OnNotify(UnityEngine.Playables.Playable origin, UnityEngine.Playables.INotification notification, object context);
}

// Namespace: PRISM
public class EyeControllerParameterMixerBehaviour : PRISM.MixerBehaviourBase<PRISM.Character>
{
    private EyeController eyeL;
    private EyeController eyeR;
    public void OnBehaviourPlay(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info);
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
}

// Namespace: PRISM
public class EyeControllerParameterPlayableAsset : PRISM.PlayableAssetBase<PRISM.EyeControllerParameterPlayableBehaviour>
{
    public UnityEngine.Timeline.ClipCaps clipCaps { get; set; }
}

// Namespace: PRISM
public class EyeControllerParameterPlayableBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enableL;
    public bool enableR;
}

// Namespace: PRISM
public class EyeControllerParameterTrack : PRISM.TrackAssetBase<PRISM.Character, PRISM.EyeControllerParameterMixerBehaviour>
{
}

// Namespace: PRISM
public class FacialPresetMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Animator>
{
    private UnityEngine.Playables.PlayableGraph graph;
    private UnityEngine.Animations.AnimationPlayableOutput output;
    private UnityEngine.Animations.AnimationMixerPlayable mixer;
    public void OnPlayableCreate(UnityEngine.Playables.Playable playable);
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void NoHitClip(UnityEngine.Timeline.TimelineClip beforeClip, UnityEngine.Timeline.TimelineClip nextClip);
    public void OnPlayableDestroy(UnityEngine.Playables.Playable playable);
}

// Namespace: PRISM
public class FacialPresetPlayableAsset : UnityEngine.Playables.PlayableAsset
{
    public PRISM.FadePlayableBehaviour behaviour;
    public UnityEngine.Playables.Playable CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go);
}

// Namespace: PRISM
public class FacialPresetPlayableBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public UnityEngine.Color startColor;
    public UnityEngine.Color endColor;
    public DG.Tweening.Ease easing;
    public bool isCapture;
}

// Namespace: PRISM
public class FacialPresetTrack : UnityEngine.Timeline.TrackAsset
{
    public UnityEngine.Playables.Playable CreateTrackMixer(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject owner, int inputCount);
}

// Namespace: PRISM
public class FadeMixerBehaviour : PRISM.MixerBehaviourBase<PRISM.RawImage4Normals>
{
    private UnityEngine.RenderTexture renderTexture;
    private bool isIgnoreCrossfade;
    public UnityEngine.RenderTexture RenderTexture { get; set; }
    public bool IsIgnoreCrossfade { get; set; }
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void NoHitClip(UnityEngine.Timeline.TimelineClip beforeClip, UnityEngine.Timeline.TimelineClip nextClip);
    public void OnPlayableDestroy(UnityEngine.Playables.Playable playable);
    private void _createRenderTexture();
}

// Namespace: PRISM
public class FadePlayableAsset : UnityEngine.Playables.PlayableAsset
{
    public PRISM.FadePlayableBehaviour behaviour;
    public UnityEngine.Playables.Playable CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go);
}

// Namespace: PRISM
public class FadePlayableBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public UnityEngine.Color startColor;
    public UnityEngine.Color endColor;
    public DG.Tweening.Ease easing;
    public float gradationPower;
    public float gradationLength;
    public float gradationAngle;
    public bool isCapture;
}

// Namespace: PRISM
public class FadeTrack : PRISM.TrackAssetBase<PRISM.RawImage4Normals, PRISM.FadeMixerBehaviour>
{
}

// Namespace: PRISM
public class LightDirectionConstraintMixerBehaviour : PRISM.MixerBehaviourBase<PRISM.LightDirectionConstraint>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
    protected void NoHitClip(UnityEngine.Timeline.TimelineClip beforeClip, UnityEngine.Timeline.TimelineClip nextClip);
}

// Namespace: PRISM
public class LightDirectionConstraintPlayableAsset : PRISM.PlayableAssetBase<PRISM.LightDirectionConstraintPlayableBehaviour>
{
}

// Namespace: PRISM
public class LightDirectionConstraintPlayableBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enabled;
    public UnityEngine.Vector3 offsetEuler;
}

// Namespace: PRISM
public class LightDirectionConstraintTrack : PRISM.TrackAssetBase<PRISM.LightDirectionConstraint, PRISM.LightDirectionConstraintMixerBehaviour>
{
}

// Namespace: PRISM
public class LightingBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public float intensity;
    public UnityEngine.Color color;
}

// Namespace: PRISM
public class LightingClip : PRISM.PlayableAssetBase<PRISM.LightingBehaviour>
{
}

// Namespace: PRISM
public class LightingMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Light>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM
public class LightingTrack : PRISM.TrackAssetBase<UnityEngine.Light, PRISM.LightingMixerBehaviour>
{
}

// Namespace: PRISM
public class LyricBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public string Text;
}

// Namespace: PRISM
public class LyricClip : PRISM.PlayableAssetBase<PRISM.LyricBehaviour>
{
}

// Namespace: PRISM
public class LyricMixerBehaviour : PRISM.MixerBehaviourBase<PRISM.TimelineController>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void NoHitClip(UnityEngine.Timeline.TimelineClip beforeClip, UnityEngine.Timeline.TimelineClip nextClip);
}

// Namespace: PRISM
public class LyricTrack : UnityEngine.Timeline.TrackAsset
{
    public UnityEngine.Playables.Playable CreateTrackMixer(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject owner, int inputCount);
}

// Namespace: PRISM
public class MixerBehaviourBase`1<TargetType> : UnityEngine.Playables.PlayableBehaviour
{
    public UnityEngine.Playables.PlayableDirector director;
    public UnityEngine.Timeline.TimelineClip[] clips;
    public TargetType target;
    public void Initialize(UnityEngine.Playables.PlayableDirector director, UnityEngine.Timeline.TimelineClip[] clips, TargetType target);
    public void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, object playerData);
    private float _getWeight(UnityEngine.Timeline.TimelineClip clip, double time);
    protected void Apply(UnityEngine.Timeline.TimelineClip clip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevClip, float prevOut, UnityEngine.Timeline.TimelineClip nextClip, float nextIn);
    protected void NoHitClip(UnityEngine.Timeline.TimelineClip beforeClip, UnityEngine.Timeline.TimelineClip nextClip);
    protected static float GetWeight(UnityEngine.Timeline.TimelineClip clip, double time);
}

// Namespace: PRISM
public class NotificationTrack : UnityEngine.Timeline.MarkerTrack
{
}

// Namespace: PRISM
public class OutlineActivationMixerPlayable : UnityEngine.Playables.PlayableBehaviour
{
    private PostPlaybackStateType postPlaybackState;
    private bool boundOutlineControllerInitialStateIsEnablePass;
    private PRISM.OutlineController boundOutlineController;
    public PostPlaybackStateType PostPlaybackState { get; set; }
    public static UnityEngine.Playables.ScriptPlayable<PRISM.OutlineActivationMixerPlayable> Create(UnityEngine.Playables.PlayableGraph graph, int inputCount);
    public void OnPlayableDestroy(UnityEngine.Playables.Playable playable);
    public void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, object playerData);
}

// Namespace: PRISM
public class OutlineActivationPlayableAsset : UnityEngine.Playables.PlayableAsset, UnityEngine.Timeline.ITimelineClipAsset
{
    public UnityEngine.Timeline.ClipCaps clipCaps { get; set; }
    public UnityEngine.Playables.Playable CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go);
}

// Namespace: PRISM
public class OutlineActivationTrack : UnityEngine.Timeline.TrackAsset
{
    public static string SearchName;
    private PostPlaybackStateType postPlaybackState;
    private PRISM.OutlineActivationMixerPlayable outlineActivationMixer;
    public PostPlaybackStateType PostPlaybackState { get; set; }
    public UnityEngine.Playables.Playable CreateTrackMixer(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, int inputCount);
    private void UpdateTrackMode();
    public void GatherProperties(UnityEngine.Playables.PlayableDirector director, UnityEngine.Timeline.IPropertyCollector driver);
    protected void OnCreateClip(UnityEngine.Timeline.TimelineClip clip);

    public enum PostPlaybackStateType : System.Enum
    {
        public int value__;
        public static PostPlaybackStateType Active;
        public static PostPlaybackStateType Inactive;
        public static PostPlaybackStateType Revert;
        public static PostPlaybackStateType LeaveAsIs;
    }
}

// Namespace: PRISM
public class PhysicsTimeScaleBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public UnityEngine.AnimationCurve rateCurve;
    public void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, object playerData);
}

// Namespace: PRISM
public class PhysicsTimeScaleClip : PRISM.PlayableAssetBase<PRISM.PhysicsTimeScaleBehaviour>
{
}

// Namespace: PRISM
public class PhysicsTimeScaleTrack : UnityEngine.Timeline.TrackAsset
{
}

// Namespace: PRISM
public class PhysicsWindBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public UnityEngine.AnimationCurve windCurveX;
    public UnityEngine.AnimationCurve windCurveY;
    public UnityEngine.AnimationCurve windCurveZ;
    public UnityEngine.AnimationCurve turbulenceCurve;
    public void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, object playerData);
}

// Namespace: PRISM
public class PhysicsWindClip : PRISM.PlayableAssetBase<PRISM.PhysicsWindBehaviour>
{
}

// Namespace: PRISM
public class PhysicsWindTrack : UnityEngine.Timeline.TrackAsset
{
}

// Namespace: PRISM
public class PlaneDropShadowMixerBehaviour : PRISM.MixerBehaviourBase<PRISM.Character>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    private void _apply(PRISM.PlaneDropShadowPlayableBehaviour behaviour, float weight);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevClip, float prevOut, UnityEngine.Timeline.TimelineClip nextClip, float nextIn);
    protected void NoHitClip(UnityEngine.Timeline.TimelineClip beforeClip, UnityEngine.Timeline.TimelineClip nextClip);
}

// Namespace: PRISM
public class PlaneDropShadowPlayableAsset : PRISM.PlayableAssetBase<PRISM.PlaneDropShadowPlayableBehaviour>, UnityEngine.Timeline.ITimelineClipAsset
{
    public UnityEngine.Timeline.ClipCaps clipCaps { get; set; }
}

// Namespace: PRISM
public class PlaneDropShadowPlayableBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enableOffsetY;
    public float offsetY;
    public bool enableZBias;
    public float zBias;
    public bool enableLeftLocalOffsetY;
    public float leftLocalOffsetY;
    public bool enableRightLocalOffsetY;
    public float rightLocalOffsetY;
    public bool enableCharacterHeightWeight;
    public float characterHeightWeight;
}

// Namespace: PRISM
public class PlaneDropShadowTrack : PRISM.TrackAssetBase<PRISM.Character, PRISM.PlaneDropShadowMixerBehaviour>
{
    public static string SearchName;
}

// Namespace: PRISM
public class PlayableAssetBase`1<TBehaviourType> : UnityEngine.Playables.PlayableAsset
{
    public TBehaviourType behaviour;
    public UnityEngine.Playables.Playable CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go);
}

// Namespace: PRISM
public class DepthOfFieldBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public float focusDistance;
    public float aperture;
    public float focalLength;
}

// Namespace: PRISM
public class DepthOfFieldClip : PRISM.PlayableAssetBase<PRISM.DepthOfFieldBehaviour>
{
}

// Namespace: PRISM
public class DepthOfFieldMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM
public class DepthOfFieldTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume, PRISM.DepthOfFieldMixerBehaviour>
{
}

// Namespace: PRISM
public class RotationBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public UnityEngine.Vector3 eulerRotation;
}

// Namespace: PRISM
public class RotationClip : PRISM.PlayableAssetBase<PRISM.RotationBehaviour>
{
}

// Namespace: PRISM
public class RotationMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Transform>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM
public class RotationTrack : PRISM.TrackAssetBase<UnityEngine.Transform, PRISM.RotationMixerBehaviour>
{
}

// Namespace: PRISM
public class SEMarker : UnityEngine.Timeline.Marker, UnityEngine.Playables.INotification
{
    private UnityEngine.PropertyName <id>k__BackingField;
    public UnityEngine.PropertyName id { get; set; }
}

// Namespace: PRISM
public class ShapeUguiMixerBehaviour : PRISM.MixerBehaviourBase<PRISM.ShapeUgui>
{
    private System.Collections.Generic.List<UnityEngine.Vector2> _vertices;
    public void Initialize(UnityEngine.Playables.PlayableDirector director, UnityEngine.Timeline.TimelineClip[] clips, PRISM.ShapeUgui target);
    public void OnGraphStart(UnityEngine.Playables.Playable playable);
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevClip, float prevOut, UnityEngine.Timeline.TimelineClip nextClip, float currentTime);
    public void OnPlayableDestroy(UnityEngine.Playables.Playable playable);
}

// Namespace: PRISM
public class ShapeUguiPlayableAsset : PRISM.PlayableAssetBase<PRISM.ShapeUguiPlayableBehaviour>, UnityEngine.Timeline.ITimelineClipAsset
{
    private PRISM.ShapeUgui <Target>k__BackingField;
    private UnityEngine.Bounds _bounds;
    public PRISM.ShapeUgui Target { get; set; }
    public UnityEngine.Bounds bounds { get; set; }
    public int vertexCount { get; set; }
    public UnityEngine.Timeline.ClipCaps clipCaps { get; set; }
    public void Setup(UnityEngine.Transform targetTransform);
    public void SetTime(double time);
    public void Cleanup();
    public UnityEngine.Vector2 GetPositionFromNormalizePosition(UnityEngine.Vector2 normalizePosition);
    public static UnityEngine.Vector2 GetPositionFromNormalizePosition(UnityEngine.Vector2 normalizePosition, UnityEngine.Rect rect);
    public UnityEngine.Vector2 GetNormalizePositionFromPosition(UnityEngine.Vector2 targetPosition);
    public int GetPositions(UnityEngine.Vector3[] positions);
    public void SetPositions(UnityEngine.Vector3[] positions);
}

// Namespace: PRISM
public class ShapeUguiPlayableBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public System.Collections.Generic.List<UnityEngine.Vector2> vertices;
    public int vertexCount { get; set; }
}

// Namespace: PRISM
public class ShapeUguiTrack : PRISM.TrackAssetBase<PRISM.ShapeUgui, PRISM.ShapeUguiMixerBehaviour>
{
    private ClipExtrapolation m_InfiniteClipPreExtrapolation;
    private ClipExtrapolation m_InfiniteClipPostExtrapolation;
    public ClipExtrapolation infiniteClipPreExtrapolation { get; set; }
    public ClipExtrapolation infiniteClipPostExtrapolation { get; set; }
}

// Namespace: PRISM
public class ShapeUguiOutlineBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public float outlineSize;
    public UnityEngine.Color outlineColor;
}

// Namespace: PRISM
public class ShapeUguiOutlineMixerBehaviour : PRISM.MixerBehaviourBase<PRISM.ShapeUgui>
{
    private float _outlineSize;
    private UnityEngine.Color _outlineColor;
    public void Initialize(UnityEngine.Playables.PlayableDirector director, UnityEngine.Timeline.TimelineClip[] clips, PRISM.ShapeUgui target);
    public void OnGraphStart(UnityEngine.Playables.Playable playable);
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevClip, float prevOut, UnityEngine.Timeline.TimelineClip nextClip, float currentTime);
    public void OnPlayableDestroy(UnityEngine.Playables.Playable playable);
}

// Namespace: PRISM
public class ShapeUguiOutlinePlayableAsset : PRISM.PlayableAssetBase<PRISM.ShapeUguiOutlineBehaviour>, UnityEngine.Timeline.ITimelineClipAsset
{
    public UnityEngine.Timeline.ClipCaps clipCaps { get; set; }
}

// Namespace: PRISM
public class ShapeUguiOutlineTrack : PRISM.TrackAssetBase<PRISM.ShapeUgui, PRISM.ShapeUguiOutlineMixerBehaviour>
{
    private ClipExtrapolation m_InfiniteClipPreExtrapolation;
    private ClipExtrapolation m_InfiniteClipPostExtrapolation;
    public ClipExtrapolation infiniteClipPreExtrapolation { get; set; }
    public ClipExtrapolation infiniteClipPostExtrapolation { get; set; }
}

// Namespace: PRISM
public class ChemicalLightControlBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public float Ratio;
    public float UORatio;
    public int[] ColorIndices;
    public int[] NumberRatios;
}

// Namespace: PRISM
public class ChemicalLightControlMixerBehaviour : PRISM.MixerBehaviourBase<PRISM.AudienceController>
{
    private PRISM.ChemicalLightControlBehaviour currentBehaviour;
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
}

// Namespace: PRISM
public class ChemicalLightControlPlayableAsset : PRISM.PlayableAssetBase<PRISM.ChemicalLightControlBehaviour>
{
}

// Namespace: PRISM
public class ChemicalLightControlTrack : PRISM.TrackAssetBase<PRISM.AudienceController, PRISM.ChemicalLightControlMixerBehaviour>
{
}

// Namespace: PRISM
public class CyalumeBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public int AnimationId;
}

// Namespace: PRISM
public class CyalumeClip : PRISM.PlayableAssetBase<PRISM.CyalumeBehaviour>
{
}

// Namespace: PRISM
public class CyalumeMixerBehaviour : PRISM.MixerBehaviourBase<PRISM.AudienceController>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
}

// Namespace: PRISM
public class CyalumeTrack : PRISM.TrackAssetBase<PRISM.AudienceController, PRISM.CyalumeMixerBehaviour>
{
}

// Namespace: PRISM
public class SpotLightBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public float intensity;
    public UnityEngine.Color color;
}

// Namespace: PRISM
public class SpotLightClip : PRISM.PlayableAssetBase<PRISM.SpotLightBehaviour>
{
}

// Namespace: PRISM
public class SpotLightMixerBehaviour : PRISM.MixerBehaviourBase<PRISM.StageController>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM
public class StageControllerPlayableAsset : UnityEngine.Playables.PlayableAsset
{
    public UnityEngine.Color startLightColor;
    public float startLightIntensity;
    public UnityEngine.Color endLightColor;
    public float endLightIntensity;
    public UnityEngine.ExposedReference<PRISM.StageController> stageController;
    public UnityEngine.Playables.Playable CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject game_object);
}

// Namespace: PRISM
public class StageControllerPlayableBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    private UnityEngine.Color _startLightColor;
    private float _startLightIntensity;
    private UnityEngine.Color _endLightColor;
    private float _endLightIntensity;
    private PRISM.StageController _stageController;
    public UnityEngine.Color startLightColor { get; set; }
    public float startLightIntensity { get; set; }
    public UnityEngine.Color endLightColor { get; set; }
    public float endLightIntensity { get; set; }
    public PRISM.StageController stageController { get; set; }
    public void OnGraphStart(UnityEngine.Playables.Playable playable);
    public void OnGraphStop(UnityEngine.Playables.Playable playable);
    public void OnBehaviourPlay(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info);
    public void OnBehaviourPause(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info);
    public void PrepareFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info);
}

// Namespace: PRISM
public class TextureColorBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public float intensity;
    public UnityEngine.Color color;
}

// Namespace: PRISM
public class TextureColorClip : PRISM.PlayableAssetBase<PRISM.TextureColorBehaviour>
{
}

// Namespace: PRISM
public class TextureColorMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Light>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM
public class TextureColorTrack : PRISM.TrackAssetBase<UnityEngine.Light, PRISM.TextureColorMixerBehaviour>
{
}

// Namespace: PRISM
public class TimelineLayerBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public PRISM.TimelineLayer timelineLayer;
    public string parentPath;
}

// Namespace: PRISM
public class TimelineLayerClip : UnityEngine.Playables.PlayableAsset
{
    public PRISM.TimelineLayerBehaviour behaviour;
    private UnityEngine.Transform _parent;
    private PRISM.TimelineLayer _layer;
    public PRISM.TimelineLayer layer { get; set; }
    public void Setup(UnityEngine.Transform parent);
    public void InstantiateLayer();
    public void SetupParent(UnityEngine.Playables.PlayableDirector director);
    public void SetTime(double time);
    public UnityEngine.Playables.Playable CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go);
    public void Cleanup();
}

// Namespace: PRISM
public class TimelineLayerMixerBehaviour : PRISM.MixerBehaviourBase<PRISM.TimelineLayerController>
{
    public void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, object playerData);
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void NoHitClip(UnityEngine.Timeline.TimelineClip beforeClip, UnityEngine.Timeline.TimelineClip nextClip);
    public void OnPlayableDestroy(UnityEngine.Playables.Playable playable);

    private class <>c__DisplayClass0_0
    {
        public double time;
        private bool <ProcessFrame>b__0(UnityEngine.Timeline.TimelineClip c);
        private bool <ProcessFrame>b__1(UnityEngine.Timeline.TimelineClip c);
    }
}

// Namespace: PRISM
public class TimelineLayerTrack : UnityEngine.Timeline.TrackAsset
{
    public UnityEngine.Playables.Playable CreateTrackMixer(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject owner, int inputCount);
}

// Namespace: PRISM
public class TimelineUtility
{
    public static System.Collections.Generic.List<TTrackType> GetAllTrackAssets<TTrackType>(UnityEngine.Playables.PlayableDirector director);
    private static System.Collections.Generic.List<TTrackType> GetAllTrackAssets<TTrackType>(UnityEngine.Timeline.TrackAsset target);
    public static UnityEngine.Timeline.TrackAsset GetTrackAsset(UnityEngine.Playables.PlayableDirector director, string trackPath);

    private class <>c__DisplayClass2_0
    {
        public string trackName;
        private bool <GetTrackAsset>b__0(UnityEngine.Timeline.TrackAsset t);
    }
}

// Namespace: PRISM
public class TrackAssetBase`2<TBindType, TMixerType> : UnityEngine.Timeline.TrackAsset
{
    public UnityEngine.Playables.Playable CreateTrackMixer(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject owner, int inputCount);
}

// Namespace: PRISM
public class QuaternionUtils
{
    private static float k_FloatMin;
    public static UnityEngine.Quaternion zero;
    public static UnityEngine.Quaternion Scale(UnityEngine.Quaternion q, float scale);
    public static UnityEngine.Quaternion NormalizeSafe(UnityEngine.Quaternion q);
    public static UnityEngine.Quaternion Blend(UnityEngine.Quaternion q1, UnityEngine.Quaternion q2, float weight);
    public static UnityEngine.Quaternion Add(UnityEngine.Quaternion rhs, UnityEngine.Quaternion lhs);
}

// Namespace: PRISM
public class TweenBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public UnityEngine.Transform startLocation;
    public UnityEngine.Transform endLocation;
    public bool shouldTweenPosition;
    public bool shouldTweenRotation;
    public UnityEngine.AnimationCurve curve;
}

// Namespace: PRISM
public class TweenClip : UnityEngine.Playables.PlayableAsset, UnityEngine.Timeline.ITimelineClipAsset, UnityEngine.Timeline.IPropertyPreview
{
    public UnityEngine.ExposedReference<UnityEngine.Transform> startLocation;
    public UnityEngine.ExposedReference<UnityEngine.Transform> endLocation;
    public bool shouldTweenPosition;
    public bool shouldTweenRotation;
    public UnityEngine.AnimationCurve curve;
    public UnityEngine.Timeline.ClipCaps clipCaps { get; set; }
    public UnityEngine.Playables.Playable CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject owner);
    public void GatherProperties(UnityEngine.Playables.PlayableDirector director, UnityEngine.Timeline.IPropertyCollector driver);
}

// Namespace: PRISM
public class TweenMixerBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    private static UnityEngine.AnimationCurve s_DefaultCurve;
    private bool m_ShouldInitializeTransform;
    private UnityEngine.Vector3 m_InitialPosition;
    private UnityEngine.Quaternion m_InitialRotation;
    public void ProcessFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info, object playerData);
    private void InitializeIfNecessary(UnityEngine.Transform transform);
    private UnityEngine.Vector3 TweenPosition(PRISM.TweenBehaviour tweenInput, float progress, float weight);
    private UnityEngine.Quaternion TweenRotation(PRISM.TweenBehaviour tweenInput, UnityEngine.Quaternion accumRotation, float progress, float weight);
    private static PRISM.TweenBehaviour GetTweenBehaviour(UnityEngine.Playables.Playable playable);
    private static UnityEngine.AnimationCurve GetCurve(PRISM.TweenBehaviour tween);
}

// Namespace: PRISM
public class TweenTrack : UnityEngine.Timeline.TrackAsset
{
    public UnityEngine.Playables.Playable CreateTrackMixer(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, int inputCount);
}

// Namespace: PRISM
public class AnimatorLayerWeightReceiver : UnityEngine.MonoBehaviour
{
    private UnityEngine.Animator sendTarget;
    private UnityEngine.Transform[] targetTransforms;
    public UnityEngine.Animator SendTarget { get; set; }
    private void LateUpdate();
    private void _updateMouthBlend();
}

// Namespace: PRISM
public class HomeCharacterManager : UnityEngine.MonoBehaviour
{
    private bool isControlSofaCharacter;
    private bool isCompleteDownload;
    private PRISM.Scenario.ScenarioManager scenarioManager;
    private float[] moveTimers;
    private static int homeBgCutScene;
    private static int homeBgLoginBonus;
    private static string MoveIdString;
    public Cysharp.Threading.Tasks.UniTask SetupAsync(PRISM.Scenario.ScenarioManager _scenarioManager);
    public Cysharp.Threading.Tasks.UniTask DownloadSequenceDataAsync();
    private void Update();
    private void _resetCharacterMove(int i);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<bool> <>9__8_0;
        private bool <DownloadSequenceDataAsync>b__8_0();
    }

    private struct <DownloadSequenceDataAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.HomeCharacterManager <>4__this;
        private PRISM.DownloadKeyContainer <downloadKeyContainer>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetupAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.HomeCharacterManager <>4__this;
        public PRISM.Scenario.ScenarioManager _scenarioManager;
        private int <characterNum>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class BootScene
{
    private static bool _isCompleteSetupManagers;
    public static Cysharp.Threading.Tasks.UniTask SetupManagersAsync(System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask Setup3DManagersAsync();
    public static void CleanupManagers();
    private static Cysharp.Threading.Tasks.UniTask InitializeUnityGameServices();

    private struct <InitializeUnityGameServices>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        private System.Runtime.CompilerServices.TaskAwaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetupManagersAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public interface ILiveScene
{
    public Cysharp.Threading.Tasks.UniTask ReceiveParameterAsync(PRISM.Live.ILiveStartData parameter);
}

// Namespace: PRISM
public class LightweightLiveScene : UnityEngine.MonoBehaviour, PRISM.ILiveScene
{
    public static string Path;
    private PRISM.CameraController mainCamera;
    private UnityEngine.UI.RawImage backgroundImage;
    private PRISM.Live.Live2DMVPlayer live2DMVPlayer;
    public Cysharp.Threading.Tasks.UniTask ReceiveParameterAsync(PRISM.Live.ILiveStartData startData);

    private class <>c__DisplayClass4_0
    {
        public bool isVocalSeparatedOn;
        public PRISM.RhythmGame.RhythmGameLoader loader;
        public string musicCueName;
        public System.Threading.CancellationToken cancellationToken;
        public PRISM.Live.ILiveStartData startData;
        public bool isUse2DMV;
        public PRISM.LightweightLiveScene <>4__this;
        public string bgmCueName;
        private Cysharp.Threading.Tasks.UniTask<PRISM.Live.LiveProgressManager> <ReceiveParameterAsync>g__CreateProgressManagerAsync|0();

        private struct <<ReceiveParameterAsync>g__CreateProgressManagerAsync|0>d : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
        {
            public int <>1__state;
            public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Live.LiveProgressManager> <>t__builder;
            public <>c__DisplayClass4_0 <>4__this;
            private System.Collections.Generic.List<PRISM.Live.ILiveProgressManagerExtension> <controllers>5__2;
            private PRISM.RhythmGame.VocalSeparatedController <controller>5__3;
            private Awaiter<PRISM.RhythmGame.VocalSeparatedController> <>u__1;
            private Awaiter <>u__2;
            private void MoveNext();
            private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
        }
    }

    private struct <ReceiveParameterAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Live.ILiveStartData startData;
        public PRISM.LightweightLiveScene <>4__this;
        private <>c__DisplayClass4_0 <>8__1;
        private PRISM.Live.LiveProgressManager <progressManager>5__2;
        private Awaiter<PRISM.Live.LiveProgressManager> <>u__1;
        private Awaiter <>u__2;
        private Awaiter<PRISM.RhythmGame.RhythmGamePresenter> <>u__3;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class LiveScene : UnityEngine.MonoBehaviour, PRISM.ILiveScene
{
    private UnityEngine.Canvas liveCanvas;
    private string _nameId;
    private PRISM.CameraController _camera;
    private PRISM.StageController _stageController;
    private PRISM.TimelineController _timelineController;
    private PRISM.AudienceController _audienceController;
    private UnityEngine.Canvas _lyricPanelCanvas;
    public CameraWorkEvent camEvent;
    private bool isManagerSetupCompleted;
    public bool isControlBySequencer;
    public bool isOldMv;
    private PRISM.MvCutSceneSoundResources soundResources;
    private Data sceneCreateData;
    private PRISM.UnitIdol[] unitIdols;
    private bool reflectionForceOn;
    private bool avoidSwayBoneShake;
    private UnityEngine.Color ambientLightColor;
    private UnityEngine.Color originalAmbientLightColor;
    private PRISM.Live.LiveStartData liveStartData;
    private PRISM.Live.LiveMVStartData liveMVStartData;
    private string[] typeExtention;
    private bool isInitializeEnd;
    private bool isReceivedParameter;
    private static bool isPreLoadEnd;
    private UniRx.CompositeDisposable disposables;
    private PRISM.Live.LiveProgressManager progressManager;
    public UniRx.Subject<string> PlaySeSubject;
    private PRISM.Legacy.ISystemSettingsCaller optionLocalSave;
    private PRISM.LiveSubSequence liveSubSequence;
    private static PRISM.UnitIdol[] preloadUnitIdol;
    private PRISM.LiveCharacterController liveCharacterController;
    public bool usePPV2;
    private float lastTime;
    public string NameId { get; set; }
    private PRISM.CameraController cameraController { get; set; }
    public PRISM.CameraController BaseCcamera { get; set; }
    public PRISM.StageController StageController { get; set; }
    public PRISM.TimelineController timelineController { get; set; }
    public PRISM.AudienceController audienceController { get; set; }
    public bool IsInitializeEnd();
    public Cysharp.Threading.Tasks.UniTask ReceiveParameterAsync(PRISM.Live.ILiveStartData arg);
    private Cysharp.Threading.Tasks.UniTaskVoid Start();
    private void _setupReflection(PRISM.GameMode gameMode);
    private void _setupPostProcessForcedOff();
    private static void _setupPostProcessForcedOff(UnityEngine.Rendering.Volume volume);
    private static void _setupPostProcessForcedOff(System.Collections.Generic.IEnumerable<UnityEngine.Timeline.TrackAsset> tracks);
    private void _invalidateSplitScreen();
    private void _setupCharacterOutline(OutlineForMV outlineForMv);
    private void SetLayer(UnityEngine.GameObject obj, int layer);
    private Cysharp.Threading.Tasks.UniTask _setUp3DRhythmGameAsync();
    private Cysharp.Threading.Tasks.UniTask _setUp3DMVAsync();
    private Cysharp.Threading.Tasks.UniTask<PRISM.RhythmGame.RhythmGameLoader> _setUp3DLiveAsync(PRISM.Live.ILiveStartData startData, PRISM.EffectPlayer effectPlayer, bool isMVMode, PRISM.Definitions.RenderingDynamicRange renderingDynamicRange);
    private void _setUpEffectPlayer(PRISM.EffectPlayer effectPlayer, PRISM.Live.ILiveStartData startData, bool isMVMode, PRISM.Legacy.ISystemSettingsCaller systemSettingsCaller);
    private Cysharp.Threading.Tasks.UniTask _loadLiveCharactersAsync(PRISM.Live.ILiveStartData startData);
    private Cysharp.Threading.Tasks.UniTask _setUpSoundAsync(PRISM.Live.ILiveStartData startData, PRISM.RhythmGame.RhythmGameLoader loader);
    private Cysharp.Threading.Tasks.UniTask _setUpTimelineAsync(PRISM.Live.ILiveStartData startData, bool isMV, RhythmGameMVEffectLevel effectLevel, PRISM.Definitions.RenderingDynamicRange renderingDynamicRange);
    private Cysharp.Threading.Tasks.UniTask _setupMvCharacterAsync();
    private Cysharp.Threading.Tasks.UniTask _setupMvModeAsync();
    private Cysharp.Threading.Tasks.UniTask _setupLessonModeAsync();
    private static UnityEngine.Color[] _getAudienceColor(System.Collections.Generic.IEnumerable<PRISM.Character> characters);
    private void _setupAudience(UnityEngine.Color[] audienceColors);
    public void SetupStage(UnityEngine.Camera camera);
    private void _forcedNoShadowForAllLights();
    private void Update();
    private void OnDestroy();
    public void DestroyCharacters(PRISM.Live.ILiveStartData startData);
    public void CameraWorkDataEnable();
    public int GetCharacterCount();
    public void SetSoundResources(PRISM.MvCutSceneSoundResources resources);
    public void LoadSceneCreateData(PRISM.Live.ILiveStartData startData);
    public Data GetSceneCreateData();
    private void StageCameraOff(PRISM.StageController sc);
    public void SetNameId(string nameId);
    public void SetCameraWorkData(int _cameraIndex);
    public static Cysharp.Threading.Tasks.UniTask PreLoadAsync(int songId, string _sceneName, PRISM.UnitIdol[] _unitIdol, bool _forceCharaChange);
    private bool <Start>b__47_1();
    private bool <_setUp3DMVAsync>b__56_0();
    private float <_setUp3DMVAsync>b__56_1(CameraWorkData x);
    private bool <_setupMvModeAsync>b__63_0();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<bool> <>9__47_0;
        public static System.Action<UnityEngine.Material, int> <>9__55_2;
        public static System.Func<bool> <>9__64_0;
        public static System.Func<PRISM.Character, bool> <>9__65_0;
        public static System.Func<PRISM.Character, UnityEngine.Color> <>9__65_1;
        private bool <Start>b__47_0();
        private void <_setUp3DRhythmGameAsync>b__55_2(UnityEngine.Material mat, int state);
        private bool <_setupLessonModeAsync>b__64_0();
        private bool <_getAudienceColor>b__65_0(PRISM.Character chara);
        private UnityEngine.Color <_getAudienceColor>b__65_1(PRISM.Character chara);
    }

    private class <>c__DisplayClass55_0
    {
        public PRISM.LiveScene <>4__this;
        public PRISM.RhythmGame.RhythmGamePresenter presenter;
        private bool <_setUp3DRhythmGameAsync>b__0();
        private void <_setUp3DRhythmGameAsync>b__1(string cueName);
    }

    private struct <PreLoadAsync>d__80 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public string _sceneName;
        public PRISM.UnitIdol[] _unitIdol;
        public bool _forceCharaChange;
        public int songId;
        private PRISM.DownloadKeyContainer <downloadKeyContainer>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <Start>d__47 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskVoidMethodBuilder <>t__builder;
        public PRISM.LiveScene <>4__this;
        private PRISM.GameMode <gameMode>5__2;
        private Awaiter <>u__1;
        private Awaiter<PRISM.LiveSubSequence> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_loadLiveCharactersAsync>d__59 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.LiveScene <>4__this;
        public PRISM.Live.ILiveStartData startData;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_setUp3DLiveAsync>d__57 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.RhythmGame.RhythmGameLoader> <>t__builder;
        public PRISM.LiveScene <>4__this;
        public PRISM.Live.ILiveStartData startData;
        public PRISM.EffectPlayer effectPlayer;
        public bool isMVMode;
        public PRISM.Definitions.RenderingDynamicRange renderingDynamicRange;
        private PRISM.RhythmGame.RhythmGameLoader <loader>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_setUp3DMVAsync>d__56 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.LiveScene <>4__this;
        private float[] <cameraChangeTimes>5__2;
        private PRISM.EffectPlayer <effectPlayer>5__3;
        private Awaiter <>u__1;
        private Awaiter<PRISM.RhythmGame.RhythmGameLoader> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_setUp3DRhythmGameAsync>d__55 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.LiveScene <>4__this;
        private <>c__DisplayClass55_0 <>8__1;
        private Awaiter <>u__1;
        private Awaiter<PRISM.RhythmGame.RhythmGameLoader> <>u__2;
        private Awaiter<PRISM.RhythmGame.RhythmGamePresenter> <>u__3;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_setUpSoundAsync>d__60 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Live.ILiveStartData startData;
        public PRISM.LiveScene <>4__this;
        public PRISM.RhythmGame.RhythmGameLoader loader;
        private string <bgmCueName>5__2;
        private System.Collections.Generic.List<PRISM.Live.ILiveProgressManagerExtension> <extensions>5__3;
        private PRISM.RhythmGame.VocalSeparatedController <controller>5__4;
        private Awaiter<PRISM.RhythmGame.VocalSeparatedController> <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_setupLessonModeAsync>d__64 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.LiveScene <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_setupMvCharacterAsync>d__62 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.LiveScene <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_setupMvModeAsync>d__63 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.LiveScene <>4__this;
        private string <cueSheet>5__2;
        private string <cueName>5__3;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class LiveSubSequence : System.IDisposable
{
    private PRISM.LiveScene liveScene;
    private System.Collections.Generic.IReadOnlyList<PlayCutSceneData> playCutSceneDataList;
    private static int LiveSceneID;
    private PRISM.EffectPlayer effectPlayer;
    private PRISM.TimelineController timelineController;
    private UnityEngine.GameObject[] cutInstance;
    private CameraWorkEvent[] camEvent;
    private PRISM.CutScene[] cutScene;
    private PRISM.Character[] characters;
    private PRISM.ScreenEffectEx screenEffect;
    private PRISM.MvCutSceneSoundResources soundResources;
    private int keepCutSceneId;
    private bool isFade;
    private CameraWorkEvent camEventLive;
    private PRISM.LiveCharacterController liveCharacterController;
    private UnityEngine.Transform liveCharacterRootTransform;
    private float sequenceTime;
    private UnityEngine.GameObject subSequenceNode;
    private UniRx.CompositeDisposable disposables;
    public static Cysharp.Threading.Tasks.UniTask<PRISM.LiveSubSequence> AllocateAsync(System.Collections.Generic.IReadOnlyList<PlayCutSceneData> playCutSceneList, PRISM.LiveScene liveScene, System.Threading.CancellationToken token);
    public void OnUpdate();
    private void _updateLiveScene(int prevCutSceneId, int currentCutSceneId);
    private void _onChangeCutSceneLiveScene(int prevCutSceneId, int currentCutSceneId);
    private void _updateNonLiveScene(int prevCutSceneId, int currentCutSceneId);
    private void _onChangeCutSceneNonLiveScene(int prevCutSceneId, int currentCutSceneId);
    private void _checkAndSetFadeIn(PlayFadeData pfd);
    private bool _isNeedPlayFadeOut(float endTime, PlayFadeData fadeData);
    private void _playFadeOut(PlayFadeData fadeData);
    private Cysharp.Threading.Tasks.UniTask _setupAsync(System.Collections.Generic.IReadOnlyList<PlayCutSceneData> playCutSceneDataList, System.Threading.CancellationToken token);
    private bool _isUseFocusCamera(int cutSceneId);
    private SceneType _getSceneType(int cutSceneId);
    private UnityEngine.GameObject _instantiateCutScene(string cutSceneName);
    private Cysharp.Threading.Tasks.UniTask<System.ValueTuple<UnityEngine.GameObject, PRISM.CutScene, CameraWorkEvent>> _setupCutSceneAsync(string cutSceneName, System.Threading.CancellationToken token);
    public static Cysharp.Threading.Tasks.UniTask PreLoadAsync(int songId, string sceneName, PRISM.UnitIdolWithMstCostume[] idols);
    public void Dispose();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Definitions.MstLiveCutSceneCostume, int> <>9__34_2;
        private int <PreLoadAsync>b__34_2(PRISM.Definitions.MstLiveCutSceneCostume x);
    }

    private class <>c__DisplayClass34_0
    {
        public int songId;
        public PRISM.UnitIdolWithMstCostume[] idols;
        public System.Func<PRISM.Definitions.MstLiveCutScene, bool> <>9__0;
        private bool <PreLoadAsync>b__0(PRISM.Definitions.MstLiveCutScene x);
    }

    private class <>c__DisplayClass34_1
    {
        public PRISM.Definitions.MstLiveCutScene cutScene;
        public <>c__DisplayClass34_0 CS$<>8__locals1;
        private bool <PreLoadAsync>b__1(PRISM.Definitions.MstLiveCutSceneCostume x);
    }

    private class <>c__DisplayClass34_2
    {
        public System.Collections.Generic.HashSet<int> costumeIds;
        public <>c__DisplayClass34_1 CS$<>8__locals2;
        private bool <PreLoadAsync>b__4(PRISM.UnitIdolWithMstCostume idol);
        private System.Nullable<int> <PreLoadAsync>g__GetCenterCharacterIdIfMatched|3();
    }

    private struct <AllocateAsync>d__20 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.LiveSubSequence> <>t__builder;
        public PRISM.LiveScene liveScene;
        public System.Collections.Generic.IReadOnlyList<PlayCutSceneData> playCutSceneList;
        public System.Threading.CancellationToken token;
        private PRISM.LiveSubSequence <result>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <PreLoadAsync>d__34 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public int songId;
        public PRISM.UnitIdolWithMstCostume[] idols;
        public string sceneName;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_setupAsync>d__29 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.LiveSubSequence <>4__this;
        public System.Threading.CancellationToken token;
        public System.Collections.Generic.IReadOnlyList<PlayCutSceneData> playCutSceneDataList;
        private int <cutSceneNum>5__2;
        private Awaiter <>u__1;
        private int <i>5__3;
        private Awaiter<System.ValueTuple<UnityEngine.GameObject, PRISM.CutScene, CameraWorkEvent>> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_setupCutSceneAsync>d__33 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.ValueTuple<UnityEngine.GameObject, PRISM.CutScene, CameraWorkEvent>> <>t__builder;
        public PRISM.LiveSubSequence <>4__this;
        public string cutSceneName;
        public System.Threading.CancellationToken token;
        private UnityEngine.GameObject <newCutSceneObject>5__2;
        private PRISM.CutScene <newCutScene>5__3;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class RunwayColorSetter : UnityEngine.MonoBehaviour
{
    private PRISM.SerializableNestedArray<PRISM.RunwayColorSetterTarget>[] targets;
    public void SetColors(System.Collections.Generic.IReadOnlyList<UnityEngine.Color> colors);
}

// Namespace: PRISM
public class RunwayColorSetterTarget : UnityEngine.MonoBehaviour
{
    private UnityEngine.MeshRenderer[] renderers;
    private UnityEngine.ParticleSystem[] particles;
    public void SetColor(UnityEngine.Color color);
}

// Namespace: PRISM
public class AnimWatcher : UnityEngine.MonoBehaviour
{
    private PRISM.AudienceController _audienceController;
    private UnityEngine.Transform cachedTransform;
    private UnityEngine.Vector3 orgPosition;
    private UnityEngine.Transform silTra;
    private UnityEngine.Transform[] handTras;
    private UnityEngine.Vector3[][] orgCyaVertss;
    private UnityEngine.Vector3[] ctrlVs0;
    public UnityEngine.Vector4[] silVerts;
    public static int CYAVERTS_HAND;
    private static int CYAVERTS_LENGTH;
    private UnityEngine.Vector3[][] cyaVertss;
    private UnityEngine.Vector2[] towelOffsets;
    private int iDelay;
    private int nDelay;
    private int[] cyaIdxs;
    private PRISM.Quiverer[,,] quis;
    private static float quiverSpeed;
    private static float baraKizami;
    private static float baraRecTime;
    private static float baraSusTime;
    private static int baraLen;
    private float baraTimer;
    private int baraPtr;
    private bool bara1st;
    private UnityEngine.Vector3[] baraPosis;
    private float[] baraAmps;
    private float[] baraVelos;
    private float targAmp;
    private float targVelo;
    private float aveAmp;
    private float aveVelo;
    private float velAmp;
    private float velVelo;
    private float t0;
    private static int NDELTA;
    private float[] deltas;
    private int pDelta;
    private int id_MainTex_ST;
    private UnityEngine.Vector4 scale_offset;
    public bool ready;
    private UnityEngine.Vector3[] delayedVerts;
    public PRISM.Quiverer GetQuiverer(int pattern, int positionOrRotation, int leftHandOrRightHand);
    public UnityEngine.Vector3[] getDelayedVerts(int iPat, UnityEngine.Vector2& offset);
    public void Setup(PRISM.AudienceController audienceController);
    private UnityEngine.Vector3[] getOrgVerts(UnityEngine.Transform tra, bool isSil, bool isCya);
    private void setDelay();
    public void SelfLateUpdate(System.Collections.Generic.List<CyaQuad> quads);
    private void _applyPosition(UnityEngine.Vector3[] cya_verts, int h3, UnityEngine.Transform handTra, UnityEngine.Vector3 cyaOffset);

    private class IVV
    {
        public UnityEngine.Vector3 mv;
        public UnityEngine.Vector3 gv;
        public UnityEngine.Vector3 wv;
    }
}

// Namespace: PRISM
public class AudienceController : UnityEngine.MonoBehaviour
{
    private UnityEngine.Camera mainCamera;
    public bool randomLayout;
    public float animMag;
    public float cyaMag;
    public UnityEngine.Vector3 cyaOffset;
    public bool cyaAssignTest;
    public float uoRatio;
    public UnityEngine.Color ultraColor;
    public float silRatio;
    public float CyaBriAdd;
    public float CyaBriMul;
    public int[] cyaRenderQueues;
    public static CoronaConfig RichCoronaConfig;
    public static CoronaConfig NormalCoronaConfig;
    public static CoronaConfig BaseCoronaConfig;
    public float coronaWidth;
    public int coronaShift;
    public bool enableAnyCorona;
    public float[] honsuus;
    public UnityEngine.Vector4 cps;
    public float maxCyaDelay;
    public float cyaDelay;
    public bool[] enableMovpats;
    public bool quiverOn;
    public float quiverSpeedMag;
    public float quiverAmpMagT;
    public float quiverAmpMagTy;
    public float quiverAmpMagR;
    public float quiverMinAmp;
    public float quiverMinVelo;
    public bool autoSetLookAts;
    public UnityEngine.Transform[] lookAts;
    private System.Collections.Generic.List<CyaQuad> cyaquads;
    private UnityEngine.Material[] _cyalumeMaterialArray;
    public static int nCyaPattern;
    private UnityEngine.Renderer[] zasekiRenderers;
    private PRISM.FloorMesh _floorMesh;
    public PRISM.AnimWatcher animWatcher;
    private int fillRatioTestMode;
    private bool fillRatioUp;
    private float orgSilRatio;
    private float testFillRatio;
    public static float dispRatio;
    public float dispDist;
    public UnityEngine.Vector3[] lookAtVecs;
    private UnityEngine.GameObject[] tglObjs;
    private UnityEngine.GameObject ToggleOrg;
    private bool tglready;
    private int nAnim;
    private int animKickID;
    private System.Text.RegularExpressions.Regex regToggle;
    private bool repeat;
    private System.Collections.Generic.IReadOnlyList<UnityEngine.Color> palette;
    private System.Collections.Generic.IReadOnlyList<int> paletteIndices;
    private float uoRatio_;
    private float triRatio_;
    private float quadRatio_;
    private float silRatio_;
    private float CyaBriAdd_;
    private float CyaBriMul_;
    private static string[] funcNames;
    private static int NFUNC;
    private UnityEngine.Vector3 animLposi;
    private PRISM.ChemicalLightMotion _cyMotion;
    private UnityEngine.GameObject _animObj;
    private bool isLiteMode;
    public PRISM.Legacy.AudienceLayoutScriptableObject audienceLayoutScriptableObject;
    public UnityEngine.Camera MainCamera { get; set; }
    public UnityEngine.Material[] cyalumeMaterialArray { get; set; }
    public PRISM.FloorMesh FloorMesh { get; set; }
    public PRISM.ChemicalLightMotion cyMotion { get; set; }
    public bool IsReady { get; set; }
    public void PlayMotion(int i_nMotionID);
    public void SetupAnimationObject();
    public void Setup(UnityEngine.Camera mainCamera, System.Collections.Generic.IReadOnlyList<UnityEngine.Color> idolColors, bool liteMode);
    public int GetIdolColorCount();
    public UnityEngine.Color GetIdolColor(int index);
    public void CreateAudienceLayout();
    public void LoadAudienceLayout();
    private float lookAtDistance(UnityEngine.Vector3 posi);
    private void SetupFloorMesh(System.Collections.Generic.List<CyaQuad> cyaquadList);
    public void SetPalette(System.Collections.Generic.IReadOnlyList<int> paletteIndices, bool fixedAssign);
    private void LateUpdate();
    public void update_afterCam(UnityEngine.Vector3 camForward);
    public bool dualAnim(int animID_, int animPendingID_);
    public void TestFillRatio();
    public void toggleChanged(UnityEngine.GameObject tglObj);
    private void clearToggles();
    public void SetHonsuu(int[] nums);
    private void honsuu2cps();
    private void OnDestroy();
    public void Cleanup(bool isImmediate);
    private void Destroy(UnityEngine.Object obj, bool isImmediate);
    private void OnDrawGizmos();

    public class CoronaConfig
    {
        public bool enable;
        public bool nonAlpha;
        public float onAlphaIntensity;
        public float intensity;
        public void CopyFrom(CoronaConfig org);
    }

    public class CyaSil
    {
        public bool enable;
        public UnityEngine.Vector3 silhouettePosition;
        public UnityEngine.Vector3 cyaPosi;
        public float silRnd;
        public int movpat;
    }

    public class CyaQuad
    {
        public System.Collections.Generic.List<CyaSil> cyasils;
        public float near;
        public float far;
        public float ratio;
        public PRISM.SeatQuad seatQuad;
        public UnityEngine.Transform cyalumeTransform;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<int, int, bool> <>9__89_0;
        private bool <SetPalette>b__89_0(int i, int count);
    }
}

// Namespace: PRISM
public class Billboard : UnityEngine.MonoBehaviour
{
    private UnityEngine.Camera _camera;
    public void Setup(UnityEngine.Camera cam);
    private void LateUpdate();
}

// Namespace: PRISM
public class CaptureDisplay : UnityEngine.MonoBehaviour
{
    private UnityEngine.Renderer _renderer;
    private UnityEngine.RenderTexture _keepReserveBuffer;
    public void Setup();
    private void Update();
}

// Namespace: PRISM
public class ChemicalLightMotion
{
    private UnityEngine.Animation anim;
    private bool resumef;
    private static int GRID_01;
    private static int GRID_02;
    private static int GRID_04;
    private static int GRID_08;
    private static int GRID_16;
    private static int GRID_05;
    private static int GRID_06;
    private static int GRID_11;
    private static int GRID_03;
    private static int GRID_12;
    public static PRISM.MotionCell[] motion;
    public static float[] motion_adjust;
    public static int[] actionLength;
    public void SetupAnimationObject(UnityEngine.GameObject animObj);
    public void setChemicalLightEvent(PRISM.AudienceController audience, int param, int paramPend);
    public void setChemicalLightEvent(PRISM.AudienceController audience, int param, float normalizeTime);
    public bool isPlaying();
    public void pause();
    public void resume();
    public void Cleanup();
}

// Namespace: PRISM
public class FloorMesh : UnityEngine.MonoBehaviour
{
    public static float FIXED_LT_ONE;
    private PRISM.AudienceController _audienceController;
    private PRISM.AnimWatcher animwatcher;
    private System.Collections.Generic.List<UnityEngine.GameObject> cyabases;
    private System.Collections.Generic.List<UnityEngine.GameObject> cyasubList;
    private System.Collections.Generic.List<UnityEngine.MeshRenderer> _meshRenderers;
    private System.Collections.Generic.List<UnityEngine.MeshRenderer> _meshRenderersSilBody;
    private System.Collections.Generic.List<UnityEngine.MeshRenderer> _meshRenderersSilArm;
    private System.Collections.Generic.List<UnityEngine.Transform> meshTransforms;
    private System.Collections.Generic.List<PRISM.MeshNR> meshNormalReversePairs;
    private UnityEngine.Vector3[] cyaCenters;
    private int nCyaAll;
    private float deltaTimeAccumulation;
    private bool active;
    private UnityEngine.Camera mainCamera;
    private static int BufferSize;
    private UnityEngine.Vector4[] unitXSize;
    private UnityEngine.Vector4[] unitYSize;
    private UnityEngine.Vector4[] offsetSize;
    private UnityEngine.Vector4[] bodyOffsetSize;
    private UnityEngine.Texture2D oldTex;
    private UnityEngine.Texture2D newTex;
    private System.Collections.Generic.Dictionary<int, UnityEngine.Color[]> nV2vcols;
    private bool fatOn;
    private UnityEngine.Vector4 fats;
    private bool ready;
    private bool isInitializeEnd;
    public int index;
    public Unity.Collections.NativeArray<PRISM.Legacy.CreateMeshData> cmData;
    public Unity.Collections.NativeArray<PRISM.Legacy.MeshVertexData> mvCyaData;
    public Unity.Collections.NativeArray<PRISM.Legacy.MeshVertexData> mvSil0Data;
    public Unity.Collections.NativeArray<PRISM.Legacy.MeshVertexData> mvSil1Data;
    public Unity.Collections.NativeArray<PRISM.Legacy.MeshVertexData> mvSil2Data;
    public Unity.Collections.NativeArray<PRISM.Legacy.MeshVertexData> mvArmData;
    public Unity.Collections.NativeArray<ushort> mvSil0Tri;
    public Unity.Collections.NativeArray<ushort> mvSil1Tri;
    public Unity.Collections.NativeArray<ushort> mvSil2Tri;
    public Unity.Collections.NativeArray<ushort> mvArmTri;
    public Unity.Collections.NativeArray<PRISM.Legacy.CyaSilData> csData;
    public Unity.Collections.NativeArray<PRISM.Legacy.MeshOut> meshOut;
    public System.Collections.Generic.List<PRISM.Legacy.MeshOutInner> meshOutInner;
    private UnityEngine.Vector3[] cyaVertsDummy;
    public static int TextureHeight;
    private static int TextureHeightQuarter;
    private static int TextureHeightX2;
    private static int TextureWidth;
    public static int TextureWidthHalf;
    public static int TextureWidthQuarter;
    private static int TextureHeadroom;
    private float armDrawInRange;
    private bool changedArmDrawInRange;
    private float bodyDrawInRange;
    private bool changedBodyDrawInRange;
    private Unity.Collections.NativeArray<UnityEngine.Bounds> silArmBoundsArray;
    private Unity.Collections.NativeArray<bool> silArmActiveArray;
    private Unity.Collections.NativeArray<UnityEngine.Bounds> silBodyBoundsArray;
    private Unity.Collections.NativeArray<bool> silBodyActiveArray;
    private UnityEngine.Material[] CyalumeMaterials { get; set; }
    public bool IsInitializeEnd { get; set; }
    public float ArmDrawInRange { get; set; }
    public float BodyDrawInRange { get; set; }
    public void Setup(PRISM.AudienceController audienceController, System.Collections.Generic.List<CyaQuad> cyaquads);
    public void setFat(float fatSize, float fatStart, float fatEnd, bool fatTest);
    private void _updateFat();
    private void setupCyaTexture();
    public void initColor(bool fixedAssign);
    private static void _toMesh(UnityEngine.Mesh meshTo, Unity.Collections.NativeArray<PRISM.Legacy.VertexData> vertexData, Unity.Collections.NativeArray<ushort> indexData);
    private void DisposeAll();
    public void SetSilRatio();
    public void SetCyaBri();
    public void SetUoRatio();
    public void LateUpdate2(System.Collections.Generic.List<CyaQuad> cyaquads);
    private void _lateUpdateRenderQueue(UnityEngine.Camera currentCamera);
    private CyalumeMaterialDistanceType GetCyalumeMaterialDistanceType(UnityEngine.Transform meshTransform, UnityEngine.Vector3 center, UnityEngine.Vector3 curCamForward);
    private void _lateUpdateMaterialParameter();
    private static void _setVector(int propertyId, UnityEngine.Vector4 value);
    private static void _setFloat(int propertyId, float value);
    private static void _setColor(int propertyId, UnityEngine.Color value);
    private static void _setVectorArray(int propertyId, UnityEngine.Vector4[] value);
    private static void _setTexture(int propertyId, UnityEngine.Texture value);
    private void EnableKeywordToCyalume(string keyword);
    private void DisableKeywordToCyalume(string keyword);
    private void SetCyalumeVectors(int iPat, int iHand, UnityEngine.Vector3[] verts, UnityEngine.Vector2 towelOffset);
    private void set_sil_vectors(UnityEngine.Vector4[] verts);
    public void update_afterCam(UnityEngine.Vector3 camForward);
    private UnityEngine.Texture2D _convertTexture(bool allTiny, byte[] cyalumeTextureInByte);
    private void OnDestroy();
    private static void Destroy(UnityEngine.Object obj);
    private void Update();
    private void OnDrawGizmos();

    private enum CyalumeMaterialDistanceType : System.Enum
    {
        public int value__;
        public static CyalumeMaterialDistanceType Far;
        public static CyalumeMaterialDistanceType Neutral;
        public static CyalumeMaterialDistanceType Near;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.MeshRenderer, UnityEngine.Bounds> <>9__33_0;
        public static System.Func<UnityEngine.MeshRenderer, UnityEngine.Bounds> <>9__33_1;
        private UnityEngine.Bounds <Setup>b__33_0(UnityEngine.MeshRenderer _);
        private UnityEngine.Bounds <Setup>b__33_1(UnityEngine.MeshRenderer _);
    }
}

// Namespace: PRISM
public class MeshNR
{
    private static int id_counter;
    public int id;
    private UnityEngine.GameObject[] cyasubs;
    private UnityEngine.MeshFilter[] filters;
    private UnityEngine.Transform cyabaseTra;
    public static UnityEngine.Transform camTra;
    public int vertexCountC;
    public int vertexCountS;
    public UnityEngine.Mesh[] meshes;
    private int curPtr;
    private bool ready;
    private bool hasNR;
    public bool isReadable;
    public void update_afterCam(UnityEngine.Vector3 camForward);
    public void Cleanup();
}

// Namespace: PRISM
public class MotionCell
{
    public string label;
    public string mid;
    public int len;
    public UnityEngine.Color col;
}

// Namespace: PRISM
public class Quiverer
{
    private static int N;
    private float[] _angs;
    private float[] _fmAngs;
    private float[] _fmAngAdds;
    public UnityEngine.Vector3 outv;
    private float[] _outv5;
    private float _speedMagRnd;
    private float _speedMag;
    private float _ampMag0;
    private float _ampMag;
    public float ampMagy;
    public float fmMag;
    private float _slowMag;
    public float SpeedMag { get; set; }
    public float AmpMag { get; set; }
    public void Init();
    private static float RndMag(float mag);
    public void Exec(float speed);
}

// Namespace: PRISM
public class SeatQuad
{
    public PRISM.SeatPlan seatPlan;
    public string name;
    public int iQuad;
    public UnityEngine.Vector3[] wcorner4;
    public UnityEngine.Vector3[] rcorner4;
    public UnityEngine.Vector3[] ccorner4;
    public float ydeg;
    public float[] xposis;
    public float[] yposis;
    public float[] zposis;
    public float[] limLs;
    public float[] limRs;
    private int[] n_yokos;
    private int[] n_tates;
    public int nYokoTotal;
    public int nTateTotal;
    public int nTrim;
    public int[] nTrimSubs;
    public int iTateNear;
    public int iTateFar;
    public float u2l_yoko;
    public float u2l_tate;
    private void set_name();
    public void set_iQuad(int iQuad_);
    private void setup_more(PRISM.SeatQuad org);
    private void setup_1st(UnityEngine.Transform zasekiTransform, UnityEngine.Vector3[] corners, int iQ, string nYokos, string nTates);
    private static int[] split2int(string str, int& ntotal);
    public void calcNTrim();
    private void calcLims(float[] lims, UnityEngine.Vector3 p1, UnityEngine.Vector3 p2);
    private float[] getDists(int ntotal, int[] n_s, float len, float isleScale, float& u2l);
}

// Namespace: PRISM
public class SeatPlan : UnityEngine.MonoBehaviour
{
    public float isleXScale;
    public float isleZScale;
    public string nYokos;
    public string nTates;
    public UnityEngine.Transform lookAt;
    private static int MaxInstancesPerMesh;
    public PRISM.SeatQuad[] CalcCorners(UnityEngine.Transform zasekiTransform);
    private void _sortCorners(UnityEngine.Vector3[] worldCornerPostions);
    private UnityEngine.Vector3 _getCenterPosition(UnityEngine.Vector3[] positions);
    private static void _swap<T>(T[] vs, int i, int j);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.Vector3> <>9__8_0;
        private UnityEngine.Vector3 <_getCenterPosition>b__8_0(UnityEngine.Vector3 acc, UnityEngine.Vector3 pos);
    }
}

// Namespace: PRISM
public class SpotLightController : UnityEngine.MonoBehaviour
{
    private UnityEngine.Vector3 _beamRotateOffsetEuler;
    private UnityEngine.Transform _beamTransform;
    private UnityEngine.Transform _rotater;
    private UnityEngine.GameObject _onRoot;
    private UnityEngine.GameObject _offRoot;
    private PRISM.LightBeam _lightBeam;
    private DG.Tweening.Tweener _swingTweener;
    public UnityEngine.Vector3 beamRotateOffsetEuler { get; set; }
    public void Setup(UnityEngine.Camera cam);
    public void SetOn();
    public void SetOff();
    private void OnDestroy();
    public void SetColor(UnityEngine.Color color);
    public void SetBeamScale(float scale);
}

// Namespace: PRISM
public class StageController : PRISM.NotificationReceiverBase
{
    private PRISM.CaptureDisplay _captureDisplay;
    private UnityEngine.Light _mainLight;
    private UnityEngine.Texture2D _neonPattern;
    private System.Collections.Generic.List<PRISM.SpotLightController> _spotLightList;
    private System.Collections.Generic.List<PRISM.EffectController> _effectControllerList;
    private PRISM.Legacy.CachedRendererListExecutor cachedRendererListExecutor;
    public void Setup(UnityEngine.Camera mainCamera);
    private void _setupScreen();
    private void _setupNeonAnimation();
    private void _setupStageGround(UnityEngine.Camera mainCamera);
    private void _setupStageEffect();
    private void _setupRenderQueue();
    private static void _setRenderQueue(UnityEngine.Material mat);
    public void SetLightColor(UnityEngine.Color lightColor);
    public void SetLightIntensity(float intensity);
    public void EnableDirectionalShadow(bool enable);
    public float GetLightIntensity();
    public void PlayEffect(string effectObjectName);
    private static bool _isPlayableEffect(PRISM.EffectPlayMarker marker);
    public void OnNotify(UnityEngine.Playables.Playable origin, UnityEngine.Playables.INotification notification, object context);
    public void SetSpotLightColor(UnityEngine.Color color);
    public static void PreLoadStage(PRISM.DownloadKeyContainer downloadKeyContainer);

    private class <>O
    {
        public static System.Action<UnityEngine.Material> <0>___setRenderQueue;
    }
}

// Namespace: PRISM
public class StageUtil
{
    public static void Swap<T>(T& a, T& b);
    public static void FindClosestPointsOnLines(UnityEngine.Vector3& P1, UnityEngine.Vector3& v1, UnityEngine.Vector3& P2, UnityEngine.Vector3& v2, UnityEngine.Vector3& Q1, UnityEngine.Vector3& Q2);
    public static void ResetTransform(UnityEngine.Transform tra);
    public static void FindClosestPointsOnLines$BurstManaged(UnityEngine.Vector3& P1, UnityEngine.Vector3& v1, UnityEngine.Vector3& P2, UnityEngine.Vector3& v2, UnityEngine.Vector3& Q1, UnityEngine.Vector3& Q2);

// Namespace: PRISM
    public class FindClosestPointsOnLines_0000113F$PostfixBurstDelegate : System.MulticastDelegate
    {
        public void Invoke(UnityEngine.Vector3& P1, UnityEngine.Vector3& v1, UnityEngine.Vector3& P2, UnityEngine.Vector3& v2, UnityEngine.Vector3& Q1, UnityEngine.Vector3& Q2);
        public System.IAsyncResult BeginInvoke(UnityEngine.Vector3& P1, UnityEngine.Vector3& v1, UnityEngine.Vector3& P2, UnityEngine.Vector3& v2, UnityEngine.Vector3& Q1, UnityEngine.Vector3& Q2, System.AsyncCallback , object );
        public void EndInvoke(System.IAsyncResult );
    }

// Namespace: PRISM
    class FindClosestPointsOnLines_0000113F$BurstDirectCall
    {
        private static System.IntPtr Pointer;
        private static System.IntPtr DeferredCompilation;
        private static void GetFunctionPointerDiscard(System.IntPtr& );
        private static System.IntPtr GetFunctionPointer();
        public static void Constructor();
        public static void Initialize();
        public static void Invoke(UnityEngine.Vector3& P1, UnityEngine.Vector3& v1, UnityEngine.Vector3& P2, UnityEngine.Vector3& v2, UnityEngine.Vector3& Q1, UnityEngine.Vector3& Q2);
    }
}

// Namespace: PRISM
public class NotificationReceiverBase : UnityEngine.MonoBehaviour, UnityEngine.Playables.INotificationReceiver
{
    public void OnNotify(UnityEngine.Playables.Playable origin, UnityEngine.Playables.INotification notification, object context);
}

// Namespace: PRISM
public class TimelineCameraCutData : UnityEngine.ISerializationCallbackReceiver
{
    public string name;
    public int startFrame;
    public int endFrame;
    public string description;
    public Position[] focusTargets;
    public bool isDolly;
    public string effect;
    private int <FrameRate>k__BackingField;
    public int FrameRate { get; set; }
    public double StartTime { get; set; }
    public double EndTime { get; set; }
    public double DurationTime { get; set; }
    public void OnBeforeSerialize();
    public void OnAfterDeserialize();
}

// Namespace: PRISM
public class TimelineController : UnityEngine.MonoBehaviour
{
    private PRISM.CameraController _mainCameraController;
    private UnityEngine.Playables.PlayableDirector _myDirector;
    private long _criAtomTrackTime;
    private double _duration;
    public System.Action<string> onLyric;
    private static string DanceTrackName;
    private static string EyeOpenCloseTrackName;
    private static string EyeScleraTrackName;
    private static string LipSyncTrackName;
    private static string ActivationTrackName;
    private static string PersonalLightTrackName;
    private static string SwitchModelTrackName;
    private static string HighlightShakeTrackName;
    private static string CriManaTrackName;
    private static string CriAtomTrack;
    private static string Center;
    private static string CenterLeft;
    private static string CenterRight;
    private static string Left;
    private static string Right;
    private static int CharacterTrackMax;
    private static string CharacterString;
    private static Cysharp.Text.Utf8PreparedFormat<int> preform;
    public static string NotificationTrack;
    public static string EffectUnitTrack;
    public static string EffectLiveTrackSmallSwitch;
    public static string EffectAlwaysTrack;
    public PRISM.CameraController mainCameraController { get; set; }
    public UnityEngine.Playables.PlayableDirector myDirector { get; set; }
    public double duration { get; set; }
    public double time { get; set; }
    public void Setup();
    public void SetupCharacter(PRISM.LiveCharacterController characterController);
    public UnityEngine.Timeline.TimelineAsset GetTimelineAsset();
    public UnityEngine.Timeline.TrackAsset GetTrackAsset(string trackPath);
    public static UnityEngine.Timeline.TrackAsset GetTrackAsset(UnityEngine.Playables.PlayableDirector director, string trackPath);
    public static UnityEngine.Timeline.TrackAsset GetTrackAsset(UnityEngine.Timeline.TimelineAsset timelineAsset, string trackPath);
    public void MuteTrackAsset(string trackPath, bool isMute);
    public void InvokeTracks(System.Action<UnityEngine.Timeline.TrackAsset> callback);
    private static void _invokeTrackRecursive(System.Collections.Generic.IEnumerable<UnityEngine.Timeline.TrackAsset> trackAssetList, System.Action<UnityEngine.Timeline.TrackAsset> callback);
    public void GetFindTrackAssets(string target, string filters, System.Collections.Generic.List<UnityEngine.Timeline.TrackAsset> trackAssetList);
    private static void _findChildTrackAssets(UnityEngine.Timeline.TrackAsset trackAsset, string filters, System.Collections.Generic.ICollection<UnityEngine.Timeline.TrackAsset> trackAssetList);
    public T CreateTrack<T>(string trackPath);
    public static System.Collections.Generic.List<UnityEngine.Timeline.ControlTrack> GetControlTracks(UnityEngine.Timeline.TimelineAsset timelineAsset);
    private static System.Collections.Generic.List<UnityEngine.Timeline.ControlTrack> GetControlTracks(System.Collections.Generic.IEnumerable<UnityEngine.Timeline.TrackAsset> tracks);
    public void AttachCharacter(System.Collections.Generic.IEnumerable<UnityEngine.Timeline.TrackAsset> childAssets, PRISM.Character character);
    public void BindObject(UnityEngine.Timeline.TrackAsset targetTrack, UnityEngine.Object bindObject);
    public void Play();
    public void Pause(bool doEvaluate);
    public void Resume();
    public void RebuildGraph();
    public double GetAtomFirstClipStartTime();
    public void SetLyric(string text);
    public bool HasLyric();
    public void MuteActivationTrack(System.Collections.Generic.IEnumerable<UnityEngine.Timeline.TrackAsset> childAssets, bool isMute);
    public void SetMuteActiveTracks(bool isMute);
    public void SetMuteCinemachineTrack(bool isMute);
    public void SetMuteFocusCameraTrack(bool isFocusCameraOn, bool isMV, RhythmGameMVEffectLevel effectLevel, PRISM.Definitions.RenderingDynamicRange renderingDynamicRange, System.Collections.Generic.IReadOnlyList<PRISM.UnitIdol> unitIdols);
    public void SetMuteAllCharacterAnimation(bool isMute);
    public void SetMuteForCameraWorkData(bool isMute);
    public void SetMuteCriMana(bool isMute);
    public void SetMuteAllOutlineActivationTrack(bool isMute);
    public void GetEffectMarker(System.Collections.Generic.IEnumerable<UnityEngine.Timeline.TrackAsset> childAssets, System.Collections.Generic.List<PRISM.EffectPlayMarker> markers);
    public System.Collections.Generic.List<PRISM.EffectPlayMarker> GetEffectMarkers();
    public static System.Collections.Generic.List<UnityEngine.Timeline.TrackAsset> SearchTracks(System.Collections.Generic.IEnumerable<UnityEngine.Timeline.TrackAsset> tracks, System.Func<UnityEngine.Timeline.TrackAsset, bool> predicate);
    public static System.Collections.Generic.List<UnityEngine.Timeline.TimelineClip> SearchTimelineClipsRecursively(System.Collections.Generic.IEnumerable<UnityEngine.Timeline.TrackAsset> tracks, System.Func<UnityEngine.Timeline.TimelineClip, bool> predicate);
    public static UnityEngine.Timeline.TimelineClip SearchTimelineClipRecursively(System.Collections.Generic.IEnumerable<UnityEngine.Timeline.TrackAsset> tracks, System.Func<UnityEngine.Timeline.TimelineClip, bool> predicate);
    public static UnityEngine.Timeline.TimelineClip FirstOrDefaultTimelineClip(UnityEngine.Timeline.TrackAsset track, System.Func<UnityEngine.Timeline.TimelineClip, bool> predicate);
    public void ReplaceTargetOnBaseSceneByName(UnityEngine.GameObject _baseScene);
    private static bool _isAll765Production(System.Collections.Generic.IReadOnlyList<PRISM.UnitIdol> unitIdols);
    private static bool _isMixed765Production(System.Collections.Generic.IReadOnlyList<PRISM.UnitIdol> unitIdols);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.Timeline.TrackAsset, bool> <>9__46_0;
        public static System.Func<PRISM.UnitIdol, PRISM.Definitions.MasterData, bool> <>9__74_0;
        public static System.Func<PRISM.UnitIdol, PRISM.Definitions.MasterData, bool> <>9__75_0;
        private bool <HasLyric>b__46_0(UnityEngine.Timeline.TrackAsset x);
        private bool <_isAll765Production>b__74_0(PRISM.UnitIdol e, PRISM.Definitions.MasterData masterData);
        private bool <_isMixed765Production>b__75_0(PRISM.UnitIdol e, PRISM.Definitions.MasterData masterData);
    }

    private class <>c__DisplayClass12_0
    {
        public PRISM.TimelineController <>4__this;
        public PRISM.LiveCharacterController characterController;
        private void <SetupCharacter>b__0(UnityEngine.Timeline.TrackAsset trackAsset);
    }

    private class <>c__DisplayClass16_0
    {
        public string trackName;
        private bool <GetTrackAsset>b__0(UnityEngine.Timeline.TrackAsset t);
    }

    private class <>c__DisplayClass20_0
    {
        public string target;
        private bool <GetFindTrackAssets>b__0(UnityEngine.Timeline.TrackAsset t);
    }

    private class <>c__DisplayClass22_0`1<T>
    {
        public string trackName;
        private bool <CreateTrack>b__0(UnityEngine.Timeline.TrackAsset t);
    }

    private class <>c__DisplayClass56_0
    {
        public PRISM.TimelineController <>4__this;
        public bool isMute;
        private void <SetMuteActiveTracks>b__0(UnityEngine.Timeline.TrackAsset trackAsset);
    }

    private class <>c__DisplayClass58_0
    {
        public bool isFocusCameraOn;
        public bool isEffectHigh;
        public bool isEffectLow;
        public bool isEffectOff;
        public bool isMV;
        public PRISM.Definitions.RenderingDynamicRange renderingDynamicRange;
        public bool all765Pro;
        public bool mixed765Pro;
        private void <SetMuteFocusCameraTrack>b__0(UnityEngine.Timeline.TrackAsset trackAsset);
    }

    private class <>c__DisplayClass59_0
    {
        public bool isMute;
        private void <SetMuteAllCharacterAnimation>b__0(UnityEngine.Timeline.TrackAsset trackAsset);
    }

    private class <>c__DisplayClass62_0
    {
        public bool isMute;
        private void <SetMuteAllOutlineActivationTrack>b__0(UnityEngine.Timeline.TrackAsset t);
    }

    private class <>c__DisplayClass68_0
    {
        public PRISM.TimelineController <>4__this;
        public System.Collections.Generic.List<PRISM.EffectPlayMarker> markers;
        private void <GetEffectMarkers>b__0(UnityEngine.Timeline.TrackAsset trackAsset);
    }
}

// Namespace: PRISM
public class TimelineLayer : UnityEngine.MonoBehaviour
{
    private UnityEngine.Playables.PlayableDirector _director;
    public void Setup();
    public void SetTime(double time);
    protected void Cleanup();
    private void OnDestroy();
}

// Namespace: PRISM
public class TimelineLayerController : UnityEngine.MonoBehaviour
{
    private UnityEngine.Playables.PlayableDirector _director;
    private System.Collections.Generic.List<PRISM.TimelineLayerClip> _layerClips;
    public void Setup(UnityEngine.Transform root, string timelinePath);
    private void OnPlayed(UnityEngine.Playables.PlayableDirector director);
    private void UpdateLayerClip();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.Timeline.TimelineClip, bool> <>9__4_0;
        public static System.Func<UnityEngine.Timeline.TimelineClip, PRISM.TimelineLayerClip> <>9__4_1;
        private bool <UpdateLayerClip>b__4_0(UnityEngine.Timeline.TimelineClip s);
        private PRISM.TimelineLayerClip <UpdateLayerClip>b__4_1(UnityEngine.Timeline.TimelineClip s);
    }
}

// Namespace: PRISM
public struct EnumerateOnlyList`1<T> : System.ValueType
{
    private System.Collections.Generic.List<T> inner;
    public T Item { get; set; }
    public int Count { get; set; }
    public Enumerator<T> GetEnumerator();
}

// Namespace: PRISM
public class EnumerateOnlyListExtensions
{
    public static PRISM.EnumerateOnlyList<T> AsEnumerateOnly<T>(System.Collections.Generic.List<T> self);
}

// Namespace: PRISM
public struct ReadOnlyHashSet`1<T> : System.ValueType
{
    private System.Collections.Generic.HashSet<T> _inner;
    public int Count { get; set; }
    public Enumerator<T> GetEnumerator();
    public bool Contains(T item);
}

// Namespace: PRISM
public class ReadOnlyHashSetExtensions
{
    public static PRISM.ReadOnlyHashSet<T> AsReadOnly<T>(System.Collections.Generic.HashSet<T> self);
}

// Namespace: PRISM
public class SpriteAttacherBase : UnityEngine.MonoBehaviour
{
    public UnityEngine.Sprite Sprite { get; set; }
}

// Namespace: PRISM
public class SpriteAttacherImage : PRISM.SpriteAttacherBase
{
    private UnityEngine.UI.Image image;
    public UnityEngine.Sprite Sprite { get; set; }
}

// Namespace: PRISM
public class SpriteAttacherSpriteRenderer : PRISM.SpriteAttacherBase
{
    private UnityEngine.SpriteRenderer spriteRenderer;
    public UnityEngine.Sprite Sprite { get; set; }
}

// Namespace: PRISM
public class SpriteAttacherSpriteRendererMulti : PRISM.SpriteAttacherBase
{
    private UnityEngine.SpriteRenderer[] spriteRenderers;
    public UnityEngine.Sprite Sprite { get; set; }
}

// Namespace: PRISM
public interface ILiveDefaultBehaviourCaller : PRISM.Legacy.ILegacyCaller
{
    public PRISM.Live.ILiveBehaviour Create(PRISM.Live.LiveStartData startData, PRISM.Adapters.IRhythmGameSpecialViewLocator locator);
}

// Namespace: PRISM
public class RhythmGameRenderOptionWatcher : UnityEngine.MonoBehaviour
{
    private UnityEngine.SpriteRenderer backgroundFilter;
    private PRISM.RhythmGame.Lane lane;
    private UnityEngine.GameObject lifeGauge;
    private UnityEngine.GameObject scoreGauge;
    private UnityEngine.GameObject lifeWarning;
    private PRISM.RhythmGame.ComboView[] comboViews;
    private UnityEngine.Camera camera3d;
    private UnityEngine.GameObject supportMember;
    private PRISM.RhythmGame.RhythmGameTechnicalScoreView technicalScore2D;
    private PRISM.RhythmGame.RhythmGameTechnicalScoreView technicalScore3D;
    private PRISM.SerializableNestedArray<UnityEngine.Transform>[] technicalScoreParents;
    private UnityEngine.Transform technicalChallengeTechnicalScoreParent;
    private PRISM.RhythmGame.ComboView <CurrentComboView>k__BackingField;
    private PRISM.RhythmGame.RhythmGameTechnicalScoreView <CurrentTechnicalScoreView>k__BackingField;
    public PRISM.RhythmGame.ComboView CurrentComboView { get; set; }
    public PRISM.RhythmGame.RhythmGameTechnicalScoreView CurrentTechnicalScoreView { get; set; }
    public void BeginWatch(PRISM.RhythmGame.RhythmGameOption option, PRISM.IRhythmGameRenderOptionWatcherState state, PRISM.RhythmGameRenderMode mode);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.RhythmGame.RhythmGameOption, float> <>9__20_0;
        public static System.Func<PRISM.RhythmGame.RhythmGameOption, float> <>9__20_2;
        public static System.Func<PRISM.RhythmGame.RhythmGameOption, System.ValueTuple<PRISM.RhythmGame.RhythmGameOptionComboShowType, bool, bool, bool>> <>9__20_4;
        public static System.Func<PRISM.RhythmGame.RhythmGameOption, float> <>9__20_6;
        public static System.Func<PRISM.RhythmGame.RhythmGameOption, PRISM.RhythmGame.RhythmGameOptionTechnicalScoreCalculationType> <>9__20_8;
        public static System.Func<PRISM.RhythmGame.RhythmGameOption, bool> <>9__20_10;
        public static System.Func<PRISM.RhythmGame.RhythmGameOption, bool> <>9__20_12;
        public static System.Func<PRISM.RhythmGame.RhythmGameOption, bool> <>9__20_14;
        public static System.Func<PRISM.RhythmGame.RhythmGameOption, PRISM.RhythmGame.RhythmGameOptionSupportEffectType> <>9__20_16;
        public static System.Func<PRISM.RhythmGame.RhythmGameOption, System.ValueTuple<PRISM.RhythmGame.RhythmGameOptionTechnicalScoreShowType, PRISM.RhythmGame.RhythmGameOptionTechnicalScoreShowPositionType, PRISM.RhythmGame.RhythmGameOptionTechnicalScoreCalculationType>> <>9__20_18;
        private float <BeginWatch>b__20_0(PRISM.RhythmGame.RhythmGameOption x);
        private float <BeginWatch>b__20_2(PRISM.RhythmGame.RhythmGameOption x);
        private System.ValueTuple<PRISM.RhythmGame.RhythmGameOptionComboShowType, bool, bool, bool> <BeginWatch>b__20_4(PRISM.RhythmGame.RhythmGameOption x);
        private float <BeginWatch>b__20_6(PRISM.RhythmGame.RhythmGameOption x);
        private PRISM.RhythmGame.RhythmGameOptionTechnicalScoreCalculationType <BeginWatch>b__20_8(PRISM.RhythmGame.RhythmGameOption x);
        private bool <BeginWatch>b__20_10(PRISM.RhythmGame.RhythmGameOption x);
        private bool <BeginWatch>b__20_12(PRISM.RhythmGame.RhythmGameOption x);
        private bool <BeginWatch>b__20_14(PRISM.RhythmGame.RhythmGameOption x);
        private PRISM.RhythmGame.RhythmGameOptionSupportEffectType <BeginWatch>b__20_16(PRISM.RhythmGame.RhythmGameOption x);
        private System.ValueTuple<PRISM.RhythmGame.RhythmGameOptionTechnicalScoreShowType, PRISM.RhythmGame.RhythmGameOptionTechnicalScoreShowPositionType, PRISM.RhythmGame.RhythmGameOptionTechnicalScoreCalculationType> <BeginWatch>b__20_18(PRISM.RhythmGame.RhythmGameOption x);
    }

    private class <>c__DisplayClass20_0
    {
        public PRISM.RhythmGameRenderOptionWatcher <>4__this;
        public PRISM.IRhythmGameRenderOptionWatcherState state;
        public PRISM.RhythmGame.RhythmGameOption option;
        private void <BeginWatch>b__1(float brightness);
        private void <BeginWatch>b__3(float alpha);
        private void <BeginWatch>b__5(System.ValueTuple<PRISM.RhythmGame.RhythmGameOptionComboShowType, bool, bool, bool> changedOption);
        private void <BeginWatch>b__7(float rate);
        private void <BeginWatch>b__9(PRISM.RhythmGame.RhythmGameOptionTechnicalScoreCalculationType x);
        private void <BeginWatch>b__11(bool isShow);
        private void <BeginWatch>b__13(bool isShow);
        private void <BeginWatch>b__15(bool isShow);
        private void <BeginWatch>b__17(PRISM.RhythmGame.RhythmGameOptionSupportEffectType type);
        private void <BeginWatch>b__19(System.ValueTuple<PRISM.RhythmGame.RhythmGameOptionTechnicalScoreShowType, PRISM.RhythmGame.RhythmGameOptionTechnicalScoreShowPositionType, PRISM.RhythmGame.RhythmGameOptionTechnicalScoreCalculationType> x);
    }
}

// Namespace: PRISM
public interface IRhythmGameRenderOptionWatcherState
{
    public int CurrentCombo { get; set; }
    public PRISM.RhythmGame.ClearType CurrentClearType { get; set; }
    public int AdditionTechnicalScore { get; set; }
    public int ReductionTechnicalScore { get; set; }
    public int TechnicalHighScore { get; set; }
}

// Namespace: PRISM
public enum RhythmGameRenderMode : System.Enum
{
    public int value__;
    public static PRISM.RhythmGameRenderMode Normal;
    public static PRISM.RhythmGameRenderMode Auto;
    public static PRISM.RhythmGameRenderMode TechnicalChallenge;
}

// Namespace: PRISM
public class SceneLoader
{
    private UnityEngine.SceneManagement.Scene <Scene>k__BackingField;
    private string key;
    private Cysharp.Threading.Tasks.UniTask loadTask;
    public UnityEngine.SceneManagement.Scene Scene { get; set; }
    public Cysharp.Threading.Tasks.UniTask LoadAsync(UnityEngine.SceneManagement.LoadSceneMode mode);
    public Cysharp.Threading.Tasks.UniTask ReleaseAsync();

    private class <>c__DisplayClass7_0
    {
        public PRISM.SceneLoader <>4__this;
        public UnityEngine.SceneManagement.LoadSceneMode mode;
        private Cysharp.Threading.Tasks.UniTask <LoadAsync>b__0();

        private struct <<LoadAsync>b__0>d : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
        {
            public int <>1__state;
            public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
            public <>c__DisplayClass7_0 <>4__this;
            private Awaiter<UnityEngine.AsyncOperation> <>u__1;
            private AsyncOperationAwaiter <>u__2;
            private void MoveNext();
            private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
        }
    }

    private struct <ReleaseAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.SceneLoader <>4__this;
        private Awaiter <>u__1;
        private AsyncOperationAwaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class CriAtomCache
{
    private string <AcbPath>k__BackingField;
    private string <AwbPath>k__BackingField;
    private CriWare.CriAtomExAcb <Handle>k__BackingField;
    private string <SheetName>k__BackingField;
    private int refCount;
    private bool <Loaded>k__BackingField;
    public string AcbPath { get; set; }
    public string AwbPath { get; set; }
    public CriWare.CriAtomExAcb Handle { get; set; }
    public string SheetName { get; set; }
    public bool Loaded { get; set; }
    private void _loadHandle(string acbPath, string awbPath);
    public Cysharp.Threading.Tasks.UniTask<bool> LoadAsync();
    public void Release(bool force);

    private struct <LoadAsync>d__22 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<bool> <>t__builder;
        public PRISM.CriAtomCache <>4__this;
        private PRISM.ResourceManagement.ResourceLoaderContainer <rl>5__2;
        private string <acbRealPath>5__3;
        private Awaiter<string> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class MvCutSceneSoundResources
{
    private System.Collections.Generic.List<string> cueSheetNameList;
    private CriWare.CriAtomExPlayer[] atomPlayers;
    public CriWare.CriAtomExPlayer BgmAtomPlayer { get; set; }
    public CriWare.CriAtomExPlayer VoiceAtomPlayer { get; set; }
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(UnityEngine.GameObject go, bool isBgmFader, bool bgmEnableAudioSyncedTimer);
    public Cysharp.Threading.Tasks.UniTask<System.ValueTuple<bool, PRISM.CriAtomCache>> LoadCueSheetAsync(string sheetName);
    public Cysharp.Threading.Tasks.UniTask LoadAndSetCueSheetAsync(AudioType audioType, string cueSheet, string cueName);
    public void UnLoadCueSheet();

    public enum AudioType : System.Enum
    {
        public int value__;
        public static AudioType Bgm;
        public static AudioType Voice;
        public static AudioType Max;
    }

    private struct <InitializeAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.MvCutSceneSoundResources <>4__this;
        public bool bgmEnableAudioSyncedTimer;
        public bool isBgmFader;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <LoadAndSetCueSheetAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.MvCutSceneSoundResources <>4__this;
        public string cueSheet;
        public AudioType audioType;
        public string cueName;
        private Awaiter<System.ValueTuple<bool, PRISM.CriAtomCache>> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public enum AudioType : System.Enum
{
    public int value__;
    public static PRISM.AudioType Bgm;
    public static PRISM.AudioType FadeBgm;
    public static PRISM.AudioType Se;
    public static PRISM.AudioType FadeSe;
    public static PRISM.AudioType Voice;
    public static PRISM.AudioType FadeVoice;
    public static PRISM.AudioType Environment;
    public static PRISM.AudioType FadeEnvironment;
    public static PRISM.AudioType Function;
}

// Namespace: PRISM
public class CueInfoEx
{
    public string name;
    public int numTracks;
}

// Namespace: PRISM
public class SoundInfo
{
    public string AcbFileName;
    public string SheetName;
    public System.Collections.Generic.List<PRISM.CueInfoEx> CueInfos;
}

// Namespace: PRISM
public class SelectorsInfo
{
    public string SelectorName;
    public int LabelCount;
    public System.Collections.Generic.List<string> LabelNames;
}

// Namespace: PRISM
public class Selector
{
    public string SelectorName;
    public string LabelName;
}

// Namespace: PRISM
public enum SoundCategory : System.Enum
{
    public int value__;
    public static PRISM.SoundCategory bgm_option;
    public static PRISM.SoundCategory se_option;
    public static PRISM.SoundCategory voice_option;
    public static PRISM.SoundCategory song_option;
    public static PRISM.SoundCategory se_tap_option;
    public static PRISM.SoundCategory se_live_option;
    public static PRISM.SoundCategory voice_live_option;
    public static PRISM.SoundCategory crowd_option;
    public static PRISM.SoundCategory ambi_option;
    public static PRISM.SoundCategory bgm_produce_prog;
    public static PRISM.SoundCategory bgm_mobile_prog;
    public static PRISM.SoundCategory master;
}

// Namespace: PRISM
public class PlayParameters
{
    private bool <Pause>k__BackingField;
    private float <Volume>k__BackingField;
    private int <StartTime>k__BackingField;
    private bool <IsLoop>k__BackingField;
    private int <FadeInTime>k__BackingField;
    private int <FadeOutTime>k__BackingField;
    public static PRISM.PlayParameters Default;
    public bool Pause { get; set; }
    public float Volume { get; set; }
    public int StartTime { get; set; }
    public bool IsLoop { get; set; }
    public int FadeInTime { get; set; }
    public int FadeOutTime { get; set; }
}

// Namespace: PRISM
public class SoundManager : UnityEngine.MonoBehaviour, System.IDisposable
{
    private static string SelfPath;
    public static string AcfPath;
    public static float DefaultRmsLevel;
    public static string DefaultDspBusSettingName;
    private CriWare.CriAtom _criAtom;
    private CriWare.CriAtomSource[] _atomSources;
    private CriWare.CriAtomExPlayback currentBgm;
    private System.Collections.Generic.Dictionary<PRISM.AudioType, PRISM.Selector> selectorsDic;
    private System.Collections.Generic.Dictionary<PRISM.SoundCategory, float> categoryVolumes;
    private CriWare.CriAtomExPlayer criAtomExPlayer;
    private CriWare.CriAtomExPlayer criAtomExPlayerFader;
    private System.Collections.Generic.Dictionary<PRISM.Definitions.SoundKey, PRISM.StackableDisposable> onceSeDic;
    private PRISM.Sound.BgmPlayer bgmPlayer;
    private static InitializeState initializeState;
    private System.Collections.Generic.List<PRISM.SelectorsInfo> <SelectorsInfos>k__BackingField;
    private static PRISM.SoundManager <Instance>k__BackingField;
    private System.Collections.Generic.Dictionary<string, PRISM.CriAtomCache> atomCache;
    public bool IsInitialized { get; set; }
    public System.Collections.Generic.List<PRISM.SelectorsInfo> SelectorsInfos { get; set; }
    public PRISM.SoundManager Instance { get; set; }
    public static Cysharp.Threading.Tasks.UniTask InitializeAsync();
    public CriWare.CriAtomExPlayback PlaySE(string cueSheet, string cueName, PRISM.PlayParameters playParameters);
    public CriWare.CriAtomExPlayback PlaySE(PRISM.Definitions.SoundKey key, PRISM.PlayParameters playParameters);
    public CriWare.CriAtomExPlayback PlayDecideSE(PRISM.PlayParameters playParameters);
    public CriWare.CriAtomExPlayback PlayCancelSE(PRISM.PlayParameters playParameters);
    public CriWare.CriAtomExPlayback PlayShoutSE(string cueSheet, string cueName, PRISM.PlayParameters playParameters);
    public System.IDisposable PlayLoopSEOnce(PRISM.Definitions.SoundKey key);
    public CriWare.CriAtomExPlayback PlayBgm(string cueSheet, string cueName, PRISM.PlayParameters playParameters);
    public CriWare.CriAtomExPlayback PlayOnlyBgm(string cueSheet, string cueName, PRISM.PlayParameters playParameters);
    public void IgnoreAutoReleaseBgmCueSheet(string cueSheet);
    public void ConformAutoReleaseBgmCueSheet(string cueSheet);
    public Cysharp.Threading.Tasks.UniTask<CriWare.CriAtomExPlayback> LoadAndPlayBgmAsync(string cueSheet, string cueName, PRISM.PlayParameters playParameters, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask<CriWare.CriAtomExPlayback> LoadAndPlayInterruptableAsync(string cueSheet, string cueName, PRISM.PlayParameters playParameters, System.Threading.CancellationToken cancellationToken);
    public string GetPlayingBgmCueSheet();
    public CriWare.CriAtomExPlayback StartBgm(int time, bool pause, int fadeInTime, int fadeOutTime, float volume);
    public CriWare.CriAtomExPlayback StartBgm(CriWare.CriAtomSource audioBgm, int time, bool pause, int fadeInTime, int fadeOutTime, float volume);
    public CriWare.CriAtomExPlayback PlayVoice(string cueSheet, string cueName, PRISM.PlayParameters playParameters);
    public CriWare.CriAtomExPlayback PlayFunction(string cueSheet, string cueName);
    public CriWare.CriAtomExPlayback Play(string sheetName, string cueName, PRISM.PlayParameters playParameters, CriWare.CriAtomExPlayer outsidePlayer, CriWare.CriAtomExPlayer outsidePlayerFader);
    public Cysharp.Threading.Tasks.UniTask<CriWare.CriAtomExPlayback> PlayFunctionAsync(string cueSheet, string cueName, CriWare.CriAtomExPlayback targetPlayback, System.Threading.CancellationToken ct);
    public void SetSelectorLabel(PRISM.AudioType audioType, string selector, string label);
    public PRISM.Selector GetSelectorLabel(PRISM.AudioType audioType);
    public void UnsetSelectorLabel(PRISM.AudioType audioType, string selector);
    public void PauseBGM(bool sw);
    public void PauseSE(bool sw);
    public void StopBGM();
    public void PauseShoutSE(bool sw);
    public void StopShoutSE();
    public bool IsPlayShoutSE();
    public bool IsPlayVoice();
    public void PauseAll();
    public void StopVoice();
    public void StopAll();
    public void ResumeAll();
    public bool IsPlayBGM();
    public bool IsPlaySE();
    public void SetCueSheet(PRISM.AudioType type, string cueSheet, string cueName);
    public float GetAtomSourceTime(PRISM.AudioType type);
    public float GetAtomSourceVolume(PRISM.AudioType type);
    public Status GetAtomSourceStatus(PRISM.AudioType type);
    public string GetCueSheet(PRISM.AudioType type);
    public string GetCueName(PRISM.AudioType type);
    public CriWare.CriAtomExPlayer GetAtomExPlayer(PRISM.AudioType type);
    public float GetCategoryVolume(PRISM.SoundCategory category);
    public static string GetCueSheetAddress(string cueSheetName);
    public Cysharp.Threading.Tasks.UniTask<string[]> LoadCueSheetsAsync(System.Collections.Generic.IEnumerable<string> sheetNames, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask LoadCueSheetAsync(string sheetName, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask<System.ValueTuple<bool, PRISM.CriAtomCache>> LoadAndGetCueSheetAsync(string sheetName, System.Threading.CancellationToken cancellationToken);
    private static string NormalizeCriFilePath(string path);
    public void UnLoadCueSheet(string sheetName);
    public void SetUnloadCueSheetOnNextPlayBgm(string sheetName);
    public void UnLoadFilterCueSheet(string[] sheetNames);
    public void UnLoadFilterCueSheetWithoutPlayingBgm(string[] sheetNames);
    public void Dispose();
    public void ReleaseAll();
    public void SetCategoryVolume(PRISM.SoundCategory category, float volume);
    public void SetBusVolume(string busName, float volume);
    public void GetBusVolume(string busName, float& volume);
    public void SetTemporaryCategoryVolume(PRISM.SoundCategory category, float volume);
    public void ResetTemporaryCategoryVolume(PRISM.SoundCategory category);
    private void OnApplicationQuit();
    public bool IsLoadedCueSheet(string sheetName);
    private PRISM.AudioType _getCurrentBgmAudioType(PRISM.PlayParameters playParameters);
    private void _unloadFilterCueSheet(System.Func<string, bool> filter);
    private Cysharp.Threading.Tasks.UniTask _setUpAsync();
    private CriWare.CriAtomExPlayback _play(CriWare.CriAtomSource audioSources, PRISM.PlayParameters playParameters);
    public bool IsValidCueSheet(string sheetName);
    public bool IsValidCueSheet(ulong sheetNameCrc);
    public CriWare.CriAtomExAcb GetUnsafeAcbHandle(string sheetName);
    private Cysharp.Threading.Tasks.UniTask _registerAcfAsync();

    private enum InitializeState : System.Enum
    {
        public int value__;
        public static InitializeState None;
        public static InitializeState Running;
        public static InitializeState Done;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<bool> <>9__20_0;
        private bool <InitializeAsync>b__20_0();
    }

    private class <>c__DisplayClass30_0
    {
        public CriWare.CriAtomExPlayback playback;
        public PRISM.SoundManager <>4__this;
        public PRISM.Definitions.SoundKey key;
        private void <PlayLoopSEOnce>b__0();
    }

    private class <>c__DisplayClass43_0
    {
        public CriWare.CriAtomExPlayback targetPlayback;
        private bool <PlayFunctionAsync>b__0();
    }

    private class <>c__DisplayClass69_0
    {
        public PRISM.SoundManager <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private bool <LoadCueSheetsAsync>b__0(string sheetName);
        private Cysharp.Threading.Tasks.UniTask<string> <LoadCueSheetsAsync>b__1(string sheetName);
    }

    private class <>c__DisplayClass69_1
    {
        public string sheetName;
        private string <LoadCueSheetsAsync>b__2();
    }

    private class <>c__DisplayClass76_0
    {
        public string[] sheetNames;
        private bool <UnLoadFilterCueSheet>b__0(string sheet);
    }

    private class <>c__DisplayClass77_0
    {
        public string[] sheetNames;
        public PRISM.SoundManager <>4__this;
        private bool <UnLoadFilterCueSheetWithoutPlayingBgm>b__0(string sheet);
    }

    private struct <InitializeAsync>d__20 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        private PRISM.ResourceManagement.IResourceLoader <resourceLoader>5__2;
        private Awaiter<UnityEngine.GameObject> <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <LoadAndGetCueSheetAsync>d__71 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.ValueTuple<bool, PRISM.CriAtomCache>> <>t__builder;
        public PRISM.SoundManager <>4__this;
        public string sheetName;
        public System.Threading.CancellationToken cancellationToken;
        private PRISM.CriAtomCache <atomAsset>5__2;
        private Awaiter<bool> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <LoadAndPlayBgmAsync>d__35 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<CriWare.CriAtomExPlayback> <>t__builder;
        public PRISM.SoundManager <>4__this;
        public string cueSheet;
        public System.Threading.CancellationToken cancellationToken;
        public string cueName;
        public PRISM.PlayParameters playParameters;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <PlayFunctionAsync>d__43 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<CriWare.CriAtomExPlayback> <>t__builder;
        public CriWare.CriAtomExPlayback targetPlayback;
        public System.Threading.CancellationToken ct;
        public PRISM.SoundManager <>4__this;
        public string cueSheet;
        public string cueName;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_registerAcfAsync>d__94 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.SoundManager <>4__this;
        private Awaiter<string> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_setUpAsync>d__89 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.SoundManager <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class SoundManagerExtensions
{
    public static Cysharp.Threading.Tasks.UniTask FadeOutBgmCategoryVolumeAsync(PRISM.SoundManager self, float bgmFadeRatio, float duration, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask FadeInBgmCategoryVolumeAsync(PRISM.SoundManager self, float bgmFadeRatio, float duration, System.Threading.CancellationToken ct);
    public static void SetSeCategoryVolume(PRISM.SoundManager self, float volume);

    private class <>c__DisplayClass0_0
    {
        public PRISM.SoundManager self;
        private void <FadeOutBgmCategoryVolumeAsync>b__0(float value);
    }

    private class <>c__DisplayClass1_0
    {
        public PRISM.SoundManager self;
        private void <FadeInBgmCategoryVolumeAsync>b__0(float value);
    }
}

// Namespace: PRISM
public class EpisodeZeroStoryExtensions
{
    public static EpisodeZero ToScenarioId(PRISM.Module.Networking.IEpisodeZeroStoryStatus storyStatus);
}

// Namespace: PRISM
public class StoryScenarioIdUtility
{
    public static PRISM.Scenario.ScenarioId CreateMainStoryScenarioId(int mainStoryId);
    public static PRISM.Scenario.ScenarioId CreateIdolStoryScenarioId(int idolStoryId);
    public static PRISM.Scenario.ScenarioId CreateEventStoryScenarioId(int eventStoryId);
    public static PRISM.Scenario.ScenarioId CreateExtraStoryScenarioId(int extraStoryId);
    public static PRISM.Scenario.ScenarioId CreatePIdolScenarioId(int eventId);
    public static PRISM.Scenario.ScenarioId CreateSCharaScenarioId(int eventId);
}

// Namespace: PRISM
public class StoryTextUtility
{
    public static string GetEpisodeText(int episodeNumber, StoryEpisodeType episodeType);
    public static string GetEpisodeText(int episodeNumber);
    public static StoryEpisodeType GetEpisodeType(int episodeNumber);
    public static string GetEpisodeText(System.ValueTuple<int, StoryEpisodeType> storyEpisode);
    public static string GetStoryTitleFromScenarioId(PRISM.Scenario.ScenarioId scenarioID);
    public static string GetStoryTitleFromStoryId(StoryType storyType, int storyId);
    public static string CreateUnlockConditionMessage(string[] unlockConditionMessages);
    public static string CreateCharacterScenarioUnlockConditionText(string characterName, string characterAlias, int level);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<string, bool> <>9__6_0;
        private bool <CreateUnlockConditionMessage>b__6_0(string x);
    }
}

// Namespace: PRISM
public class StreamingAvatarEyeTarget : UnityEngine.MonoBehaviour
{
    public UnityEngine.Vector3 GetStreamingCameraPosition();
    public UnityEngine.Vector3 GetStreamingPModeCameraPosition();
}

// Namespace: PRISM
public interface IOurStreamLiveViewingConnector
{
}

// Namespace: PRISM
public interface ITutorialBuilder
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.ITutorialSequenceContext> BuildAsync(PRISM.Module.Networking.ITutorialStatus status, System.Threading.CancellationToken cancellationToken);
}

// Namespace: PRISM
public interface ITutorialMovieConnector
{
}

// Namespace: PRISM
public interface ITutorialSequence
{
    public Cysharp.Threading.Tasks.UniTask ExecuteAsync(PRISM.ITutorialSequenceContext context);
}

// Namespace: PRISM
public interface ITutorialSequenceContext : System.IDisposable
{
    public PRISM.ITutorialView View { get; set; }
    public PRISM.Definitions.Logger.CategorizedLogger Logger { get; set; }
    public int CurrentPhase { get; set; }
    public int SelectedIdolId { get; set; }
    public bool IsSkipping { get; set; }
    public System.Threading.CancellationToken CancellationToken { get; set; }
    public Cysharp.Threading.Tasks.UniTask UpdatePhaseAsync(int phase, bool isSkip);
    public Cysharp.Threading.Tasks.UniTask<bool> ConfirmSkipAsync(string textCategory, bool isEnableOutOfRange, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask UpdateSelectedIdolSaveDataAsync();
}

// Namespace: PRISM
public enum AnnotationPosition : System.Enum
{
    public int value__;
    public static PRISM.AnnotationPosition Up;
    public static PRISM.AnnotationPosition RightUp;
    public static PRISM.AnnotationPosition Right;
    public static PRISM.AnnotationPosition RightDown;
    public static PRISM.AnnotationPosition Down;
    public static PRISM.AnnotationPosition LeftDown;
    public static PRISM.AnnotationPosition Left;
    public static PRISM.AnnotationPosition LeftUp;
}

// Namespace: PRISM
public enum ArrowPosition : System.Enum
{
    public int value__;
    public static PRISM.ArrowPosition Auto;
    public static PRISM.ArrowPosition TopRight;
    public static PRISM.ArrowPosition BottomLeft;
    public static PRISM.ArrowPosition Left;
    public static PRISM.ArrowPosition TopLeft;
    public static PRISM.ArrowPosition Top;
    public static PRISM.ArrowPosition BottomRight;
    public static PRISM.ArrowPosition Bottom;
    public static PRISM.ArrowPosition LeftBottom;
    public static PRISM.ArrowPosition RightTop;
    public static PRISM.ArrowPosition Right;
    public static PRISM.ArrowPosition RightBottom;
}

// Namespace: PRISM
public enum ArrowType : System.Enum
{
    public int value__;
    public static PRISM.ArrowType FingerArrow;
    public static PRISM.ArrowType SpeechBubble;
}

// Namespace: PRISM
public interface ITutorialView
{
    public UnityEngine.RectTransform Target { get; set; }
    public System.IObservable<UniRx.Unit> OnEndButtonClicked { get; set; }
    public System.IDisposable CreateFocusScope(UnityEngine.Sprite unmaskSprite, PRISM.ArrowPosition arrowPosition, PRISM.ArrowType arrowType, UnityEngine.Vector2 arrowOffsetPosition, PRISM.AnnotationPosition annotationPosition, string annotationMessage);
    public Cysharp.Threading.Tasks.UniTask ShowTextWindowAsync(string message, string cueName, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask WaitScreenTapAsync(System.Threading.CancellationToken cancellationToken);
    public void ShowTutorialEndTapButton();
    public void HideTutorialEndTapButton();
    public void Release();
}

// Namespace: PRISM
public class TutorialADVCallbackView : ENTERPRISE.ViewBase
{
    private PRISM.ITutorialSequence tutorialSequence;
    protected Cysharp.Threading.Tasks.UniTask _onBeginIdleAsync();
}

// Namespace: PRISM
public interface ITutorialIdolSelectConnector
{
}

// Namespace: PRISM
public interface ITutorialIntroductionConnector
{
}

// Namespace: PRISM
public class CmnTable : UnityEngine.MonoBehaviour
{
    private PRISM.CmnTableTr headTr;
    private PRISM.CmnTableTr rowTr;
    private UnityEngine.UI.LayoutElement headlayout;
    private UnityEngine.RectTransform rectTransform;
    private System.Collections.Generic.List<PRISM.CmnTableTr> cmnTableTrs;
    public void Initialize(int columnSize, int rowSize, float headHeight, float rowHeight);
    public void SetColumnWidthRatio(float[] widths);
    public void SetColumnWidthRatio(float totalWidth, float[] widths);
    public void SetIcoSizeForceForLeft(float width, float height);
    public void SetIcoSizeForceForCenter(float width, float height);
    public void SetAllRowTextAlignment(TMPro.TextAlignmentOptions textAlignmentOptions);
    public PRISM.CmnTableTr GetHeadTr();
    public PRISM.CmnTableTr GetRowTr(int index);
    public System.Collections.Generic.List<PRISM.CmnTableTr> GetRowAll();
    private void Start();
    private void <Start>b__14_0(long _);
}

// Namespace: PRISM
public class CmnTableTd : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject goArea1;
    private UnityEngine.GameObject goArea2;
    private ENTERPRISE.UI.UITextMeshProUGUI txt;
    private PRISM.UI.PFIdolIconView pFIdolIconView;
    private PRISM.UI.SCharaIconView sCharaIconView;
    private ENTERPRISE.OutGame.RewardItem productItem;
    private UnityEngine.UI.RawImage rawImage;
    private UnityEngine.UI.Image image;
    private UnityEngine.RectTransform paddingArea1;
    private UnityEngine.RectTransform paddingArea2;
    private UnityEngine.UI.LayoutElement selfElement;
    private bool <IsEnable>k__BackingField;
    private System.Collections.Generic.List<ENTERPRISE.UI.UITextMeshProUGUI> uITextMeshProUGUIs;
    private int <Index>k__BackingField;
    public bool IsEnable { get; set; }
    public int Index { get; set; }
    public void AddText(string msg, System.Nullable<TMPro.TextAlignmentOptions> textAlignmentOptions);
    public void SetTextAreaPadding(float top, float bottom, float left, float right);
    public void SetIcoAreaPadding(float top, float bottom, float left, float right);
    public void SetColumnSize(float width);
    public void SetIndex(int index);
    public PRISM.UI.PFIdolIconView GetPFIdol();
    public PRISM.UI.SCharaIconView GetSChara();
    public ENTERPRISE.OutGame.RewardItem GetItem();
    public UnityEngine.UI.RawImage GetRawImage();
    public UnityEngine.UI.Image GetImage();
    public void SetTextAlignment(TMPro.TextAlignmentOptions textAlignmentOptions);
    public void SetIcoSizeForceForLeft(float width, float height);
    public void SetIcoSizeForceForCenter(float width, float height);
}

// Namespace: PRISM
public class CmnTableTr : UnityEngine.MonoBehaviour
{
    private PRISM.CmnTableTd[] cmnTableTds;
    private UnityEngine.GameObject goLastLine;
    private UnityEngine.GameObject goWhite;
    private UnityEngine.GameObject goBlue;
    private UnityEngine.RectTransform rectTransform;
    private int <Index>k__BackingField;
    private System.Collections.Generic.List<PRISM.CmnTableTd> tds;
    public int Index { get; set; }
    public System.Collections.Generic.List<PRISM.CmnTableTd> Tds { get; set; }
    public void SetIndex(int index);
    public void SetColumnCount(int count);
    public void SetHeight(float height);
    public void SetColumnSize(System.Collections.Generic.List<float> widths);
    public void ResetTdIndex();
    public void SetTdsTextAlignment(TMPro.TextAlignmentOptions textAlignmentOptions);
    public void SetIcoSizeForceForLeft(float width, float height);
    public void SetIcoSizeForceForCenter(float width, float height);
    public void SetTexts(string[] strs);
    private void OnEnable();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.CmnTableTd, bool> <>9__16_0;
        private bool <ResetTdIndex>b__16_0(PRISM.CmnTableTd x);
    }
}

// Namespace: PRISM
public class CommonInputFieldTMP : TMPro.TMP_InputField
{
    private UnityEngine.GameObject placeHolderObject;
    private UnityEngine.UI.ColorBlock savedColors;
    private UniRx.Subject<string> onValueChangedSubject;
    private UniRx.Subject<string> onEndEditSubject;
    private string emptyString;
    public System.IObservable<string> OnValueChanged { get; set; }
    public System.IObservable<string> OnEndEdit { get; set; }
    public void SwitchInputable(bool enabled);
    protected void Awake();
    private void _setTextEmptyIfNeeded(string text);
    protected void _updatePlaceHolder(bool isEmpty);
    private void <Awake>b__5_0(string text);
    private void <Awake>b__5_1(string text);
}

// Namespace: PRISM
public class ErrorModalWindow : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject root;
    private UnityEngine.UI.Button outsideButton;
    private UnityEngine.RectTransform messageBody;
    private ENTERPRISE.UI.UITextMeshProUGUI messageText;
    private UnityEngine.RectTransform messageBackground;
    private float timeToDisappear;
    private UnityEngine.Vector2 messageBodyExpandedSize;
    private UnityEngine.Vector2 messageBodyShrunkSize;
    private PRISM.AutoCancellationTokenSource showCanceller;
    private PRISM.AutoCancellationTokenSource hideCanceller;
    private bool isInitialized;
    public Cysharp.Threading.Tasks.UniTask ShowAsync(PRISM.Definitions.LocalizationKey message);
    public Cysharp.Threading.Tasks.UniTask ShowAsync(string message);
    public Cysharp.Threading.Tasks.UniTask ShowAsync(string message, float displayTime);
    private Cysharp.Threading.Tasks.UniTask _hideAsync();
    private void Start();
    private void _initialize();
    private void <_initialize>b__16_0();

    private struct <ShowAsync>d__13 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.ErrorModalWindow <>4__this;
        public string message;
        public float displayTime;
        private System.Threading.CancellationToken <cancellationToken>5__2;
        private Awaiter <>u__1;
        private Awaiter<bool> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_hideAsync>d__14 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.ErrorModalWindow <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class RawImage4Normals : UnityEngine.UI.RawImage
{
    private UnityEngine.Vector3 leftTopNormal;
    private UnityEngine.Vector3 rightTopNormal;
    private UnityEngine.Vector3 leftBottomNormal;
    private UnityEngine.Vector3 rightBottomNormal;
    public UnityEngine.Vector3 LeftTopNormal { get; set; }
    public UnityEngine.Vector3 RightTopNormal { get; set; }
    public UnityEngine.Vector3 LeftBottomNormal { get; set; }
    public UnityEngine.Vector3 RightBottomNormal { get; set; }
    protected void OnPopulateMesh(UnityEngine.UI.VertexHelper vh);
    private void SetVertexNormal(UnityEngine.UI.VertexHelper vh, UnityEngine.Vector3 normal, int index);
}

// Namespace: PRISM
public class UIAnimation : UnityEngine.MonoBehaviour
{
    public float Duration { get; set; }
    public Cysharp.Threading.Tasks.UniTask PlayAsync(float delay, System.Threading.CancellationToken ct);
    public void Skip();
}

// Namespace: PRISM
public class UIGradient : UnityEngine.UI.BaseMeshEffect
{
    private UnityEngine.Gradient gradient;
    protected Axis axis;
    private bool useOriginalAlpha;
    protected System.Collections.Generic.List<UnityEngine.UIVertex> vertexList;
    protected UnityEngine.Vector2 minMax;
    protected int axisIndex;
    public UnityEngine.Gradient Gradient { get; set; }
    public UnityEngine.UI.Graphic Graphic { get; set; }
    public void ModifyMesh(UnityEngine.UI.VertexHelper helper);
    protected void _createGradientMesh();
    protected void _setVertexColor();
    private void _divideCheck(float key);
    private void _divide(int startIndex, float targetValue);
    private UnityEngine.UIVertex _getVertex(int index);

    public enum Axis : System.Enum
    {
        public int value__;
        public static Axis Horizontal;
        public static Axis Vertical;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.UIVertex, int, float> <>9__12_0;
        public static System.Func<UnityEngine.UIVertex, int, float> <>9__12_1;
        private float <_createGradientMesh>b__12_0(UnityEngine.UIVertex v, int index);
        private float <_createGradientMesh>b__12_1(UnityEngine.UIVertex v, int index);
    }
}

// Namespace: PRISM
public class UIGrayOutController : UnityEngine.MonoBehaviour
{
    public UnityEngine.Color grayOutColor;
    private System.Collections.Generic.Dictionary<UnityEngine.CanvasRenderer, UnityEngine.Color> originalCanvasRendererColors;
    private System.Collections.Generic.Dictionary<ENTERPRISE.UI.ColorToUVChannelForTextMeshProUGUI, UnityEngine.Color> originalUVChannelColors;
    private bool isGrayOut;
    public bool IsGrayOut { get; set; }
    private void _grayOut();
    private void _restoreOriginalColors();
    private void _saveOriginalColors();
    private void _modifyOriginalColors<TState>(TState state, System.Func<UnityEngine.Color, TState, UnityEngine.Color> colorModifier);
    private void _clearSavedOriginalColors();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.Color, PRISM.UIGrayOutController, UnityEngine.Color> <>9__7_0;
        public static System.Func<UnityEngine.Color, PRISM.UIGrayOutController, UnityEngine.Color> <>9__8_0;
        private UnityEngine.Color <_grayOut>b__7_0(UnityEngine.Color color, PRISM.UIGrayOutController state);
        private UnityEngine.Color <_restoreOriginalColors>b__8_0(UnityEngine.Color color, PRISM.UIGrayOutController _);
    }
}

// Namespace: PRISM
public class VoDaViMeLabel : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.Image imgBase;
    private ENTERPRISE.UI.UITextMeshProUGUI txtSkillType;
    public void Set(System.Collections.Generic.IEnumerable<ProduceParameterType> typeList, bool shorten);
    public void Set(ProduceParameterType type, bool shorten);
    private void _setBlank();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<ProduceParameterType, bool> <>9__2_0;
        private bool <Set>b__2_0(ProduceParameterType x);
    }
}

// Namespace: PRISM
public class VoDaViMeMultiView : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject attributeUIParent;
    private UnityEngine.GameObject[] attributeUIs;
    public void Set(System.Collections.Generic.IReadOnlyList<ProduceParameterType> parameterTypes);
    public void Set(PRISM.Domain.BitProduceParameterType parameterTypes);
    private AttributeIconType _convertAttributeIconType(PRISM.Domain.BitProduceParameterType parameterTypes);

    private enum AttributeIconType : System.Enum
    {
        public int value__;
        public static AttributeIconType Vocal;
        public static AttributeIconType Dance;
        public static AttributeIconType Visual;
        public static AttributeIconType Mental;
        public static AttributeIconType Vocal_Dance;
        public static AttributeIconType Dance_Visual;
        public static AttributeIconType Vocal_Visual;
        public static AttributeIconType All;
        public static AttributeIconType None;
    }
}

// Namespace: PRISM
public class ApplicationUtility
{
    private static System.Action onSoftwareReset;
    private static bool <IsResetting>k__BackingField;
    public bool IsResetting { get; set; }
    public System.Threading.CancellationToken SoftwareResetToken { get; set; }
    public static void Quit();
    public static Cysharp.Threading.Tasks.UniTask SoftwareResetAndStopAsync();
    public static void SetSoftwareResetCallback(System.Action resetFunc);

    private struct <SoftwareResetAndStopAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        private System.IDisposable <>7__wrap1;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM
public class FrameRateUtility
{
    public static int GetFrameRateByPowerSaving(PowerSaving powerSaving);
    public static int GetFrameRateBySystemSettings();
    public static float FrameToTime(float frame);
    public static float FrameToTime(float frame, int targetFrameRate);
    public static int TimeToFrame(float time);
    public static int TimeToFrame(float time, int targetFrameRate);
    public static float TimeToFrameFloat(float time);
    public static float TimeToFrameFloat(float time, int targetFrameRate);
}

// Namespace: PRISM
public class NumberUtility
{
    public static int GetDigits(int number);
    public static double LerpDouble(double a, double b, float t);
    public static long LerpLong(long a, long b, float t);
    public static string ToDividedBy10String(int num, int divideCount);
}

// Namespace: PRISM
public class SoundUtility
{
    public static string GetCharacterVoiceCueNamePostfix(int characterId);
    public static string GetVoiceCueSheetName(ScenarioType scenarioType, int charaId, string suffix);
    public static string GetMessageVoiceCueName(ScenarioType scenarioType, int messageId, int charaId);
    public static string GetVoiceCueName(ScenarioType scenarioType, int charaId, int kindId, int typeId);
    public static System.ValueTuple<string, int, bool, string> GetTargetPlayScheduleBgmData(PRISM.Module.Networking.IProduceBaseInfoStatus produceBaseInfo);
    public static string GetProduceTopBGMCueName(int chapter, int season);
}

// Namespace: PRISM
public class UniTaskUtility
{
    public static Cysharp.Threading.Tasks.UniTask DelayAnimationFrame(int frameCount, System.Threading.CancellationToken cancellationToken);
    public static Cysharp.Threading.Tasks.UniTask Do01Async(float duration, System.Action<float> callback, bool ignoreTimeScale, System.Threading.CancellationToken cancellationToken);

    private struct <Do01Async>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public float duration;
        public System.Action<float> callback;
        public System.Threading.CancellationToken cancellationToken;
        public bool ignoreTimeScale;
        private float <time>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Interactions
public class CharacterBaseIconView : UnityEngine.MonoBehaviour
{
    private PRISM.Interactions.IconFrameType frameType;
    private UnityEngine.UI.RawImage characterImage;
    private UnityEngine.UI.Image[] characterColorImages;
    private TMPro.TextMeshProUGUI nameText;
    public Cysharp.Threading.Tasks.UniTask SetupAsync(PRISM.ResourceManagement.IResourceLoader resourceLoader, int id, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Interactions
public class GridViewContext : FancyScrollView.FancyGridViewContext, System.IDisposable
{
    private PRISM.ResourceManagement.IResourceLoader <ResourceLoader>k__BackingField;
    public PRISM.ResourceManagement.IResourceLoader ResourceLoader { get; set; }
    public void Dispose();
}

// Namespace: PRISM.Interactions
public class GridViewContextWithClick`1<T> : PRISM.Interactions.GridViewContext
{
    public UniRx.Subject<T> OnClick;
    public void Dispose();
}

// Namespace: PRISM.Interactions
public class ProduceIdolIconView : UnityEngine.MonoBehaviour
{
    private PRISM.Interactions.IconFrameType frameType;
    private PRISM.Legacy.ParamRememberableAnimator frameEffectAnimator;
    private UnityEngine.GameObject[] frameEffectParents;
    private UnityEngine.UI.RawImage idolImage;
    private UnityEngine.UI.RawImage unitIconImage;
    private UnityEngine.UI.Image frameBaseImage;
    private UnityEngine.UI.Image frameLineImage;
    private PRISM.AttributeIconViewForLegacy attributeIconView;
    public Cysharp.Threading.Tasks.UniTask SetupAsync(PRISM.ResourceManagement.IResourceLoader resourceLoader, PRISM.Module.Networking.IProduceIdolStatus status, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask SetupAsync(PRISM.ResourceManagement.IResourceLoader resourceLoader, int id, System.Nullable<int> currentStarLevel, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Interactions
public enum IconFrameType : System.Enum
{
    public int value__;
    public static PRISM.Interactions.IconFrameType Square;
    public static PRISM.Interactions.IconFrameType Rect;
}

// Namespace: PRISM.Interactions
public class ResourceLoaderExtensions
{
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadCharacterBaseIconAsync(PRISM.ResourceManagement.IResourceLoader loader, PRISM.Interactions.IconFrameType frameType, int characterId, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadItemIconAsync(PRISM.ResourceManagement.IResourceLoader loader, PRISM.Domain.ProductKey key, bool withFrame, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.GameObject> LoadProduceUnitMemberPrefabAsync(PRISM.ResourceManagement.IResourceLoader loader, int mstProduceIdolId, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadPIIconAsync(PRISM.ResourceManagement.IResourceLoader loader, PRISM.Interactions.IconFrameType frameType, int produceIdolId, System.Threading.CancellationToken ct);
    public static string GetPIIconKey(PRISM.Interactions.IconFrameType frameType, int produceIdolId);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Sprite> LoadPFIdolIconFrameBaseAsync(PRISM.ResourceManagement.IResourceLoader loader, PRISM.Interactions.IconFrameType frameType, int starLv, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Sprite> LoadPFIdolIconFrameLineAsync(PRISM.ResourceManagement.IResourceLoader loader, PRISM.Interactions.IconFrameType frameType, int starLv, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadIdolSkillIconAsync(PRISM.ResourceManagement.IResourceLoader loader, int iconId, System.Threading.CancellationToken ct);
    public static string GetIdolSkillIconKey(int iconId);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadSCIconAsync(PRISM.ResourceManagement.IResourceLoader loader, PRISM.Interactions.IconFrameType frameType, int supportCharacterId, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadSCIconFrameAsync(PRISM.ResourceManagement.IResourceLoader loader, PRISM.Interactions.IconFrameType frameType, int rarity, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Sprite> LoadSDCharaIconBaseAsync(PRISM.ResourceManagement.IResourceLoader loader, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadFavoriteMarkAsync(PRISM.ResourceManagement.IResourceLoader loader, int mstFavoriteMarkId, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadParameterRankAsync(PRISM.ResourceManagement.IResourceLoader loader, ProduceParameterRank rank, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadFesUnitRankAsync(PRISM.ResourceManagement.IResourceLoader loader, ProduceParameterRank rank, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadFesUnitRankSmallAsync(PRISM.ResourceManagement.IResourceLoader loader, ProduceParameterRank rank, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Sprite> LoadFesUnitRankFrameAsync(PRISM.ResourceManagement.IResourceLoader loader, ProduceParameterRank rank, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadUnitIconAsync(PRISM.ResourceManagement.IResourceLoader loader, int unitId, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadUnitIcon2Async(PRISM.ResourceManagement.IResourceLoader loader, int unitId, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadSupportSkillIconAsync(PRISM.ResourceManagement.IResourceLoader loader, int supportSkillId, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadFesIdolRankAsync(PRISM.ResourceManagement.IResourceLoader loader, ProduceParameterRank rank, bool isSmall, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Sprite> LoadProduceStrategyIconAsync(PRISM.ResourceManagement.IResourceLoader loader, int mstProduceStrategyId, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadPIdolPieceIconBaseAsync(PRISM.ResourceManagement.IResourceLoader loader, int rank, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadPIdolPieceIconNoFrameAsync(PRISM.ResourceManagement.IResourceLoader loader, int productMstId, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadPIdolPieceIconFrameAsync(PRISM.ResourceManagement.IResourceLoader loader, int rank, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadSCharaPieceIconBaseAsync(PRISM.ResourceManagement.IResourceLoader loader, int rank, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadSCharaPieceIconNoFrameAsync(PRISM.ResourceManagement.IResourceLoader loader, int productMstId, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadSCharaPieceIconFrameAsync(PRISM.ResourceManagement.IResourceLoader loader, int rank, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<TMPro.TMP_ColorGradient> LoadAwakeningLv(PRISM.ResourceManagement.IResourceLoader loader, int awakeningLv, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Interactions
public struct ScreenWrapper : System.ValueType, System.IEquatable<PRISM.Interactions.ScreenWrapper>
{
    private UnityEngine.Rect <SafeArea>k__BackingField;
    private int <Width>k__BackingField;
    private int <Height>k__BackingField;
    public UnityEngine.Rect SafeArea { get; set; }
    public int Width { get; set; }
    public int Height { get; set; }
    public string ToString();
    private bool PrintMembers(System.Text.StringBuilder builder);
    public static bool op_Inequality(PRISM.Interactions.ScreenWrapper left, PRISM.Interactions.ScreenWrapper right);
    public static bool op_Equality(PRISM.Interactions.ScreenWrapper left, PRISM.Interactions.ScreenWrapper right);
    public int GetHashCode();
    public bool Equals(object obj);
    public bool Equals(PRISM.Interactions.ScreenWrapper other);
    public void Deconstruct(UnityEngine.Rect& SafeArea, int& Width, int& Height);
}

// Namespace: PRISM.Interactions
public class SupportCharacterIconView : UnityEngine.MonoBehaviour
{
    private PRISM.Interactions.IconFrameType frameType;
    private UnityEngine.UI.RawImage charaImage;
    private UnityEngine.UI.RawImage frameImage;
    private PRISM.Legacy.ParamRememberableAnimator rarityEffect;
    public Cysharp.Threading.Tasks.UniTask SetupAsync(PRISM.ResourceManagement.IResourceLoader resourceLoader, int id, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.DesignPattern
public class SingletonBehaviour`1<T> : UnityEngine.MonoBehaviour
{
    protected static T instance;
    public T Instance { get; set; }
    public bool IsValid { get; set; }
    public static void CreateInstance(UnityEngine.Transform parentTransform);
    public static void DestroyInstance();
    protected void Awake();
}

// Namespace: PRISM.Utilities
public class LocalizeTextUtility
{
    public static string ParamVo();
    public static string ParamDa();
    public static string ParamVi();
    public static string ParamMe();
    public static string ParamVocal();
    public static string ParamDance();
    public static string ParamVisual();
    public static string ParamMental();
    public static string UnitName(int unitId);
    public static string CharaName(int charaId);
    public static string CharaLastName(int charaId);
    public static string CharaFirstName(int charaId);
    public static string CharaCV(int charaId);
    public static string PIAlias(int mstProduceIdolId);
    public static string SCAlias(int mstSupportCharaId);
    public static string AwakeningLv(int lv);
    public static string Lv(int lv);
    public static string IdolSkillName(int mstIdolSkillId);
    public static string IdolSkillDetail(System.Collections.Generic.IEnumerable<System.ValueTuple<int, System.Collections.Generic.IReadOnlyList<int>>> actionEffectList, System.ValueTuple<int, int> condition, bool isShowAppealValue, UnityEngine.Color color);
    public static string IdolSkillDetailCompare(System.Collections.Generic.IReadOnlyList<System.ValueTuple<int, System.Collections.Generic.IReadOnlyList<int>>> effectList, int conditionTypeId, int conditionValue, System.Collections.Generic.IReadOnlyList<System.ValueTuple<int, System.Collections.Generic.IReadOnlyList<int>>> compareEffectList);
    public static string TrainerSkillName(int mstTrainerSkillId);
    public static string LiveSkillName(int mstLiveSkillID);
    public static string LiveSkillDetail(int mstLiveSkillLevelId);
    public static string SupportEffectName(int mstSupportEffectId);
    public static string SupportEffectDescription(int mstSupportEffectId);
    public static string SupportSkillName(int supportSkillId);
    public static string SupportSkillDescription(int supportSkillId);
    public static string ProduceCardName(int mstCardId);
    public static string ProduceKeywordName(int linkId);
    public static string ProduceKeywordDescription(int linkId);
    public static string Counter(int possess, int total);
    public static System.ValueTuple<string, string> GetProductName(PRISM.Domain.ProductKey product);
    public static string ItemProviderScreenTitle(int itemProviderId);
    public static string ItemProviderScreenTab(int itemProviderId);
    public static string VoiceResourceText(int voiceResourceId);
    public static string GoodScheduleName(int scheduleType);
    public static string SupportEffectTypeName(int index);
    public static string SupportEffectScheduleName(int index);
    public static string ProduceIdolRarityString(int rarity);
    public static string SupportCharaRarityString(int rarity);
    public static string ItemRarityString(int rarity);
    public static string LiveSupportEffectConditionName(int conditionType);
    public static string LiveCenterEffectName(int effectType);
    public static string LiveCenterEffectConditionName(int conditionType);
}

// Namespace: PRISM.Utilities
public class OrientationCheckUtility
{
    public static void RotateToLandscape();
}

// Namespace: PRISM.Utilities
public class PRISMColorizeUtility
{
    public static UnityEngine.Color Vocal;
    public static UnityEngine.Color Dance;
    public static UnityEngine.Color Visual;
    public static UnityEngine.Color Mental;
    public static UnityEngine.Color OutlineBlack;
    public static UnityEngine.Color DisableWhite;
    public static UnityEngine.Color ButtonGreen;
    public static UnityEngine.Color BackgroundGreen;
    public static UnityEngine.Color DisableLabel;
    public static UnityEngine.Color White;
    public static UnityEngine.Color Black;
    public static UnityEngine.Color UnitBlue;
    public static UnityEngine.Color WarningRed;
    public static UnityEngine.Color Inactive;
    public static UnityEngine.Color Inactive2;
    public static UnityEngine.Color Hint;
    public static UnityEngine.Color OverFlow;
    public static UnityEngine.Color OverFlow2;
    public static UnityEngine.Color LinkPinc;
    public static UnityEngine.Color LightBlue;
    public static UnityEngine.Color LightRed;
    public static UnityEngine.Color GetUnitColor(int unitId);
    public static string GetCharacterColorCode(int charaId);
    public static UnityEngine.Color GetCharacterColor(int charaId);
    public static UnityEngine.Color GetProduceDifficultyColor(ProduceDifficultyType difficultyType);
    public static void Initialize();
}

// Namespace: PRISM.StreamingNetwork
public interface IPrismStreamingCallbacks
{
    public void OnLeftRoom();
    public void OnCreateRoomFailed();
    public void OnJoinRoomFailed();
    public void OnCreatedRoom();
    public void OnDisconnected();
    public void OnJoinedRoom();
    public void OnJoinArchive();
    public void OnArchiveFinished();
    public void OnJoinArchiveFailed();
}

// Namespace: PRISM.StreamingNetwork
public interface IPrismStreamingCurrentTime
{
    public float CurrentTime();
}

// Namespace: PRISM.StreamingNetwork
public interface IPrismStreamingObservable
{
    public bool IsViewPaused { get; set; }
    public string ViewPrefabPath();
    public void OnPrismStreamSerializeView(bool isWriting, PRISM.StreamingNetwork.PrismStream stream);
    public void ClearReceivedQueueData();
}

// Namespace: PRISM.StreamingNetwork
public class PrismStream : System.IDisposable
{
    private System.Collections.Concurrent.ConcurrentQueue<System.Collections.Generic.Queue<System.ArraySegment<byte>>> receivedData;
    private ReadData readData;
    public int ReceivedDataCount { get; set; }
    public void InitReading(System.ArraySegment<byte> data);
    public void ClearReadData();
    public string GetReadingGUID();
    public string GetReadingPrismViewPath();
    public UnityEngine.Vector2 ReceiveVector2();
    public UnityEngine.Vector3 ReceiveVector3();
    public UnityEngine.Quaternion ReceiveQuaternion();
    public bool ReceiveBool();
    public byte ReceiveByte();
    public int ReceiveInt();
    public float ReceiveFloat();
    public long ReceiveLong();
    public string ReceiveString();
    public System.ArraySegment<byte> ReceiveByteArray();
    public int[] ReceiveIntArray();
    public float[] ReceiveFloatArray();
    public string[] ReceiveStringArray();
    public UnityEngine.Color ReceiveColor();
    public bool IsEndStreamBlock(System.ArraySegment<byte> data);
    public void AddReceivedData(System.Collections.Generic.Queue<System.ArraySegment<byte>> data);
    public System.Collections.Generic.Queue<System.ArraySegment<byte>> GetReceivedData();
    public void Dispose();

    public enum DataType : System.Enum
    {
        public byte value__;
        public static DataType Vector3;
        public static DataType ByteArray;
        public static DataType IntArray;
        public static DataType FloatArray;
        public static DataType Bool;
        public static DataType Byte;
        public static DataType Int;
        public static DataType Float;
        public static DataType Long;
        public static DataType String;
        public static DataType Null;
        public static DataType Quaternion;
        public static DataType StringArray;
        public static DataType Vector2;
        public static DataType Color;
        public static DataType End;
    }

    private class ReadData
    {
        private static int GuidSize;
        private System.ArraySegment<byte> readData;
        private int readDataIndex;
        public bool CanNotRead { get; set; }
        public void SetReadData(System.ArraySegment<byte> readData);
        public void ClearReadData();
        public DataType GetNextDataType();
        public bool GetNextBool();
        public byte GetNextByte();
        public int GetNextInt();
        public uint GetNextUInt();
        public float GetNextFloat();
        public long GetNextLong();
        public string GetNextString();
        public string[] GetNextStringArray();
        public string GetGUID();
        public string GetPrefabPath();
        public UnityEngine.Vector2 GetNextVector2();
        public UnityEngine.Vector3 GetNextVector3();
        public UnityEngine.Quaternion GetNextQuaternion();
        public System.ArraySegment<byte> GetNextByteArray();
        public int[] GetNextIntArray();
        public float[] GetNextFloatArray();
        public UnityEngine.Color GetNextColor();
        private System.ReadOnlySpan<byte> _readDataGetBytes(uint count);
    }
}

// Namespace: PRISM.StreamingNetwork
public class PrismStreaming : UnityEngine.MonoBehaviour
{
    protected static int streamTimeout;
    private ClientType clientType;
    private System.Collections.Generic.List<PRISM.StreamingNetwork.PrismView> generatedPrismViews;
    private bool isConnecting;
    protected UniRx.Subject<bool> reconnectingSubject;
    protected PRISM.StreamingNetwork.PrismStream prismStream;
    private PRISM.ResourceManagement.IResourceLoader resourceLoader;
    private bool <IsLoadReceiveDataCompleted>k__BackingField;
    public ClientType StreamingClientType { get; set; }
    public System.Collections.Generic.List<PRISM.StreamingNetwork.PrismView>& GeneratedPrismViews { get; set; }
    public bool IsConnecting { get; set; }
    public bool IsLoadReceiveDataCompleted { get; set; }
    public System.IObservable<bool> OnReconnecting { get; set; }
    protected void _onUpdate();
    public void Init(ClientType clientType);
    public void AddMinePrismView(PRISM.StreamingNetwork.PrismView prismView);
    public void OnLoadAsset(UnityEngine.GameObject gameObject, System.Collections.Generic.Dictionary<string, object> extra);
    public void Instantiate(string viewPath, string guid);
    public void DeleteGeneratedPrismViews(PRISM.StreamingNetwork.PrismView prismView);
    public Cysharp.Threading.Tasks.UniTask<T> LoadAsync<T>(string key);
    public void OnApplicationSuspend();
    public void OnApplicationResume();
    public void OnReceiveViewingFinished();
    public Cysharp.Threading.Tasks.UniTask TerminateAsync();
    public T GetGeneratedPrismView<T>();
    protected void _deleteGeneratedPrismViews(string guid);
    protected void _removeGeneratedPrismViewGuids(System.Collections.Generic.HashSet<string> guids, bool removeSame);
    protected void _setPauseGeneratedPrismView(bool isPause);
    protected void _clearReceivedQueueData();
    private void Update();
    protected string _read(System.ArraySegment<byte> data);
    protected void _dispose();

    public enum ClientType : System.Enum
    {
        public int value__;
        public static ClientType None;
        public static ClientType Operator;
        public static ClientType ConnectToOperator;
        public static ClientType User;
    }
}

// Namespace: PRISM.StreamingNetwork
public class PrismStreamingCDN : PRISM.StreamingNetwork.PrismStreaming
{
    private static int MaxReadCount;
    private static int WaitDelayTime;
    private string indexUrl;
    private bool isLive;
    private Google.Protobuf.Collections.RepeatedField<Google.Protobuf.ByteString> chunk;
    private System.Collections.Generic.Queue<System.ArraySegment<byte>> dataQueue;
    private System.Collections.Generic.HashSet<string> readedObjectGuids;
    private System.Threading.CancellationTokenSource cts;
    private System.Collections.Generic.List<string> readUrlList;
    private int currentReadIndex;
    private bool isError;
    private bool isPaused;
    private bool isChangeTime;
    private bool useThreadPool;
    private bool isDisposed;
    private bool isSetReconnectingEvent;
    private System.Nullable<System.DateTime> beginDate;
    private PRISM.StreamingViewer.SoundView soundView;
    private System.Net.WebClient webClient;
    public int MaxTime { get; set; }
    public float CurrentTime { get; set; }
    public bool IsPaused { get; set; }
    public bool IsLive { get; set; }
    public PRISM.StreamingViewer.SoundView SoundView { get; set; }
    public bool IsLoadReceiveDataCompleted { get; set; }
    public void Connect(string url, bool isLive, System.Nullable<System.DateTime> beginDate);
    public Cysharp.Threading.Tasks.UniTask OnErrorAsync();
    public void Reconnect();
    public void Pause();
    public void Resume();
    public void SetSeekToTime(double time);
    public void OnApplicationSuspend();
    public void OnApplicationResume();
    public void OnReceiveViewingFinished();
    public Cysharp.Threading.Tasks.UniTask TerminateAsync();
    private Cysharp.Threading.Tasks.UniTask _receiveAsync(string indexUrl);
    private void _readChunkUrlList(System.IO.StreamReader indexDataReader);
    private Cysharp.Threading.Tasks.UniTask _loadEntriesAsync(System.Net.WebClient chunkClient, string chunkUrl);
    private Cysharp.Threading.Tasks.UniTask _resumeAsync();
    private void _updateNowTime();
    private void _setReconnectingEvent();
    protected void _onUpdate();
    protected void _dispose();
    private bool <OnErrorAsync>b__32_0();
    private bool <TerminateAsync>b__40_0();
    private bool <_receiveAsync>b__41_0();
    private bool <_resumeAsync>b__44_0();
    private void <_setReconnectingEvent>b__46_1(bool isStarted);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.StreamingViewer.SoundView, bool> <>9__46_0;
        private bool <_setReconnectingEvent>b__46_0(PRISM.StreamingViewer.SoundView view);
    }

    private struct <OnErrorAsync>d__32 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.StreamingNetwork.PrismStreamingCDN <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <TerminateAsync>d__40 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.StreamingNetwork.PrismStreamingCDN <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_loadEntriesAsync>d__43 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.StreamingNetwork.PrismStreamingCDN <>4__this;
        public System.Net.WebClient chunkClient;
        public string chunkUrl;
        private object <>7__wrap1;
        private int <>7__wrap2;
        private Awaiter <>u__1;
        private System.Runtime.CompilerServices.TaskAwaiter<System.IO.Stream> <>u__2;
        private Awaiter <>u__3;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_receiveAsync>d__41 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.StreamingNetwork.PrismStreamingCDN <>4__this;
        public string indexUrl;
        private System.IO.Stream <indexData>5__2;
        private System.IO.StreamReader <indexDataReader>5__3;
        private System.Runtime.CompilerServices.TaskAwaiter<System.IO.Stream> <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_resumeAsync>d__44 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.StreamingNetwork.PrismStreamingCDN <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.StreamingNetwork
public class PrismStreamingCompression
{
    public static System.ReadOnlySpan<byte> Compress(System.ReadOnlySpan<byte> bytes);
    public static byte[] Decompress(System.ReadOnlyMemory<byte> bytes);
}

// Namespace: PRISM.StreamingNetwork
public class PrismStreamingGrpc : PRISM.StreamingNetwork.PrismStreaming
{
    protected static int ChannelPort;
    protected static int endBlock;
    protected string currentRoomName;
    protected Grpc.Core.Channel channel;
    public void OnReceiveViewingFinished();
    public Cysharp.Threading.Tasks.UniTask TerminateAsync();
    protected void _onUpdate();
    protected void _dispose();
}

// Namespace: PRISM.StreamingNetwork
public class PrismStreamingGrpcClient : PRISM.StreamingNetwork.PrismStreamingGrpc
{
    private static string ChannelOutgestHost;
    private int readedSequenceNumber;
    private OutgestServiceClient outgestServiceClient;
    private Grpc.Core.AsyncServerStreamingCall<Prism.Container> asyncServerStreamingCall;
    private System.Collections.Generic.Queue<System.ArraySegment<byte>> dataQueue;
    private System.Collections.Generic.HashSet<string> readedObjectGuids;
    private System.Nullable<System.DateTime> beginDate;
    private PRISM.StreamingViewer.SoundView soundView;
    private System.Threading.CancellationTokenSource cts;
    private bool isDisposed;
    public PRISM.StreamingViewer.SoundView SoundView { get; set; }
    public void JoinRoom(string roomName, System.Nullable<System.DateTime> beginDate);
    public void OnError();
    public void ReceiveReconnect();
    public void OnApplicationSuspend();
    public void OnApplicationResume();
    protected void _onUpdate();
    private Cysharp.Threading.Tasks.UniTask _receiveAsync();
    private void _onException(System.Exception exception);
    private void _setSequenceNumberElapsedTime();
    private void _stopStreamingCall();
    protected void _dispose();
    private void OnDestroy();

    private struct <_receiveAsync>d__18 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.StreamingNetwork.PrismStreamingGrpcClient <>4__this;
        private ConfiguredTaskAwaiter<bool> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.StreamingNetwork
public class PrismStreamingNetwork
{
    private static PRISM.StreamingNetwork.PrismStreamingGrpcClient prismStreamingGrpcClient;
    private static PRISM.StreamingNetwork.PrismStreamingCDN prismStreamingCdn;
    private static System.Collections.Generic.List<string> instantiatedGuid;
    private static PRISM.StreamingNetwork.IPrismStreamingCurrentTime soundViewUsedForSynchronization;
    private static System.Collections.Generic.List<PRISM.StreamingNetwork.IPrismStreamingCallbacks> callbacks;
    public bool IsOperator { get; set; }
    public bool IsUser { get; set; }
    public bool IsConnected { get; set; }
    public PRISM.StreamingNetwork.PrismStreaming CurrentPrismStreaming { get; set; }
    public ConnectType ClientConnectType { get; set; }
    public float CurrentTime { get; set; }
    public static void JoinRoom(string roomName, System.Nullable<System.DateTime> beginDate);
    public static void JoinArchive(string url, bool isLive, System.Nullable<System.DateTime> beginDate);
    public static void OnError();
    public static void OnLeftRoom();
    public static void OnArchiveFinished();
    public static void OnDisconnected();
    public static void ReceiveReconnect();
    public static void Instantiate(string prefabName, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, System.Action<UnityEngine.GameObject, System.Collections.Generic.Dictionary<string, object>> result, System.Collections.Generic.Dictionary<string, object> extra);
    public static Cysharp.Threading.Tasks.UniTask Instantiate(string prefabName, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, string guid, System.Action<UnityEngine.GameObject, System.Collections.Generic.Dictionary<string, object>> result, System.Collections.Generic.Dictionary<string, object> extra);
    public static void Instantiate(UnityEngine.GameObject prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, string guid, System.Action<UnityEngine.GameObject, System.Collections.Generic.Dictionary<string, object>> result, System.Collections.Generic.Dictionary<string, object> extra);
    public static void AddPrismStreamingCallback(PRISM.StreamingNetwork.IPrismStreamingCallbacks prismStreamingCallbacks);
    public static void CallMonoBehaviourPrismStreamingCallbacks(string methodName);
    public static void RemoveInstantiatedGuid(string guid);
    public static Cysharp.Threading.Tasks.UniTask TerminateAsync();
    private static string _generateGuid();

    public enum ConnectType : System.Enum
    {
        public int value__;
        public static ConnectType None;
        public static ConnectType Grpc;
        public static ConnectType CDN;
        public static ConnectType LAN;
    }

    private struct <Instantiate>d__26 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public string guid;
        public string prefabName;
        public UnityEngine.Vector3 position;
        public UnityEngine.Quaternion rotation;
        public System.Action<UnityEngine.GameObject, System.Collections.Generic.Dictionary<string, object>> result;
        public System.Collections.Generic.Dictionary<string, object> extra;
        private Awaiter<UnityEngine.GameObject> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <TerminateAsync>d__31 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.StreamingNetwork
public class PrismView : UnityEngine.MonoBehaviour
{
    private string guid;
    private PRISM.StreamingNetwork.IPrismStreamingObservable prismStreamingObservable;
    public string Guid { get; set; }
    public PRISM.StreamingNetwork.IPrismStreamingObservable PrismStreamingObservable { get; set; }
    public string Path();
    public void Make(string guid);
    public void ClearReceivedQueueData();
    public void SetPause(bool isPause);
}

// Namespace: PRISM.StreamingViewer
public class StreamingAvatar : UnityEngine.MonoBehaviour
{
    protected PRISM.AttachBoneObject attachCheek;
    protected int characterId;
    protected bool characterEnabled;
    private PRISM.Character character;
    private PRISM.AdditiveAnimation additiveAnimation;
    protected string currentAnimationName;
    private PRISM.SwitchModel[] switchModels;
    protected PRISM.SwitchModel switchModelCheek;
    private PRISM.StreamingViewer.StreamingAvatarMotion streamingAvatarMotion;
    private PRISM.StreamingViewer.StreamingAvatarExpression streamingAvatarExpression;
    private bool hasAvatar;
    public int CharacterId { get; set; }
    public PRISM.Character Character { get; set; }
    public bool HasAvatar { get; set; }
    public PRISM.SwitchModel[] SwitchModels { get; set; }
    public PRISM.StreamingViewer.StreamingAvatarMotion AvatarMotion { get; set; }
    public PRISM.StreamingViewer.StreamingAvatarExpression AvatarExpression { get; set; }
    public PRISM.AdditiveAnimation AdditiveAnimation { get; set; }
    public PRISM.SwitchModel SwitchModelCheek { get; set; }
    public void CharacterEnabled(bool enabled, bool force);
    protected void Awake();
    protected Cysharp.Threading.Tasks.UniTask _loadAvatarAsync(bool isSD, PRISM.UnitIdol unitIdol);
    protected void _deleteCharacter();
    private Cysharp.Threading.Tasks.UniTask _setupAdditiveAnimationAsync();
    protected void _receivedCharacterEnabled(bool enabled);
    protected void _receivedMotions(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 charaPosition, BoneData[] boneDatas);
    protected void _receivedExpressionMorphTargets(float[] morphTargets, UnityEngine.Vector3 freeTargetPosition);
    protected void _receivedAnimationName(string animationName);

    private struct <_loadAvatarAsync>d__29 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.StreamingViewer.StreamingAvatar <>4__this;
        public PRISM.UnitIdol unitIdol;
        public bool isSD;
        private PRISM.DownloadKeyContainer <downloadKeyContainer>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_setupAdditiveAnimationAsync>d__31 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.StreamingViewer.StreamingAvatar <>4__this;
        private string <path>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.StreamingViewer
public class StreamingAvatarAttachBoneObject : PRISM.AttachBoneObject
{
    public void Setup(PRISM.Character character, UnityEngine.GameObject attachObject, UnityEngine.HumanBodyBones bone, UnityEngine.Vector3 offsetPos, UnityEngine.Vector3 offsetRot, string onTriggerName, string offTriggerName, UnityEngine.TextAsset handPose);
    public void SetCharacter(PRISM.Character character);
}

// Namespace: PRISM.StreamingViewer
public class StreamingAvatarExpression : UnityEngine.MonoBehaviour
{
    private UnityEngine.Animator animator;
    private UnityEngine.Vector3 eyeTargetPosition;
    private EyeController[] eyeControllers;
    private float[] morphTargets;
    public static string[] FaceParameterNames;
    public UnityEngine.Animator Animator { get; set; }
    public EyeController[] EyeControllers { get; set; }
    public void ReceivedMorphTargets(float[] morphTargets, UnityEngine.Vector3 targetPosition);
    public void UpdateEyeTarget(UnityEngine.Vector3 freeTargetPosition);
    private void Awake();
    private void Update();
    private void _updateMorphTargets();

    public enum FaceParameter : System.Enum
    {
        public int value__;
        public static FaceParameter Mouth_A;
        public static FaceParameter Mouth_I;
        public static FaceParameter Mouth_U;
        public static FaceParameter Mouth_E;
        public static FaceParameter Mouth_O;
        public static FaceParameter Mouth_SA;
        public static FaceParameter Mouth_SI;
        public static FaceParameter Mouth_SE;
        public static FaceParameter MouthSerious;
        public static FaceParameter MouthSurprise;
        public static FaceParameter MouthShy;
        public static FaceParameter MouthAnger;
        public static FaceParameter EyeLClose;
        public static FaceParameter EyeRClose;
        public static FaceParameter EyeLSmile;
        public static FaceParameter EyeRSmile;
        public static FaceParameter EyeBrowSerious;
        public static FaceParameter EyeBrowSad;
        public static FaceParameter EyeBrowUnique;
        public static FaceParameter Size;
    }
}

// Namespace: PRISM.StreamingViewer
public class StreamingAvatarMotion : UnityEngine.MonoBehaviour
{
    private UnityEngine.Animator animator;
    public UnityEngine.Animator GetAnimator();
    public void SetupAnimator(UnityEngine.Animator animator);
    public void ReceivedMotions(BoneData[] boneDatas);
}

// Namespace: PRISM.StreamingViewer
public class AttachBoneObjectView : UnityEngine.MonoBehaviour, PRISM.StreamingNetwork.IPrismStreamingObservable
{
    public static string PrefabPath;
    private bool isSendStreamData;
    private bool isLoading;
    private int characterId;
    private bool enable;
    private string objectPath;
    private UnityEngine.HumanBodyBones bone;
    private UnityEngine.Vector3 position;
    private UnityEngine.Vector3 rotation;
    private string onTriggerName;
    private string offTriggerName;
    private UnityEngine.TextAsset handPose;
    private string handPoseName;
    private bool releaseHandItem;
    private System.Collections.Generic.Queue<ReceivedData> receivedData;
    private UnityEngine.GameObject handItem;
    private UnityEngine.GameObject accessoryItem;
    private PRISM.StreamingViewer.StreamingAvatarAttachBoneObject streamingAvatarAttachBoneObject;
    private int <Id>k__BackingField;
    private bool <IsViewPaused>k__BackingField;
    public int Id { get; set; }
    public bool Enable { get; set; }
    public UnityEngine.GameObject AttachItem { get; set; }
    public bool IsViewPaused { get; set; }
    public string ViewPrefabPath();
    public void Attach(UnityEngine.Vector3 pos, UnityEngine.Vector3 rot);
    public void Detach(UnityEngine.Vector3 pos, UnityEngine.Vector3 rot);
    public void ChangeCharacter(int characterId, UnityEngine.Vector3 pos, UnityEngine.Vector3 rot);
    public void OnPrismStreamSerializeView(bool isWriting, PRISM.StreamingNetwork.PrismStream stream);
    public void ClearReceivedQueueData();
    private void Update();
    private Cysharp.Threading.Tasks.UniTask _loadObjectAsync(PRISM.StreamingViewer.StreamingAvatar streamingAvatar, string path, UnityEngine.HumanBodyBones bone, UnityEngine.Vector3 position, UnityEngine.Vector3 rotation, string onTriggerName, string offTriggerName, UnityEngine.TextAsset handPose, string handPoseName);
    private void _updateReceiveData();
    private void _loadReceivedObject(ReceivedData data);
    private PRISM.StreamingViewer.StreamingAvatar _getStreamingAvatar(int characterId);
    private UnityEngine.GameObject _getAccessoryAttachItem(UnityEngine.GameObject item);
    private void _updateAttachItemTransform(UnityEngine.Vector3 pos, UnityEngine.Vector3 rot);

    private struct ReceivedData : System.ValueType
    {
        public float Timestamp;
        public int CharacterId;
        public bool Enable;
        public string ObjectPath;
        public UnityEngine.HumanBodyBones Bone;
        public UnityEngine.Vector3 Position;
        public UnityEngine.Vector3 Rotation;
        public string OnTriggerName;
        public string OffTriggerName;
        public string HandPoseData;
        public string HandPoseName;
        public bool ReleaseHandItem;
    }

    private struct <_loadObjectAsync>d__38 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.StreamingViewer.AttachBoneObjectView <>4__this;
        public PRISM.StreamingViewer.StreamingAvatar streamingAvatar;
        public string path;
        public UnityEngine.HumanBodyBones bone;
        public UnityEngine.Vector3 position;
        public UnityEngine.Vector3 rotation;
        public string onTriggerName;
        public string offTriggerName;
        public UnityEngine.TextAsset handPose;
        public string handPoseName;
        private Awaiter<UnityEngine.GameObject> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.StreamingViewer
public class AvatarView : PRISM.StreamingViewer.StreamingAvatar, PRISM.StreamingNetwork.IPrismStreamingObservable
{
    public static string PrefabPath;
    private bool isLoadingIdol;
    private bool isSD;
    private bool isResetPhysics;
    private UniRx.ReactiveProperty<bool> isViewPaused;
    private PRISM.UnitIdol unitIdol;
    private System.Collections.Generic.Queue<ReceivedData> receivedData;
    public bool IsViewPaused { get; set; }
    public PRISM.UnitIdol UnitIdol { get; set; }
    public string ViewPrefabPath();
    public Cysharp.Threading.Tasks.UniTask SetUnitIdolAsync(bool isSD, PRISM.UnitIdol unitIdol);
    public void OnPrismStreamSerializeView(bool isWriting, PRISM.StreamingNetwork.PrismStream stream);
    public void ClearReceivedQueueData();
    protected void Awake();
    private void Update();
    private void _updateReceiveData();
    private void _updateAvatarData(ReceivedData data);
    private bool _checkChangeCostume(int charaId, int hairId, int clothId, int[] accessoryIds);
    private Cysharp.Threading.Tasks.UniTask<PRISM.UnitIdol> _getUserCostumeAsync(PRISM.UnitIdol unitIdol);
    private void OnDestroy();

    private struct ReceivedData : System.ValueType
    {
        public float Timestamp;
        public bool IsSD;
        public bool CharacterEnabled;
        public int CharaId;
        public int ClothId;
        public int HairId;
        public int[] AccessoryIds;
        public UnityEngine.Vector3 Position;
        public UnityEngine.Quaternion Rotation;
        public UnityEngine.Vector3 CharacterPosition;
        public float[] MorphTargets;
        public UnityEngine.Vector3 FreeTargetPosition;
        public int BoneCount;
        public BoneData[] BoneDatas;
        public string AnimationName;
        public int SwitchModelsCount;
        public int[] CurrentUnitNoArray;
        public int CurrentCheekNo;
    }

    public struct BoneData : System.ValueType
    {
        public int Bone;
        public UnityEngine.Vector3 BonePosition;
        public UnityEngine.Quaternion BoneRotation;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<bool> <>9__18_0;
        public static System.Func<PRISM.Module.Networking.IIdolBaseCostumeStatus, bool> <>9__23_0;
        private void <Awake>b__18_0(bool pause);
        private bool <_getUserCostumeAsync>b__23_0(PRISM.Module.Networking.IIdolBaseCostumeStatus x);
    }

    private struct <SetUnitIdolAsync>d__15 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.StreamingViewer.AvatarView <>4__this;
        public bool isSD;
        public PRISM.UnitIdol unitIdol;
        private Awaiter<PRISM.UnitIdol> <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_getUserCostumeAsync>d__23 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.UnitIdol> <>t__builder;
        public PRISM.UnitIdol unitIdol;
        public PRISM.StreamingViewer.AvatarView <>4__this;
        private PRISM.Module.Networking.IIdolBaseCostumeStatus <idolBaseCostume>5__2;
        private Awaiter<PRISM.Module.Networking.IIdolBaseStatus> <>u__1;
        private Awaiter<PRISM.Domain.ICachedCostumeService> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.StreamingViewer
public class CameraView : UnityEngine.MonoBehaviour, PRISM.StreamingNetwork.IPrismStreamingObservable
{
    public static string PrefabPath;
    private UnityEngine.Camera liveCamera;
    private float addPCameraRotationX;
    private float addPCameraRotationY;
    private float addPCameraZoomValue;
    private UniRx.ReactiveProperty<bool> isAvailableCameraControl;
    private System.Collections.Generic.Queue<ReceivedData> receivedData;
    private bool <ProducerModeEnabled>k__BackingField;
    private bool <ProducerModeWatching>k__BackingField;
    private bool <IsViewPaused>k__BackingField;
    public bool ProducerModeEnabled { get; set; }
    public bool ProducerModeWatching { get; set; }
    public bool IsAvailableCameraControl { get; set; }
    public System.IObservable<bool> OnAvailableCameraControlChanged { get; set; }
    public bool IsViewPaused { get; set; }
    public string ViewPrefabPath();
    public void OnPrismStreamSerializeView(bool isWriting, PRISM.StreamingNetwork.PrismStream stream);
    public void ClearReceivedQueueData();
    public void ChangeProducerModeWatching(bool isPMode);
    public void SetAddPCameraRotation(float rotationX, float rotationY);
    public void SetAddPCameraZoomValue(float zoomValue);
    private void Awake();
    private void Update();
    private void _updateReceiveData();

    private struct ReceivedData : System.ValueType
    {
        public float Timestamp;
        public bool PModeEnabled;
        public UnityEngine.Vector3 Position;
        public UnityEngine.Vector3 Rotation;
        public float FOV;
        public bool Orthographic;
        public float NearClip;
        public float FarClip;
        public UnityEngine.Vector3 PModePosition;
        public UnityEngine.Vector3 PModeRotation;
        public float PModeFOV;
        public bool PModeOrthographic;
        public float PModeNearClip;
        public float PModeFarClip;
        public float Weight;
        public bool IsAvailableCameraControl;
    }
}

// Namespace: PRISM.StreamingViewer
public class CharacterLightingView : UnityEngine.MonoBehaviour, PRISM.StreamingNetwork.IPrismStreamingObservable
{
    public static string PrefabPath;
    private System.Collections.Generic.Queue<ReceivedData> receivedData;
    private PRISM.Legacy.CharacterLighting characterLighting;
    private bool <IsViewPaused>k__BackingField;
    public bool IsViewPaused { get; set; }
    public string ViewPrefabPath();
    public void OnPrismStreamSerializeView(bool isWriting, PRISM.StreamingNetwork.PrismStream stream);
    public void ClearReceivedQueueData();
    private void Awake();
    private void Update();
    private void _updateReceiveData();

    private struct ReceivedData : System.ValueType
    {
        public float Timestamp;
        public UnityEngine.Color RimColor;
        public UnityEngine.Vector3 RimLightDirection;
        public float RimFeather;
        public float RimDiffuseRate;
        public bool EnableDepthOffsetRimLight;
        public bool EnableToonRimLight;
        public float RimPower;
        public float RimIntensity;
        public float RimWidth;
        public float RimSpread;
        public float RimBorder;
        public float RimBlur;
        public float RimAntiAlias;
    }
}

// Namespace: PRISM.StreamingViewer
public class DefaultLightView : UnityEngine.MonoBehaviour, PRISM.StreamingNetwork.IPrismStreamingObservable
{
    public static string PrefabPath;
    private UnityEngine.Light defaultLight;
    private bool useRotation;
    private PRISM.LightDirectionConstraint lightDirectionConstraint;
    private System.Collections.Generic.Queue<ReceivedData> receivedData;
    private bool <IsViewPaused>k__BackingField;
    public bool IsViewPaused { get; set; }
    public string ViewPrefabPath();
    public void SetLightDirectionConstraint(PRISM.LightDirectionConstraint lightDirectionConstraint);
    public void OnPrismStreamSerializeView(bool isWriting, PRISM.StreamingNetwork.PrismStream stream);
    public void ClearReceivedQueueData();
    private void Awake();
    private void Update();
    private void _updateReceiveData();
    private void _setLightDirectionConstraint(bool disabled);

    private struct ReceivedData : System.ValueType
    {
        public float Timestamp;
        public UnityEngine.Quaternion Rotation;
        public float lightColorR;
        public float lightColorG;
        public float lightColorB;
        public float lightColorA;
        public float Intensity;
        public bool useRotation;
    }
}

// Namespace: PRISM.StreamingViewer
public class FreeObjectView : UnityEngine.MonoBehaviour, PRISM.StreamingNetwork.IPrismStreamingObservable
{
    public static string PrefabPath;
    private bool loaded;
    private string objectName;
    private UnityEngine.GameObject freeObject;
    private System.Collections.Generic.Queue<ReceivedData> receivedData;
    private bool <IsViewPaused>k__BackingField;
    public bool IsViewPaused { get; set; }
    public string ViewPrefabPath();
    public void SetPositionAndRotation(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation);
    public void SetActiveFreeObject(bool isActive);
    public void OnPrismStreamSerializeView(bool isWriting, PRISM.StreamingNetwork.PrismStream stream);
    public void ClearReceivedQueueData();
    private void Update();
    private void _updateReceiveData();
    private Cysharp.Threading.Tasks.UniTask _loadObject(string objectName, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, bool isActive);

    private struct ReceivedData : System.ValueType
    {
        public float Timestamp;
        public string ObjectName;
        public UnityEngine.Vector3 Position;
        public UnityEngine.Quaternion Rotation;
        public bool ObjectActive;
    }

    private struct <_loadObject>d__17 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.StreamingViewer.FreeObjectView <>4__this;
        public string objectName;
        public UnityEngine.Vector3 position;
        public UnityEngine.Quaternion rotation;
        public bool isActive;
        private Awaiter<UnityEngine.GameObject> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.StreamingViewer
public class ItemView : UnityEngine.MonoBehaviour, PRISM.StreamingNetwork.IPrismStreamingObservable
{
    public static string PrefabPath;
    private string itemPath;
    private UnityEngine.GameObject item;
    private UnityEngine.Transform acceSMP;
    private UnityEngine.Vector3 handLocalPosition;
    private UnityEngine.Quaternion handLocalRotation;
    private System.Collections.Generic.Queue<ReceivedData> receivedData;
    private bool <IsViewPaused>k__BackingField;
    public bool IsViewPaused { get; set; }
    public string ViewPrefabPath();
    public void OnPrismStreamSerializeView(bool isWriting, PRISM.StreamingNetwork.PrismStream stream);
    public void ClearReceivedQueueData();
    private void Update();
    private void _updateReceiveData();
    private Cysharp.Threading.Tasks.UniTask _loadHandItem(string itemPath);

    private struct ReceivedData : System.ValueType
    {
        public float Timestamp;
        public string ItemPath;
        public UnityEngine.Vector3 Position;
        public UnityEngine.Quaternion Rotation;
        public bool ObjectActive;
    }

    private struct <_loadHandItem>d__17 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public string itemPath;
        public PRISM.StreamingViewer.ItemView <>4__this;
        private Awaiter<UnityEngine.GameObject> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.StreamingViewer
public class MonitorView : UnityEngine.MonoBehaviour, PRISM.StreamingNetwork.IPrismStreamingObservable
{
    public static string PrefabPath;
    private UnityEngine.MeshRenderer meshRenderer;
    private System.Collections.Generic.Queue<ReceivedData> receivedData;
    private string currentFileName;
    private System.Collections.Generic.Dictionary<string, UnityEngine.Texture> monitorTextures;
    private bool <IsViewPaused>k__BackingField;
    private int <Id>k__BackingField;
    public bool IsViewPaused { get; set; }
    public int Id { get; set; }
    public string ViewPrefabPath();
    public void SetTexture(string fileName, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 scale);
    public void SetTransform(UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 scale);
    public void OnPrismStreamSerializeView(bool isWriting, PRISM.StreamingNetwork.PrismStream stream);
    public void ClearReceivedQueueData();
    private void Awake();
    private void Update();
    private Cysharp.Threading.Tasks.UniTask _loadTextureAsync(string filePath, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Vector3 scale);
    private void _updateReceiveData();

    private struct ReceivedData : System.ValueType
    {
        public float Timestamp;
        public string TextureFileName;
        public UnityEngine.Vector3 Position;
        public UnityEngine.Quaternion Rotation;
        public UnityEngine.Vector3 LocalScale;
    }

    private struct <_loadTextureAsync>d__21 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.StreamingViewer.MonitorView <>4__this;
        public string filePath;
        public UnityEngine.Vector3 position;
        public UnityEngine.Quaternion rotation;
        public UnityEngine.Vector3 scale;
        private System.Collections.Generic.Dictionary<string, UnityEngine.Texture> <>7__wrap1;
        private string <>7__wrap2;
        private Awaiter<UnityEngine.Texture> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.StreamingViewer
public class MovieView : UnityEngine.MonoBehaviour, PRISM.StreamingNetwork.IPrismStreamingObservable
{
    public static string PrefabPath;
    private UnityEngine.Vector3 DefaultScale;
    private UnityEngine.Quaternion Rotate;
    private UnityEngine.MeshRenderer panel;
    private CriWare.CriManaMovieController criManaMovieController;
    private UnityEngine.Camera mainCamera;
    private CriWare.CriManaMovieMaterialBase criManaMovieMaterialBase;
    private System.Runtime.InteropServices.GCHandle gcHandle;
    private string dataPath;
    private bool isPlaying;
    private UnityEngine.TextAsset data;
    private System.Collections.Generic.Queue<ReceivedData> receivedData;
    public UnityEngine.Vector3 offset;
    public float size;
    private bool <IsViewPaused>k__BackingField;
    public bool IsViewPaused { get; set; }
    public string ViewPrefabPath();
    public void OnPrismStreamSerializeView(bool isWriting, PRISM.StreamingNetwork.PrismStream stream);
    public void ClearReceivedQueueData();
    public void PlayMovie(UnityEngine.Vector3 offset, float size);
    public void StopMovie();
    public void OnMovieStatusChanged(Status status);
    private void Awake();
    private void Update();
    private void _updateReceiveData();
    private Cysharp.Threading.Tasks.UniTask _loadMovie(bool play);
    private void _updateMoviePosition();
    private void OnDestroy();

    private struct ReceivedData : System.ValueType
    {
        public float Timestamp;
        public string Path;
        public bool IsPlaying;
        public UnityEngine.Vector3 Position;
        public float Size;
    }

    private struct <_loadMovie>d__28 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.StreamingViewer.MovieView <>4__this;
        public bool play;
        private Awaiter<UnityEngine.TextAsset> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.StreamingViewer
public class OperatorView : UnityEngine.MonoBehaviour, PRISM.StreamingNetwork.IPrismStreamingObservable
{
    public static string PrefabPath;
    private System.Collections.Generic.Queue<ReceivedData> receivedData;
    public System.Action<Status, PModeStatus> OnReceiveOnAirStatus;
    private bool <IsViewPaused>k__BackingField;
    public bool IsViewPaused { get; set; }
    public string ViewPrefabPath();
    public void UpdateReceiveData();
    public void OnPrismStreamSerializeView(bool isWriting, PRISM.StreamingNetwork.PrismStream stream);
    public void ClearReceivedQueueData();
    private void Update();
    private void _updateReceiveData();

    public enum Status : System.Enum
    {
        public int value__;
        public static Status Rehearsal;
        public static Status WillStartSoon;
        public static Status OnAir;
        public static Status OnAirMuteSoundStreamingOnly;
        public static Status PleaseWait;
        public static Status PleaseWaitSoundPlaying;
        public static Status StreamHasEnded;
        public static Status End;
    }

    public enum PModeStatus : System.Enum
    {
        public int value__;
        public static PModeStatus Rehearsal;
        public static PModeStatus OnAir;
        public static PModeStatus End;
        public static PModeStatus BeforeOnAir;
        public static PModeStatus AfterOnAir;
        public static PModeStatus OnAirMuteSoundStreamingOnly;
        public static PModeStatus BlackScreen;
        public static PModeStatus BlackScreenMuteSound;
    }

    private struct ReceivedData : System.ValueType
    {
        public float Timestamp;
        public Status Status;
        public bool FadeFlag;
        public PModeStatus PModeStatus;
    }
}

// Namespace: PRISM.StreamingViewer
public class PersonalLightView : UnityEngine.MonoBehaviour, PRISM.StreamingNetwork.IPrismStreamingObservable
{
    public static string PrefabPath;
    private System.Collections.Generic.Queue<ReceivedData> receivedData;
    private PRISM.Character character;
    private bool <IsViewPaused>k__BackingField;
    public bool IsViewPaused { get; set; }
    public string ViewPrefabPath();
    public void OnPrismStreamSerializeView(bool isWriting, PRISM.StreamingNetwork.PrismStream stream);
    public void ClearReceivedQueueData();
    private void Update();
    private void _updateReceiveData();
    private void _getAvatarViewCharacter(int characterId);

    private struct ReceivedData : System.ValueType
    {
        public float Timestamp;
        public int CharacterId;
        public UnityEngine.Color Color;
        public UnityEngine.Color PlaneDropShadowColor;
        public float RaiseBaseLightInfluence;
        public float HighlightLightInfluence;
        public float HighlightMaxColor;
    }
}

// Namespace: PRISM.StreamingViewer
public class PostProcessView : UnityEngine.MonoBehaviour, PRISM.StreamingNetwork.IPrismStreamingObservable
{
    public static string PrefabPath;
    private UnityEngine.Rendering.Volume volume;
    private PRISM.StreamingViewer.PostProcessViewDepthOfField depthOfField;
    private PRISM.StreamingViewer.PostProcessViewBloom bloom;
    private PRISM.StreamingViewer.PostProcessViewSoftOverlay softOverlay;
    private PRISM.StreamingViewer.PostProcessViewParaffin paraffin;
    private System.Collections.Generic.Queue<ReceivedData> receivedData;
    private bool <IsViewPaused>k__BackingField;
    public bool IsViewPaused { get; set; }
    public string ViewPrefabPath();
    public void SetVolume(UnityEngine.Rendering.Volume volume);
    public void OnPrismStreamSerializeView(bool isWriting, PRISM.StreamingNetwork.PrismStream stream);
    public void ClearReceivedQueueData();
    private void Awake();
    private void Update();
    private void _setupPostProcess();
    private void _updateReceiveData();

    private struct ReceivedData : System.ValueType
    {
        public float Timestamp;
        public PRISM.StreamingViewer.DepthOfFieldData DepthOfFieldData;
        public PRISM.StreamingViewer.BloomData BloomData;
        public PRISM.StreamingViewer.SoftOverlayData SoftOverlayData;
        public PRISM.StreamingViewer.ParaffinData ParaffinData;
    }
}

// Namespace: PRISM.StreamingViewer
public struct BloomData : System.ValueType
{
    public bool Enabled;
    public float Threshold;
    public float Intensity;
    public float Scatter;
    public UnityEngine.Color Tint;
    public float Clamp;
    public bool HighQualityFiltering;
}

// Namespace: PRISM.StreamingViewer
public class PostProcessViewBloom
{
    private UnityEngine.Rendering.Universal.Bloom bloom;
    public void SetupPostProcess(UnityEngine.Rendering.Volume volume);
    public void ReceiveStreamData(PRISM.StreamingNetwork.PrismStream stream, PRISM.StreamingViewer.BloomData& data);
    public void UpdateBloom(PRISM.StreamingViewer.BloomData data);
}

// Namespace: PRISM.StreamingViewer
public struct DepthOfFieldData : System.ValueType
{
    public bool Enabled;
    public float FocusDistance;
    public float Aperture;
    public float FocalLength;
    public int BladeCount;
    public float BladeCurvature;
    public float BladeRotation;
}

// Namespace: PRISM.StreamingViewer
public class PostProcessViewDepthOfField
{
    private UnityEngine.Rendering.Universal.DepthOfField depthOfField;
    public void SetupPostProcess(UnityEngine.Rendering.Volume volume);
    public void ReceiveStreamData(PRISM.StreamingNetwork.PrismStream stream, PRISM.StreamingViewer.DepthOfFieldData& data);
    public void UpdateDepthOfField(PRISM.StreamingViewer.DepthOfFieldData data);
}

// Namespace: PRISM.StreamingViewer
public struct ParaffinData : System.ValueType
{
    public bool Enabled;
    public UnityEngine.Color Color;
    public float Rotate;
    public float Edge0;
    public float Edge1;
}

// Namespace: PRISM.StreamingViewer
public class PostProcessViewParaffin
{
    private UnityEngine.Rendering.Universal.Paraffin paraffin;
    public void SetupPostProcess(UnityEngine.Rendering.Volume volume);
    public void ReceiveStreamData(PRISM.StreamingNetwork.PrismStream stream, PRISM.StreamingViewer.ParaffinData& data);
    public void UpdateParaffin(PRISM.StreamingViewer.ParaffinData data);
}

// Namespace: PRISM.StreamingViewer
public struct SoftOverlayData : System.ValueType
{
    public bool Enabled;
    public int DownSampleLevel;
    public float Weight;
    public float ScalingWeight;
    public float Diffusion;
}

// Namespace: PRISM.StreamingViewer
public class PostProcessViewSoftOverlay
{
    private UnityEngine.Rendering.Universal.SoftOverlay softOverlay;
    public void SetupPostProcess(UnityEngine.Rendering.Volume volume);
    public void ReceiveStreamData(PRISM.StreamingNetwork.PrismStream stream, PRISM.StreamingViewer.SoftOverlayData& data);
    public void UpdateSoftOverlay(PRISM.StreamingViewer.SoftOverlayData data);
}

// Namespace: PRISM.StreamingViewer
public class SoundReceiver : System.IDisposable
{
    private static int NumEnrties;
    private bool isStereo;
    private int channels;
    private CriWare.CriAtomExPlayer atomExPlayer;
    private CriWare.CriAtomExPlayback playback;
    private CriWare.CriAtomExVoicePool voicePool;
    private CriHcaDecoder hcaDecoder;
    private bool isStarted;
    private float audioPlaybackTime;
    private float[][] playbackSamples;
    private System.Runtime.InteropServices.GCHandle[] gCHandles;
    private int entriedIndex;
    private int packetSampleLength;
    private int addEntryCount;
    private float frameTime;
    private float startTime;
    private bool isFinished;
    private bool isMute;
    private bool isStartIgnoreBuffer;
    private int latestUpdatePlaybackTimeFrame;
    private System.Collections.Generic.Queue<ReceivedData> receivedData;
    public bool IsStarted { get; set; }
    public bool IsFinished { get; set; }
    public float CurrentTime { get; set; }
    public int GetNumEntries { get; set; }
    public void AddData(System.ArraySegment<byte> data, int length);
    public void OnReceivedTimestamp(float timestamp, float offsetFrameTime);
    public bool PlayAndUpdatePlaybackTime();
    public void UpdateMuteStatus(bool isMute, bool isForce);
    public void Finished(bool isFinished);
    public void Pause();
    public void Resume();
    public void Stop();
    public void SetSeekTime(double time);
    public void SetStartIgnoreBuffer(bool ignoreBuffer);
    public void Dispose();
    private bool _checkStartEntriesBuffer();

    private struct ReceivedData : System.ValueType
    {
        public float Timestamp;
        public float OffsetFrameTime;
        public int AddEntryCount;
    }
}

// Namespace: PRISM.StreamingViewer
public class SoundView : UnityEngine.MonoBehaviour, PRISM.StreamingNetwork.IPrismStreamingObservable, PRISM.StreamingNetwork.IPrismStreamingCurrentTime
{
    public static string PrefabPath;
    public static float PacketLengthSecond;
    public static float BufferingTime;
    private PRISM.StreamingViewer.SoundReceiver soundReceiver;
    private bool <IsViewPaused>k__BackingField;
    public bool IsStarted { get; set; }
    public bool IsFinished { get; set; }
    public bool IsViewPaused { get; set; }
    public string ViewPrefabPath();
    public void UpdateMuteStatus(bool isMute);
    public void Finished(bool isFinished);
    public void Pause();
    public void Resume();
    public void Stop();
    public void SetSeekTime(double time);
    public void OnPrismStreamSerializeView(bool isWriting, PRISM.StreamingNetwork.PrismStream stream);
    public float CurrentTime();
    public int GetPacketSamples(int channel);
    public bool IsEnoughBuffer();
    public void SetStartIgnoreBuffer(bool ignoreBuffer);
    public void ClearReceivedQueueData();
    private void Awake();
    private void LateUpdate();
    private void OnDestroy();

    public enum Bitrate : System.Enum
    {
        public int value__;
        public static Bitrate Bitrate320kbps;
        public static Bitrate Btrate256kbps;
        public static Bitrate Bitrate192kbps;
        public static Bitrate Bitrate160kbps;
        public static Bitrate Bitrate128kbps;
        public static Bitrate Bitrate98kbps;
        public static Bitrate Bitrate64kbps;
    }
}

// Namespace: PRISM.StreamingViewer
public class StageView : UnityEngine.MonoBehaviour, PRISM.StreamingNetwork.IPrismStreamingObservable
{
    public static string PrefabPath;
    private string stageName;
    private string[] stageSwitchCondition;
    private UnityEngine.GameObject stage;
    private System.Collections.Generic.Queue<ReceivedData> receivedData;
    private bool <IsViewPaused>k__BackingField;
    private bool <IsLoading>k__BackingField;
    public string StageName { get; set; }
    public bool IsViewPaused { get; set; }
    public bool IsLoading { get; set; }
    public string ViewPrefabPath();
    public Cysharp.Threading.Tasks.UniTask LoadStageAsync(string stageName, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation);
    public void OnPrismStreamSerializeView(bool isWriting, PRISM.StreamingNetwork.PrismStream stream);
    public void ClearReceivedQueueData();
    private void Update();
    private void _updateReceiveData();
    private Cysharp.Threading.Tasks.UniTask _loadStageAsync(string stageName, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation);

    private struct ReceivedData : System.ValueType
    {
        public float Timestamp;
        public string StageName;
        public string[] StageSwitchCondition;
        public UnityEngine.Vector3 StagePosition;
        public UnityEngine.Quaternion StageRotation;
    }

    private struct <_loadStageAsync>d__22 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public string stageName;
        public PRISM.StreamingViewer.StageView <>4__this;
        public UnityEngine.Vector3 position;
        public UnityEngine.Quaternion rotation;
        private Awaiter<UnityEngine.GameObject> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.StreamingViewer
public class WindView : UnityEngine.MonoBehaviour, PRISM.StreamingNetwork.IPrismStreamingObservable
{
    public static string PrefabPath;
    private System.Collections.Generic.Queue<ReceivedData> receivedData;
    private UnityEngine.Vector3 currentWindVector;
    private float currentTurbulence;
    private bool <IsViewPaused>k__BackingField;
    public bool IsViewPaused { get; set; }
    public string ViewPrefabPath();
    public void OnPrismStreamSerializeView(bool isWriting, PRISM.StreamingNetwork.PrismStream stream);
    public void ClearReceivedQueueData();
    private void Update();
    private void _updateReceiveData();

    private struct ReceivedData : System.ValueType
    {
        public float Timestamp;
        public UnityEngine.Vector3 WindVector;
        public float Turbulence;
    }
}

// Namespace: PRISM.Story
public interface IEventStorySelectConnector
{
}

// Namespace: PRISM.Story
public interface IExtraStorySelectConnector
{
}

// Namespace: PRISM.Story
public interface IExtraStorySubcategorySelectConnector
{
}

// Namespace: PRISM.Story
public interface IIdolSubStorySelectConnector
{
}

// Namespace: PRISM.Story
public interface IProduceIdolScenarioIdolSelectConnector
{
}

// Namespace: PRISM.Story
public interface IProduceIdolScenarioSelectConnector
{
}

// Namespace: PRISM.Story
public interface ISupportCharacterScenarioCharacterSelectConnector
{
}

// Namespace: PRISM.Story
public interface ISupportCharacterScenarioSelectConnector
{
}

// Namespace: PRISM.Story
public interface IUnitSubStorySelectConnector
{
}

// Namespace: PRISM.Sound
public class BgmPlayer : System.IDisposable
{
    private System.Collections.Generic.IReadOnlyDictionary<int, CriWare.CriAtomSource> atomSources;
    private System.Func<CriWare.CriAtomSource, PRISM.PlayParameters, CriWare.CriAtomExPlayback> playSound;
    private System.Func<string, System.Threading.CancellationToken, Cysharp.Threading.Tasks.UniTask> loadCueSheetAsync;
    private System.Action<string> unloadCueSheet;
    private string prevCueSheet;
    private string currentCueSheet;
    private BgmPlayInfo currentPlayInfo;
    private System.Threading.CancellationTokenSource bgmLoadCts;
    private System.Collections.Generic.HashSet<string> ignoreCueSheetList;
    private System.Collections.Generic.HashSet<string> releaseCueSheetListOnNextPlay;
    public bool IsPlaying();
    public Cysharp.Threading.Tasks.UniTask<CriWare.CriAtomExPlayback> LoadAndPlayInterruptableAsync(string cueSheetName, string cueName, PRISM.PlayParameters playParameters, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask LoadAsync(string cueSheetName, System.Threading.CancellationToken cancellationToken);
    public CriWare.CriAtomExPlayback Play(string cueSheetName, string cueName, PRISM.PlayParameters playParameters);
    public CriWare.CriAtomExPlayback PlayOnly(string cueSheetName, string cueName, PRISM.PlayParameters playParameters);
    public void Stop();
    public CriWare.CriAtomExPlayback StartPlaying(int time, bool pause, int fadeInTime, int fadeOutTime, float volume, CriWare.CriAtomSource atomSource);
    public void Pause(bool sw);
    public string GetPlayingBgmCueSheet();
    public void IgnoreAutoRelease(string cueSheetName);
    public void ConformAutoRelease(string cueSheetName);
    public void SetUnloadOnNextPlay(string cueSheetName);
    public bool IsManagingCueSheet(string cueSheet);
    public void Dispose();
    private PRISM.AudioType _getBgmAudioType(PRISM.PlayParameters playParameters);
    private void _pushCueSheet(string cueSheetName);
    private CriWare.CriAtomExPlayback _play(string cueSheetName, string cueName, PRISM.PlayParameters playParameters);

    private class BgmPlayInfo
    {
        public CriWare.CriAtomExPlayback Playback;
        private bool <IsStopping>k__BackingField;
        public bool IsStopping { get; set; }
        public void Initialize(CriWare.CriAtomExPlayback playback);
        public void Stop(bool ignoresReleaseTime);
    }

    private struct <LoadAndPlayInterruptableAsync>d__13 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<CriWare.CriAtomExPlayback> <>t__builder;
        public PRISM.Sound.BgmPlayer <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        public string cueSheetName;
        public string cueName;
        public PRISM.PlayParameters playParameters;
        private System.Threading.CancellationTokenSource <linkedTokenSource>5__2;
        private string <nextCueSheet>5__3;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Shop
public class ShopDeferredPurchaseParam
{
    private System.Collections.Generic.Dictionary<ShopItemType, PRISM.Module.Networking.IStoreItemStatus[]> deferredStoreItems;
    private PRISM.Domain.Jewel <JewelBeforePurchase>k__BackingField;
    public PRISM.Domain.Jewel JewelBeforePurchase { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IStoreItemStatus> GetDeferredStoreItems(ShopItemType shopItemType);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IStoreItemStatus, ShopItemType> <>9__5_0;
        public static System.Func<PRISM.Module.Networking.IStoreItemStatus, PRISM.Module.Networking.IStoreItemStatus> <>9__5_1;
        public static System.Func<System.Linq.IGrouping<ShopItemType, PRISM.Module.Networking.IStoreItemStatus>, ShopItemType> <>9__5_2;
        public static System.Func<System.Linq.IGrouping<ShopItemType, PRISM.Module.Networking.IStoreItemStatus>, PRISM.Module.Networking.IStoreItemStatus[]> <>9__5_3;
        private ShopItemType <.ctor>b__5_0(PRISM.Module.Networking.IStoreItemStatus x);
        private PRISM.Module.Networking.IStoreItemStatus <.ctor>b__5_1(PRISM.Module.Networking.IStoreItemStatus x);
        private ShopItemType <.ctor>b__5_2(System.Linq.IGrouping<ShopItemType, PRISM.Module.Networking.IStoreItemStatus> x);
        private PRISM.Module.Networking.IStoreItemStatus[] <.ctor>b__5_3(System.Linq.IGrouping<ShopItemType, PRISM.Module.Networking.IStoreItemStatus> x);
    }
}

// Namespace: PRISM.Shop
public class ShopUtility
{
    public static string CreatePeriodText(string startDateText, string endDateText);
    public static string CreateEndOnlyPeriodText(string endDateText);
}

// Namespace: PRISM.DebugOption
public class RhythmGameParameters : System.ComponentModel.INotifyPropertyChanged
{
    public static PRISM.DebugOption.RhythmGameParameters Current;
    private float <カメラ切り替え間引き秒数>k__BackingField;
    private float <TextureBorderU>k__BackingField;
    private float <MeshBorderSpace>k__BackingField;
    private float <MeshBorderWidth>k__BackingField;
    private float <LerpPow>k__BackingField;
    private float <LerpOffset>k__BackingField;
    private float <ScoreConstantCoefficient>k__BackingField;
    private float <MaxNoteHeightScale>k__BackingField;
    private float <SE再生間隔>k__BackingField;
    private int <iOSパターンID>k__BackingField;
    private int <Androidミリ秒数>k__BackingField;
    public System.Collections.Generic.Dictionary<PRISM.RhythmGame.NoteType, System.ValueTuple<JudgementRange, JudgementRange>> JudgementRanges;
    private PRISM.RhythmGame.NoteType targetType;
    private float <早押しMiss秒数>k__BackingField;
    private float <フリック判定する秒間レーン移動量>k__BackingField;
    private float <Reverse判定開始秒数>k__BackingField;
    private float <タップズレ許容幅>k__BackingField;
    private float <ズームイン秒数>k__BackingField;
    private float <表示秒数>k__BackingField;
    private float <ズームアウト秒数>k__BackingField;
    private float <NoteLineNotJudgeColorR>k__BackingField;
    private float <NoteLineNotJudgeColorG>k__BackingField;
    private float <NoteLineNotJudgeColorB>k__BackingField;
    private float <NoteLineNotJudgeColorA>k__BackingField;
    private float <NoteLineSuccessColorR>k__BackingField;
    private float <NoteLineSuccessColorG>k__BackingField;
    private float <NoteLineSuccessColorB>k__BackingField;
    private float <NoteLineSuccessColorA>k__BackingField;
    private float <NoteLineFailureColorR>k__BackingField;
    private float <NoteLineFailureColorG>k__BackingField;
    private float <NoteLineFailureColorB>k__BackingField;
    private float <NoteLineFailureColorA>k__BackingField;
    private float <JudgementShowPositionUpper>k__BackingField;
    private float <JudgementShowPositionCenter>k__BackingField;
    private float <JudgementShowPositionCenterLower>k__BackingField;
    private float <JudgementLagShowPositionY>k__BackingField;
    private float <JudgementLagShowPositionFixedRightX>k__BackingField;
    private System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    public float カメラ切り替え間引き秒数 { get; set; }
    public float TextureBorderU { get; set; }
    public float MeshBorderSpace { get; set; }
    public float MeshBorderWidth { get; set; }
    public float LerpPow { get; set; }
    public float LerpOffset { get; set; }
    public float ScoreConstantCoefficient { get; set; }
    public float MaxNoteHeightScale { get; set; }
    public float SE再生間隔 { get; set; }
    public int iOSパターンID { get; set; }
    public int Androidミリ秒数 { get; set; }
    public PRISM.RhythmGame.NoteType 判定調整対象 { get; set; }
    public float 早Shiny { get; set; }
    public float 早Perfect { get; set; }
    public float 早Great { get; set; }
    public float 早Good { get; set; }
    public float 遅Shiny { get; set; }
    public float 遅Perfect { get; set; }
    public float 遅Great { get; set; }
    public float 遅Good { get; set; }
    public float 早押しMiss秒数 { get; set; }
    public float フリック判定する秒間レーン移動量 { get; set; }
    public float Reverse判定開始秒数 { get; set; }
    public float タップズレ許容幅 { get; set; }
    public float ズームイン秒数 { get; set; }
    public float 表示秒数 { get; set; }
    public float ズームアウト秒数 { get; set; }
    public float NoteLineNotJudgeColorR { get; set; }
    public float NoteLineNotJudgeColorG { get; set; }
    public float NoteLineNotJudgeColorB { get; set; }
    public float NoteLineNotJudgeColorA { get; set; }
    public float NoteLineSuccessColorR { get; set; }
    public float NoteLineSuccessColorG { get; set; }
    public float NoteLineSuccessColorB { get; set; }
    public float NoteLineSuccessColorA { get; set; }
    public float NoteLineFailureColorR { get; set; }
    public float NoteLineFailureColorG { get; set; }
    public float NoteLineFailureColorB { get; set; }
    public float NoteLineFailureColorA { get; set; }
    public float JudgementShowPositionUpper { get; set; }
    public float JudgementShowPositionCenter { get; set; }
    public float JudgementShowPositionCenterLower { get; set; }
    public float JudgementLagShowPositionY { get; set; }
    public float JudgementLagShowPositionFixedRightX { get; set; }
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    public UnityEngine.Color GetNoteLineNotJudgeColor();
    public UnityEngine.Color GetNoteLineSuccessColor();
    public UnityEngine.Color GetNoteLineFailureColor();
    public void add_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler value);
    public void remove_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler value);
    private static JudgementRange <.ctor>g__DefaultRange|46_0();
    private void <set_判定調整対象>g__Notify|49_0(string name);
}

// Namespace: PRISM.RhythmGame
public enum ClearType : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.ClearType None;
    public static PRISM.RhythmGame.ClearType Failed;
    public static PRISM.RhythmGame.ClearType Clear;
    public static PRISM.RhythmGame.ClearType FullCombo;
    public static PRISM.RhythmGame.ClearType AllGreat;
    public static PRISM.RhythmGame.ClearType AllPerfect;
    public static PRISM.RhythmGame.ClearType AllShiny;
}

// Namespace: PRISM.RhythmGame
public class RhythmGameDebugView : UnityEngine.MonoBehaviour
{
}

// Namespace: PRISM.RhythmGame
public class ChartEntity
{
    public string AudioSource;
    public PRISM.RhythmGame.NoteEntity[] Notes;
    public PRISM.RhythmGame.NoteLineEntity[] NoteLines;
    public PRISM.RhythmGame.SpeedChangeEntity[] SpeedChanges;

    private class <>c
    {
        public static <>c <>9;
        public static System.Comparison<PRISM.RhythmGame.NoteEntity> <>9__5_0;
        private int <.ctor>b__5_0(PRISM.RhythmGame.NoteEntity x, PRISM.RhythmGame.NoteEntity y);
    }
}

// Namespace: PRISM.RhythmGame
public class ChartReader
{
    private byte[] buffer;
    private int offset;
    public byte ReadByte();
    public int Read2Byte();
    public float ReadTime();
    public string ReadString();
    public void Reset();
}

// Namespace: PRISM.RhythmGame
public class NoteEntity
{
    public float JudgeTime;
    public PRISM.RhythmGame.NoteType Type;
    public PRISM.RhythmGame.FlickDirection FlickDirection;
    public PRISM.RhythmGame.NoteLinePosition NoteLinePosition;
    public int OriginalLanePosition;
    private float <Size>k__BackingField;
    private float <LanePosition>k__BackingField;
    private float sizeForJudge;
    private float lanePositionForJudge;
    public float Size { get; set; }
    public float LanePosition { get; set; }
    public void SetPositionAndSize(System.ValueTuple<float, float> data);
    public void CopyPositionAndSizeForJudge(PRISM.RhythmGame.NoteEntity other);
    public bool IsInTapRange(float laneIndex);
    public float GetTapGap(float laneIndex);
}

// Namespace: PRISM.RhythmGame
public enum FlickDirection : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.FlickDirection None;
    public static PRISM.RhythmGame.FlickDirection Left;
    public static PRISM.RhythmGame.FlickDirection Right;
}

// Namespace: PRISM.RhythmGame
public enum NoteLinePosition : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.NoteLinePosition None;
    public static PRISM.RhythmGame.NoteLinePosition Start;
    public static PRISM.RhythmGame.NoteLinePosition Middle;
    public static PRISM.RhythmGame.NoteLinePosition End;
}

// Namespace: PRISM.RhythmGame
public class NoteLineEntity
{
    public static int DefaultSplitCount;
    public PRISM.RhythmGame.NoteEntity Head;
    public PRISM.RhythmGame.NoteEntity Tail;
    public int SplitCount;
    public System.Func<float, System.ValueTuple<float, float>> Interpolate;

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<float, float> <>9__5_2;
        public static System.Func<float, float> <>9__5_3;
        private float <.ctor>b__5_2(float t);
        private float <.ctor>b__5_3(float t);
    }

    private class <>c__DisplayClass5_0
    {
        public float y;
        public float x;
        public PRISM.RhythmGame.NoteLineEntity <>4__this;
        private System.ValueTuple<float, float> <.ctor>b__0(float t);
    }

    private class <>c__DisplayClass5_1
    {
        public System.Func<float, float> easeFunc;
        public PRISM.RhythmGame.NoteLineEntity <>4__this;
        private System.ValueTuple<float, float> <.ctor>b__1(float t);
    }
}

// Namespace: PRISM.RhythmGame
public enum CurveType : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.CurveType Liner;
    public static PRISM.RhythmGame.CurveType EaseInQuad;
    public static PRISM.RhythmGame.CurveType EaseOutQuad;
    public static PRISM.RhythmGame.CurveType Bezier;
}

// Namespace: PRISM.RhythmGame
public class SpeedChangeEntity
{
    public float Time;
    public float Speed;
}

// Namespace: PRISM.RhythmGame
public class TouchInputService
{
    private System.Collections.Generic.List<PRISM.RhythmGame.RhythmGameTouch> touches;
    private System.Func<float, float> <ScreenToLaneIndex>k__BackingField;
    private UnityEngine.KeyCode[] keys;
    public System.Span<PRISM.RhythmGame.RhythmGameTouch> Touches { get; set; }
    private System.Func<float, float> ScreenToLaneIndex { get; set; }
    public void Update();
    private void <Update>g__AddTouch|8_0(UnityEngine.Touch touch);
}

// Namespace: PRISM.RhythmGame
public struct RhythmGameTouch : System.ValueType
{
    public UnityEngine.TouchPhase TouchPhase;
    public float LaneIndex;
    public float PrevLaneIndex;
    public PRISM.RhythmGame.FlickDirection FlickDirection;
    public bool IsConsumed;
}

// Namespace: PRISM.RhythmGame
public class AutoJudgeManager : PRISM.RhythmGame.IJudgeManager
{
    private System.Collections.Generic.List<PRISM.RhythmGame.JudgmentResult> results;
    private System.Collections.Generic.Dictionary<PRISM.RhythmGame.NoteState, PRISM.RhythmGame.JudgmentResult> judgmentResults;
    public System.Collections.Generic.List<PRISM.RhythmGame.JudgmentResult> Judge(float currentTime, PRISM.EnumerateOnlyList<PRISM.RhythmGame.NoteState> tapNotes, PRISM.EnumerateOnlyList<PRISM.RhythmGame.NoteState> holdNotes, PRISM.EnumerateOnlyList<PRISM.RhythmGame.NoteState> flickNotes, PRISM.RhythmGame.TouchInputService inputService);
    private void JudgeNotes(float currentTime, PRISM.EnumerateOnlyList<PRISM.RhythmGame.NoteState> notes);
}

// Namespace: PRISM.RhythmGame
public interface IJudgeManager
{
    public System.Collections.Generic.List<PRISM.RhythmGame.JudgmentResult> Judge(float currentTime, PRISM.EnumerateOnlyList<PRISM.RhythmGame.NoteState> tapNotes, PRISM.EnumerateOnlyList<PRISM.RhythmGame.NoteState> holdNotes, PRISM.EnumerateOnlyList<PRISM.RhythmGame.NoteState> flickNotes, PRISM.RhythmGame.TouchInputService inputService);
}

// Namespace: PRISM.RhythmGame
public class JudgeService
{
    private System.Collections.Generic.List<PRISM.RhythmGame.JudgmentResult> currentFrameJudgingResults;
    private System.Collections.Generic.List<PRISM.RhythmGame.JudgmentResult> pendingJudgmentResults;
    private System.Collections.Generic.List<PRISM.RhythmGame.JudgmentResult> temporaryPendingJudgmentResults;
    private static System.Collections.Generic.List<PRISM.RhythmGame.JudgmentResult> EmptyJudgmentResults;
    private PRISM.RhythmGame.RhythmGameNotesState state;
    private PRISM.RhythmGame.IJudgeManager judgeManager;
    private PRISM.RhythmGame.TouchInputService inputManager;
    public PRISM.EnumerateOnlyList<PRISM.RhythmGame.JudgmentResult> Judge(bool isPausing, float currentTime);
}

// Namespace: PRISM.RhythmGame
public enum JudgeState : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.JudgeState None;
    public static PRISM.RhythmGame.JudgeState Undecided;
    public static PRISM.RhythmGame.JudgeState Judged;
    public static PRISM.RhythmGame.JudgeState Pending;
    public static PRISM.RhythmGame.JudgeState FlickTapped;
}

// Namespace: PRISM.RhythmGame
public enum JudgmentLagType : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.JudgmentLagType None;
    public static PRISM.RhythmGame.JudgmentLagType Fast;
    public static PRISM.RhythmGame.JudgmentLagType Slow;
    public static PRISM.RhythmGame.JudgmentLagType Reverse;
}

// Namespace: PRISM.RhythmGame
public struct JudgmentResult : System.ValueType
{
    public PRISM.RhythmGame.JudgmentResultType Type;
    public PRISM.RhythmGame.NoteState TargetNote;
    public PRISM.RhythmGame.JudgeState State;
    public PRISM.RhythmGame.JudgmentLagType LagType;
    public static PRISM.RhythmGame.JudgmentResult CreateForAuto(PRISM.RhythmGame.JudgmentResultType type, PRISM.RhythmGame.NoteState targetNote, float lagSeconds);
    public static PRISM.RhythmGame.JudgmentResult CreateForMiss(PRISM.RhythmGame.NoteState targetNote);
    public PRISM.RhythmGame.JudgmentResult WithType(PRISM.RhythmGame.JudgmentResultType type);
}

// Namespace: PRISM.RhythmGame
public struct JudgmentResultForEffect : System.ValueType
{
    public PRISM.RhythmGame.JudgmentResultType Type;
    public PRISM.RhythmGame.JudgmentLagType LagType;
    public PRISM.RhythmGame.NoteState TargetNote;
    public bool IsSkillBoosted;
}

// Namespace: PRISM.RhythmGame
public class JudgmentResultList
{
    private int noteCount;
    private System.Collections.Generic.List<PRISM.RhythmGame.JudgmentResult> results;
    private int <Shiny>k__BackingField;
    public PRISM.RhythmGame.JudgmentResultCountDetail Perfect;
    public PRISM.RhythmGame.JudgmentResultCountDetail Great;
    public PRISM.RhythmGame.JudgmentResultCountDetail Good;
    private int <Miss>k__BackingField;
    public int Shiny { get; set; }
    public int Miss { get; set; }
    public int RemainingCount { get; set; }
    public void Add(PRISM.RhythmGame.JudgmentResult result);
    public PRISM.Module.Networking.ILiveTimingJudgementStatus ToLiveTimingJudgement();
    public PRISM.RhythmGame.ClearType GetCurrentClearType();
}

// Namespace: PRISM.RhythmGame
public class JudgmentResultCountDetail
{
    private int <Total>k__BackingField;
    private int <Fast>k__BackingField;
    private int <Slow>k__BackingField;
    private int <Reverse>k__BackingField;
    public int Total { get; set; }
    public int Fast { get; set; }
    public int Slow { get; set; }
    public int Reverse { get; set; }
    public void Add(PRISM.RhythmGame.JudgmentLagType type);
}

// Namespace: PRISM.RhythmGame
public enum JudgmentResultType : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.JudgmentResultType None;
    public static PRISM.RhythmGame.JudgmentResultType Undecided;
    public static PRISM.RhythmGame.JudgmentResultType Miss;
    public static PRISM.RhythmGame.JudgmentResultType Good;
    public static PRISM.RhythmGame.JudgmentResultType Great;
    public static PRISM.RhythmGame.JudgmentResultType Perfect;
    public static PRISM.RhythmGame.JudgmentResultType Shiny;
}

// Namespace: PRISM.RhythmGame
public class ManualJudgeManager : PRISM.RhythmGame.IJudgeManager
{
    private System.Collections.Generic.Dictionary<PRISM.RhythmGame.NoteType, System.ValueTuple<JudgementRange, JudgementRange>> judgmentRanges;
    private System.Collections.Generic.List<PRISM.RhythmGame.JudgmentResult> results;
    private System.Collections.Generic.Dictionary<PRISM.RhythmGame.NoteState, PRISM.RhythmGame.JudgmentResult> currentJudgmentResults;
    private bool isShinyEnabled;
    private float MissSeconds { get; set; }
    public System.Collections.Generic.List<PRISM.RhythmGame.JudgmentResult> Judge(float currentTime, PRISM.EnumerateOnlyList<PRISM.RhythmGame.NoteState> tapNotes, PRISM.EnumerateOnlyList<PRISM.RhythmGame.NoteState> holdNotes, PRISM.EnumerateOnlyList<PRISM.RhythmGame.NoteState> flickNotes, PRISM.RhythmGame.TouchInputService inputService);
    private bool _tryGetJudgeTargetTapNote(float laneIndex, PRISM.EnumerateOnlyList<PRISM.RhythmGame.NoteState> notes, float currentTime, PRISM.RhythmGame.NoteState& targetNote, PRISM.RhythmGame.JudgmentResultType& judgmentResultType);
    private void _judgeTapNotes(float currentTime, PRISM.EnumerateOnlyList<PRISM.RhythmGame.NoteState> notes, PRISM.RhythmGame.TouchInputService inputService);
    private PRISM.RhythmGame.JudgmentResultType _calcJudgmentResult(PRISM.RhythmGame.NoteState note, float currentTime);
    private void _judgeHoldNotes(float currentTime, PRISM.EnumerateOnlyList<PRISM.RhythmGame.NoteState> holdNotes, PRISM.RhythmGame.TouchInputService inputService);
    private void _judgeFlickNotes(float currentTime, PRISM.EnumerateOnlyList<PRISM.RhythmGame.NoteState> notes, PRISM.RhythmGame.TouchInputService inputService);

    public class JudgementRange
    {
        public float ShinySeconds;
        public float PerfectSeconds;
        public float GreatSeconds;
        public float GoodSeconds;
    }
}

// Namespace: PRISM.RhythmGame
public class LifeSpecification
{
    public static int Min;
    public static int Max;
    public static int OverMax;
    public static int Caution;
    private static int _getDamage(PRISM.RhythmGame.NoteType noteType);
    public static int CalculateByJudgmentResult(int currentLife, PRISM.RhythmGame.JudgmentResult judgmentResult);
    public static int CalculateBySkill(int currentLife, int changeValue);
}

// Namespace: PRISM.RhythmGame
public enum BitSupportMemberPosition : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.BitSupportMemberPosition Vocal;
    public static PRISM.RhythmGame.BitSupportMemberPosition Dance;
    public static PRISM.RhythmGame.BitSupportMemberPosition Visual;
    public static PRISM.RhythmGame.BitSupportMemberPosition Mental;
}

// Namespace: PRISM.RhythmGame
public class BitSupportMemberPositionExtensions
{
    public static PRISM.RhythmGame.BitSupportMemberPosition ToBit(LiveUnitSupportMemberType type);
    public static bool HasFlagAny(PRISM.RhythmGame.BitSupportMemberPosition self, PRISM.RhythmGame.BitSupportMemberPosition flags);
}

// Namespace: PRISM.RhythmGame
public class LiveActiveSupportEffect
{
    private static int Duration;
    private static float Margin;
    public string Text;
    public PRISM.Definitions.MstSupportCharacter Character;
    public PRISM.RhythmGame.RhythmGameLiveSkillEffect Effect;
    private float startTime;
    private bool isActivated;
    public bool Activate(float time);
    public static System.Collections.Generic.IReadOnlyList<PRISM.RhythmGame.LiveActiveSupportEffect> Create(PRISM.Live.LiveStartData liveStartData, float firstNoteTime, float lastNoteTime);
    public static float GetStartTime(LiveActiveSupportEffectType type, float firstNoteTime, float lastNoteTime);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Definitions.MstLiveSupportEffectType, bool> <>9__9_0;
        public static System.Func<System.ValueTuple<PRISM.RhythmGame.LiveSupportMember, int>, int> <>9__9_3;
        private bool <Create>b__9_0(PRISM.Definitions.MstLiveSupportEffectType x);
        private int <Create>b__9_3(System.ValueTuple<PRISM.RhythmGame.LiveSupportMember, int> x);
    }

    private class <>c__DisplayClass9_0
    {
        public PRISM.Live.LiveStartData liveStartData;
        public float firstNoteTime;
        public float lastNoteTime;
        private PRISM.RhythmGame.LiveActiveSupportEffect <Create>b__1(PRISM.Definitions.MstLiveSupportEffectType master);
    }

    private class <>c__DisplayClass9_1
    {
        public LiveActiveSupportEffectType type;
        public <>c__DisplayClass9_0 CS$<>8__locals1;
        private System.ValueTuple<PRISM.RhythmGame.LiveSupportMember, int> <Create>b__2(PRISM.RhythmGame.LiveSupportMember x);
    }
}

// Namespace: PRISM.RhythmGame
public class EvaluationUpSkillEffect : PRISM.RhythmGame.RhythmGameLiveSkillEffect, PRISM.RhythmGame.IEvaluationUpSkillEffect
{
    public PRISM.RhythmGame.RhythmGameSkillAnimationType AnimationType { get; set; }
    public PRISM.RhythmGame.JudgmentResultType UpgradeEvaluation(PRISM.RhythmGame.JudgmentResultType type);
}

// Namespace: PRISM.RhythmGame
public interface IEvaluationUpSkillEffect
{
    public PRISM.RhythmGame.JudgmentResultType UpgradeEvaluation(PRISM.RhythmGame.JudgmentResultType type);
}

// Namespace: PRISM.RhythmGame
public class PerfectEvaluationUpSkillEffect : PRISM.RhythmGame.RhythmGameLiveSkillEffect, PRISM.RhythmGame.IEvaluationUpSkillEffect
{
    public PRISM.RhythmGame.RhythmGameSkillAnimationType AnimationType { get; set; }
    public PRISM.RhythmGame.JudgmentResultType UpgradeEvaluation(PRISM.RhythmGame.JudgmentResultType type);
}

// Namespace: PRISM.RhythmGame
public class InvulnerableSkillEffect : PRISM.RhythmGame.RhythmGameLiveSkillEffect
{
    public PRISM.RhythmGame.RhythmGameSkillAnimationType AnimationType { get; set; }
}

// Namespace: PRISM.RhythmGame
public interface ILifeChangeSkillEffect
{
    public int LifeChangeValue { get; set; }
}

// Namespace: PRISM.RhythmGame
public class LifeDownSkillEffect : PRISM.RhythmGame.RhythmGameLiveSkillEffect, PRISM.RhythmGame.ILifeChangeSkillEffect
{
    private int <LifeChangeValue>k__BackingField;
    public PRISM.RhythmGame.RhythmGameSkillAnimationType AnimationType { get; set; }
    public int LifeChangeValue { get; set; }
}

// Namespace: PRISM.RhythmGame
public class RecoverySkillEffect : PRISM.RhythmGame.RhythmGameLiveSkillEffect, PRISM.RhythmGame.ILifeChangeSkillEffect
{
    private int <LifeChangeValue>k__BackingField;
    public PRISM.RhythmGame.RhythmGameSkillAnimationType AnimationType { get; set; }
    public int LifeChangeValue { get; set; }
}

// Namespace: PRISM.RhythmGame
public class MistakeFollowSkillEffect : PRISM.RhythmGame.RhythmGameLiveSkillEffect
{
    private int scoreRate;
    private int perfectRate;
    private int greatRate;
    public PRISM.RhythmGame.RhythmGameSkillAnimationType AnimationType { get; set; }
    public PRISM.RhythmGame.MistakeFollowResult GetResult();
}

// Namespace: PRISM.RhythmGame
public struct MistakeFollowResult : System.ValueType, System.IEquatable<PRISM.RhythmGame.MistakeFollowResult>
{
    private PRISM.RhythmGame.JudgmentResultType <JudgmentResultType>k__BackingField;
    private int <ScoreRate>k__BackingField;
    public PRISM.RhythmGame.JudgmentResultType JudgmentResultType { get; set; }
    public int ScoreRate { get; set; }
    public float GetPower();
    public string ToString();
    private bool PrintMembers(System.Text.StringBuilder builder);
    public static bool op_Inequality(PRISM.RhythmGame.MistakeFollowResult left, PRISM.RhythmGame.MistakeFollowResult right);
    public static bool op_Equality(PRISM.RhythmGame.MistakeFollowResult left, PRISM.RhythmGame.MistakeFollowResult right);
    public int GetHashCode();
    public bool Equals(object obj);
    public bool Equals(PRISM.RhythmGame.MistakeFollowResult other);
    public void Deconstruct(PRISM.RhythmGame.JudgmentResultType& JudgmentResultType, int& ScoreRate);
}

// Namespace: PRISM.RhythmGame
public class RhythmGameLiveSkillEffect
{
    public static float EffectDivisor;
    private static float DurationDivisor;
    public PRISM.RhythmGame.BitSupportMemberPosition SupportMemberPosition;
    private float <EndTime>k__BackingField;
    private float duration;
    private float startTime;
    private bool isActivated;
    public PRISM.RhythmGame.RhythmGameSkillAnimationType AnimationType { get; set; }
    public float EndTime { get; set; }
    public void Activate(float startTime);
    public bool IsActive(float currentTime);
}

// Namespace: PRISM.RhythmGame
public class ComboBonus2SkillEffect : PRISM.RhythmGame.RhythmGameLiveSkillEffect, PRISM.RhythmGame.IScoreUpSkillEffect
{
    private float scoreUpRate1;
    private float scoreUpRate2;
    private int conditionCombo1;
    private int conditionCombo2;
    public PRISM.RhythmGame.RhythmGameSkillAnimationType AnimationType { get; set; }
    public float GetScoreUpRate(PRISM.RhythmGame.RhythmGameState state, PRISM.RhythmGame.JudgmentResult judgement);
}

// Namespace: PRISM.RhythmGame
public class FlickScoreUpSkillEffect : PRISM.RhythmGame.RhythmGameLiveSkillEffect, PRISM.RhythmGame.IScoreUpSkillEffect
{
    private float matchScoreUpRate;
    private float otherScoreUpRate;
    public PRISM.RhythmGame.RhythmGameSkillAnimationType AnimationType { get; set; }
    public float GetScoreUpRate(PRISM.RhythmGame.RhythmGameState state, PRISM.RhythmGame.JudgmentResult judgement);
}

// Namespace: PRISM.RhythmGame
public interface IScoreUpSkillEffect
{
    public float GetScoreUpRate(PRISM.RhythmGame.RhythmGameState state, PRISM.RhythmGame.JudgmentResult judgement);
}

// Namespace: PRISM.RhythmGame
public class LongScoreUpSkillEffect : PRISM.RhythmGame.RhythmGameLiveSkillEffect, PRISM.RhythmGame.IScoreUpSkillEffect
{
    private float matchScoreUpRate;
    private float otherScoreUpRate;
    public PRISM.RhythmGame.RhythmGameSkillAnimationType AnimationType { get; set; }
    public float GetScoreUpRate(PRISM.RhythmGame.RhythmGameState state, PRISM.RhythmGame.JudgmentResult judgement);
}

// Namespace: PRISM.RhythmGame
public class PerfectScoreUpSkillEffect : PRISM.RhythmGame.RhythmGameLiveSkillEffect, PRISM.RhythmGame.IScoreUpSkillEffect
{
    private float matchScoreUpRate;
    private float otherScoreUpRate;
    public PRISM.RhythmGame.RhythmGameSkillAnimationType AnimationType { get; set; }
    public float GetScoreUpRate(PRISM.RhythmGame.RhythmGameState state, PRISM.RhythmGame.JudgmentResult judgement);
}

// Namespace: PRISM.RhythmGame
public class ScoreUpSkillEffect : PRISM.RhythmGame.RhythmGameLiveSkillEffect, PRISM.RhythmGame.IScoreUpSkillEffect
{
    private float scoreUpRate;
    public PRISM.RhythmGame.RhythmGameSkillAnimationType AnimationType { get; set; }
    public float GetScoreUpRate(PRISM.RhythmGame.RhythmGameState state, PRISM.RhythmGame.JudgmentResult judgement);
}

// Namespace: PRISM.RhythmGame
public class ComboBonusSkillEffect : PRISM.RhythmGame.RhythmGameLiveSkillEffect, PRISM.RhythmGame.IScoreUpSkillEffect
{
    private PRISM.RhythmGame.StepScoreUpData stepData;
    public PRISM.RhythmGame.RhythmGameSkillAnimationType AnimationType { get; set; }
    public float GetScoreUpRate(PRISM.RhythmGame.RhythmGameState state, PRISM.RhythmGame.JudgmentResult judgement);
}

// Namespace: PRISM.RhythmGame
public class HighLifeScoreUpSkillEffect : PRISM.RhythmGame.RhythmGameLiveSkillEffect, PRISM.RhythmGame.IScoreUpSkillEffect
{
    private PRISM.RhythmGame.StepScoreUpData stepData;
    public PRISM.RhythmGame.RhythmGameSkillAnimationType AnimationType { get; set; }
    public float GetScoreUpRate(PRISM.RhythmGame.RhythmGameState state, PRISM.RhythmGame.JudgmentResult judgement);
}

// Namespace: PRISM.RhythmGame
public class PinchScoreUpSkillEffect : PRISM.RhythmGame.RhythmGameLiveSkillEffect, PRISM.RhythmGame.IScoreUpSkillEffect
{
    private PRISM.RhythmGame.StepScoreUpData stepData;
    public PRISM.RhythmGame.RhythmGameSkillAnimationType AnimationType { get; set; }
    public float GetScoreUpRate(PRISM.RhythmGame.RhythmGameState state, PRISM.RhythmGame.JudgmentResult judgement);
}

// Namespace: PRISM.RhythmGame
public struct StepScoreUpData : System.ValueType
{
    private float minScoreUpRate;
    private float maxScoreUpRate;
    private int step;
    private float scoreUpRateByStep;
    public float GetScoreUpRate(int value);
}

// Namespace: PRISM.RhythmGame
public class LiveSkillFactory
{
    public static System.Collections.Generic.IReadOnlyList<PRISM.RhythmGame.RhythmGameLiveSkill> Create(PRISM.Live.LiveStartData liveStartData);
    public static PRISM.RhythmGame.RhythmGameLiveSkillEffect CreateLiveSkillEffect(PRISM.Definitions.IMstLiveSkillDetail effect, System.ValueTuple<PRISM.RhythmGame.BitSupportMemberPosition, int, int> supportEffect);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Live.LiveIdol, int, System.ValueTuple<PRISM.Live.LiveIdol, int>> <>9__0_0;
        public static System.Func<System.ValueTuple<PRISM.Live.LiveIdol, int>, int> <>9__0_1;
        private System.ValueTuple<PRISM.Live.LiveIdol, int> <Create>b__0_0(PRISM.Live.LiveIdol idol, int index);
        private int <Create>b__0_1(System.ValueTuple<PRISM.Live.LiveIdol, int> x);
    }

    private class <>c__DisplayClass0_0
    {
        public PRISM.Definitions.MasterData masterData;
        public PRISM.Live.LiveStartData liveStartData;
        private PRISM.RhythmGame.RhythmGameLiveSkill <Create>b__2(System.ValueTuple<PRISM.Live.LiveIdol, int> x);
    }
}

// Namespace: PRISM.RhythmGame
public class LiveSkillService
{
    private System.Collections.Generic.IReadOnlyList<PRISM.RhythmGame.RhythmGameLiveSkill> skills;
    private System.Collections.Generic.IReadOnlyList<PRISM.RhythmGame.LiveActiveSupportEffect> supportEffects;
    private System.Collections.Generic.List<PRISM.RhythmGame.RhythmGameLiveSkillEffect> activeSkillEffects;
    private PRISM.RhythmGame.RhythmGameSkillAnimationType <ActiveAnimationType>k__BackingField;
    private PRISM.RhythmGame.BitSupportMemberPosition <ActiveSupportMemberPosition>k__BackingField;
    public PRISM.RhythmGame.RhythmGameSkillAnimationType ActiveAnimationType { get; set; }
    public PRISM.RhythmGame.BitSupportMemberPosition ActiveSupportMemberPosition { get; set; }
    public PRISM.RhythmGame.RhythmGameLiveSkill Activate(int index, float startTime, bool isTapSucceed);
    public PRISM.RhythmGame.LiveActiveSupportEffect ActivateSupportEffect(float currentTime);
    public System.Collections.Generic.IEnumerable<int> GetActivatedSkillSlots();
    public void UpdateActiveSkillEffects(float currentTime);
    public float GetScoreUpCoefficient(PRISM.RhythmGame.RhythmGameState state, PRISM.RhythmGame.JudgmentResult judgement);
    public PRISM.RhythmGame.JudgmentResultType GetUpgradedJudgmentResultType(PRISM.RhythmGame.JudgmentResultType type);
    public bool IsActiveInvulnerable();
    public PRISM.RhythmGame.MistakeFollowResult GetMistakeFollowResult();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.RhythmGame.RhythmGameLiveSkill, bool> <>9__14_0;
        public static System.Func<PRISM.RhythmGame.RhythmGameLiveSkill, int> <>9__14_1;
        private bool <GetActivatedSkillSlots>b__14_0(PRISM.RhythmGame.RhythmGameLiveSkill x);
        private int <GetActivatedSkillSlots>b__14_1(PRISM.RhythmGame.RhythmGameLiveSkill x);
    }
}

// Namespace: PRISM.RhythmGame
public class LiveSupportEffect
{
    public PRISM.Definitions.MstLiveSupportEffectDetail Master;
    public int EffectValue;
    public int EffectTime;
    public bool IsValid(PRISM.Live.LiveIdol casterIdol, PRISM.Definitions.MstLiveSkillLevel skill, PRISM.Definitions.MstLiveSkillDetail skillEffect, PRISM.Live.LiveStartData liveStartData);

    private class <>c__DisplayClass4_0
    {
        public PRISM.Live.LiveStartData liveStartData;
        private bool <IsValid>b__0(int id);
    }

    private class <>c__DisplayClass4_1
    {
        public int id;
        private bool <IsValid>b__1(PRISM.Live.LiveIdol idol);
    }
}

// Namespace: PRISM.RhythmGame
public class LiveSupportMember
{
    public PRISM.RhythmGame.BitSupportMemberPosition Position;
    public PRISM.Definitions.MstSupportCharacter Character;
    public int Level;
    public System.Collections.Generic.IReadOnlyList<PRISM.RhythmGame.LiveSupportEffect> Effects;
    public int GetActiveSupportEffectValue(LiveActiveSupportEffectType type, PRISM.Live.LiveStartData liveStartData);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.RhythmGame.LiveSupportEffect, int> <>9__5_2;
        private int <GetActiveSupportEffectValue>b__5_2(PRISM.RhythmGame.LiveSupportEffect x);
    }

    private class <>c__DisplayClass4_0
    {
        public int diamond;
        private PRISM.RhythmGame.LiveSupportEffect <.ctor>b__0(PRISM.Definitions.MstLiveSupportEffectDetail detail);
    }

    private class <>c__DisplayClass5_0
    {
        public LiveActiveSupportEffectType type;
        public PRISM.Live.LiveStartData liveStartData;
        private bool <GetActiveSupportEffectValue>b__0(PRISM.RhythmGame.LiveSupportEffect x);
        private bool <GetActiveSupportEffectValue>b__1(PRISM.RhythmGame.LiveSupportEffect x);
    }
}

// Namespace: PRISM.RhythmGame
public class RhythmGameLiveSkill
{
    private string <Text>k__BackingField;
    private string <ConvertedText>k__BackingField;
    private PRISM.Live.LiveIdol <CasterIdol>k__BackingField;
    private PRISM.RhythmGame.RhythmGameLiveSkillEffect[] <Effects>k__BackingField;
    private bool <IsActivated>k__BackingField;
    private bool <IsAutoActivate>k__BackingField;
    public int Slot;
    public string Text { get; set; }
    public string ConvertedText { get; set; }
    public PRISM.Live.LiveIdol CasterIdol { get; set; }
    public PRISM.RhythmGame.RhythmGameLiveSkillEffect[] Effects { get; set; }
    public bool IsActivated { get; set; }
    public bool IsAutoActivate { get; set; }
    public void Activate(float startTime);
    public int GetLifeChangeValue();

    private class <>c__DisplayClass20_0
    {
        public PRISM.Live.LiveIdol casterIdol;
        public PRISM.Live.LiveStartData liveStartData;
        private bool <.ctor>b__2(PRISM.Live.LiveIdol x);
    }

    private class <>c__DisplayClass20_1
    {
        public PRISM.Definitions.MstLiveSkillLevel skill;
        public <>c__DisplayClass20_0 CS$<>8__locals1;
        private PRISM.RhythmGame.RhythmGameLiveSkillEffect <.ctor>b__0(PRISM.Definitions.MstLiveSkillDetail effect);
        private bool <.ctor>g__IsSkillRepeat|1();
    }
}

// Namespace: PRISM.RhythmGame
public enum RhythmGameSkillAnimationType : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.RhythmGameSkillAnimationType ScoreUp;
    public static PRISM.RhythmGame.RhythmGameSkillAnimationType ComboBonus;
    public static PRISM.RhythmGame.RhythmGameSkillAnimationType EvaluationUp;
    public static PRISM.RhythmGame.RhythmGameSkillAnimationType PerfectEvaluationUp;
    public static PRISM.RhythmGame.RhythmGameSkillAnimationType Recovery;
    public static PRISM.RhythmGame.RhythmGameSkillAnimationType Damage;
    public static PRISM.RhythmGame.RhythmGameSkillAnimationType Invulnerable;
    public static PRISM.RhythmGame.RhythmGameSkillAnimationType PinchScoreUp;
    public static PRISM.RhythmGame.RhythmGameSkillAnimationType HighLifeScoreUp;
    public static PRISM.RhythmGame.RhythmGameSkillAnimationType MistakeFollow;
}

// Namespace: PRISM.RhythmGame
public class RhythmGameSkillAnimationTypeExtensions
{
    public static bool HasFlagAny(PRISM.RhythmGame.RhythmGameSkillAnimationType self, PRISM.RhythmGame.RhythmGameSkillAnimationType flags);
}

// Namespace: PRISM.RhythmGame
public class NoteTimeManager
{
    private System.Collections.Generic.List<Data> list;
    public void Add(float tick, float multiplier);
    public void Sort();
    public float GetTime(float tick);
    public float GetTick(float time);

    private struct Data : System.ValueType
    {
        public float Tick;
        public float Multiplier;
        public float TotalTime;
        public float GetTime(float tick);
        public float GetTick(float time);
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<Data, float> <>9__4_0;
        private float <Sort>b__4_0(Data t);
    }
}

// Namespace: PRISM.RhythmGame
public enum NoteType : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.NoteType None;
    public static PRISM.RhythmGame.NoteType Regular;
    public static PRISM.RhythmGame.NoteType Flick;
    public static PRISM.RhythmGame.NoteType SlideStart;
    public static PRISM.RhythmGame.NoteType SlideJoint;
    public static PRISM.RhythmGame.NoteType SlideEnd;
    public static PRISM.RhythmGame.NoteType Skill;
    public static PRISM.RhythmGame.NoteType Auto;
    public static PRISM.RhythmGame.NoteType SlideInvisible;
    public static PRISM.RhythmGame.NoteType Kime;
}

// Namespace: PRISM.RhythmGame
public class NoteTypeExtensions
{
    public static bool IsComboTarget(PRISM.RhythmGame.NoteType type);
    public static bool IsKeyBeamTarget(PRISM.RhythmGame.NoteType type);
}

// Namespace: PRISM.RhythmGame
public class FlickNote : PRISM.RhythmGame.SpriteNoteBase
{
    private UnityEngine.SpriteRenderer arrowSpriteRenderer;
    private UnityEngine.Transform arrowContainer;
    private float arrowOffsetToEdge;
    private float arrowSpace;
    private float arrowFadeDuration;
    private System.Collections.Generic.List<UnityEngine.SpriteRenderer> arrowSpriteRenderers;
    public void Initialize(PRISM.RhythmGame.NoteState state);
}

// Namespace: PRISM.RhythmGame
public class FlickNoteFixed : PRISM.RhythmGame.SpriteNoteBase
{
    private UnityEngine.SpriteRenderer arrowSpriteRendererOut;
    private UnityEngine.SpriteMask arrowMask;
    private UnityEngine.Sprite[] arrowSpriteArray;
    public void Initialize(PRISM.RhythmGame.NoteState state);
}

// Namespace: PRISM.RhythmGame
public class FlickNoteLinear : PRISM.RhythmGame.SpriteNoteBase
{
    private UnityEngine.SpriteRenderer arrowSpriteRenderer;
    private UnityEngine.Transform arrowContainer;
    private float arrowOffsetToEdge;
    private float arrowSpace;
    private float arrowFadeDuration;
    private System.Collections.Generic.List<UnityEngine.SpriteRenderer> arrowSpriteRenderers;
    public void Initialize(PRISM.RhythmGame.NoteState state);
    private static void <Initialize>g__SetAlpha|6_0(UnityEngine.SpriteRenderer sprite, float alpha);
}

// Namespace: PRISM.RhythmGame
public class JudgeLine : UnityEngine.MonoBehaviour
{
    private UnityEngine.ParticleSystem tapSucceedEffect;
    private UnityEngine.ParticleSystem holdSucceedEffect;
    private UnityEngine.SpriteRenderer judgeLineSprite;
    private UnityEngine.Color _judgeLineColor;
    private bool isHoldEffectPlaying;
    private void Awake();
    public void PlayTapSucceedEffect();
    public void UpdateHoldSucceedEffect(bool isOn);
    public void SetAlpha(float alpha);
}

// Namespace: PRISM.RhythmGame
public class KeyBeam : UnityEngine.MonoBehaviour
{
    private UnityEngine.SpriteRenderer _spriteRenderer;
    private float _fadeOutSeconds;
    private DG.Tweening.Core.TweenerCore<UnityEngine.Color, UnityEngine.Color, DG.Tweening.Plugins.Options.ColorOptions> tweener;
    private void Awake();
    public void PlayAnimation();
}

// Namespace: PRISM.RhythmGame
public class Lane : UnityEngine.MonoBehaviour
{
    private PRISM.RhythmGame.KeyBeam _laneEffectSpriteRenderer;
    private UnityEngine.SpriteRenderer[] _laneSprites;
    private System.Collections.Generic.List<PRISM.RhythmGame.KeyBeam> laneEffectSpriteRenderers;
    private UnityEngine.Color[] _laneBaseColors;
    private void Awake();
    public void Render(PRISM.ReadOnlyHashSet<int> keyBeamOnIndices);
    public void SetAlpha(float alpha);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.SpriteRenderer, UnityEngine.Color> <>9__4_0;
        private UnityEngine.Color <Awake>b__4_0(UnityEngine.SpriteRenderer x);
    }
}

// Namespace: PRISM.RhythmGame
public class NoteBase : UnityEngine.MonoBehaviour
{
    private bool isActive;
    public void Initialize(PRISM.RhythmGame.NoteState state);
    public void Render(PRISM.RhythmGame.NoteState noteState, float renderTime, PRISM.RhythmGame.RhythmGameOption option);
    protected void _render(PRISM.RhythmGame.NoteState noteState, float timeRate);
    protected void _setActive(bool isActive);
}

// Namespace: PRISM.RhythmGame
public class NoteLine : UnityEngine.MonoBehaviour
{
    private UnityEngine.MeshFilter _meshFilter;
    private UnityEngine.Mesh mesh;
    private bool isActive;
    private float TextureBorderU { get; set; }
    private float MeshBorderSpace { get; set; }
    private float MeshBorderWidth { get; set; }
    private UnityEngine.Color NotJudgeColor { get; set; }
    private UnityEngine.Color SuccessColor { get; set; }
    private UnityEngine.Color FailureColor { get; set; }
    private void Start();
    public NoteLineRenderResult Render(PRISM.RhythmGame.NoteLineState state, float renderTime, float musicTime, PRISM.RhythmGame.RhythmGameOption option, Context context);
    private void _setActive(bool isActive);

    public class Context
    {
        public System.Collections.Generic.List<UnityEngine.Vector3> Vertices;
        public System.Collections.Generic.List<UnityEngine.Vector3> UV;
        public System.Collections.Generic.List<UnityEngine.Color> Colors;
        public System.Collections.Generic.List<int> Triangles;
    }

    public struct NoteLineRenderResult : System.ValueType
    {
        public bool IsRendering;
        public bool IsJudging;
        public float JudgePosition;
        public static NoteLineRenderResult NotRendering;
    }
}

// Namespace: PRISM.RhythmGame
public class SimultaneousLine : UnityEngine.MonoBehaviour
{
    private UnityEngine.SpriteRenderer spriteRenderer;
    private bool isActive;
    public void Initialize(PRISM.RhythmGame.SimultaneousLineState entity);
    public void Render(PRISM.RhythmGame.SimultaneousLineState state, float renderTime, PRISM.RhythmGame.RhythmGameOption option);
    private void _setActive(bool isActive);
}

// Namespace: PRISM.RhythmGame
public struct SimultaneousLineState : System.ValueType
{
    public int Id;
    public float Min;
    public float Max;
    public float DisplayTime;
    public PRISM.RhythmGame.NoteState[] LinkedNotes;
    public bool HasAnyJudgesNote();
}

// Namespace: PRISM.RhythmGame
public class SkillNote : PRISM.RhythmGame.NoteBase
{
    private UnityEngine.SpriteRenderer spriteRenderer;
    private UnityEngine.SpriteRenderer effectOuterSprite;
    private UnityEngine.Vector2 outerSpriteMarginUnit;
    private UnityEngine.SpriteRenderer effectInnerSprite;
    private UnityEngine.Vector2 innerSpriteMarginUnit;
    protected void _render(PRISM.RhythmGame.NoteState noteState, float timeRate);
    private static void <_render>g__ResizeEffectSprite|5_0(UnityEngine.SpriteRenderer sprite, UnityEngine.Vector2 marginUnit, <>c__DisplayClass5_0& );

    private struct <>c__DisplayClass5_0 : System.ValueType
    {
        public UnityEngine.Vector2 noteSize;
        public float spriteNoteHeight;
    }
}

// Namespace: PRISM.RhythmGame
public class SlideJointNote : PRISM.RhythmGame.SpriteNoteBase
{
    private UnityEngine.SpriteRenderer iconSpriteRenderer;
    protected void _render(PRISM.RhythmGame.NoteState noteState, float timeRate);
}

// Namespace: PRISM.RhythmGame
public class SlideStartNote : PRISM.RhythmGame.SpriteNoteBase
{
}

// Namespace: PRISM.RhythmGame
public class SpriteNoteBase : PRISM.RhythmGame.NoteBase
{
    protected UnityEngine.SpriteRenderer _spriteRenderer;
    protected void _render(PRISM.RhythmGame.NoteState noteState, float timeRate);
}

// Namespace: PRISM.RhythmGame
public class RhythmGameOption : ENTERPRISE.Data.LegacySaveDataBase
{
    public PRISM.RhythmGame.RhythmGameOptionBasic Basic;
    public PRISM.RhythmGame.RhythmGameOptionDetail Detail;
    public PRISM.RhythmGame.RhythmGameOptionSound Sound;
    public bool IsDefault();
    public void Reset();
}

// Namespace: PRISM.RhythmGame
public interface IRhythmGameOption
{
    public bool IsDefault();
    public void Reset(bool isCallFromRhythmGame);
}

// Namespace: PRISM.RhythmGame
public class RhythmGameOptionBasic : PRISM.RhythmGame.IRhythmGameOption
{
    private static PRISM.RhythmGame.RhythmGameOptionBasic Default;
    public float HighSpeed;
    public float NoteOffset;
    public float NoteDrawOffset;
    public float BackgroundBrightness;
    public float LaneAlpha;
    public bool ShowSimultaneousLine;
    public bool UseVibration;
    private PRISM.RhythmGame.LiveBackgroundMode BackgroundMode;
    private float renderSeconds;
    private float currentRenderSecondsHighSpeed;
    public float NoteOffsetSeconds { get; set; }
    public float NoteDrawOffsetSeconds { get; set; }
    public PRISM.RhythmGame.LiveBackgroundMode BackgroundModeForMigrate { get; set; }
    public float RenderSeconds { get; set; }
    private static float _getRenderSeconds(float highSpeed);
    public bool IsDefault();
    public void Reset(bool isCallFromRhythmGame);
}

// Namespace: PRISM.RhythmGame
public class RhythmGameOptionDetail : PRISM.RhythmGame.IRhythmGameOption
{
    private static PRISM.RhythmGame.RhythmGameOptionDetail Default;
    public int NoteDesignIndex;
    public int NoteEffectDesignIndex;
    public bool ShowNoteEffect;
    public bool ShowLifeGauge;
    public bool ShowLifeWarning;
    public bool ShowScoreGauge;
    public PRISM.RhythmGame.RhythmGameOptionComboShowType ComboShowType;
    public bool ShowGreatComboEffect;
    public bool ShowPerfectComboEffect;
    public bool ShowShinyComboEffect;
    public bool ShowSpecialNumberComboEffect;
    public PRISM.RhythmGame.RhythmGameOptionJudgementShowType JudgementShowType;
    public PRISM.RhythmGame.RhythmGameOptionJudgementShowPositionType JudgementShowPositionType;
    public PRISM.RhythmGame.RhythmGameOptionJudgementShowJudgementLagType ShowJudgementLagType;
    public bool ShowPerfectJudgementLag;
    public PRISM.RhythmGame.RhythmGameOptionTechnicalScoreShowType TechnicalScoreShowType;
    public PRISM.RhythmGame.RhythmGameOptionTechnicalScoreShowPositionType TechnicalScoreShowPositionType;
    public PRISM.RhythmGame.RhythmGameOptionTechnicalScoreCalculationType TechnicalScoreCalculationType;
    public bool ShowSkillCutin;
    public bool ShowSkillEffect;
    public PRISM.RhythmGame.RhythmGameOptionSupportEffectType SupportEffectType;
    public bool ShowKeyBeam;
    public float LaneCutRate;
    public bool IsMirror;
    public bool ShowShinyEffect;
    public PRISM.RhythmGame.RhythmGameOptionFrameRateType FrameRateType;
    public bool IsDefault();
    public void Reset(bool isCallFromRhythmGame);
}

// Namespace: PRISM.RhythmGame
public enum LiveBackgroundMode : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.LiveBackgroundMode _3DMV;
    public static PRISM.RhythmGame.LiveBackgroundMode _2DMV;
    public static PRISM.RhythmGame.LiveBackgroundMode Lightweight;
}

// Namespace: PRISM.RhythmGame
public enum RhythmGameOptionComboShowType : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.RhythmGameOptionComboShowType Right;
    public static PRISM.RhythmGame.RhythmGameOptionComboShowType Center;
    public static PRISM.RhythmGame.RhythmGameOptionComboShowType None;
}

// Namespace: PRISM.RhythmGame
public enum RhythmGameOptionJudgementShowType : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.RhythmGameOptionJudgementShowType Center;
    public static PRISM.RhythmGame.RhythmGameOptionJudgementShowType EachLane;
    public static PRISM.RhythmGame.RhythmGameOptionJudgementShowType None;
}

// Namespace: PRISM.RhythmGame
public enum RhythmGameOptionJudgementShowPositionType : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.RhythmGameOptionJudgementShowPositionType Upper;
    public static PRISM.RhythmGame.RhythmGameOptionJudgementShowPositionType Center;
    public static PRISM.RhythmGame.RhythmGameOptionJudgementShowPositionType CenterLower;
    public static PRISM.RhythmGame.RhythmGameOptionJudgementShowPositionType Lower;
}

// Namespace: PRISM.RhythmGame
public enum RhythmGameOptionJudgementShowJudgementLagType : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.RhythmGameOptionJudgementShowJudgementLagType AboveJudge;
    public static PRISM.RhythmGame.RhythmGameOptionJudgementShowJudgementLagType FixedCenter;
    public static PRISM.RhythmGame.RhythmGameOptionJudgementShowJudgementLagType FixedRight;
    public static PRISM.RhythmGame.RhythmGameOptionJudgementShowJudgementLagType None;
}

// Namespace: PRISM.RhythmGame
public enum RhythmGameOptionTechnicalScoreShowType : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.RhythmGameOptionTechnicalScoreShowType Right;
    public static PRISM.RhythmGame.RhythmGameOptionTechnicalScoreShowType Center;
    public static PRISM.RhythmGame.RhythmGameOptionTechnicalScoreShowType None;
}

// Namespace: PRISM.RhythmGame
public enum RhythmGameOptionTechnicalScoreShowPositionType : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.RhythmGameOptionTechnicalScoreShowPositionType Upper;
    public static PRISM.RhythmGame.RhythmGameOptionTechnicalScoreShowPositionType Center;
    public static PRISM.RhythmGame.RhythmGameOptionTechnicalScoreShowPositionType Lower;
}

// Namespace: PRISM.RhythmGame
public enum RhythmGameOptionTechnicalScoreCalculationType : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.RhythmGameOptionTechnicalScoreCalculationType Reduction;
    public static PRISM.RhythmGame.RhythmGameOptionTechnicalScoreCalculationType Addition;
}

// Namespace: PRISM.RhythmGame
public enum RhythmGameOptionSupportEffectType : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.RhythmGameOptionSupportEffectType StartEffectAndMemberDisplay;
    public static PRISM.RhythmGame.RhythmGameOptionSupportEffectType MemberDisplay;
    public static PRISM.RhythmGame.RhythmGameOptionSupportEffectType None;
}

// Namespace: PRISM.RhythmGame
public enum RhythmGameOptionFrameRateType : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.RhythmGameOptionFrameRateType Default;
    public static PRISM.RhythmGame.RhythmGameOptionFrameRateType High;
}

// Namespace: PRISM.RhythmGame
public enum RhythmGameOptionStartVoiceType : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.RhythmGameOptionStartVoiceType Random;
    public static PRISM.RhythmGame.RhythmGameOptionStartVoiceType Center;
    public static PRISM.RhythmGame.RhythmGameOptionStartVoiceType None;
}

// Namespace: PRISM.RhythmGame
public class RhythmGameOptionSound : PRISM.RhythmGame.IRhythmGameOption
{
    private static PRISM.RhythmGame.RhythmGameOptionSound Default;
    public PRISM.Legacy.SoundVolumeSettings Bgm;
    public PRISM.Legacy.SoundVolumeSettings SE;
    public PRISM.Legacy.SoundVolumeSettings Voice;
    public PRISM.RhythmGame.RhythmGameOptionStartVoiceType StartVoiceType;
    public int TapSEIndex;
    public int FlickSEIndex;
    public int KimeSEIndex { get; set; }
    public bool IsDefault();
    public void Reset(bool isCallFromRhythmGame);
    public void ApplyVolumes();
}

// Namespace: PRISM.RhythmGame
public struct RhythmGameBuildResult : System.ValueType
{
    public PRISM.RhythmGame.RhythmGameState State;
    public PRISM.RhythmGame.RhythmGameNotesState Notes;
    public PRISM.RhythmGame.RhythmGameObjectContainer ObjectContainer;
}

// Namespace: PRISM.RhythmGame
public class RhythmGameBuilder
{
    public static PRISM.RhythmGame.RhythmGameBuildResult LoadChart(PRISM.RhythmGame.IRhythmGameNoteDesign creator, PRISM.RhythmGame.ChartEntity chart, PRISM.RhythmGame.RhythmGameOption option);
    private static bool <LoadChart>g__IsTapNote|0_0(PRISM.RhythmGame.NoteState note);
    private static void <LoadChart>g__AddNote|0_1(PRISM.RhythmGame.NoteState noteStatus, PRISM.RhythmGame.NoteBase noteBase, <>c__DisplayClass0_0& );
    private static System.Collections.Generic.List<PRISM.RhythmGame.NoteLineGroup> <LoadChart>g___createNoteLineGroup|0_3(System.Collections.Generic.List<PRISM.RhythmGame.NoteLineState> noteLineEntities, <>c__DisplayClass0_0& );
    private static void <LoadChart>g__IterateHead|0_9(PRISM.RhythmGame.NoteState note, PRISM.RhythmGame.NoteLineState[] lines, <>c__DisplayClass0_1& );
    private static System.ValueTuple<System.Collections.Generic.List<PRISM.RhythmGame.NoteLineState>, PRISM.RhythmGame.NoteLine[], System.Collections.Generic.Dictionary<PRISM.RhythmGame.NoteLineState, PRISM.RhythmGame.NoteLineGroup>> <LoadChart>g___createNoteLine|0_4(System.Collections.Generic.Dictionary<PRISM.RhythmGame.NoteEntity, PRISM.RhythmGame.NoteState> noteEntityNoteStatusPair, <>c__DisplayClass0_0& );
    private static System.ValueTuple<System.Collections.Generic.List<PRISM.RhythmGame.SimultaneousLineState>, PRISM.RhythmGame.SimultaneousLine[]> <LoadChart>g___createSimultaneousLine|0_5(<>c__DisplayClass0_0& );
    private static System.ValueTuple<PRISM.RhythmGame.NoteState, PRISM.RhythmGame.NoteBase> <LoadChart>g___createNote|0_6(int id, PRISM.RhythmGame.NoteEntity note, <>c__DisplayClass0_0& );

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.RhythmGame.SpeedChangeEntity, float> <>9__0_7;
        public static System.Func<PRISM.RhythmGame.NoteState, float> <>9__0_2;
        public static System.Func<PRISM.RhythmGame.NoteState, bool> <>9__0_8;
        public static System.Func<PRISM.RhythmGame.NoteLineEntity, float> <>9__0_11;
        public static System.Func<PRISM.RhythmGame.NoteState, bool> <>9__0_12;
        public static System.Func<PRISM.RhythmGame.NoteState, float> <>9__0_13;
        public static System.Func<System.Linq.IGrouping<float, PRISM.RhythmGame.NoteState>, bool> <>9__0_14;
        public static System.Func<PRISM.RhythmGame.NoteState, float> <>9__0_15;
        public static System.Func<PRISM.RhythmGame.NoteState, float> <>9__0_16;
        private float <LoadChart>b__0_7(PRISM.RhythmGame.SpeedChangeEntity s);
        private float <LoadChart>b__0_2(PRISM.RhythmGame.NoteState note);
        private bool <LoadChart>b__0_8(PRISM.RhythmGame.NoteState note);
        private float <LoadChart>b__0_11(PRISM.RhythmGame.NoteLineEntity line);
        private bool <LoadChart>b__0_12(PRISM.RhythmGame.NoteState noteController);
        private float <LoadChart>b__0_13(PRISM.RhythmGame.NoteState note);
        private bool <LoadChart>b__0_14(System.Linq.IGrouping<float, PRISM.RhythmGame.NoteState> group);
        private float <LoadChart>b__0_15(PRISM.RhythmGame.NoteState x);
        private float <LoadChart>b__0_16(PRISM.RhythmGame.NoteState x);
    }

    private struct <>c__DisplayClass0_0 : System.ValueType
    {
        public PRISM.RhythmGame.NoteState[] notes;
        public PRISM.RhythmGame.NoteBase[] noteObjects;
        public System.Collections.Generic.List<PRISM.RhythmGame.NoteState> flickNotes;
        public System.Collections.Generic.List<PRISM.RhythmGame.NoteState> tapNotes;
        public System.Collections.Generic.List<PRISM.RhythmGame.NoteState> holdNotes;
        public PRISM.RhythmGame.ChartEntity chart;
        public PRISM.RhythmGame.IRhythmGameNoteDesign creator;
        public UnityEngine.Transform parent;
        public PRISM.RhythmGame.NoteTimeManager noteTimeManager;
    }

    private struct <>c__DisplayClass0_1 : System.ValueType
    {
        public System.Collections.Generic.List<PRISM.RhythmGame.NoteLineState> noteLineEntities;
        public System.Collections.Generic.List<PRISM.RhythmGame.NoteLineGroup> noteLineGroup;
    }

    private class <>c__DisplayClass0_2
    {
        public PRISM.RhythmGame.NoteState note;
        private bool <LoadChart>b__10(PRISM.RhythmGame.NoteLineState noteLine);
    }
}

// Namespace: PRISM.RhythmGame
public class RhythmGameConfig : UnityEngine.ScriptableObject
{
    private int <NoteDesignCount>k__BackingField;
    private int <NoteEffectDesignCount>k__BackingField;
    private int <TapSECount>k__BackingField;
    private int <FlickSECount>k__BackingField;
    public int NoteDesignCount { get; set; }
    public int NoteEffectDesignCount { get; set; }
    public int TapSECount { get; set; }
    public int FlickSECount { get; set; }
}

// Namespace: PRISM.RhythmGame
private class RhythmGameConstant
{
    public static int LaneCount;
    public static int MaxSkillCount;
    public static float LaneLength;
    public static float MinObjectVisibleTimeRate;
    public static float MaxObjectVisibleTimeRate;
}

// Namespace: PRISM.RhythmGame
public class RhythmGameFactory
{
    public static Cysharp.Threading.Tasks.UniTask<PRISM.RhythmGame.RhythmGamePresenter> LoadAndPlayAsync(PRISM.RhythmGame.RhythmGameLoader loader, PRISM.Live.LiveProgressManager progressManager, PRISM.Live.LiveStartData liveStartData, PRISM.IPausable mvPauser, float mvCameraDepth);

    private struct <LoadAndPlayAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.RhythmGame.RhythmGamePresenter> <>t__builder;
        public PRISM.RhythmGame.RhythmGameLoader loader;
        public PRISM.Live.LiveStartData liveStartData;
        public PRISM.Live.LiveProgressManager progressManager;
        public PRISM.IPausable mvPauser;
        public float mvCameraDepth;
        private PRISM.RhythmGame.RhythmGameOption <option>5__2;
        private PRISM.RhythmGame.RhythmGamePresenter <presenter>5__3;
        private Awaiter<System.ValueTuple<PRISM.RhythmGame.RhythmGameView, PRISM.RhythmGame.RhythmGameNoteDesign, PRISM.RhythmGame.ChartEntity>> <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.RhythmGame
public class RhythmGameLoader : PRISM.ResourceManagement.IResourceLoader, System.IDisposable
{
    private PRISM.ResourceManagement.IResourceLoader innerLoader;
    public Cysharp.Threading.Tasks.UniTask<PRISM.RhythmGame.RhythmGameConfig> LoadConfigAsync(System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask<PRISM.RhythmGame.RhythmGameView> LoadViewAsync(System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask<PRISM.RhythmGame.RhythmGameNoteDesign> LoadNoteDesignAsync(PRISM.RhythmGame.RhythmGameOption option, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask<PRISM.RhythmGame.JudgeEffectView> LoadJudgeEffectAsync(PRISM.RhythmGame.RhythmGameOption option, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask<PRISM.RhythmGame.VocalSeparatedController> LoadVocalSeparatedControllerAsync(string music, System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask<T> _loadGameObjectAsync<T>(string path, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask<T> LoadAsync<T>(string key, System.Threading.CancellationToken cancellationToken);
    public T UnsafeLoad<T>(string key);
    public void Dispose();

    private struct <_loadGameObjectAsync>d__7`1<T> : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<T> <>t__builder;
        public PRISM.RhythmGame.RhythmGameLoader <>4__this;
        public string path;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter<UnityEngine.GameObject> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.RhythmGame
public interface IRhythmGameNoteDesign
{
    public PRISM.RhythmGame.NoteBase CreateNote(UnityEngine.Transform parent, PRISM.RhythmGame.NoteType type, PRISM.RhythmGame.FlickDirection flickDirection);
    public PRISM.RhythmGame.NoteLine CreateNoteLine(UnityEngine.Transform parent);
    public PRISM.RhythmGame.SimultaneousLine CreateSimultaneousLine(UnityEngine.Transform parent);
}

// Namespace: PRISM.RhythmGame
public class RhythmGameNoteDesign : UnityEngine.MonoBehaviour, PRISM.RhythmGame.IRhythmGameNoteDesign
{
    private PRISM.RhythmGame.NoteBase[] _notePrefabs;
    private PRISM.RhythmGame.NoteBase[] _flickNotePrefabs;
    private PRISM.RhythmGame.NoteLine _noteLinePrefab;
    private PRISM.RhythmGame.SimultaneousLine simultaneousLinePrefab;
    public PRISM.RhythmGame.NoteBase CreateNote(UnityEngine.Transform parent, PRISM.RhythmGame.NoteType type, PRISM.RhythmGame.FlickDirection flickDirection);
    public PRISM.RhythmGame.NoteLine CreateNoteLine(UnityEngine.Transform parent);
    public PRISM.RhythmGame.SimultaneousLine CreateSimultaneousLine(UnityEngine.Transform parent);
    public PRISM.RhythmGame.PooledRhythmGameNoteDesign AsPooled();
}

// Namespace: PRISM.RhythmGame
public class PooledRhythmGameNoteDesign : PRISM.RhythmGame.IRhythmGameNoteDesign
{
    private Pool<PRISM.RhythmGame.NoteBase>[] notePools;
    private Pool<PRISM.RhythmGame.NoteBase>[] flickNotePools;
    private Pool<PRISM.RhythmGame.NoteLine> noteLinePool;
    private Pool<PRISM.RhythmGame.SimultaneousLine> simultaneousLinePool;
    public PRISM.RhythmGame.NoteBase CreateNote(UnityEngine.Transform parent, PRISM.RhythmGame.NoteType type, PRISM.RhythmGame.FlickDirection flickDirection);
    public PRISM.RhythmGame.NoteLine CreateNoteLine(UnityEngine.Transform parent);
    public PRISM.RhythmGame.SimultaneousLine CreateSimultaneousLine(UnityEngine.Transform parent);
    public void Reset();

    private class Pool`1<T>
    {
        private T prefab;
        private System.Collections.Generic.Queue<T> current;
        private System.Collections.Generic.Queue<T> next;
        public T Instantiate(UnityEngine.Transform parent);
        private T _instantiate(UnityEngine.Transform parent);
        public void Reset();
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.RhythmGame.NoteBase, Pool<PRISM.RhythmGame.NoteBase>> <>9__5_0;
        public static System.Func<PRISM.RhythmGame.NoteBase, Pool<PRISM.RhythmGame.NoteBase>> <>9__5_1;
        private Pool<PRISM.RhythmGame.NoteBase> <.ctor>b__5_0(PRISM.RhythmGame.NoteBase x);
        private Pool<PRISM.RhythmGame.NoteBase> <.ctor>b__5_1(PRISM.RhythmGame.NoteBase x);
    }
}

// Namespace: PRISM.RhythmGame
public class RhythmGameObjectContainer : UnityEngine.MonoBehaviour
{
    private PRISM.RhythmGame.NoteBase[] notes;
    private PRISM.RhythmGame.NoteLine[] noteLines;
    private PRISM.RhythmGame.SimultaneousLine[] simultaneousLines;
    public void Register(PRISM.RhythmGame.NoteBase[] notes, PRISM.RhythmGame.NoteLine[] noteLines, PRISM.RhythmGame.SimultaneousLine[] simultaneousLines);
    public PRISM.RhythmGame.NoteBase ResolveNote(int id);
    public PRISM.RhythmGame.NoteLine ResolveNoteLine(int id);
    public PRISM.RhythmGame.SimultaneousLine ResolveSimultaneousLine(int id);
}

// Namespace: PRISM.RhythmGame
public class RhythmGameObjectRenderService
{
    private PRISM.RhythmGame.RhythmGameView view;
    private PRISM.RhythmGame.RhythmGameOption option;
    private System.Collections.Generic.Dictionary<int, bool> needPlayNoteLineEffectDic;
    private Context noteLineContext;
    public bool Render(PRISM.RhythmGame.RhythmGameNotesState state, PRISM.RhythmGame.RhythmGameObjectContainer objectContainer, float musicTime);
}

// Namespace: PRISM.RhythmGame
public class RhythmGamePositionCalculator
{
    public static float GetSpriteNoteHeight(float timeRate);
    public static float GetPositionZ(float timeRate);
    public static bool TryGetPositionZ(float timeRate, float& z);
    private static float GetRate(float timeRate);
}

// Namespace: PRISM.RhythmGame
public class RhythmGamePresenter : Cysharp.Threading.Tasks.IUniTaskAsyncDisposable
{
    private PRISM.RhythmGame.RhythmGameLoader loader;
    private PRISM.RhythmGame.RhythmGameView view;
    private PRISM.Live.LiveProgressManager progressManager;
    private PRISM.RhythmGame.IRhythmGameNoteDesign noteDesign;
    private PRISM.RhythmGame.TouchInputService touchInputService;
    private PRISM.RhythmGame.LiveSkillService liveSkillService;
    private PRISM.RhythmGame.RhythmGameSoundService soundService;
    private PRISM.Live.LiveStartData liveStartData;
    private UniRx.CompositeDisposable disposables;
    private PRISM.RhythmGame.RhythmGameOption option;
    private PRISM.RhythmGame.RhythmGameObjectRenderService objectRenderService;
    private PRISM.RhythmGame.RhythmGameVibrateService vibrateService;
    private PRISM.Live.ILiveBehaviour liveBehaviour;
    private PRISM.RhythmGame.RhythmGameScoreService scoreService;
    private PRISM.RhythmGame.RhythmGameState state;
    private PRISM.RhythmGame.RhythmGameNotesState notes;
    private PRISM.RhythmGame.RhythmGameObjectContainer objectContainer;
    private PRISM.RhythmGame.JudgeService judgeService;
    private PRISM.RhythmGame.RhythmGameStatus status;
    private bool isViewerMode;
    private System.Threading.CancellationTokenSource cancellationTokenSource;
    private PRISM.IPausable mvPauser;
    private System.Collections.Generic.HashSet<int> keyBeamOnLaneIndices;
    private System.Threading.CancellationTokenSource resumeCountdownCancellationTokenSource;
    private bool IsAutoMode { get; set; }
    private void _initialize();
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(PRISM.RhythmGame.ChartEntity chartEntity, float mvCameraDepth);
    public Cysharp.Threading.Tasks.UniTask PlayAsync(float fadeDuration);
    public void PlaySe(string cueName);
    private void _finish();
    private void _judge(float currentTime);
    public void InvokeLiveSkill(int liveSkillIndex, float startTime, bool isTapSucceed);
    private void _update();
    private void _displaySkillEffect();
    private Cysharp.Threading.Tasks.UniTask _playFinishEffectAsync();
    private Cysharp.Threading.Tasks.UniTask _breakAsync();
    private void _pause();
    private Cysharp.Threading.Tasks.UniTask _resumeAsync();
    private Cysharp.Threading.Tasks.UniTask _retryAsync();
    private Cysharp.Threading.Tasks.UniTask _reloadAsync();
    private Cysharp.Threading.Tasks.UniTask _confirmBreakAsync();
    public Cysharp.Threading.Tasks.UniTask DisposeAsync();
    private void <_initialize>b__27_0(UniRx.Unit _);
    private void <_initialize>b__27_1(UniRx.Unit _);
    private void <_initialize>b__27_2(UniRx.Unit _);
    private void <_initialize>b__27_3(UniRx.Unit _);
    private void <_initialize>b__27_4(bool hasFocus);
    private void <_initialize>b__27_5(UniRx.Unit _);
    private bool <_initialize>b__27_6(long _);
    private void <_initialize>b__27_7(long _);
    private void <_initialize>b__27_8(UniRx.Unit _);
    private Cysharp.Threading.Tasks.UniTask <_finish>b__31_0();

    private struct <<_finish>b__31_0>d : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.RhythmGamePresenter <>4__this;
        private Awaiter<bool> <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Live.LiveIdol, PRISM.Definitions.MstProduceIdol> <>9__28_0;
        public static System.Action <>9__38_0;
        private PRISM.Definitions.MstProduceIdol <InitializeAsync>b__28_0(PRISM.Live.LiveIdol x);
        private void <_pause>b__38_0();
    }

    private struct <DisposeAsync>d__43 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.RhythmGamePresenter <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <InitializeAsync>d__28 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.RhythmGamePresenter <>4__this;
        public PRISM.RhythmGame.ChartEntity chartEntity;
        public float mvCameraDepth;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <PlayAsync>d__29 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.RhythmGamePresenter <>4__this;
        public float fadeDuration;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_breakAsync>d__37 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.RhythmGamePresenter <>4__this;
        private object <>7__wrap1;
        private int <>7__wrap2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_confirmBreakAsync>d__42 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.RhythmGamePresenter <>4__this;
        private Awaiter<bool> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_reloadAsync>d__41 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_resumeAsync>d__39 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.RhythmGamePresenter <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_retryAsync>d__40 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.RhythmGamePresenter <>4__this;
        private Awaiter <>u__1;
        private System.IDisposable <>7__wrap1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.RhythmGame
public class RhythmGameScoreService
{
    private float totalNoteCoefficient;
    private float scoreBase;
    private PRISM.Live.ScoreRankTarget targetScoreRanks;
    public static float GetLevelCoefficient(int level);
    public static float GetComboCoefficient(int combo);
    public static float GetJudgementResultCoefficient(PRISM.RhythmGame.JudgmentResultType type);
    public static float GetNoteCoefficient(PRISM.RhythmGame.NoteType type);
    public static float GetLifeCoefficient(int life);
    public ScoreRank GetRank(int score);
    public float GetEquidistantNormalizedScore(int score);
    public int Calculate(PRISM.RhythmGame.JudgmentResult judgmentResult, float skillCoefficient, int currentCombo, int currentLife);
    public int Calculate(PRISM.RhythmGame.NoteState targetNote, PRISM.RhythmGame.JudgmentResultType judgmentResultType, float skillCoefficient, int currentCombo, int currentLife);
    public static int GetPredictedScore(int unitTotalParameter, int totalNoteCount, int chartLevel);

    private class <>c__DisplayClass13_0
    {
        public float scoreBase;
        private float <GetPredictedScore>b__0(int i);
    }
}

// Namespace: PRISM.RhythmGame
public class RhythmGameSoundService : Cysharp.Threading.Tasks.IUniTaskAsyncDisposable
{
    private PRISM.SoundManager soundManager;
    private System.Collections.Generic.List<string> sheetNames;
    private CriWare.CriAtomExPlayer player;
    private CriWare.CriAtomExAcb seAcb;
    private System.Nullable<CriWare.CriAtomExPlayback> noteLinePlayback;
    private bool isDisposed;
    private System.Collections.Generic.Dictionary<int, System.ValueTuple<System.Func<CriWare.CriAtomExPlayback>, System.Func<CriWare.CriAtomExPlayback>>> playVoiceActions;
    private System.Collections.Generic.Dictionary<System.ValueTuple<string, int>, string> cueNameCache;
    private System.Collections.Generic.Dictionary<string, float> lastPlayTimes;
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(System.Collections.Generic.IEnumerable<PRISM.Definitions.MstProduceIdol> idols);
    public bool PlayNoteSe(float time, PRISM.RhythmGame.NoteType noteType, PRISM.RhythmGame.JudgmentResultType judgmentResultType, PRISM.RhythmGame.RhythmGameOptionSound option);
    public void UpdateNoteLineSe(bool isOn);
    public void PlayTapAirShotSe();
    public void PlayResumeCountDownSe();
    public void PlayFinishSe(PRISM.RhythmGame.ClearType clearType);
    public CriWare.CriAtomExPlayback PlayCharacterSkillVoice(int produceIdolId, bool isCenter);
    public Cysharp.Threading.Tasks.UniTask DisposeAsync();
    public CriWare.CriAtomExPlayback PlaySe(string name);
    private void _playSeWithInterval(float time, string name);
    private void _playSeWithInterval(float time, System.ValueTuple<string, int> key);
    private Cysharp.Threading.Tasks.UniTask <InitializeAsync>b__9_0(PRISM.Definitions.MstProduceIdol idol);
    private bool <DisposeAsync>b__16_0();

    private struct <<InitializeAsync>b__9_0>d : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.RhythmGameSoundService <>4__this;
        public PRISM.Definitions.MstProduceIdol idol;
        private <>c__DisplayClass9_0 <>8__1;
        private string <sheetName>5__2;
        private Awaiter<System.ValueTuple<bool, PRISM.CriAtomCache>> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private class <>c__DisplayClass9_0
    {
        public string prefix;
        public string postfix;
        public CueInfo[] cues;
        public PRISM.CriAtomCache cueSheet;
        public PRISM.RhythmGame.RhythmGameSoundService <>4__this;
        private System.Func<CriWare.CriAtomExPlayback> <InitializeAsync>g__GetPlayAction|1(int type);
    }

    private class <>c__DisplayClass9_1
    {
        public string name;
        public <>c__DisplayClass9_0 CS$<>8__locals1;
        private bool <InitializeAsync>b__2(CueInfo c);
        private CriWare.CriAtomExPlayback <InitializeAsync>b__3();
    }

    private struct <DisposeAsync>d__16 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.RhythmGameSoundService <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <InitializeAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.RhythmGameSoundService <>4__this;
        public System.Collections.Generic.IEnumerable<PRISM.Definitions.MstProduceIdol> idols;
        private Awaiter<System.ValueTuple<bool, PRISM.CriAtomCache>> <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.RhythmGame
public enum RhythmGameStatus : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.RhythmGameStatus None;
    public static PRISM.RhythmGame.RhythmGameStatus Initializing;
    public static PRISM.RhythmGame.RhythmGameStatus Playing;
    public static PRISM.RhythmGame.RhythmGameStatus Pause;
    public static PRISM.RhythmGame.RhythmGameStatus PlayEnd;
    public static PRISM.RhythmGame.RhythmGameStatus ResumeCountdown;
}

// Namespace: PRISM.RhythmGame
public class RhythmGameVibrateService
{
    private bool supportsVibration;
    public void Vibrate();
}

// Namespace: PRISM.RhythmGame
public class NoteLineGroup
{
    public int Id;
    public PRISM.RhythmGame.NoteLineState[] NoteLines;
    private PRISM.RhythmGame.NoteLineTraceState <TraceState>k__BackingField;
    public PRISM.RhythmGame.NoteLineTraceState TraceState { get; set; }
    public float TailJudgeTime { get; set; }
    public void UpdateTraceState(float currentTime, System.Span<PRISM.RhythmGame.RhythmGameTouch> touches, bool isAuto);
    private PRISM.RhythmGame.NoteLineTraceState _getTraceState(float currentTime, System.Span<PRISM.RhythmGame.RhythmGameTouch> touches, bool isAuto);
    private bool _isTracing(float currentTime, System.Span<PRISM.RhythmGame.RhythmGameTouch> touches);
}

// Namespace: PRISM.RhythmGame
public enum NoteLineTraceState : System.Enum
{
    public int value__;
    public static PRISM.RhythmGame.NoteLineTraceState None;
    public static PRISM.RhythmGame.NoteLineTraceState NotJudge;
    public static PRISM.RhythmGame.NoteLineTraceState Success;
    public static PRISM.RhythmGame.NoteLineTraceState Failure;
}

// Namespace: PRISM.RhythmGame
public class NoteLineState
{
    public int Id;
    public PRISM.RhythmGame.NoteState Head;
    public PRISM.RhythmGame.NoteState Tail;
    public PRISM.RhythmGame.NoteLineEntity Entity;
    private PRISM.RhythmGame.NoteLineGroup <NoteLineGroup>k__BackingField;
    public PRISM.RhythmGame.NoteLineGroup NoteLineGroup { get; set; }
    public void SetGroup(PRISM.RhythmGame.NoteLineGroup group);
}

// Namespace: PRISM.RhythmGame
public class NoteState
{
    public int Id;
    public PRISM.RhythmGame.NoteEntity Entity;
    public float DisplayTime;
    public bool Judged;
    private PRISM.RhythmGame.JudgeState <JudgeState>k__BackingField;
    public System.Nullable<PRISM.RhythmGame.JudgmentResultType> JudgmentResultType;
    public float JudgeTime { get; set; }
    public PRISM.RhythmGame.NoteType Type { get; set; }
    public PRISM.RhythmGame.JudgeState JudgeState { get; set; }
    public void Judge(PRISM.RhythmGame.JudgeState judgeState, PRISM.RhythmGame.JudgmentResultType judgmentResultType);
}

// Namespace: PRISM.RhythmGame
public class RhythmGameNotesState
{
    private System.Collections.Generic.List<PRISM.RhythmGame.NoteState> notJudgedTapNotes;
    private System.Collections.Generic.List<PRISM.RhythmGame.NoteState> notJudgedHoldNotes;
    private System.Collections.Generic.List<PRISM.RhythmGame.NoteState> notJudgedFlickNotes;
    public PRISM.EnumerateOnlyList<PRISM.RhythmGame.NoteState> ReverseSortedNotes;
    public PRISM.EnumerateOnlyList<PRISM.RhythmGame.NoteLineState> NoteLines;
    public System.Collections.Generic.List<PRISM.RhythmGame.SimultaneousLineState> SimultaneousLines;
    public PRISM.RhythmGame.NoteTimeManager NoteTimeManager;
    public System.Collections.Generic.Dictionary<PRISM.RhythmGame.NoteLineState, PRISM.RhythmGame.NoteLineGroup> NoteLineGroups;
    public PRISM.EnumerateOnlyList<PRISM.RhythmGame.NoteState> NotJudgedTapAndFlickNotes { get; set; }
    public PRISM.EnumerateOnlyList<PRISM.RhythmGame.NoteState> NotJudgedHoldNotes { get; set; }
    public PRISM.EnumerateOnlyList<PRISM.RhythmGame.NoteState> NotJudgedFlickNotes { get; set; }
    public void RemoveJudgedNotes();
    private void _removeJudgedTapAndFlickNotes();
    private void _removeJudgedHoldNotes();
    private void _removeJudgedFlickNotes();
}

// Namespace: PRISM.RhythmGame
public class RhythmGameState : PRISM.IRhythmGameRenderOptionWatcherState
{
    private PRISM.RhythmGame.JudgmentResultList judgmentResults;
    private PRISM.RhythmGame.JudgmentResultList skillBoostedJudgmentResults;
    private int <CurrentCombo>k__BackingField;
    private int <MaxCombo>k__BackingField;
    private int skillBoostedToPerfectCount;
    private int skillBoostedToGreatCount;
    private int <CurrentScore>k__BackingField;
    private int <CurrentLife>k__BackingField;
    private int <AdditionTechnicalScore>k__BackingField;
    private int <ReductionTechnicalScore>k__BackingField;
    private int <TechnicalHighScore>k__BackingField;
    public int LiveSkillIndex;
    public int NoteCount;
    private bool isShinyEnabled;
    public int CurrentCombo { get; set; }
    public int MaxCombo { get; set; }
    public PRISM.RhythmGame.ClearType CurrentClearType { get; set; }
    public int CurrentScore { get; set; }
    public int CurrentLife { get; set; }
    public int AdditionTechnicalScore { get; set; }
    public int ReductionTechnicalScore { get; set; }
    public int TechnicalHighScore { get; set; }
    public bool IsComplete { get; set; }
    public void IncrementCombo();
    public void ResetCombo();
    public void InitializeTechnicalScore(bool isShinyEnabled, int technicalHighScore);
    public void AddJudgmentResults(PRISM.RhythmGame.JudgmentResult result, PRISM.RhythmGame.JudgmentResult skillBoostedResult);
    private void _updateTechnicalScore();
    public PRISM.RhythmGame.ClearType GetClearType();
    public PRISM.Live.LiveResultData ToResultData(PRISM.Live.LiveStartData liveStartData, ScoreRank scoreRank, PRISM.RhythmGame.LiveSkillService skillService);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.RhythmGame.NoteState, bool> <>9__39_0;
        private bool <.ctor>b__39_0(PRISM.RhythmGame.NoteState note);
    }
}

// Namespace: PRISM.RhythmGame
public class AddedScoreText : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject effectRoot;
    private UnityEngine.Animator animator;
    private UnityEngine.AnimationClip clip;
    private TMPro.TextMeshProUGUI[] texts;
    private UnityEngine.CanvasGroup canvasGroup;
    private int positiveAnimationStateIndex;
    private int negativeAnimationStateIndex;
    private string positiveStateName;
    private string negativeStateName;
    private static float fadeAlpha;
    public void Initialize();
    public void Play(string sourceText, float arg0, bool isPositive);
    public void Fade();
    public void OnComplete();
}

// Namespace: PRISM.RhythmGame
public class AddedTextAnimationPool
{
    private PRISM.RhythmGame.AddedScoreText prefab;
    private UnityEngine.Transform parent;
    private PRISM.RhythmGame.AddedScoreText[] queue;
    private int rentCount;
    private int poolLength;
    private PRISM.RhythmGame.AddedScoreText CreateInstance();
    public PRISM.RhythmGame.AddedScoreText Rent();
    public void Dispose();
}

// Namespace: PRISM.RhythmGame
public class ComboView : UnityEngine.MonoBehaviour
{
    private UnityEngine.Transform comboNumberParent;
    private PRISM.RhythmGame.NumberSpriteView comboNumberDigitView;
    private UnityEngine.ParticleSystem skillEffect;
    private float punchStrength;
    private float punchDuration;
    private PRISM.RhythmGame.SpecialComboNumberEffect specialNumberEffect283;
    private PRISM.RhythmGame.SpecialComboNumberEffect specialNumberEffect412;
    private ClearTypeEffect allGreatEffect;
    private ClearTypeEffect allPerfectEffect;
    private ClearTypeEffect allShinyEffect;
    private int currentCombo;
    private DG.Tweening.Tweener punchTweener;
    private bool isSkillActive;
    private ClearTypeEffect currentClearTypeEffect;
    private void Start();
    private void OnDisable();
    public void Render(int combo, PRISM.RhythmGame.ClearType currentClearType, PRISM.RhythmGame.RhythmGameOptionDetail option, bool isForceUpdate);
    public void SetSkill(bool active);
    public Cysharp.Threading.Tasks.UniTask ForceOnOnceAsync();

    private class ClearTypeEffect
    {
        private UnityEngine.GameObject[] effects;
        private PRISM.RhythmGame.NumberSpriteView[] digitViews;
        public void SetActive(bool isActive);
        public void Render(int combo);
    }

    private struct <ForceOnOnceAsync>d__19 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.ComboView <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.RhythmGame
public class FinishEffectView : UnityEngine.MonoBehaviour
{
    private UnityEngine.Playables.PlayableDirector[] finishAnimation;
    public Cysharp.Threading.Tasks.UniTask PlayAsync(PRISM.RhythmGame.ClearType type);

    private class <>c__DisplayClass1_0
    {
        public UnityEngine.Playables.PlayableDirector anim;
        private bool <PlayAsync>b__0();
    }

    private struct <PlayAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.FinishEffectView <>4__this;
        public PRISM.RhythmGame.ClearType type;
        private <>c__DisplayClass1_0 <>8__1;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.RhythmGame
public class JudgeEffectView : UnityEngine.MonoBehaviour
{
    private UnityEngine.ParticleSystem[] tapEffects;
    private UnityEngine.ParticleSystem[] flickEffects;
    private UnityEngine.ParticleSystem kimeEffect;
    private UnityEngine.ParticleSystem longNotesEffect;
    private UnityEngine.ParticleSystem jointNotesEffect;
    private UnityEngine.ParticleSystem skillNotesEffect;
    private UnityEngine.Pool.ObjectPool<UnityEngine.ParticleSystem>[] tapEffectPools;
    private UnityEngine.Pool.ObjectPool<UnityEngine.ParticleSystem>[] flickEffectPools;
    private UnityEngine.Pool.ObjectPool<UnityEngine.ParticleSystem> kimeEffectPool;
    private UnityEngine.Pool.ObjectPool<UnityEngine.ParticleSystem> longNotesEffectPool;
    private UnityEngine.Pool.ObjectPool<UnityEngine.ParticleSystem> jointNotesEffectPool;
    private UnityEngine.Pool.ObjectPool<UnityEngine.ParticleSystem> skillNotesEffectPool;
    private System.Collections.Generic.Dictionary<int, UnityEngine.ParticleSystem> playingLongNotesEffectIds;
    private void Awake();
    private Cysharp.Threading.Tasks.UniTask _playAsync(PRISM.RhythmGame.NoteEntity entity, PRISM.RhythmGame.JudgmentResultType judge);
    public void Play(PRISM.RhythmGame.NoteEntity entity, PRISM.RhythmGame.JudgmentResultType judge);
    public void PlayNoteLineEffect(int id, float centerPosition);
    public void StopNoteLineEffect(int id);
    public void StopAllNoteLineEffects();
    private float _calcEffectPosition(float centerPosition);
    private UnityEngine.Pool.ObjectPool<UnityEngine.ParticleSystem> _createPool(UnityEngine.ParticleSystem prefab);
    private void <Awake>g__CreatePools|13_0(UnityEngine.ParticleSystem[] effectsArray, UnityEngine.Pool.ObjectPool<UnityEngine.ParticleSystem>[] targetPools);

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<UnityEngine.ParticleSystem> <>9__20_1;
        public static System.Action<UnityEngine.ParticleSystem> <>9__20_2;
        private void <_createPool>b__20_1(UnityEngine.ParticleSystem x);
        private void <_createPool>b__20_2(UnityEngine.ParticleSystem x);
    }

    private class <>c__DisplayClass20_0
    {
        public UnityEngine.ParticleSystem prefab;
        public PRISM.RhythmGame.JudgeEffectView <>4__this;
        private UnityEngine.ParticleSystem <_createPool>b__0();
    }

    private struct <_playAsync>d__14 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.NoteEntity entity;
        public PRISM.RhythmGame.JudgeEffectView <>4__this;
        public PRISM.RhythmGame.JudgmentResultType judge;
        private UnityEngine.Pool.ObjectPool<UnityEngine.ParticleSystem> <pool>5__2;
        private UnityEngine.ParticleSystem <particle>5__3;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.RhythmGame
public class JudgeFastSlowView : UnityEngine.MonoBehaviour
{
    private UnityEngine.SpriteRenderer fastSlowRenderer;
    private UnityEngine.Sprite fastSprite;
    private UnityEngine.Sprite slowSprite;
    private UnityEngine.Sprite reverseSprite;
    public UnityEngine.SpriteRenderer Renderer { get; set; }
    public void Show(PRISM.RhythmGame.JudgmentLagType lagType);
}

// Namespace: PRISM.RhythmGame
public class JudgementLagView : UnityEngine.MonoBehaviour
{
    private PRISM.RhythmGame.JudgeFastSlowView fastSlowView;
    private DG.Tweening.Sequence sequence;
    private void Awake();
    private DG.Tweening.Sequence _createSequence(float zoomInSecond, float intervalSecond, float zoomOutSecond);
    private void _reset();
    public void PlayAnimation(PRISM.RhythmGame.JudgmentResultForEffect result, PRISM.RhythmGame.RhythmGameOptionDetail option);
    public void Stop();
}

// Namespace: PRISM.RhythmGame
public class JudgeResultView : UnityEngine.MonoBehaviour
{
    private UnityEngine.SpriteRenderer judgeRenderer;
    private PRISM.RhythmGame.JudgeFastSlowView fastSlowView;
    private UnityEngine.GameObject skillBoostedBadge;
    private PRISM.RhythmGame.MistakeFollowResultView mistakeFollowResultView;
    private UnityEngine.Sprite[] sprites;
    private DG.Tweening.Sequence sequence;
    private float lastJudgeTime;
    private PRISM.RhythmGame.JudgeResultView clone;
    private void Awake();
    private DG.Tweening.Sequence _createSequence(float zoomInSecond, float intervalSecond, float zoomOutSecond);
    private void _reset();
    public void PlayAnimation(PRISM.RhythmGame.JudgmentResultForEffect result, PRISM.RhythmGame.MistakeFollowResult mistakeFollowResult, PRISM.RhythmGame.RhythmGameOptionDetail option);
    private void _playAnimation(PRISM.RhythmGame.JudgmentResultType type, PRISM.RhythmGame.JudgmentLagType lagType, bool isSkillBoosted, PRISM.RhythmGame.MistakeFollowResult mistakeFollowResult);
    public void Stop();
}

// Namespace: PRISM.RhythmGame
public class LiveFullScreenEffectView : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject cautionEffect;
    private UnityEngine.GameObject lifeZeroEffect;
    public void ShowLifeEffect(int currentLife);
}

// Namespace: PRISM.RhythmGame
public class LivePauseView : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UIButton howToPlayButton;
    private ENTERPRISE.UI.UIButton retryButton;
    private ENTERPRISE.UI.UIButton endButton;
    private ENTERPRISE.UI.UIButton resumeButton;
    private ENTERPRISE.UI.ButtonBase settingButton;
    private ENTERPRISE.UI.ButtonBase hideButton;
    private TNRD.SerializableInterface<PRISM.Legacy.ILoadingMiniCharaViewForLegacy> loadingMiniCharaView;
    public System.IObservable<UniRx.Unit> OnClickHowToPlayButton { get; set; }
    public System.IObservable<UniRx.Unit> OnClickRetryButton { get; set; }
    public System.IObservable<UniRx.Unit> OnClickEndButton { get; set; }
    public System.IObservable<UniRx.Unit> OnClickResumeButton { get; set; }
    public System.IObservable<UniRx.Unit> OnClickSettingButton { get; set; }
    public System.IObservable<UniRx.Unit> OnClickHideButton { get; set; }
    public bool IsActive { get; set; }
    private void Awake();
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken ct);
    public void Show();
    public void Hide();
    private void <Awake>b__19_0();
}

// Namespace: PRISM.RhythmGame
public class LiveStartAnimationView : UnityEngine.MonoBehaviour
{
    private UnityEngine.Animator[] startAnimators;
    public void Initialize();
    public void PlayAnimation();
    public void ShowWithoutAnimation();
}

// Namespace: PRISM.RhythmGame
public class MistakeFollowResultView : UnityEngine.MonoBehaviour
{
    private PRISM.SerializableNestedArray<UnityEngine.GameObject>[] judgmentResultTypeObjects;
    private PRISM.RhythmGame.NumberSpriteView scorePercent;
    private UnityEngine.Transform leftObject;
    private UnityEngine.Transform rightObject;
    private float baseSpace;
    private float perDigitSpace;
    public void Show(PRISM.RhythmGame.MistakeFollowResult result);
}

// Namespace: PRISM.RhythmGame
public class RhythmGameNotificationCellView : UnityEngine.MonoBehaviour
{
    private static float ActivePositionX;
    private static float InactivePositionX;
    private static float InOutAnimationSeconds;
    private static float KeepSeconds;
    private static int AnimationCoefficient;
    private bool isHorizontalMoving;
    private float targetVerticalPosition;
    private DG.Tweening.Tween sequence;
    private UnityEngine.RectTransform RectTransform { get; set; }
    private void Awake();
    public void UpdateVerticalPosition(float verticalPosition);
    private void Update();
    public Cysharp.Threading.Tasks.UniTask ShowAsync(float initialVerticalPosition);
    private void <Awake>b__10_0();
    private void <Awake>b__10_1();
    private void <Awake>b__10_2();

    private struct <ShowAsync>d__13 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.RhythmGameNotificationCellView <>4__this;
        public float initialVerticalPosition;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.RhythmGame
public class RhythmGameNotificationSkillCellView : PRISM.RhythmGame.RhythmGameNotificationCellView
{
    private UnityEngine.UI.RawImage characterIconImage;
    private TMPro.TextMeshProUGUI text;
    private UnityEngine.GameObject convertObject;
    private TMPro.TextMeshProUGUI convertOriginalText;
    private TMPro.TextMeshProUGUI convertedText;
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(PRISM.RhythmGame.RhythmGameLiveSkill skill, PRISM.ResourceManagement.IResourceLoader resourceLoader);

    private struct <InitializeAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.RhythmGameNotificationSkillCellView <>4__this;
        public PRISM.RhythmGame.RhythmGameLiveSkill skill;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        private UnityEngine.UI.RawImage <>7__wrap1;
        private Awaiter<UnityEngine.Texture2D> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.RhythmGame
public class RhythmGameNotificationSupportEffectCellView : PRISM.RhythmGame.RhythmGameNotificationCellView
{
    private PRISM.Interactions.SupportCharacterIconView characterIconImage;
    private TMPro.TextMeshProUGUI text;
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(PRISM.RhythmGame.LiveActiveSupportEffect effect, PRISM.ResourceManagement.IResourceLoader resourceLoader);
}

// Namespace: PRISM.RhythmGame
public class RhythmGameNotificationView : UnityEngine.MonoBehaviour
{
    private PRISM.RhythmGame.RhythmGameNotificationSkillCellView skillViewBase;
    private PRISM.RhythmGame.RhythmGameNotificationSupportEffectCellView supportEffectViewBase;
    private float margin;
    private System.Collections.Generic.Dictionary<PRISM.Definitions.MstSupportCharacter, PRISM.RhythmGame.RhythmGameNotificationCellView> supportEffectViews;
    private System.Collections.Generic.List<PRISM.RhythmGame.RhythmGameNotificationCellView> skillViews;
    private System.Collections.Generic.List<PRISM.RhythmGame.RhythmGameNotificationCellView> activeSkillViews;
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(System.Collections.Generic.IReadOnlyList<PRISM.RhythmGame.RhythmGameLiveSkill> skills, System.Collections.Generic.IReadOnlyList<PRISM.RhythmGame.LiveActiveSupportEffect> supportEffects, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    public void ShowSkill(int index);
    public void ShowSupportEffect(PRISM.Definitions.MstSupportCharacter character);
    private float _getVerticalPosition(int index);
    private void Update();
    private Cysharp.Threading.Tasks.UniTask _showAsync(PRISM.RhythmGame.RhythmGameNotificationCellView cell);

    private class <>c__DisplayClass6_0
    {
        public System.Collections.Generic.IReadOnlyList<PRISM.RhythmGame.RhythmGameLiveSkill> skills;
        public PRISM.RhythmGame.RhythmGameNotificationView <>4__this;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        public System.Collections.Generic.IReadOnlyList<PRISM.RhythmGame.LiveActiveSupportEffect> supportEffects;
        private Cysharp.Threading.Tasks.UniTask <InitializeAsync>b__0(PRISM.RhythmGame.RhythmGameLiveSkill skill, int index);
        private Cysharp.Threading.Tasks.UniTask <InitializeAsync>b__1(PRISM.RhythmGame.LiveActiveSupportEffect effect, int index);
    }

    private struct <_showAsync>d__11 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.RhythmGameNotificationView <>4__this;
        public PRISM.RhythmGame.RhythmGameNotificationCellView cell;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.RhythmGame
public class NumberSpriteView : UnityEngine.MonoBehaviour
{
    private UnityEngine.Sprite[] numberSprites;
    private PRISM.SpriteAttacherBase[] numberImages;
    private float spacing;
    private int <CurrentDigit>k__BackingField;
    public int CurrentDigit { get; set; }
    public void Render(int number);
}

// Namespace: PRISM.RhythmGame
public class RhythmGameGaugeBase : UnityEngine.MonoBehaviour
{
    private PRISM.RhythmGame.AddedScoreText _addedScoreTextPrefab;
    private UnityEngine.GameObject _addedScoreTextRoot;
    private int _preloadCount;
    private PRISM.RhythmGame.AddedTextAnimationPool addedScoreTextPool;
    private PRISM.RhythmGame.AddedScoreText beforeText;
    protected void Initialize();
    protected void PlayAddedScore(string addedScoreString, float arg0, bool isPositive);
    private void OnDestroy();
}

// Namespace: PRISM.RhythmGame
public class RhythmGameLifeGauge : PRISM.RhythmGame.RhythmGameGaugeBase
{
    private UnityEngine.UI.Image gaugeImage;
    private TMPro.TextMeshProUGUI currentScoreText;
    private UnityEngine.Sprite normalGaugeSprite;
    private UnityEngine.Sprite cautionGaugeSprite;
    private UnityEngine.UI.Image frameImage;
    private UnityEngine.Sprite normalFrameSprite;
    private UnityEngine.Sprite cautionFrameSprite;
    private int beforeLife;
    private int animationStartLife;
    private int animationRenderLife;
    private int animationTargetLife;
    private float animationTime;
    private float currentLerpTime;
    private float NegativeAnimationSpeed;
    private float PositiveAnimationSpeed;
    private bool isInitialized;
    private EasingCore.EasingFunction easingFunction;
    public void Initialize(int startLife);
    private void Update();
    public void Render(int currentLife);
    private void RenderGauge(int life);
}

// Namespace: PRISM.RhythmGame
public class RhythmGameScoreGauge : PRISM.RhythmGame.RhythmGameGaugeBase
{
    private static int Digits;
    private UnityEngine.UI.Image _image;
    private TMPro.TextMeshProUGUI _currentScoreText;
    private UnityEngine.Sprite[] _gaugeSprites;
    private int currentScore;
    private string[] scoreTextFormats;
    private void Start();
    public void Render(int score, int addedScore, ScoreRank scoreRank, float normalizedScore);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<int, string> <>9__6_0;
        private string <Start>b__6_0(int n);
    }
}

// Namespace: PRISM.RhythmGame
public class RhythmGameSkillAnimationView : UnityEngine.MonoBehaviour
{
    private Config[] configs;
    private UnityEngine.RectTransform damagePivot;
    private UnityEngine.Vector2 damagePivotMin;
    private UnityEngine.Vector2 damagePivotMax;
    private PRISM.RhythmGame.RhythmGameSkillAnimationType currentTypes;
    public void Render(PRISM.RhythmGame.RhythmGameSkillAnimationType types, int currentLife);

    private struct Config : System.ValueType
    {
        public UnityEngine.GameObject Object;
        public PRISM.RhythmGame.RhythmGameSkillAnimationType Type;
    }
}

// Namespace: PRISM.RhythmGame
public class RhythmGameSpecialViewLocator : UnityEngine.MonoBehaviour, PRISM.Adapters.IRhythmGameSpecialViewLocator
{
    private TNRD.SerializableInterface<PRISM.Adapters.ILiveAutoLoopView> autoLoopView;
    private TNRD.SerializableInterface<PRISM.Adapters.IRhythmGameTechnicalChallengeView> technicalChallengeView;
    public T Get<T>();
}

// Namespace: PRISM.RhythmGame
public class RhythmGameSupportMemberView : UnityEngine.MonoBehaviour
{
    private UnityEngine.Animator animator;
    private UnityEngine.GameObject listObject;
    private PRISM.RhythmGame.RhythmGameSupportMemberViewCell[] cells;
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Collections.Generic.IReadOnlyList<PRISM.RhythmGame.LiveSupportMember> supportMembers);
    public void Render(PRISM.RhythmGame.BitSupportMemberPosition positions);
    public Cysharp.Threading.Tasks.UniTask AnimateAsync(PRISM.RhythmGame.RhythmGameOptionSupportEffectType effectType);

    private class <>c__DisplayClass3_0
    {
        public PRISM.RhythmGame.RhythmGameSupportMemberView <>4__this;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        private Cysharp.Threading.Tasks.UniTask <InitializeAsync>b__0(PRISM.RhythmGame.LiveSupportMember member);
    }

    private class <>c__DisplayClass3_1
    {
        public PRISM.RhythmGame.LiveSupportMember member;
        private bool <InitializeAsync>b__1(PRISM.RhythmGame.RhythmGameSupportMemberViewCell x);
    }
}

// Namespace: PRISM.RhythmGame
public class RhythmGameSupportMemberViewCell : UnityEngine.MonoBehaviour
{
    private PRISM.RhythmGame.BitSupportMemberPosition position;
    private UnityEngine.GameObject[] objects;
    private UnityEngine.GameObject animationObject;
    private PRISM.Interactions.SupportCharacterIconView[] icons;
    public PRISM.RhythmGame.BitSupportMemberPosition Position { get; set; }
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(PRISM.ResourceManagement.IResourceLoader resourceLoader, int id);
    public void Render(PRISM.RhythmGame.BitSupportMemberPosition positions);

    private class <>c__DisplayClass6_0
    {
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        public int id;
        private Cysharp.Threading.Tasks.UniTask <InitializeAsync>b__0(PRISM.Interactions.SupportCharacterIconView x);
    }
}

// Namespace: PRISM.RhythmGame
public class RhythmGameTechnicalScoreView : UnityEngine.MonoBehaviour
{
    private PRISM.RhythmGame.NumberSpriteView scoreView;
    private PRISM.RhythmGame.NumberSpriteView bestRecordScoreView;
    private UnityEngine.GameObject[] bestRecordObjects;
    private int currentScore;
    private System.Nullable<bool> isBestRecord;
    public void Render(PRISM.IRhythmGameRenderOptionWatcherState state, PRISM.RhythmGame.RhythmGameOptionTechnicalScoreCalculationType calculationType);
}

// Namespace: PRISM.RhythmGame
public class RhythmGameView : UnityEngine.MonoBehaviour
{
    private UnityEngine.Camera _camera3d;
    private UnityEngine.Camera _camera2d;
    private PRISM.RhythmGame.RhythmGameScoreGauge _scoreGauge;
    private PRISM.RhythmGame.RhythmGameLifeGauge _lifeGauge;
    private PRISM.RhythmGame.JudgeResultView _judgeResultView;
    private PRISM.RhythmGame.JudgementLagView _fixedJudgeResultView;
    private PRISM.RhythmGame.FinishEffectView _finishEffectView;
    private ENTERPRISE.UI.ButtonBase _pauseButton;
    private PRISM.RhythmGame.Lane lane;
    private PRISM.RhythmGame.LivePauseView pauseView;
    private PRISM.RhythmGame.RhythmGameNotificationView notificationView;
    private PRISM.RhythmGame.JudgeLine judgeLine;
    private UnityEngine.CanvasGroup autoModeCanvasGroup;
    private UnityEngine.SpriteRenderer backgroundBlocker;
    private UnityEngine.UI.Button unhidePauseViewButton;
    private UnityEngine.UI.Image resumeCountdownNumber;
    private UnityEngine.Sprite[] resumeCountdownNumberSprites;
    private UnityEngine.UI.Image resumeCountdownMeter;
    private UnityEngine.GameObject suspendPauseView;
    private UnityEngine.UI.Button suspendUnpauseButton;
    private PRISM.RhythmGameRenderOptionWatcher renderOptionWatcher;
    private string liveSettingContent;
    private PRISM.RhythmGame.LiveFullScreenEffectView fullScreenEffectView;
    private PRISM.RhythmGame.RhythmGameSkillAnimationView skillAnimationView;
    private PRISM.RhythmGame.LiveStartAnimationView startAnimationView;
    private PRISM.RhythmGame.RhythmGameSupportMemberView supportMemberView;
    private PRISM.HowToPlayPopupOpener howToPlayPopupOpener;
    private int afterHowToPlayDelayMilliseconds;
    private PRISM.RhythmGame.RhythmGameSpecialViewLocator specialViewLocator;
    private UniRx.Subject<bool> onChangeFocus;
    private DG.Tweening.Tween resumeCountdownTween;
    private PRISM.RhythmGame.RhythmGameOption option;
    private PRISM.RhythmGame.JudgeEffectView judgeEffectView;
    public System.IObservable<UniRx.Unit> OnPause { get; set; }
    public System.IObservable<UniRx.Unit> OnRetry { get; set; }
    public System.IObservable<UniRx.Unit> OnEnd { get; set; }
    public System.IObservable<UniRx.Unit> OnResume { get; set; }
    public System.IObservable<UniRx.Unit> OnClickSuspendUnpauseButton { get; set; }
    public PRISM.Adapters.IRhythmGameSpecialViewLocator SpecialViewLocator { get; set; }
    public System.IObservable<bool> OnChangeFocus { get; set; }
    public bool IsActivePauseView { get; set; }
    public bool IsActiveSuspendPauseView { get; set; }
    public void Initialize(PRISM.RhythmGame.RhythmGameOption option, PRISM.IRhythmGameRenderOptionWatcherState state, string songCueSheetName, PRISM.RhythmGameRenderMode mode);
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(PRISM.RhythmGame.RhythmGameLoader loader, System.Collections.Generic.IReadOnlyList<PRISM.RhythmGame.RhythmGameLiveSkill> liveSkills, System.Collections.Generic.IReadOnlyList<PRISM.RhythmGame.LiveActiveSupportEffect> supportEffects, System.Collections.Generic.IReadOnlyList<PRISM.RhythmGame.LiveSupportMember> supportMembers, float mvCameraDepth);
    public void InitializeAsLiveSettingPreview(UnityEngine.RenderTexture renderTexture);
    public void InitializeAsChartViewer();
    public Cysharp.Threading.Tasks.UniTask ResetAsync(PRISM.RhythmGame.RhythmGameLoader loader, System.Threading.CancellationToken cancellationToken);
    private void _setPlayMode(bool isAuto);
    public void NotifySkill(int index);
    public void NotifySupportEffect(PRISM.Definitions.MstSupportCharacter character);
    public void ShowPauseView();
    public void HidePauseView();
    public void RenderCombo(int combo, PRISM.RhythmGame.ClearType currentClearType);
    public void PlayJudgeEffect(PRISM.RhythmGame.NoteEntity entity, PRISM.RhythmGame.JudgmentResultType judge);
    public void PlayNoteLineEffect(int id, float centerPosition);
    public void StopNoteLineEffect(int id);
    public void PlayJudgeLineTapSucceedEffect();
    public void UpdateJudgeLineHoldSucceedEffect(bool isOn);
    public Cysharp.Threading.Tasks.UniTask PlayFinishEffectAsync(PRISM.RhythmGame.ClearType type);
    public void RenderScore(int currentScore, int addedScore, ScoreRank scoreRank, float normalizedScore);
    public void RenderTechnicalScore(PRISM.IRhythmGameRenderOptionWatcherState state, PRISM.RhythmGame.RhythmGameOptionTechnicalScoreCalculationType calculationType);
    public void InitializeLife(int startLife);
    public void RenderLife(int currentLife);
    public void RenderJudgeResult(PRISM.RhythmGame.JudgmentResultForEffect result, PRISM.RhythmGame.MistakeFollowResult mistakeFollowResult);
    public void RenderLane(PRISM.ReadOnlyHashSet<int> keyBeamOnIndices);
    public void RenderSkillAnimation(PRISM.RhythmGame.RhythmGameSkillAnimationType types, int currentLife, PRISM.RhythmGame.BitSupportMemberPosition supportMemberPositions);
    public void SetSuspendPauseViewActive(bool active);
    public Cysharp.Threading.Tasks.UniTask HideBackgroundBlockerAsync(float duration);
    public Cysharp.Threading.Tasks.UniTask ResumeCountdownAsync(System.Action onCountDown, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask PlayStartAnimationAsync();
    public void ShowWithoutPlayStartAnimation();
    public void UnhidePauseView();
    public void HideLanes();
    public Cysharp.Threading.Tasks.UniTask FadeInLanesAsync();
    public Cysharp.Threading.Tasks.UniTask FadeOutLanesAsync();
    private Cysharp.Threading.Tasks.UniTask FadeLanesAsync(float fromAlpha, float toAlpha, float durationSecond, float delaySecond);
    private void ApplyLanesAlpha(float alpha);
    private void _setResumeCountdownUIActive(bool active);
    private Cysharp.Threading.Tasks.UniTask _loadJudgeEffectAsync(PRISM.RhythmGame.RhythmGameLoader loader, System.Threading.CancellationToken cancellationToken);
    private void OnApplicationFocus(bool hasFocus);
    public System.Func<float, float> GetScreenToLaneIndex();
    public Cysharp.Threading.Tasks.UniTask ShowHowToPlayAsync();
    public void SetUIVisibility(bool visible);

    private class <>c__DisplayClass47_0
    {
        public PRISM.RhythmGame.RhythmGameView <>4__this;
        public string songCueSheetName;
        private void <Initialize>b__0(UniRx.Unit _);
        private void <Initialize>b__1(UniRx.Unit _);
        private Cysharp.Threading.Tasks.UniTaskVoid <Initialize>b__2(UniRx.Unit _);

        private struct <<Initialize>b__2>d : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
        {
            public int <>1__state;
            public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskVoidMethodBuilder <>t__builder;
            public <>c__DisplayClass47_0 <>4__this;
            private Awaiter <>u__1;
            private void MoveNext();
            private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
        }
    }

    private class <>c__DisplayClass89_0
    {
        public float offset;
        public float distance;
        private float <GetScreenToLaneIndex>b__0(float position);
    }

    private struct <HideBackgroundBlockerAsync>d__76 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.RhythmGameView <>4__this;
        public float duration;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ResetAsync>d__51 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.RhythmGameView <>4__this;
        public PRISM.RhythmGame.RhythmGameLoader loader;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ResumeCountdownAsync>d__77 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.RhythmGameView <>4__this;
        public System.Action onCountDown;
        public System.Threading.CancellationToken cancellationToken;
        private int <counter>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ShowHowToPlayAsync>d__90 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.RhythmGameView <>4__this;
        private Awaiter<bool> <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_loadJudgeEffectAsync>d__87 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.RhythmGameLoader loader;
        public PRISM.RhythmGame.RhythmGameView <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter<PRISM.RhythmGame.JudgeEffectView> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.RhythmGame
public class SpecialComboNumberEffect : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject effectRoot;
    private UnityEngine.Animator animator;
    private UnityEngine.AnimationClip clip;
    public void Initialize();
    public void Play();
    public void OnComplete();
    public Cysharp.Threading.Tasks.UniTask ForceOnOnceAsync();

    private struct <ForceOnOnceAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.RhythmGame.SpecialComboNumberEffect <>4__this;
        private System.Collections.Generic.List<UnityEngine.GameObject> <inactiveObjects>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.RhythmGame
public class SuspendPauseView : UnityEngine.MonoBehaviour
{
    private UnityEngine.CanvasGroup canvasGroup;
    private float fadeTime;
    private DG.Tweening.Tween tween;
    private void OnEnable();
    private void OnDisable();
    private void CreateTween();
}

// Namespace: PRISM.RhythmGame
public class VocalSeparatedController : UnityEngine.ScriptableObject, PRISM.Live.ILiveProgressManagerExtension, System.IDisposable
{
    private PRISM.RhythmGame.VocalSeparatedData[] dataList;
    private CriWare.CriAtomExPlayer player;
    private CriWare.CriAtomExPlayback[] playbacks;
    private System.ValueTuple<CriWare.CriAtomExAcb, string>[] cueInfos;
    private System.Collections.Generic.Dictionary<int, PRISM.CriAtomCache> loadedCueSheets;
    private int[] lastToggleCountIndices;
    private System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<int>> volumeOnPlaybackIndexDic;
    public void SetData(System.Collections.Generic.IEnumerable<PRISM.RhythmGame.VocalSeparatedData> dataList);
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(string music, string[] characters, PRISM.Definitions.VocalSeparatedSoundEffectMode soundEffectMode);
    public void Pause(bool pause, float time);
    public Cysharp.Threading.Tasks.UniTask InitializeAsync();
    public void Play();
    public void ProcessTime(float time);
    public void OnReplay(float time);
    public void OnFinish();
    public void Dispose();
    private int _getToggleCountBeforeTime(int dataIndex, float time);
    private void _adjustVolumeAndPan();
    private void <_adjustVolumeAndPan>g__Apply|17_0(int index, float volume, float angle);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.RhythmGame.VocalSeparatedData, int> <>9__7_0;
        public static System.Func<PRISM.RhythmGame.VocalSeparatedData, string> <>9__7_1;
        public static System.Func<PRISM.RhythmGame.VocalSeparatedData, int> <>9__8_0;
        private int <SetData>b__7_0(PRISM.RhythmGame.VocalSeparatedData d);
        private string <SetData>b__7_1(PRISM.RhythmGame.VocalSeparatedData d);
        private int <InitializeAsync>b__8_0(PRISM.RhythmGame.VocalSeparatedData data);
    }

    private class <>c__DisplayClass8_0
    {
        public string music;
        public string[] characters;
        public PRISM.RhythmGame.VocalSeparatedController <>4__this;
        private Cysharp.Threading.Tasks.UniTask <InitializeAsync>b__1(int index);
        private System.ValueTuple<CriWare.CriAtomExAcb, string> <InitializeAsync>b__2(PRISM.RhythmGame.VocalSeparatedData data);
        private CriWare.CriAtomExPlayback <InitializeAsync>b__3(System.ValueTuple<CriWare.CriAtomExAcb, string> info);

        private struct <<InitializeAsync>b__1>d : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
        {
            public int <>1__state;
            public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
            public <>c__DisplayClass8_0 <>4__this;
            public int index;
            private Awaiter<System.ValueTuple<bool, PRISM.CriAtomCache>> <>u__1;
            private void MoveNext();
            private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
        }
    }

    private struct <InitializeAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public string music;
        public string[] characters;
        public PRISM.RhythmGame.VocalSeparatedController <>4__this;
        public PRISM.Definitions.VocalSeparatedSoundEffectMode soundEffectMode;
        private <>c__DisplayClass8_0 <>8__1;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.RhythmGame
public class VocalSeparatedData
{
    public int CharacterIndex;
    public string CategoryKey;
    public System.Collections.Generic.List<float> ToggleVolumeTimes;
}

// Namespace: PRISM.Timeline.Stage
public class SpotLightTrack : PRISM.TrackAssetBase<PRISM.StageController, PRISM.SpotLightMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class BloomBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public int downSampleLevel;
    public float intensity;
    public float threshold;
    public float softKnee;
    public float clamp;
    public float diffusion;
    public float anamorphicRatio;
    public UnityEngine.Color color;
    public UnityEngine.Texture dirtTexture;
    public float dirtIntensity;
    public UnityEngine.Vector2 tiling;
}

// Namespace: PRISM.Timeline.PostProcess
public class BloomClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.BloomBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class BloomMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess
public class BloomTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume, PRISM.Timeline.PostProcess.BloomMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class ChromaticAberrationBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public UnityEngine.Texture2D spectralLut;
    public float intensity;
}

// Namespace: PRISM.Timeline.PostProcess
public class ChromaticAberrationClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.ChromaticAberrationBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class ChromaticAberrationMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess
public class ChromaticAberrationTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume, PRISM.Timeline.PostProcess.ChromaticAberrationMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class ColorGradingBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public UnityEngine.Color colorFilter;
    public float hueShift;
    public float saturation;
    public float brightness;
    public float contrast;
}

// Namespace: PRISM.Timeline.PostProcess
public class ColorGradingClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.ColorGradingBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class ColorGradingMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess
public class ColorGradingTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume, PRISM.Timeline.PostProcess.ColorGradingMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class ColorGradingTrackballBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public UnityEngine.Rendering.PostProcessing.Vector4Parameter lift;
    public UnityEngine.Rendering.PostProcessing.Vector4Parameter gamma;
    public UnityEngine.Rendering.PostProcessing.Vector4Parameter gain;
}

// Namespace: PRISM.Timeline.PostProcess
public class ColorGradingTrackballClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.ColorGradingTrackballBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class ColorGradingTrackballMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess
public class ColorGradingTrackballTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume, PRISM.Timeline.PostProcess.ColorGradingTrackballMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class GlitchBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public float scanLineJitter;
    public float verticalJump;
    public float horizontalShake;
    public float colorDrift;
}

// Namespace: PRISM.Timeline.PostProcess
public class GlitchClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.GlitchBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class GlitchMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess
public class GlitchTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume, PRISM.Timeline.PostProcess.GlitchMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class LdrBloomBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public float intensity;
    public float threshold;
    public float softKnee;
    public float clamp;
    public float diffusion;
    public float anamorphicRatio;
    public UnityEngine.Color color;
    public UnityEngine.Texture dirtTexture;
    public float dirtIntensity;
    public UnityEngine.Vector2 tiling;
    public UnityEngine.Color brightness;
}

// Namespace: PRISM.Timeline.PostProcess
public class LdrBloomClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.LdrBloomBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class LdrBloomMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess
public class LdrBloomTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume, PRISM.Timeline.PostProcess.LdrBloomMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class ParaffinBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public UnityEngine.Color color;
    public float rotate;
    public float edge0;
    public float edge1;
}

// Namespace: PRISM.Timeline.PostProcess
public class ParaffinClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.ParaffinBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class ParaffinMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess
public class ParaffinTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume, PRISM.Timeline.PostProcess.ParaffinMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class RadialBlurBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public UnityEngine.Rendering.PostProcessing.RadialBlurQuality qualityLevel;
    public float blurRadius;
    public float radialCenterX;
    public float radialCenterY;
    public float rotateIntensity;
}

// Namespace: PRISM.Timeline.PostProcess
public class RadialBlurClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.RadialBlurBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class RadialBlurMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess
public class RadialBlurTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume, PRISM.Timeline.PostProcess.RadialBlurMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class ScreenEdgeColorBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public UnityEngine.Color leftTopColor;
    public UnityEngine.Color rightTopColor;
    public UnityEngine.Color leftBottomColor;
    public UnityEngine.Color rightBottomColor;
    public UnityEngine.Rendering.PostProcessing.ScreenEdgeColorBlendType blendType;
}

// Namespace: PRISM.Timeline.PostProcess
public class ScreenEdgeColorClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.ScreenEdgeColorBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class ScreenEdgeColorMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess
public class ScreenEdgeColorTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume, PRISM.Timeline.PostProcess.ScreenEdgeColorMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class SoftOverlayBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public float weight;
    public float scalingWeight;
    public float diffusion;
}

// Namespace: PRISM.Timeline.PostProcess
public class SoftOverlayClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.SoftOverlayBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class SoftOverlayMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess
public class SoftOverlayTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume, PRISM.Timeline.PostProcess.SoftOverlayMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class VignetteBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public UnityEngine.Color color;
    public UnityEngine.Vector2 center;
    public float intensity;
    public float smoothness;
    public float roundness;
    public bool rounded;
}

// Namespace: PRISM.Timeline.PostProcess
public class VignetteClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.VignetteBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess
public class VignetteMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume>
{
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess
public class VignetteTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.PostProcessing.PostProcessVolume, PRISM.Timeline.PostProcess.VignetteMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class BloomBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public float intensity;
    public float threshold;
    public float scatter;
    public float clamp;
    public float diffusion;
    public UnityEngine.Color color;
    public UnityEngine.Texture dirtTexture;
    public float dirtIntensity;
    public UnityEngine.Vector2 tiling;
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class BloomClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.UniversalRP.BloomBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class BloomMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings>
{
    private UnityEngine.Rendering.Universal.Bloom trackBinding;
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    public static void Apply(UnityEngine.Rendering.Universal.Bloom binding, UnityEngine.Timeline.TimelineClip timelineClip);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
    public static void Blend(UnityEngine.Rendering.Universal.Bloom binding, UnityEngine.Timeline.TimelineClip prev, float prevOut, UnityEngine.Timeline.TimelineClip next, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class BloomTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings, PRISM.Timeline.PostProcess.UniversalRP.BloomMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class ChromaticAberrationBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public float intensity;
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class ChromaticAberrationClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.UniversalRP.ChromaticAberrationBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class ChromaticAberrationMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings>
{
    private UnityEngine.Rendering.Universal.ChromaticAberration trackBinding;
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class ChromaticAberrationTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings, PRISM.Timeline.PostProcess.UniversalRP.ChromaticAberrationMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class ColorAdjustmentsBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public float postExposure;
    public UnityEngine.Color colorFilter;
    public float hueShift;
    public float saturation;
    public float contrast;
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class ColorAdjustmentsClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.UniversalRP.ColorAdjustmentsBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class ColorAdjustmentsMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings>
{
    private UnityEngine.Rendering.Universal.ColorAdjustments trackBinding;
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class ColorAdjustmentsTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings, PRISM.Timeline.PostProcess.UniversalRP.ColorAdjustmentsMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class DepthOfFieldBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public float focusDistance;
    public float aperture;
    public float focalLength;
    public int bladeCount;
    public float bladeCurvature;
    public float bladeRotation;
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class DepthOfFieldClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.UniversalRP.DepthOfFieldBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class DepthOfFieldMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings>
{
    private UnityEngine.Rendering.Universal.DepthOfField trackBinding;
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    public static void Apply(UnityEngine.Rendering.Universal.DepthOfField binding, UnityEngine.Timeline.TimelineClip timelineClip);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
    public static void Blend(UnityEngine.Rendering.Universal.DepthOfField binding, UnityEngine.Timeline.TimelineClip prev, float prevOut, UnityEngine.Timeline.TimelineClip next, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class DepthOfFieldTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings, PRISM.Timeline.PostProcess.UniversalRP.DepthOfFieldMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class GlitchBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public float scanLineJitter;
    public float verticalJump;
    public float horizontalShake;
    public float colorDrift;
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class GlitchClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.UniversalRP.GlitchBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class GlitchMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings>
{
    private UnityEngine.Rendering.Universal.Glitch trackBinding;
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class GlitchTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings, PRISM.Timeline.PostProcess.UniversalRP.GlitchMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class LdrBloomBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public float intensity;
    public float threshold;
    public float softKnee;
    public float clamp;
    public float diffusion;
    public float anamorphicRatio;
    public UnityEngine.Color color;
    public UnityEngine.Texture dirtTexture;
    public float dirtIntensity;
    public UnityEngine.Vector2 tiling;
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class LdrBloomClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.UniversalRP.LdrBloomBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class LdrBloomMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings>
{
    private UnityEngine.Rendering.Universal.LdrBloom trackBinding;
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class LdrBloomTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings, PRISM.Timeline.PostProcess.UniversalRP.LdrBloomMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class LiftGammaGainBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public UnityEngine.Rendering.PostProcessing.Vector4Parameter lift;
    public UnityEngine.Rendering.PostProcessing.Vector4Parameter gamma;
    public UnityEngine.Rendering.PostProcessing.Vector4Parameter gain;
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class LiftGammaGainClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.UniversalRP.LiftGammaGainBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class LiftGammaGainMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings>
{
    private UnityEngine.Rendering.Universal.LiftGammaGain trackBinding;
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class LiftGammaGainTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings, PRISM.Timeline.PostProcess.UniversalRP.LiftGammaGainMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class ParaffinBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public UnityEngine.Color color;
    public float rotate;
    public float edge0;
    public float edge1;
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class ParaffinClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.UniversalRP.ParaffinBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class ParaffinMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings>
{
    private UnityEngine.Rendering.Universal.Paraffin trackBinding;
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class ParaffinTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings, PRISM.Timeline.PostProcess.UniversalRP.ParaffinMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class RadialBlurBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public UnityEngine.Rendering.Universal.RadialBlurQuality qualityLevel;
    public float blurRadius;
    public float radialCenterX;
    public float radialCenterY;
    public float rotateIntensity;
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class RadialBlurClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.UniversalRP.RadialBlurBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class RadialBlurMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings>
{
    private UnityEngine.Rendering.Universal.RadialBlur trackBinding;
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class RadialBlurTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings, PRISM.Timeline.PostProcess.UniversalRP.RadialBlurMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class ScreenEdgeColorBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public UnityEngine.Color leftTopColor;
    public UnityEngine.Color rightTopColor;
    public UnityEngine.Color leftBottomColor;
    public UnityEngine.Color rightBottomColor;
    public UnityEngine.Rendering.Universal.ScreenEdgeColorBlendType blendType;
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class ScreenEdgeColorClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.UniversalRP.ScreenEdgeColorBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class ScreenEdgeColorMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings>
{
    private UnityEngine.Rendering.Universal.ScreenEdgeColor trackBinding;
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    public static void Apply(UnityEngine.Rendering.Universal.ScreenEdgeColor binding, UnityEngine.Timeline.TimelineClip timelineClip);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
    public static void Blend(UnityEngine.Rendering.Universal.ScreenEdgeColor binding, UnityEngine.Timeline.TimelineClip prev, float prevOut, UnityEngine.Timeline.TimelineClip next, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class ScreenEdgeColorTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings, PRISM.Timeline.PostProcess.UniversalRP.ScreenEdgeColorMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class SoftOverlayBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public float weight;
    public float scalingWeight;
    public float diffusion;
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class SoftOverlayClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.UniversalRP.SoftOverlayBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class SoftOverlayMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings>
{
    private UnityEngine.Rendering.Universal.SoftOverlay trackBinding;
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class SoftOverlayTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings, PRISM.Timeline.PostProcess.UniversalRP.SoftOverlayMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class VignetteBehaviour : UnityEngine.Playables.PlayableBehaviour
{
    public bool enable;
    public UnityEngine.Color color;
    public UnityEngine.Vector2 center;
    public float intensity;
    public float smoothness;
    public bool rounded;
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class VignetteClip : PRISM.PlayableAssetBase<PRISM.Timeline.PostProcess.UniversalRP.VignetteBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class VignetteMixerBehaviour : PRISM.MixerBehaviourBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings>
{
    private UnityEngine.Rendering.Universal.Vignette trackBinding;
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess.UniversalRP
public class VignetteTrack : PRISM.TrackAssetBase<UnityEngine.Rendering.Universal.PostProcess.TimelineExtensionVolumeSettings, PRISM.Timeline.PostProcess.UniversalRP.VignetteMixerBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.Cinemachine
public class BloomMixerPlayableBehaviour : PRISM.MixerBehaviourBase<Cinemachine.PostFX.CinemachineVolumeSettings>
{
    private UnityEngine.Rendering.Universal.Bloom trackBinding;
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess.Cinemachine
public class BloomTrack : PRISM.TrackAssetBase<Cinemachine.PostFX.CinemachineVolumeSettings, PRISM.Timeline.PostProcess.Cinemachine.BloomMixerPlayableBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.Cinemachine
public class DepthOfFieldMixerPlayableBehaviour : PRISM.MixerBehaviourBase<Cinemachine.PostFX.CinemachineVolumeSettings>
{
    private UnityEngine.Rendering.Universal.DepthOfField trackBinding;
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess.Cinemachine
public class DepthOfFieldTrack : PRISM.TrackAssetBase<Cinemachine.PostFX.CinemachineVolumeSettings, PRISM.Timeline.PostProcess.Cinemachine.DepthOfFieldMixerPlayableBehaviour>
{
}

// Namespace: PRISM.Timeline.PostProcess.Cinemachine
public class ScreenEdgeColorMixerPlayableBehaviour : PRISM.MixerBehaviourBase<Cinemachine.PostFX.CinemachineVolumeSettings>
{
    private UnityEngine.Rendering.Universal.ScreenEdgeColor trackBinding;
    protected void Apply(UnityEngine.Timeline.TimelineClip timelineClip, double time);
    protected void Blend(UnityEngine.Timeline.TimelineClip prevTimelineClip, float prevOut, UnityEngine.Timeline.TimelineClip nextTimelineClip, float nextIn);
}

// Namespace: PRISM.Timeline.PostProcess.Cinemachine
public class ScreenEdgeColorTrack : PRISM.TrackAssetBase<Cinemachine.PostFX.CinemachineVolumeSettings, PRISM.Timeline.PostProcess.Cinemachine.ScreenEdgeColorMixerPlayableBehaviour>
{
}

// Namespace: PRISM.Purchase
public class AccessShopServiceFactory
{
    public PRISM.Purchase.IAccessShopService CreateAccessInstance();
}

// Namespace: PRISM.Purchase
public class AppPurchaseManager
{
    private ENTERPRISE.Purchase.IPurchase purchase;
    private PRISM.Purchase.IAccessShopService shopService;
    private System.Threading.CancellationToken cancellationToken;
    private int monthlyCharges;
    private System.Collections.Generic.Dictionary<string, int> expectedPriceDic;
    private PurchaseState purchaseState;
    private PRISM.Purchase.PurchaseLocalSave localSave;
    private System.ValueTuple<ENTERPRISE.Purchase.ErrorCode, string> errorParameter;
    private string <DeferredDocumentBody>k__BackingField;
    private PRISM.Legacy.BirthdayParam <BirthParam>k__BackingField;
    public PRISM.Purchase.AppPurchaseManager Instance { get; set; }
    public int MonthlyCharges { get; set; }
    public PurchaseState State { get; set; }
    public string DeferredDocumentBody { get; set; }
    public ENTERPRISE.Purchase.IPurchase Purchase { get; set; }
    public System.ValueTuple<ENTERPRISE.Purchase.ErrorCode, string> PurchaseErrorParameter { get; set; }
    public PRISM.Legacy.BirthdayParam BirthParam { get; set; }
    public System.IObservable<ENTERPRISE.Purchase.VerifyReceiptData> OnUnprocessedReceiptData { get; set; }
    public Cysharp.Threading.Tasks.UniTask<PrepareState> PrepareAsync(System.Collections.Generic.IReadOnlyList<string> productIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IStoreItemStatus>> GetUnverifiedStoreItemsAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<System.ValueTuple<PRISM.Module.Networking.IStoreItemStatus, ENTERPRISE.Purchase.ErrorCode>> PurchaseAsync(PRISM.Module.Networking.IStoreItemStatus item);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IPurchaseShopItemReply> PurchaseAsync(PRISM.Module.Networking.IShopItemStatus item, int amount);
    public void UpdatePurchaseTotalBillingAmount(int totalBillingAmount);
    public void SetBirthParam(string birth);
    public bool IsWaitingDeferredPurchase(PRISM.Module.Networking.IStoreItemStatus item);
    private PurchaseState _verifyReceipt(PRISM.Purchase.VerifyReceiptReply reply);
    private bool _checkVerifyReceiptSuccess(PurchaseState state);
    private void _purchaseEnd(ENTERPRISE.Purchase.VerifyReceiptData data);

    public enum PurchaseState : System.Enum
    {
        public int value__;
        public static PurchaseState None;
        public static PurchaseState Processing;
        public static PurchaseState SuccessVerifyReceipt;
        public static PurchaseState Error;
        public static PurchaseState Deferred;
        public static PurchaseState ReceivedStoreItem;
    }

    public enum PrepareState : System.Enum
    {
        public int value__;
        public static PrepareState Success;
        public static PrepareState Failed;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<System.Collections.Generic.KeyValuePair<string, int>, int> <>9__13_0;
        private int <get_MonthlyCharges>b__13_0(System.Collections.Generic.KeyValuePair<string, int> v);
    }

    private struct <GetUnverifiedStoreItemsAsync>d__31 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IStoreItemStatus>> <>t__builder;
        public PRISM.Purchase.AppPurchaseManager <>4__this;
        private System.Collections.Generic.List<ENTERPRISE.Purchase.VerifyReceiptData> <verifiedReceipts>5__2;
        private System.Collections.Generic.List<PRISM.Module.Networking.IStoreItemStatus> <storeItems>5__3;
        private Enumerator<ENTERPRISE.Purchase.VerifyReceiptData> <>7__wrap3;
        private ENTERPRISE.Purchase.VerifyReceiptData <receipt>5__5;
        private Awaiter<PRISM.Purchase.VerifyReceiptReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <PrepareAsync>d__30 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PrepareState> <>t__builder;
        public PRISM.Purchase.AppPurchaseManager <>4__this;
        public System.Threading.CancellationToken ct;
        public System.Collections.Generic.IReadOnlyList<string> productIdList;
        private ENTERPRISE.Purchase.PurchaseInstanceCreator <purchaseCreator>5__2;
        private Awaiter<PRISM.Module.Networking.IGetDmmGamesAPITokenReply> <>u__1;
        private Awaiter<System.ValueTuple<ENTERPRISE.Purchase.ErrorCode, string>> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <PurchaseAsync>d__32 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.ValueTuple<PRISM.Module.Networking.IStoreItemStatus, ENTERPRISE.Purchase.ErrorCode>> <>t__builder;
        public PRISM.Purchase.AppPurchaseManager <>4__this;
        public PRISM.Module.Networking.IStoreItemStatus item;
        private System.IDisposable <_>5__2;
        private System.ValueTuple<ENTERPRISE.Purchase.VerifyReceiptData, ENTERPRISE.Purchase.ErrorCode> <receipt>5__3;
        private Awaiter<PRISM.Module.Networking.IReserveStoreItemReply> <>u__1;
        private Awaiter<System.ValueTuple<ENTERPRISE.Purchase.VerifyReceiptData, ENTERPRISE.Purchase.ErrorCode>> <>u__2;
        private Awaiter<PRISM.Purchase.VerifyReceiptReply> <>u__3;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <PurchaseAsync>d__33 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IPurchaseShopItemReply> <>t__builder;
        public PRISM.Module.Networking.IShopItemStatus item;
        public int amount;
        public PRISM.Purchase.AppPurchaseManager <>4__this;
        private Awaiter<PRISM.Module.Networking.IPurchaseShopItemReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Purchase
public class PurchaseLocalSave : ENTERPRISE.Data.LegacySaveDataBase
{
    private string[] OrderIds;
    private string[] OrderKeys;
    private System.Collections.Generic.Dictionary<string, string> OrderInfoDict;
    public bool IsDefault();
    public void Reset();
    public void Save();
    public void Load();
    public void RegisterOrderId(string key, string orderId);
    public void RemoveOrderId(string key);
    public string GetOrderId(string key);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<System.Collections.Generic.KeyValuePair<string, string>, string> <>9__5_0;
        public static System.Func<System.Collections.Generic.KeyValuePair<string, string>, string> <>9__5_1;
        public static System.Func<string, string, <>f__AnonymousType0<string, string>> <>9__6_0;
        public static System.Func<<>f__AnonymousType0<string, string>, string> <>9__6_1;
        public static System.Func<<>f__AnonymousType0<string, string>, string> <>9__6_2;
        private string <Save>b__5_0(System.Collections.Generic.KeyValuePair<string, string> x);
        private string <Save>b__5_1(System.Collections.Generic.KeyValuePair<string, string> x);
        private <>f__AnonymousType0<string, string> <Load>b__6_0(string key, string value);
        private string <Load>b__6_1(<>f__AnonymousType0<string, string> t);
        private string <Load>b__6_2(<>f__AnonymousType0<string, string> t);
    }
}

// Namespace: PRISM.Purchase
public class AccessShopServiceAndroid : PRISM.Purchase.AccessShopServiceCommon
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Purchase.VerifyReceiptReply> VerifyReceiptAsync(ENTERPRISE.Purchase.VerifyReceiptData receipt, System.Threading.CancellationToken ct);

    private struct <VerifyReceiptAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Purchase.VerifyReceiptReply> <>t__builder;
        public ENTERPRISE.Purchase.VerifyReceiptData receipt;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IVerifyReceiptForGooglePlayReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Purchase
public class AccessShopServiceCommon : PRISM.Purchase.IAccessShopService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReserveStoreItemReply> ReserveStoreItemAsync(int mstStoreItemId, string birthday, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Purchase.VerifyReceiptReply> VerifyReceiptAsync(ENTERPRISE.Purchase.VerifyReceiptData receipt, System.Threading.CancellationToken ct);

    private struct <ReserveStoreItemAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IReserveStoreItemReply> <>t__builder;
        public int mstStoreItemId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IReserveStoreItemReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <VerifyReceiptAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Purchase.VerifyReceiptReply> <>t__builder;
        public ENTERPRISE.Purchase.VerifyReceiptData receipt;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IVerifyReceiptForDevelopReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Purchase
public class AccessShopServiceDmmGames : PRISM.Purchase.AccessShopServiceCommon
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Purchase.VerifyReceiptReply> VerifyReceiptAsync(ENTERPRISE.Purchase.VerifyReceiptData receipt, System.Threading.CancellationToken ct);

    private struct <VerifyReceiptAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Purchase.VerifyReceiptReply> <>t__builder;
        public ENTERPRISE.Purchase.VerifyReceiptData receipt;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IVerifyReceiptForDmmGamesReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Purchase
public class AccessShopServiceIOS : PRISM.Purchase.AccessShopServiceCommon
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Purchase.VerifyReceiptReply> VerifyReceiptAsync(ENTERPRISE.Purchase.VerifyReceiptData receipt, System.Threading.CancellationToken ct);

    private struct <VerifyReceiptAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Purchase.VerifyReceiptReply> <>t__builder;
        public ENTERPRISE.Purchase.VerifyReceiptData receipt;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IVerifyReceiptForAppStoreReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Purchase
public class AccessShopServiceUnityEditor : PRISM.Purchase.AccessShopServiceCommon
{
}

// Namespace: PRISM.Purchase
public interface IAccessShopService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReserveStoreItemReply> ReserveStoreItemAsync(int mstStoreItemId, string birthday, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Purchase.VerifyReceiptReply> VerifyReceiptAsync(ENTERPRISE.Purchase.VerifyReceiptData receipt, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Purchase
public class VerifyReceiptReply
{
    private string <OrderId>k__BackingField;
    private PRISM.Module.Networking.IStoreItemStatus <StoreItem>k__BackingField;
    private OrderState <OrderState>k__BackingField;
    private string <DeferredDocumentBody>k__BackingField;
    public string OrderId { get; set; }
    public PRISM.Module.Networking.IStoreItemStatus StoreItem { get; set; }
    public OrderState OrderState { get; set; }
    public string DeferredDocumentBody { get; set; }
}

// Namespace: PRISM.Definitions
public class MstCostumePartExtensions
{
    public static bool IsDressOrderReleased(PRISM.Definitions.IMstCostumePart costumePart);
}

// Namespace: PRISM.Live
public interface ILiveAutoLoopViewModel
{
    public int CurrentLoopCount { get; set; }
    public bool IsFinishThisTime { get; set; }
}

// Namespace: PRISM.Live
public class LiveAutoLoopConfig
{
    public PRISM.Module.Networking.IPeriodStatus EventBreakTime;
    public System.Nullable<System.DateTime> EventEndDate;
    public int LoopCount;
    public bool IsConsumeJewel;
    public System.Collections.Generic.IReadOnlyList<int> ConsumeRecoveryDrinkIds;
}

// Namespace: PRISM.Live
public interface ILiveCostumeChangeConnector
{
}

// Namespace: PRISM.Live
public class LiveCostumeChangeSaveData : ENTERPRISE.Data.LegacySaveDataBase
{
    public bool IsShowUnlockedCostumeOnly;
    public bool IsDefault();
    public void Reset();
}

// Namespace: PRISM.Live
public class DragHandler : System.IDisposable
{
    private System.Collections.Generic.IReadOnlyList<PRISM.Live.IDraggable> icons;
    private UnityEngine.RectTransform iconParent;
    private UniRx.CompositeDisposable disposables;
    private UnityEngine.GameObject dragIcon;
    private int dragIndex;
    private System.Func<int, int, Cysharp.Threading.Tasks.UniTask> <OnSwapIconAsync>k__BackingField;
    private UniRx.Subject<bool> onChangeDragStatus;
    private System.Func<bool> <IsDraggable>k__BackingField;
    private float <ValidDragMinDistance>k__BackingField;
    private PRISM.Definitions.SoundKey <BeginDragSe>k__BackingField;
    private PRISM.Definitions.SoundKey <SwapSe>k__BackingField;
    private System.Func<int, int, Cysharp.Threading.Tasks.UniTask> OnSwapIconAsync { get; set; }
    public System.IObservable<bool> OnChangeDragStatus { get; set; }
    private System.Func<bool> IsDraggable { get; set; }
    private float ValidDragMinDistance { get; set; }
    private PRISM.Definitions.SoundKey BeginDragSe { get; set; }
    private PRISM.Definitions.SoundKey SwapSe { get; set; }
    private void _enableDrag(int index);
    public void Dispose();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<bool> <>9__28_0;
        public static System.Func<System.ValueTuple<int, float>, float> <>9__29_6;
        private bool <.ctor>b__28_0();
        private float <_enableDrag>b__29_6(System.ValueTuple<int, float> x);
    }

    private class <>c__DisplayClass29_0
    {
        public PRISM.Live.DragHandler <>4__this;
        public PRISM.Live.IDraggable icon;
        public int index;
        public System.Func<PRISM.Live.IDraggable, int, System.ValueTuple<int, float>> <>9__5;
        private void <_enableDrag>b__0(UnityEngine.EventSystems.PointerEventData _);
        private void <_enableDrag>b__1(UnityEngine.EventSystems.PointerEventData data);
        private Cysharp.Threading.Tasks.UniTaskVoid <_enableDrag>b__2(UnityEngine.EventSystems.PointerEventData _);
        private System.ValueTuple<int, float> <_enableDrag>b__5(PRISM.Live.IDraggable x, int i);
        private void <_enableDrag>b__3(bool hasFocus);
        private void <_enableDrag>g__CancelDrag|4();

        private struct <<_enableDrag>b__2>d : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
        {
            public int <>1__state;
            public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskVoidMethodBuilder <>t__builder;
            public <>c__DisplayClass29_0 <>4__this;
            private Awaiter <>u__1;
            private void MoveNext();
            private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
        }
    }
}

// Namespace: PRISM.Live
public interface IDraggable
{
    public UnityEngine.GameObject DragTargetObject { get; set; }
    public UnityEngine.GameObject BeginDrag(UnityEngine.Transform parent);
    public void EndDrag();
}

// Namespace: PRISM.Live
public class EventRankGradeComparer : System.Collections.Generic.IComparer<EventRankGrade>
{
    private EventRankGrade[] orders;
    public int Compare(EventRankGrade x, EventRankGrade y);
}

// Namespace: PRISM.Live
public interface ILiveStartData
{
    public PRISM.Definitions.IMstMvStage MvStage { get; set; }
    public PRISM.UnitIdolWithMstCostume[] OnStageIdols { get; set; }
    public int CameraIndex { get; set; }
    public bool IsVocalSeparatedOn { get; set; }
    public PRISM.RhythmGame.LiveBackgroundMode BackgroundMode { get; set; }
    public PRISM.Definitions.VocalSeparatedSoundEffectMode SoundEffectMode { get; set; }
    public bool IsPortrait { get; set; }
}

// Namespace: PRISM.Live
public class LiveStartDataExtensions
{
    public static string[] GetCharacterVoiceCueNamePostfixes(PRISM.Live.ILiveStartData data);
    public static string GetLiveScenePath(PRISM.Live.ILiveStartData data);
    public static Cysharp.Threading.Tasks.UniTask PreLoadAsync(PRISM.Live.ILiveStartData data);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.UnitIdolWithMstCostume, string> <>9__0_0;
        private string <GetCharacterVoiceCueNamePostfixes>b__0_0(PRISM.UnitIdolWithMstCostume i);
    }
}

// Namespace: PRISM.Live
public class Live2DMVPlayer : UnityEngine.MonoBehaviour, PRISM.Live.ILiveProgressManagerExtension, System.IDisposable
{
    private PRISM.MoviePlayer moviePlayer;
    private static float SyncTimeInterval;
    private System.IDisposable syncTimeDisposable;
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(PRISM.Definitions.IMstMvStage stage);
    public void StartSyncTime(System.Func<float> getSyncTime);
    public void StopSyncTime();
    public Cysharp.Threading.Tasks.UniTask InitializeAsync();
    public void Play();
    public void Pause(bool pause, float time);
    public void PauseForSeek();
    public float GetTime();
    public void SetSpeed(float speed);
    public void ProcessTime(float time);
    public void OnReplay(float time);
    public void OnFinish();
    public Cysharp.Threading.Tasks.UniTask WaitForPlaying(System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask WaitForStop(System.Threading.CancellationToken cancellationToken);
    public void Dispose();
    private bool <WaitForPlaying>b__15_0();
    private bool <WaitForStop>b__16_0();

    private class <>c__DisplayClass4_0
    {
        public PRISM.Live.Live2DMVPlayer <>4__this;
        public System.Func<float> getSyncTime;
        private bool <StartSyncTime>b__0(long _);
        private void <StartSyncTime>b__1(long _);
    }

    private struct <InitializeAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Live.Live2DMVPlayer <>4__this;
        public PRISM.Definitions.IMstMvStage stage;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <WaitForPlaying>d__15 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Live.Live2DMVPlayer <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <WaitForStop>d__16 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Live.Live2DMVPlayer <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Live
public enum LiveCameraMode : System.Enum
{
    public int value__;
    public static PRISM.Live.LiveCameraMode Normal;
    public static PRISM.Live.LiveCameraMode Focus;
}

// Namespace: PRISM.Live
public struct LiveCameraModeSetting : System.ValueType
{
    public int MusicId;
    public PRISM.Live.LiveCameraMode CameraMode;
    public int FocusPositionIndex;
    public bool Equals(PRISM.Live.LiveCameraModeSetting other);
    public bool Equals(object obj);
    public int GetHashCode();
    public static bool op_Equality(PRISM.Live.LiveCameraModeSetting s1, PRISM.Live.LiveCameraModeSetting s2);
    public static bool op_Inequality(PRISM.Live.LiveCameraModeSetting s1, PRISM.Live.LiveCameraModeSetting s2);
}

// Namespace: PRISM.Live
public class LiveCameraModeSettingExtensions
{
    public static int GetInGameCameraIndex(PRISM.Live.LiveCameraModeSetting setting, bool isSummer);
}

// Namespace: PRISM.Live
public class LiveConstant
{
    public static int UnitMaxIdolCount;
    public static int UnitSummerMaxIdolCount;
    public static int BaseLBMaxUsage;
    public static int CostumeUnlimitedUnitNumber;
    public static int CostumeUnlimitedUnitNumberSummer;
    public static int SummerUnitBaseNumber;
    public static int TotalTechnicalRateRewardIdForShinyEnable;
    public static int AttributeBonusRate;
    public static int SupportBonusRate;
    public int[] SummerUnitSortArray { get; set; }
}

// Namespace: PRISM.Live
public class LiveEnums
{

    public enum LiveActiveSupportEffectType : System.Enum
    {
        public int value__;
        public static LiveActiveSupportEffectType None;
        public static LiveActiveSupportEffectType LastSpurt;
        public static LiveActiveSupportEffectType StartDash;
    }

    public enum LiveSupportEffectConditionType : System.Enum
    {
        public int value__;
        public static LiveSupportEffectConditionType None;
        public static LiveSupportEffectConditionType MatchSongAttribute;
        public static LiveSupportEffectConditionType MatchSongType;
        public static LiveSupportEffectConditionType MatchIdolAttribute;
        public static LiveSupportEffectConditionType MatchIdolUnit;
        public static LiveSupportEffectConditionType VocalParameter;
        public static LiveSupportEffectConditionType DanceParameter;
        public static LiveSupportEffectConditionType VisualParameter;
        public static LiveSupportEffectConditionType MentalParameter;
        public static LiveSupportEffectConditionType TotalParameter;
        public static LiveSupportEffectConditionType SkillIndex;
        public static LiveSupportEffectConditionType MatchIdol;
        public static LiveSupportEffectConditionType MatchIdolCombination;
    }
}

// Namespace: PRISM.Live
public class LiveEventParameter : ENTERPRISE.IViewParameter
{
    private int <EventId>k__BackingField;
    public int EventId { get; set; }
    public System.Type GetViewType();
}

// Namespace: PRISM.Live
public interface IIdol
{
    public int CharacterId { get; set; }
    public PRISM.Domain.CostumeSetData CostumeSet { get; set; }
}

// Namespace: PRISM.Live
public class IIdolExtensions
{
    public static PRISM.UnitIdolWithMstCostume ToUnitIdol(PRISM.Live.IIdol self);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IAccessoryStatus, int> <>9__0_0;
        private int <ToUnitIdol>b__0_0(PRISM.Module.Networking.IAccessoryStatus x);
    }
}

// Namespace: PRISM.Live
public interface ILiveMVIdol : PRISM.Live.IIdol
{
    public PRISM.Definitions.MstCharacterInfo Master { get; set; }
    public bool IsOwned { get; set; }
    public bool IsSame(PRISM.Live.ILiveMVIdol idol);
}

// Namespace: PRISM.Live
public interface ILiveUnit
{
    public int Id { get; set; }
    public string Name { get; set; }
    public int NameId { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Live.IIdol> Idols { get; set; }
    public bool IsCostumeUnlimited { get; set; }
    public int MaxIdolCount { get; set; }
    public bool IsEmpty { get; set; }
}

// Namespace: PRISM.Live
public class LiveCenterEffectCalculator
{
    public static void Calculate(PRISM.Live.LiveIdol[] idols, PRISM.Definitions.MstProduceIdol produceIdol, bool isGuest);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Live.LiveIdol, int> <>9__0_2;
        public static System.Func<PRISM.Live.LiveIdol, int> <>9__0_3;
        private int <Calculate>b__0_2(PRISM.Live.LiveIdol idol);
        private int <Calculate>b__0_3(PRISM.Live.LiveIdol idol);
    }

    private class <>c__DisplayClass0_0
    {
        public PRISM.Live.LiveIdol[] idols;
        private bool <Calculate>g__IsValid|0(PRISM.Definitions.MstLiveCenterEffectDetail effect, PRISM.Live.LiveIdol targetIdol);
        private bool <Calculate>b__4(int id);
    }

    private class <>c__DisplayClass0_1
    {
        public PRISM.Definitions.MstLiveCenterEffectDetail effect;
        private bool <Calculate>b__1(PRISM.Live.LiveIdol idol);
    }

    private class <>c__DisplayClass0_2
    {
        public int id;
        private bool <Calculate>b__5(PRISM.Live.LiveIdol idol);
    }
}

// Namespace: PRISM.Live
public class LiveIdol : PRISM.Live.IIdol
{
    private PRISM.Definitions.MstProduceIdol <Master>k__BackingField;
    private PRISM.Module.Networking.IIdolBaseStatus <IdolBase>k__BackingField;
    private PRISM.Live.LiveIdolParameter <Parameter>k__BackingField;
    private int <UnitBonusRate>k__BackingField;
    private float <LevelGauge>k__BackingField;
    private PRISM.Definitions.MstLiveSkillLevel <Skill>k__BackingField;
    private int <SkillOrder>k__BackingField;
    private PRISM.Domain.CostumeSetData <CostumeSet>k__BackingField;
    private int <InitialFavoriteMarkId>k__BackingField;
    private int <LevelLimit>k__BackingField;
    private PRISM.Module.Networking.IProduceIdolStatus status;
    public PRISM.Definitions.MstProduceIdol Master { get; set; }
    public PRISM.Module.Networking.IIdolBaseStatus IdolBase { get; set; }
    public int CharacterId { get; set; }
    public PRISM.Live.LiveIdolParameter Parameter { get; set; }
    public int UnitBonusRate { get; set; }
    public int StarLevel { get; set; }
    public int AwakeningLevel { get; set; }
    public System.Nullable<System.DateTime> CreateDate { get; set; }
    public PRISM.Module.Networking.ILimitedValueStatus Level { get; set; }
    public float LevelGauge { get; set; }
    public PRISM.Definitions.MstLiveSkillLevel Skill { get; set; }
    public int SkillOrder { get; set; }
    public PRISM.Domain.CostumeSetData CostumeSet { get; set; }
    public int InitialFavoriteMarkId { get; set; }
    public int LevelLimit { get; set; }
    public bool IsLevelLimit { get; set; }
    public bool IsLevelMax { get; set; }
    public bool IsSame(PRISM.Live.LiveIdol idol);
    public void SetUnitBonusRate(int rate);
    public void ChangeInitialFavoriteMarkId(int id);
    public PRISM.Module.Networking.IProduceIdolStatus GetRawProduceIdol();
}

// Namespace: PRISM.Live
public class LiveIdolFactory
{
    private PRISM.Domain.ICachedIdolService <IdolService>k__BackingField;
    private PRISM.Domain.ICachedCostumeService <CostumeService>k__BackingField;
    private PRISM.Domain.ICachedProduceIdolService <ProduceIdolService>k__BackingField;
    private PRISM.Domain.ICachedSupportCharacterService <SupportCharacterService>k__BackingField;
    private PRISM.Domain.ICachedIdolService IdolService { get; set; }
    private PRISM.Domain.ICachedCostumeService CostumeService { get; set; }
    private PRISM.Domain.ICachedProduceIdolService ProduceIdolService { get; set; }
    private PRISM.Domain.ICachedSupportCharacterService SupportCharacterService { get; set; }
    public static Cysharp.Threading.Tasks.UniTask<PRISM.Live.LiveIdolFactory> CreateAsync(PRISM.Legacy.IServiceContainerForLegacy serviceContainer, System.Threading.CancellationToken cancellationToken);
    public System.Collections.Generic.IEnumerable<PRISM.Live.LiveIdol> GetAll();
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISupportCharacterStatus> GetAllSupportCharacters();
    public PRISM.Live.LiveIdol Create(PRISM.Module.Networking.ILiveUnitIdolDetailStatus status, int skillOrder);
    public PRISM.Live.LiveSupportCharacterViewModel Create(PRISM.Module.Networking.ILiveUnitSupportMemberStatus status);

    private struct <CreateAsync>d__16 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Live.LiveIdolFactory> <>t__builder;
        public PRISM.Legacy.IServiceContainerForLegacy serviceContainer;
        public System.Threading.CancellationToken cancellationToken;
        private PRISM.Live.LiveIdolFactory <>7__wrap1;
        private PRISM.Live.LiveIdolFactory <>7__wrap2;
        private PRISM.Live.LiveIdolFactory <>7__wrap3;
        private PRISM.Live.LiveIdolFactory <>7__wrap4;
        private PRISM.Live.LiveIdolFactory <>7__wrap5;
        private Awaiter<PRISM.Domain.ICachedIdolService> <>u__1;
        private Awaiter<PRISM.Domain.ICachedCostumeService> <>u__2;
        private Awaiter<PRISM.Domain.ICachedProduceIdolService> <>u__3;
        private Awaiter<PRISM.Domain.ICachedSupportCharacterService> <>u__4;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private class <GetAll>d__17 : System.Collections.Generic.IEnumerable<PRISM.Live.LiveIdol>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<PRISM.Live.LiveIdol>, System.Collections.IEnumerator, System.IDisposable
    {
        private int <>1__state;
        private PRISM.Live.LiveIdol <>2__current;
        private int <>l__initialThreadId;
        public PRISM.Live.LiveIdolFactory <>4__this;
        private PRISM.Definitions.MasterData <masterData>5__2;
        private System.Collections.Generic.IEnumerator<PRISM.Module.Networking.IProduceIdolStatus> <>7__wrap2;
        private PRISM.Live.LiveIdol System.Collections.Generic.IEnumerator<PRISM.Live.LiveIdol>.Current { get; set; }
        private object System.Collections.IEnumerator.Current { get; set; }
        private void System.IDisposable.Dispose();
        private bool MoveNext();
        private void <>m__Finally1();
        private void System.Collections.IEnumerator.Reset();
        private System.Collections.Generic.IEnumerator<PRISM.Live.LiveIdol> System.Collections.Generic.IEnumerable<PRISM.Live.LiveIdol>.GetEnumerator();
        private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
    }
}

// Namespace: PRISM.Live
public class LiveIdolParameter
{
    public PRISM.Live.LiveIdolParameterUnit Vocal;
    public PRISM.Live.LiveIdolParameterUnit Dance;
    public PRISM.Live.LiveIdolParameterUnit Visual;
    public PRISM.Live.LiveIdolParameterUnit Mental;
    public int BaseTotal { get; set; }
    public int UnitBonus { get; set; }
    public int AttributeBonus { get; set; }
    public int CenterBonus { get; set; }
    public int GuestBonus { get; set; }
    public int Total { get; set; }
    public void ResetBonuses();
    public void ResetCenterBonus();
    public void ResetGuestBonus();
    public void ApplyUnitBonus(int rate);
    public void ApplyAttributeBonus();
    public void ApplyCenterBonus(PRISM.Definitions.MstLiveCenterEffectDetail effect, bool isGuest);
}

// Namespace: PRISM.Live
public class LiveIdolParameterUnit
{
    public int Base;
    private int <UnitBonus>k__BackingField;
    private int <AttributeBonus>k__BackingField;
    private int <CenterBonus>k__BackingField;
    private int <GuestBonus>k__BackingField;
    public int UnitBonus { get; set; }
    public int AttributeBonus { get; set; }
    public int CenterBonus { get; set; }
    public int GuestBonus { get; set; }
    public int Total { get; set; }
    public void ResetBonuses();
    public void ResetCenterBonus();
    public void ResetGuestBonus();
    public void ApplyUnitBonus(int rate);
    public void ApplyAttributeBonus();
    public void ApplyCenterBonus(int effectValue, bool isGuest);
    private int _getBonus(int rate);
}

// Namespace: PRISM.Live
public enum LiveIdolPositionMark : System.Enum
{
    public int value__;
    public static PRISM.Live.LiveIdolPositionMark None;
    public static PRISM.Live.LiveIdolPositionMark OnStage;
    public static PRISM.Live.LiveIdolPositionMark Center;
}

// Namespace: PRISM.Live
public class LiveSupportCharacterViewModel : System.IDisposable
{
    public PRISM.Module.Networking.ISupportCharacterStatus Status;
    public PRISM.Definitions.MstSupportCharacter Master;
    public PRISM.Definitions.IdolParameter Parameter;
    public UniRx.ReactiveProperty<int> FavoriteMarkId;
    public string GetSupportEffectLevelAndTitle();
    public string GetSupportEffectDescription();
    public void ChangeFavoriteMarkId(int id);
    public void Dispose();
    private static int <.ctor>g__GetBonusAppliedValue|4_0(int baseValue, LiveUnitSupportMemberType targetType, <>c__DisplayClass4_0& );

    private struct <>c__DisplayClass4_0 : System.ValueType
    {
        public LiveUnitSupportMemberType type;
    }
}

// Namespace: PRISM.Live
public enum LiveSupportSelectionDisplayMode : System.Enum
{
    public int value__;
    public static PRISM.Live.LiveSupportSelectionDisplayMode None;
    public static PRISM.Live.LiveSupportSelectionDisplayMode Parameter;
    public static PRISM.Live.LiveSupportSelectionDisplayMode SupportEffect;
    public static PRISM.Live.LiveSupportSelectionDisplayMode Num;
}

// Namespace: PRISM.Live
public class LiveUnit : PRISM.Live.ILiveUnit
{
    private static System.Collections.Generic.IReadOnlyDictionary<LiveUnitSupportMemberType, PRISM.Live.LiveSupportCharacterViewModel> EmptyDictionary;
    private string name;
    private PRISM.Module.Networking.ILiveGuestProfileStatus guestProfile;
    private int <Id>k__BackingField;
    private PRISM.Live.LiveIdol[] <Idols>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<int> <SkillOrders>k__BackingField;
    public System.Collections.Generic.IReadOnlyDictionary<LiveUnitSupportMemberType, PRISM.Live.LiveSupportCharacterViewModel> SupportMembers;
    public PRISM.Definitions.MstProduceIdol GuestIdol;
    private bool <IsSummer>k__BackingField;
    public int Id { get; set; }
    public string Name { get; set; }
    public int NameId { get; set; }
    public PRISM.Live.LiveIdol[] Idols { get; set; }
    public System.Collections.Generic.IEnumerable<PRISM.Live.LiveIdol> ParameterTargetIdols { get; set; }
    public System.Collections.Generic.IReadOnlyList<int> SkillOrders { get; set; }
    public bool IsSummer { get; set; }
    public int MaxIdolCount { get; set; }
    private System.Collections.Generic.IReadOnlyList<PRISM.Live.IIdol> PRISM.Live.ILiveUnit.Idols { get; set; }
    public bool IsEmpty { get; set; }
    public void CalculateBonuses(PRISM.Live.MusicData musicData);
    public PRISM.UnitIdolWithMstCostume[] GetOnStageIdols(int onStageMemberCount, PRISM.Live.LiveIdolFactory liveIdolFactory);
    public int GetTotalParameter();
    public int GetSupportBonus();
    public int GetSimulatedSupportBonus(LiveUnitSupportMemberType type, PRISM.Module.Networking.ISupportCharacterStatus supportCharacterStatus);
    public LiveUnitSupportMemberType FindDuplicateSupportType(LiveUnitSupportMemberType exceptType, int supportCharacterId);
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ILiveUnitSlotStatus> GetCostumeChangeRequestData(int position);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ILiveGuestProfileStatus> GetGuestProfileAsync();
    public void UpdateProfile(PRISM.Module.Networking.ILiveGuestProfileStatus profile);
    public int GetAdditionalLife();
    private static int <GetAdditionalLife>g__GetLife|39_0(PRISM.Definitions.MstProduceIdol idol);

    private class <>O
    {
        public static System.Func<PRISM.Live.LiveIdol, bool> <0>__IsAllCharacterVocalSeparatedTarget;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Live.LiveIdol, bool> <>9__15_0;
        public static System.Func<PRISM.Module.Networking.ILiveUnitSupportMemberStatus, LiveUnitSupportMemberType> <>9__29_0;
        public static System.Func<PRISM.Live.LiveIdol, int> <>9__30_0;
        public static System.Func<PRISM.Live.LiveIdol, bool> <>9__31_0;
        public static System.Func<PRISM.Live.LiveIdol, int> <>9__31_1;
        public static System.Func<PRISM.Live.LiveIdol, int> <>9__32_0;
        public static System.Func<PRISM.Live.LiveSupportCharacterViewModel, int> <>9__33_0;
        public static System.Func<System.Collections.Generic.KeyValuePair<LiveUnitSupportMemberType, PRISM.Live.LiveSupportCharacterViewModel>, LiveUnitSupportMemberType> <>9__34_0;
        public static System.Func<System.Collections.Generic.KeyValuePair<LiveUnitSupportMemberType, PRISM.Live.LiveSupportCharacterViewModel>, PRISM.Live.LiveSupportCharacterViewModel> <>9__34_1;
        public static System.Func<System.Collections.Generic.KeyValuePair<LiveUnitSupportMemberType, PRISM.Live.LiveSupportCharacterViewModel>, int> <>9__34_2;
        public static System.Func<PRISM.Definitions.MstLiveCenterEffectDetail, int> <>9__39_1;
        public static System.Func<PRISM.Live.LiveIdol, bool> <>9__41_0;
        private bool <get_ParameterTargetIdols>b__15_0(PRISM.Live.LiveIdol x);
        private LiveUnitSupportMemberType <.ctor>b__29_0(PRISM.Module.Networking.ILiveUnitSupportMemberStatus x);
        private int <CalculateBonuses>b__30_0(PRISM.Live.LiveIdol x);
        private bool <GetOnStageIdols>b__31_0(PRISM.Live.LiveIdol i);
        private int <GetOnStageIdols>b__31_1(PRISM.Live.LiveIdol x);
        private int <GetTotalParameter>b__32_0(PRISM.Live.LiveIdol x);
        private int <GetSupportBonus>b__33_0(PRISM.Live.LiveSupportCharacterViewModel x);
        private LiveUnitSupportMemberType <GetSimulatedSupportBonus>b__34_0(System.Collections.Generic.KeyValuePair<LiveUnitSupportMemberType, PRISM.Live.LiveSupportCharacterViewModel> m);
        private PRISM.Live.LiveSupportCharacterViewModel <GetSimulatedSupportBonus>b__34_1(System.Collections.Generic.KeyValuePair<LiveUnitSupportMemberType, PRISM.Live.LiveSupportCharacterViewModel> m);
        private int <GetSimulatedSupportBonus>b__34_2(System.Collections.Generic.KeyValuePair<LiveUnitSupportMemberType, PRISM.Live.LiveSupportCharacterViewModel> x);
        private int <GetAdditionalLife>b__39_1(PRISM.Definitions.MstLiveCenterEffectDetail effect);
        private bool <get_IsEmpty>b__41_0(PRISM.Live.LiveIdol i);
    }

    private class <>c__DisplayClass29_0
    {
        public PRISM.Live.LiveIdolFactory factory;
        private PRISM.Live.LiveSupportCharacterViewModel <.ctor>b__1(PRISM.Module.Networking.ILiveUnitSupportMemberStatus x);
    }

    private class <>c__DisplayClass31_0
    {
        public System.Collections.Generic.HashSet<int> uniqueCharIds;
        public System.Func<PRISM.Live.LiveIdol, bool> <>9__2;
        private bool <GetOnStageIdols>b__2(PRISM.Live.LiveIdol x);
    }

    private class <>c__DisplayClass35_0
    {
        public LiveUnitSupportMemberType exceptType;
        public int supportCharacterId;
        private bool <FindDuplicateSupportType>b__0(System.Collections.Generic.KeyValuePair<LiveUnitSupportMemberType, PRISM.Live.LiveSupportCharacterViewModel> m);
    }

    private struct <GetGuestProfileAsync>d__37 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ILiveGuestProfileStatus> <>t__builder;
        public PRISM.Live.LiveUnit <>4__this;
        private Awaiter<PRISM.Module.Networking.IGetLiveUnitGuestReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Live
public class LiveMVOption : ENTERPRISE.Data.LegacySaveDataBase
{
    public bool IsLyricsOn;
    public void Reset();
    public bool IsDefault();
}

// Namespace: PRISM.Live
public class LiveMVSeekBar : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.Slider slider;
    private UnityEngine.Transform cutMarkContainer;
    private ENTERPRISE.UI.ButtonBase cutMarkButton;
    private UnityEngine.Sprite earlierCutMarkSprite;
    private UnityEngine.Sprite laterCutMarkSprite;
    private UniRx.Subject<float> onSeek;
    private float totalTime;
    private float[] cutMarkTimes;
    private UnityEngine.UI.Image[] cutMarkImages;
    private float currentTime;
    public System.IObservable<float> OnSeek { get; set; }
    public void Initialize(float totalTime, float[] cutMarkTimes);
    public void Initialize(float totalTime);
    public void UpdateProgress(float time);

    private class <>c__DisplayClass12_0
    {
        public PRISM.Live.LiveMVSeekBar <>4__this;
        public float totalTime;
        public float[] cutMarkTimes;
        private UnityEngine.UI.Image <Initialize>b__0(float time);
        private void <Initialize>b__1(float value);
    }

    private class <>c__DisplayClass12_1
    {
        public float rate;
        public <>c__DisplayClass12_0 CS$<>8__locals1;
        private void <Initialize>b__2();
    }

    private class <>c__DisplayClass13_0
    {
        public float totalTime;
        public PRISM.Live.LiveMVSeekBar <>4__this;
        private void <Initialize>b__0(float value);
    }
}

// Namespace: PRISM.Live
public class LiveProgressManager : System.IDisposable, PRISM.IPausable
{
    private string cueName;
    private PRISM.Live.ILiveProgressManagerExtension[] extensions;
    private CriWare.CriAtomExPlayer player;
    private CriWare.CriAtomExPlayback playback;
    private float <Time>k__BackingField;
    private float <Length>k__BackingField;
    private bool disposed;
    private bool waitFinishedCancelFlag;
    private bool isStageAudioMode;
    private string snapShotName;
    public float Time { get; set; }
    public float Length { get; set; }
    public bool IsFinished { get; set; }
    public Cysharp.Threading.Tasks.UniTask InitializeAsync();
    public void Play();
    public Cysharp.Threading.Tasks.UniTask WaitFinishedAsync(System.Threading.CancellationToken cancellationToken);
    public void Replay(float startTime);
    public void Pause(bool pause);
    public void Stop();
    public void Dispose();
    public T GetExtension<T>();
    private bool <WaitFinishedAsync>b__21_0();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<bool> <>9__19_0;
        public static System.Func<PRISM.Live.ILiveProgressManagerExtension, Cysharp.Threading.Tasks.UniTask> <>9__19_1;
        private bool <InitializeAsync>b__19_0();
        private Cysharp.Threading.Tasks.UniTask <InitializeAsync>b__19_1(PRISM.Live.ILiveProgressManagerExtension x);
    }

    private struct <InitializeAsync>d__19 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Live.LiveProgressManager <>4__this;
        private PRISM.CriAtomCache <acb>5__2;
        private Awaiter<System.ValueTuple<bool, PRISM.CriAtomCache>> <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Live
public interface ILiveProgressManagerExtension : System.IDisposable
{
    public Cysharp.Threading.Tasks.UniTask InitializeAsync();
    public void Play();
    public void ProcessTime(float time);
    public void OnReplay(float time);
    public void OnFinish();
    public void Pause(bool pause, float time);
}

// Namespace: PRISM.Live
public class LiveProgressManagerTimelineExtension : PRISM.Live.ILiveProgressManagerExtension, System.IDisposable
{
    private PRISM.TimelineController timelineController;
    public float OffsetTime;
    private Cysharp.Threading.Tasks.UniTask initializeTask;
    public float Time { get; set; }
    public Cysharp.Threading.Tasks.UniTask InitializeAsync();
    public void Play();
    public void ProcessTime(float time);
    public void OnReplay(float time);
    public void OnFinish();
    public void Pause(bool pause, float time);
    public void Dispose();
    private void _setTimeLineTimeWithOffset(float time);

    private class <>c__DisplayClass5_0
    {
        public PRISM.TimelineController timelineController;
        public PRISM.Live.LiveProgressManagerTimelineExtension <>4__this;
        private bool <.ctor>b__0();
        private void <.ctor>b__1();
    }
}

// Namespace: PRISM.Live
public class LiveSE
{
    public static string SheetName;
    public static PRISM.Definitions.SoundKey Pause;
    public static PRISM.Definitions.SoundKey MVSeekBarAppear;
    public static PRISM.Definitions.SoundKey MVSeekBarSlide;
    public static PRISM.Definitions.SoundKey TechnicalReady;
    public static PRISM.Definitions.SoundKey TechnicalStandby;
    public static PRISM.Definitions.SoundKey TechnicalStart;
}

// Namespace: PRISM.Live
public class LiveSettingPreviewPresenter : UnityEngine.MonoBehaviour, PRISM.IRhythmGameRenderOptionWatcherState
{
    private UnityEngine.UI.RawImage previewImage;
    private string previewChartAsset;
    private System.Collections.Generic.Dictionary<int, PRISM.RhythmGame.RhythmGameNoteDesign> noteDesigns;
    private PRISM.RhythmGame.RhythmGameOption option;
    private UnityEngine.RenderTexture renderTexture;
    private PRISM.RhythmGame.RhythmGameView rhythmGameView;
    private PRISM.RhythmGame.ChartReader chartReader;
    private PRISM.RhythmGame.RhythmGameObjectRenderService objectRenderService;
    private int combo;
    private bool isShinyEnabled;
    private int PRISM.IRhythmGameRenderOptionWatcherState.CurrentCombo { get; set; }
    public PRISM.RhythmGame.ClearType CurrentClearType { get; set; }
    private int PRISM.IRhythmGameRenderOptionWatcherState.AdditionTechnicalScore { get; set; }
    private int PRISM.IRhythmGameRenderOptionWatcherState.ReductionTechnicalScore { get; set; }
    private int PRISM.IRhythmGameRenderOptionWatcherState.TechnicalHighScore { get; set; }
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(PRISM.RhythmGame.RhythmGameOption option, bool isShinyEnabled, PRISM.RhythmGame.RhythmGameLoader loader);
    private Cysharp.Threading.Tasks.UniTask _mainLoop(PRISM.RhythmGame.RhythmGameLoader loader);
    private Cysharp.Threading.Tasks.UniTask<PRISM.RhythmGame.RhythmGameBuildResult> _buildChartAsync(PRISM.RhythmGame.ChartReader reader, PRISM.RhythmGame.RhythmGameLoader loader, System.Threading.CancellationToken cancellationToken);
    public void Terminate();
    private System.ValueTuple<bool, int, int, bool> <_mainLoop>g__GetReloadOptions|21_0();

    private struct <InitializeAsync>d__20 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Live.LiveSettingPreviewPresenter <>4__this;
        public PRISM.RhythmGame.RhythmGameOption option;
        public bool isShinyEnabled;
        public PRISM.RhythmGame.RhythmGameLoader loader;
        private Awaiter<PRISM.RhythmGame.RhythmGameView> <>u__1;
        private Awaiter<byte[]> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_buildChartAsync>d__22 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.RhythmGame.RhythmGameBuildResult> <>t__builder;
        public PRISM.Live.LiveSettingPreviewPresenter <>4__this;
        public PRISM.RhythmGame.RhythmGameLoader loader;
        public System.Threading.CancellationToken cancellationToken;
        public PRISM.RhythmGame.ChartReader reader;
        private Awaiter<PRISM.RhythmGame.RhythmGameNoteDesign> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_mainLoop>d__21 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Live.LiveSettingPreviewPresenter <>4__this;
        public PRISM.RhythmGame.RhythmGameLoader loader;
        private System.Threading.CancellationToken <cancellationToken>5__2;
        private System.Collections.Generic.HashSet<int> <keyBeamOnLaneIndices>5__3;
        private PRISM.RhythmGame.RhythmGameBuildResult <chart>5__4;
        private float <maxTime>5__5;
        private float <time>5__6;
        private System.ValueTuple<bool, int, int, bool> <reloadOptions>5__7;
        private Awaiter <>u__1;
        private Awaiter<PRISM.RhythmGame.RhythmGameBuildResult> <>u__2;
        private Awaiter <>u__3;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Live
public class LiveTokenSaveData : ENTERPRISE.Data.LegacySaveDataBase
{
    private string deviceToken;
    public string DeviceToken { get; set; }
    public void Reset();
    public bool IsDefault();
    public string GenerateDeviceToken();
}

// Namespace: PRISM.Live
public class LiveUIResourceConfig : UnityEngine.ScriptableObject
{
    private UnityEngine.Sprite[] musicRankIconSprites;
    private UnityEngine.Sprite[] liveResultMusicRankIconSprites;
    private UnityEngine.Color[] unitColors;
    public UnityEngine.Sprite GetScoreRankSprite(ScoreRank rank, bool isLiveResult);
    public UnityEngine.Sprite GetComboRankSprite(ComboRank rank, bool isLiveResult);
    public UnityEngine.Color GetUnitColor(int unitId);
    private UnityEngine.Sprite _getMusicRankIconSprite(int rankIndex, bool isLiveResult);
}

// Namespace: PRISM.Live
public class LiveUnitConfirmationSaveDataBase : ENTERPRISE.Data.LegacySaveDataBase, UnityEngine.ISerializationCallbackReceiver
{
    private int[] vocalSeparatedOnMusicIds;
    private int[] alreadyShowVocalSeparatedMusicIds;
    private PRISM.Live.LiveCameraModeSetting[] cameraModeSettings;
    private int SelectedUnitIndex;
    private int specialUnitCount;
    private int selectedSummerUnitIndex;
    private int specialSummerUnitCount;
    private VocalSeparateSoundEffectSetting[] soundEffectSettings;
    public PRISM.RhythmGame.LiveBackgroundMode BackgroundMode;
    private System.Collections.Generic.HashSet<int> <VocalSeparatedOnMusicIds>k__BackingField;
    private System.Collections.Generic.HashSet<int> <AlreadyShowVocalSeparatedMusicIds>k__BackingField;
    private System.Collections.Generic.Dictionary<int, PRISM.Live.LiveCameraModeSetting> <CameraModeSettings>k__BackingField;
    private System.Collections.Generic.Dictionary<int, PRISM.Definitions.VocalSeparatedSoundEffectMode> <SoundEffectModes>k__BackingField;
    public System.Collections.Generic.HashSet<int> VocalSeparatedOnMusicIds { get; set; }
    public System.Collections.Generic.HashSet<int> AlreadyShowVocalSeparatedMusicIds { get; set; }
    public System.Collections.Generic.Dictionary<int, PRISM.Live.LiveCameraModeSetting> CameraModeSettings { get; set; }
    public System.Collections.Generic.Dictionary<int, PRISM.Definitions.VocalSeparatedSoundEffectMode> SoundEffectModes { get; set; }
    public int GetSelectedUnitIndex(int specialUnitCount, bool isSummer);
    public void ApplySelectedUnitIndex(int specialUnitCount, int index, bool isSummer);
    public void Reset();
    public bool IsDefault();
    public void OnBeforeSerialize();
    public void OnAfterDeserialize();

    private struct VocalSeparateSoundEffectSetting : System.ValueType
    {
        public int MusicId;
        public PRISM.Definitions.VocalSeparatedSoundEffectMode SoundEffectMode;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<System.Collections.Generic.KeyValuePair<int, PRISM.Definitions.VocalSeparatedSoundEffectMode>, VocalSeparateSoundEffectSetting> <>9__30_0;
        public static System.Func<PRISM.Live.LiveCameraModeSetting, int> <>9__31_0;
        public static System.Func<VocalSeparateSoundEffectSetting, int> <>9__31_1;
        public static System.Func<VocalSeparateSoundEffectSetting, PRISM.Definitions.VocalSeparatedSoundEffectMode> <>9__31_2;
        private VocalSeparateSoundEffectSetting <OnBeforeSerialize>b__30_0(System.Collections.Generic.KeyValuePair<int, PRISM.Definitions.VocalSeparatedSoundEffectMode> x);
        private int <OnAfterDeserialize>b__31_0(PRISM.Live.LiveCameraModeSetting s);
        private int <OnAfterDeserialize>b__31_1(VocalSeparateSoundEffectSetting x);
        private PRISM.Definitions.VocalSeparatedSoundEffectMode <OnAfterDeserialize>b__31_2(VocalSeparateSoundEffectSetting y);
    }
}

// Namespace: PRISM.Live
public class LiveUtility
{
    public static int GetMusicOnStageMemberCount(PRISM.Live.MusicData musicData);
    public static int GetMusicOnStageMemberCount(PRISM.Module.Networking.ISongStatus song);
    public static System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IMvIdolStatus> GetOnStageMvOriginalMembers(PRISM.Live.MusicData musicData);
    public static bool IsAllCharacterVocalSeparatedTarget(PRISM.Live.IIdol idol);
    public static PRISM.Live.LiveIdolPositionMark GetPositionMark(int position, int onStageMemberCount);
    public static Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.IReadOnlyList<PRISM.Live.LiveMVIdol>> GetLiveMvIdolListAsync(System.Threading.CancellationToken cancellationToken);
    public static string GetUnitIconPath(int unitId);
    public static Cysharp.Threading.Tasks.UniTask WithLoopSEAsync(Cysharp.Threading.Tasks.UniTask task, System.Nullable<PRISM.Definitions.SoundKey> loopKey, System.Nullable<PRISM.Definitions.SoundKey> finishKey);
    public static void PlayClearTypeSE(PRISM.RhythmGame.ClearType clearType);
    public static int GetUnitBonusRate(System.Collections.Generic.HashSet<int> originalMembers, int charaId, bool isFirst);
    public static void ShowShinyLockedModal();
    public static int GetRhythmGamePlayingFps();
    public static Cysharp.Threading.Tasks.UniTask<PRISM.Live.LiveStartData> CreateLiveStartDataAsync(PRISM.Live.LiveUnit unit, PRISM.Live.MusicData musicData, SongDifficultyLevel difficulty, PRISM.Live.LiveIdolFactory liveIdolFactory, PRISM.Live.LiveCameraModeSetting cameraModeSetting, bool isVocalSeparatedOn, LiveStartType startType, PRISM.RhythmGame.LiveBackgroundMode backgroundMode, int usedLiveBoost, PRISM.Live.LiveAutoLoopConfig autoLoopConfig, PRISM.Definitions.VocalSeparatedSoundEffectMode soundEffectMode, System.Threading.CancellationToken ct);
    public static string GetStageAudioSnapShotName(int snapShotType);
    public static Cysharp.Threading.Tasks.UniTask BindBackgroundImageAsync(PRISM.ResourceManagement.IResourceLoader resourceLoader, PRISM.Definitions.MstSong song, UnityEngine.UI.RawImage image, System.Threading.CancellationToken ct);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<System.Collections.Generic.KeyValuePair<LiveUnitSupportMemberType, PRISM.Live.LiveSupportCharacterViewModel>, PRISM.RhythmGame.LiveSupportMember> <>9__12_0;
        public static System.Func<PRISM.Live.LiveIdol, int> <>9__12_1;
        private PRISM.RhythmGame.LiveSupportMember <CreateLiveStartDataAsync>b__12_0(System.Collections.Generic.KeyValuePair<LiveUnitSupportMemberType, PRISM.Live.LiveSupportCharacterViewModel> x);
        private int <CreateLiveStartDataAsync>b__12_1(PRISM.Live.LiveIdol x);
    }

    private class <>c__DisplayClass5_0
    {
        public PRISM.Domain.ICachedCostumeService costumeService;
        public System.Collections.Generic.HashSet<int> ownedIdolIds;
        private PRISM.Live.LiveMVIdol <GetLiveMvIdolListAsync>b__0(PRISM.Definitions.MstIdol idol);
    }

    private struct <BindBackgroundImageAsync>d__14 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        public PRISM.Definitions.MstSong song;
        public System.Threading.CancellationToken ct;
        public UnityEngine.UI.RawImage image;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <CreateLiveStartDataAsync>d__12 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Live.LiveStartData> <>t__builder;
        public PRISM.Live.MusicData musicData;
        public SongDifficultyLevel difficulty;
        public PRISM.Live.LiveUnit unit;
        public PRISM.Live.LiveIdolFactory liveIdolFactory;
        public PRISM.Live.LiveCameraModeSetting cameraModeSetting;
        public bool isVocalSeparatedOn;
        public LiveStartType startType;
        public PRISM.RhythmGame.LiveBackgroundMode backgroundMode;
        public int usedLiveBoost;
        public System.Threading.CancellationToken ct;
        public PRISM.Live.LiveAutoLoopConfig autoLoopConfig;
        public PRISM.Definitions.VocalSeparatedSoundEffectMode soundEffectMode;
        private PRISM.Definitions.MstSong <>7__wrap1;
        private SongDifficultyLevel <>7__wrap2;
        private int <>7__wrap3;
        private PRISM.Live.ScoreRankTarget <>7__wrap4;
        private PRISM.Live.LiveIdol[] <>7__wrap5;
        private PRISM.UnitIdolWithMstCostume[] <>7__wrap6;
        private System.Collections.Generic.IReadOnlyList<PRISM.RhythmGame.LiveSupportMember> <>7__wrap7;
        private int <>7__wrap8;
        private bool <>7__wrap9;
        private int <>7__wrap10;
        private LiveStartType <>7__wrap11;
        private PRISM.RhythmGame.LiveBackgroundMode <>7__wrap12;
        private int <>7__wrap13;
        private int <>7__wrap14;
        private int <>7__wrap15;
        private PRISM.Adapters.LiveResultBeforeAfterStatus <>7__wrap16;
        private PRISM.Live.LiveAutoLoopConfig <>7__wrap17;
        private PRISM.Definitions.VocalSeparatedSoundEffectMode <>7__wrap18;
        private Awaiter<PRISM.Adapters.LiveResultBeforeAfterStatus> <>u__1;
        private Awaiter<bool> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetLiveMvIdolListAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.Collections.Generic.IReadOnlyList<PRISM.Live.LiveMVIdol>> <>t__builder;
        public System.Threading.CancellationToken cancellationToken;
        private <>c__DisplayClass5_0 <>8__1;
        private PRISM.Definitions.MasterData <masterData>5__2;
        private Awaiter<PRISM.Domain.ICachedCostumeService> <>u__1;
        private Awaiter<System.Collections.Generic.HashSet<int>> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <WithLoopSEAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Nullable<PRISM.Definitions.SoundKey> loopKey;
        public Cysharp.Threading.Tasks.UniTask task;
        public System.Nullable<PRISM.Definitions.SoundKey> finishKey;
        private System.IDisposable <>7__wrap1;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Live
public class MusicClearStatusLamp : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.Image image;
    private UnityEngine.Sprite[] lampSprites;
    private PRISM.Legacy.ParamRememberableAnimator lampAnimator;
    private UnityEngine.UI.Image newLampImage;
    private UnityEngine.Animator newLampAnimator;
    public void SetOn(LiveClearInfo type);
    public Cysharp.Threading.Tasks.UniTask PlayOnEffectAsync(LiveClearInfo type, System.Threading.CancellationToken cancellationToken);
    private bool <PlayOnEffectAsync>b__6_0();

    private struct <PlayOnEffectAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Live.MusicClearStatusLamp <>4__this;
        public LiveClearInfo type;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Live
public class MusicClearStatusLampView : UnityEngine.MonoBehaviour
{
    private PRISM.Live.MusicClearStatusLamp[] lamps;
    public void SetLampStatuses(PRISM.Live.MusicData musicData);
    public void SetLampStatus(SongDifficultyLevel difficulty, LiveClearInfo status);
    public Cysharp.Threading.Tasks.UniTask PlayNewLampOnEffectAsync(SongDifficultyLevel difficulty, LiveClearInfo status, System.Threading.CancellationToken cancellationToken);
    private PRISM.Live.MusicClearStatusLamp _getLamp(SongDifficultyLevel difficulty);
}

// Namespace: PRISM.Live
public class FavoriteMusicGroup
{
    private FavoriteSongSlot <Slot>k__BackingField;
    private string <Name>k__BackingField;
    private System.Collections.Generic.HashSet<int> <MusicIds>k__BackingField;
    public FavoriteSongSlot Slot { get; set; }
    public string Name { get; set; }
    public System.Collections.Generic.HashSet<int> MusicIds { get; set; }
}

// Namespace: PRISM.Live
public class LiveMusicSelectionSaveData : ENTERPRISE.Data.LegacySaveDataBase, UnityEngine.ISerializationCallbackReceiver
{
    private static int DefaultMusicId;
    public int CategoryIndex;
    public int MusicId;
    public SongDifficultyLevel MusicDifficulty;
    public int SwitchDisplayIndex;
    public PRISM.Live.MusicRankingCategory RankingCategory;
    public int UnitRankingCategory;
    public string sortFilterSettings;
    private System.Collections.Generic.HashSet<int> <AlreadyReadMusicIds>k__BackingField;
    public PRISM.Live.MusicListSwitchDisplayType ListDisplayType;
    public PRISM.Live.MusicRateType RateViewType;
    private int[] alreadyReadMusicIds;
    public PRISM.Definitions.SortFilterSettings SortFilterSettings { get; set; }
    public System.Collections.Generic.HashSet<int> AlreadyReadMusicIds { get; set; }
    public bool IsDefault();
    public void Reset();
    public void OnBeforeSerialize();
    public void OnAfterDeserialize();
}

// Namespace: PRISM.Live
public enum MusicListSwitchDisplayType : System.Enum
{
    public int value__;
    public static PRISM.Live.MusicListSwitchDisplayType ClearLamp;
    public static PRISM.Live.MusicListSwitchDisplayType ScoreRank;
    public static PRISM.Live.MusicListSwitchDisplayType HighScore;
    public static PRISM.Live.MusicListSwitchDisplayType TechnicalScore;
    public static PRISM.Live.MusicListSwitchDisplayType PlayCount;
}

// Namespace: PRISM.Live
public enum MusicRateType : System.Enum
{
    public int value__;
    public static PRISM.Live.MusicRateType HighScoreRate;
    public static PRISM.Live.MusicRateType TechnicalRate;
}

// Namespace: PRISM.Live
public class MusicCreditsView : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UITextMeshProUGUI artist;
    private ENTERPRISE.UI.UITextMeshProUGUI unitMembers;
    private ENTERPRISE.UI.UITextMeshProUGUI lyricist;
    private ENTERPRISE.UI.UITextMeshProUGUI composer;
    private ENTERPRISE.UI.UITextMeshProUGUI arranger;
    public string Artist { get; set; }
    public string Lyricist { get; set; }
    public string Composer { get; set; }
    public string Arranger { get; set; }
    private void _set(ENTERPRISE.UI.UITextMeshProUGUI tmp, string value);
    public void SetUnitMembers(string text);
}

// Namespace: PRISM.Live
public class MusicData
{
    private System.Collections.Generic.Dictionary<SongDifficultyLevel, PRISM.Module.Networking.ISongDifficultyLevelStatus> difficultyLevelDic;
    private System.Collections.Generic.IEnumerable<PRISM.Live.FavoriteMusicGroup> favoriteMusicGroups;
    private System.Collections.Generic.HashSet<int> limitedVocalSeparatedCharacterIds;
    private PRISM.Module.Networking.ISongStatus <Song>k__BackingField;
    private PRISM.Definitions.MstSong <Master>k__BackingField;
    private bool <IsNew>k__BackingField;
    private bool <IsOnceDisplayed>k__BackingField;
    public PRISM.Module.Networking.ISongStatus Song { get; set; }
    public PRISM.Definitions.MstSong Master { get; set; }
    public bool IsNew { get; set; }
    public bool IsOnceDisplayed { get; set; }
    public bool IsAllCharacterVocalSeparated { get; set; }
    public bool IsLimitedVocalSeparated { get; set; }
    public bool IsSummerOcean { get; set; }
    public bool HasTimeLimit { get; set; }
    public bool IsLimitedVocalSeparatedLocked { get; set; }
    public int GetLevel(SongDifficultyLevel difficulty);
    public int GetHighScore(SongDifficultyLevel difficulty);
    public int GetHighScoreRating(SongDifficultyLevel difficulty);
    public int GetTechnicalScore(SongDifficultyLevel difficulty);
    public float GetTechnicalRating(SongDifficultyLevel difficulty);
    public int GetTotalNoteCount(SongDifficultyLevel difficulty);
    public ScoreRank GetScoreRank(SongDifficultyLevel difficulty);
    public PRISM.Live.ScoreRankTarget GetTargetScoreRanks(SongDifficultyLevel difficulty);
    public ComboRank GetComboRank(SongDifficultyLevel difficulty);
    public int GetMaxCombo(SongDifficultyLevel difficulty);
    public LiveClearInfo GetClearInfo(SongDifficultyLevel difficulty);
    public int GetPlayCount(SongDifficultyLevel difficulty);
    public void SetFavoriteGroupInfo(System.Collections.Generic.IEnumerable<PRISM.Live.FavoriteMusicGroup> favoriteMusicGroups);
    public System.Collections.Generic.HashSet<FavoriteSongSlot> GetCurrentFavoriteSlots();
    public bool IsOriginalMember(int idolId);
    public System.IDisposable GetOriginalMemberCharacterIdHashSet(System.Collections.Generic.HashSet<int>& originalMembers);
    public float GetMinimumTechnicalRateForUnlockMasterDifficulty();
    public Cysharp.Threading.Tasks.UniTask PlayPreviewAsync();
    public void UpdateSong(PRISM.Module.Networking.ISongStatus song);
    public bool CheckVocalSeparatedSatisfy(PRISM.Live.ILiveUnit unit);
    public bool CheckLimitedVocalSeparatedSatisfy(PRISM.Live.ILiveUnit unit, int position);
    public bool IsCandidateVocalSeparatedCharacter(PRISM.Live.IIdol idol);
    public System.Collections.Generic.HashSet<int> GetLimitedVocalSeparatedCharacterIds();
    private bool <GetCurrentFavoriteSlots>b__32_0(PRISM.Live.FavoriteMusicGroup x);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.ISongDifficultyLevelStatus, SongDifficultyLevel> <>9__18_0;
        public static System.Func<PRISM.Module.Networking.IMvIdolStatus, int> <>9__18_1;
        public static System.Func<PRISM.Live.FavoriteMusicGroup, FavoriteSongSlot> <>9__32_1;
        public static System.Func<PRISM.Definitions.MstLiveTotalTechnicalRateReward, float> <>9__35_1;
        public static System.Func<PRISM.Live.IIdol, bool> <>9__46_0;
        private SongDifficultyLevel <.ctor>b__18_0(PRISM.Module.Networking.ISongDifficultyLevelStatus x);
        private int <.ctor>b__18_1(PRISM.Module.Networking.IMvIdolStatus x);
        private FavoriteSongSlot <GetCurrentFavoriteSlots>b__32_1(PRISM.Live.FavoriteMusicGroup x);
        private float <GetMinimumTechnicalRateForUnlockMasterDifficulty>b__35_1(PRISM.Definitions.MstLiveTotalTechnicalRateReward x);
        private bool <CheckVocalSeparatedSatisfy>b__46_0(PRISM.Live.IIdol idol);
    }

    private class <>c__DisplayClass33_0
    {
        public int idolId;
        private bool <IsOriginalMember>b__0(PRISM.Module.Networking.IMvIdolStatus x);
    }

    private class <>c__DisplayClass35_0
    {
        public int level;
        private bool <GetMinimumTechnicalRateForUnlockMasterDifficulty>b__0(PRISM.Definitions.MstLiveTotalTechnicalRateReward x);
    }

    private class <>c__DisplayClass46_0
    {
        public PRISM.Live.MusicData <>4__this;
        public System.Collections.Generic.List<PRISM.Live.IIdol> onStageIdols;
        private bool <CheckVocalSeparatedSatisfy>b__1(PRISM.Live.IIdol i);
        private bool <CheckVocalSeparatedSatisfy>b__2(PRISM.Live.IIdol i);
    }

    private class <>c__DisplayClass46_1
    {
        public PRISM.Live.IIdol i;
        private bool <CheckVocalSeparatedSatisfy>b__3(PRISM.Live.IIdol j);
    }

    private class <>c__DisplayClass47_0
    {
        public PRISM.Live.IIdol idol;
        private bool <CheckLimitedVocalSeparatedSatisfy>b__0(PRISM.Live.IIdol i);
    }
}

// Namespace: PRISM.Live
public class LiveMVIdol : PRISM.Live.ILiveMVIdol, PRISM.Live.IIdol
{
    private PRISM.Definitions.MstCharacterInfo <Master>k__BackingField;
    private bool <IsOwned>k__BackingField;
    private PRISM.Domain.CostumeSetData <CostumeSet>k__BackingField;
    public int CharacterId { get; set; }
    public PRISM.Definitions.MstCharacterInfo Master { get; set; }
    public bool IsOwned { get; set; }
    public PRISM.Domain.CostumeSetData CostumeSet { get; set; }
    public bool IsSame(PRISM.Live.ILiveMVIdol idol);
}

// Namespace: PRISM.Live
public class LiveMVStartData : PRISM.Live.ILiveStartData
{
    private PRISM.Definitions.IMstMvStage <MvStage>k__BackingField;
    private int <CameraIndex>k__BackingField;
    private PRISM.UnitIdolWithMstCostume[] <OnStageIdols>k__BackingField;
    private bool <IsVocalSeparatedOn>k__BackingField;
    private PRISM.RhythmGame.LiveBackgroundMode <BackgroundMode>k__BackingField;
    private PRISM.Definitions.VocalSeparatedSoundEffectMode <SoundEffectMode>k__BackingField;
    private bool <IsPortrait>k__BackingField;
    private PRISM.Definitions.RenderingDynamicRange <RenderingDynamicRange>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<UnityEngine.Color> <RunwayColors>k__BackingField;
    public PRISM.Definitions.IMstMvStage MvStage { get; set; }
    public int CameraIndex { get; set; }
    public PRISM.UnitIdolWithMstCostume[] OnStageIdols { get; set; }
    public bool IsVocalSeparatedOn { get; set; }
    public PRISM.RhythmGame.LiveBackgroundMode BackgroundMode { get; set; }
    public PRISM.Definitions.VocalSeparatedSoundEffectMode SoundEffectMode { get; set; }
    public bool IsPortrait { get; set; }
    public PRISM.Definitions.RenderingDynamicRange RenderingDynamicRange { get; set; }
    public System.Collections.Generic.IReadOnlyList<UnityEngine.Color> RunwayColors { get; set; }
}

// Namespace: PRISM.Live
public class LiveMVUnit : PRISM.Live.ILiveUnit
{
    private string name;
    private int <Id>k__BackingField;
    private PRISM.Live.LiveMVIdol[] <Idols>k__BackingField;
    private PRISM.Live.MusicData <MusicData>k__BackingField;
    private bool <IsSummer>k__BackingField;
    public int Id { get; set; }
    public string Name { get; set; }
    public int NameId { get; set; }
    public PRISM.Live.LiveMVIdol[] Idols { get; set; }
    public PRISM.Live.MusicData MusicData { get; set; }
    public bool IsSummer { get; set; }
    public int MaxIdolCount { get; set; }
    private System.Collections.Generic.IReadOnlyList<PRISM.Live.IIdol> PRISM.Live.ILiveUnit.Idols { get; set; }
    public bool IsEmpty { get; set; }
    public PRISM.UnitIdolWithMstCostume[] GetOnStageIdols(PRISM.Live.MusicData musicData);
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IMvUnitSlotStatus> GetMemberChangeRequestData(int position, PRISM.Live.ILiveMVIdol idol, int exchangePosition);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Live.LiveMVIdol, bool> <>9__29_0;
        private bool <get_IsEmpty>b__29_0(PRISM.Live.LiveMVIdol i);
    }
}

// Namespace: PRISM.Live
public class LiveMVUnitConfirmationSaveData : PRISM.Live.LiveUnitConfirmationSaveDataBase
{
    private int[] forceLDRMusicIds;
    public PRISM.Live.LiveMVUnitConfirmationUnitEditTabType SelectedUnitEditTabType;
    private System.Collections.Generic.HashSet<int> <ForceLDRMusicIds>k__BackingField;
    public System.Collections.Generic.HashSet<int> ForceLDRMusicIds { get; set; }
    public void Reset();
    public bool IsDefault();
    public void OnBeforeSerialize();
    public void OnAfterDeserialize();
}

// Namespace: PRISM.Live
public enum LiveMVUnitConfirmationUnitEditTabType : System.Enum
{
    public int value__;
    public static PRISM.Live.LiveMVUnitConfirmationUnitEditTabType EditableUnit;
    public static PRISM.Live.LiveMVUnitConfirmationUnitEditTabType MVOriginal;
}

// Namespace: PRISM.Live
public class OutGameLiveSE
{
    public static string SheetName;
    public static PRISM.Definitions.SoundKey ScrollUp;
    public static PRISM.Definitions.SoundKey ScrollDown;
    public static PRISM.Definitions.SoundKey LiveStartCrowdLoop;
    public static PRISM.Definitions.SoundKey LiveStart;
    public static PRISM.Definitions.SoundKey ResultCountLoop;
    public static PRISM.Definitions.SoundKey ResultCountEnd;
    public static PRISM.Definitions.SoundKey ResultNewRecord;
    public static PRISM.Definitions.SoundKey ResultCrearlamp;
    public static PRISM.Definitions.SoundKey ResultScoreCBA;
    public static PRISM.Definitions.SoundKey ResultScoreS;
    public static PRISM.Definitions.SoundKey ResultScoreSS;
    public static PRISM.Definitions.SoundKey ResultGetStamp;
    public static PRISM.Definitions.SoundKey ResultAllShiny;
    public static PRISM.Definitions.SoundKey ResultAllPerfect;
    public static PRISM.Definitions.SoundKey ResultAllGreat;
    public static PRISM.Definitions.SoundKey ResultFullCombo;
    public static PRISM.Definitions.SoundKey SkipliveClear;
    public static PRISM.Definitions.SoundKey ResultItemGet;
    public static PRISM.Definitions.SoundKey ResultItemGetRare;
    public static PRISM.Definitions.SoundKey ResultMoneyEnd;
    public static PRISM.Definitions.SoundKey ResultMoneyLoop;
    public static PRISM.Definitions.SoundKey ResultPuSpecial;
    public static PRISM.Definitions.SoundKey RatinggradeUp;
    public static PRISM.Definitions.SoundKey ResultIdolCountLoop;
    public static PRISM.Definitions.SoundKey ResultIdolCountLvUp;
    public static PRISM.Definitions.SoundKey RatinggradeUpCount;
    public static PRISM.Definitions.SoundKey RatinggradeUpCountEnd;
    public static PRISM.Definitions.SoundKey RatinggradeUpGrade;
    public static PRISM.Definitions.SoundKey RatinggradeUpStar;
    public static PRISM.Definitions.SoundKey ResultIdolFanCount;
    public static PRISM.Definitions.SoundKey IconFit;
    public static PRISM.Definitions.SoundKey EventCongratulations;
    public static PRISM.Definitions.SoundKey EventGet;
    public static PRISM.Definitions.SoundKey EventGetRare;
    public static PRISM.Definitions.SoundKey EventBoxOpen;
    public static PRISM.Definitions.SoundKey EventResultIn;
    public static PRISM.Definitions.SoundKey EventAlbumOpen;
}

// Namespace: PRISM.Live
public interface ILiveSettingPopupCaller : PRISM.Legacy.ILegacyCaller
{
    public Cysharp.Threading.Tasks.UniTask ShowAsync(string rhythmGameCueSheetName, System.Threading.CancellationToken cancellationToken);
}

// Namespace: PRISM.Live
public enum MusicRankingCategory : System.Enum
{
    public int value__;
    public static PRISM.Live.MusicRankingCategory HighScore;
    public static PRISM.Live.MusicRankingCategory UnitHighScore;
}

// Namespace: PRISM.Live
public class UserRankingView : UnityEngine.MonoBehaviour
{
    private TMPro.TextMeshProUGUI userNameText;
    private TMPro.TextMeshProUGUI rankingText;
    private TMPro.TextMeshProUGUI rankingLabelText;
    private TMPro.TextMeshProUGUI scoreText;
    public void SetData(string userName, int ranking, int score, bool isAggregation);
    public void SetData(int ranking, int score);
    private void _setData(int ranking, int score, bool isAggregation);
}

// Namespace: PRISM.Live
public interface ILiveResultConnector
{
}

// Namespace: PRISM.Live
public interface ITechnicalChallengeLiveResultConnector
{
}

// Namespace: PRISM.Live
public class LiveResultData
{
    public int Score;
    public ScoreRank ScoreRank;
    public int TechnicalScore;
    public int Combo;
    public int RemainingLife;
    public PRISM.Module.Networking.ILiveTimingJudgementStatus BaseTimingJudgement;
    public PRISM.Module.Networking.ILiveTimingJudgementStatus SkillBoostedTimingJudgement;
    public int SkillBoostedToPerfectCount;
    public int SkillBoostedToGreatCount;
    public int[] ActivatedSkillSlots;
    public PRISM.UnitIdol[] OnStageIdols;
    public PRISM.Definitions.MstSong MusicMaster;
    public SongDifficultyLevel MusicDifficulty;
    public LiveStartType StartType;
    public int UsedLiveBoost;
    public PRISM.RhythmGame.ClearType ClearType;
}

// Namespace: PRISM.Live
public class LiveResultRewardItem : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject itemParent;
    private UnityEngine.GameObject rareItemFrame;
    private ENTERPRISE.OutGame.RewardItem item;
    private UnityEngine.GameObject normalRewardEffect;
    private UnityEngine.GameObject rareRewardEffect;
    private UnityEngine.GameObject rareRewardLoopEffect;
    private bool <IsRare>k__BackingField;
    public bool IsRare { get; set; }
    public void SetUp(PRISM.ResourceManagement.IResourceLoader resourceLoader, PRISM.Module.Networking.IProductWithAmountStatus product, bool isRare);
    public Cysharp.Threading.Tasks.UniTask OpenAsync(System.Threading.CancellationToken cancellationToken);
    public void OpenImmediately();
    public void Reset();

    private struct <OpenAsync>d__11 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Live.LiveResultRewardItem <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Live
public class ScoreRankTarget
{
    public int SS;
    public int S;
    public int A;
    public int B;
    public int C;
    public int GetBorder(ScoreRank scoreRank);
    public ScoreRank GetRank(int score);
}

// Namespace: PRISM.Live
public interface ILiveBehaviour
{
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask StartAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask RetryAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<bool> FinishAsync(PRISM.Live.LiveResultData resultData, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask BreakAsync(System.Threading.CancellationToken ct);
    public void OnJudge(PRISM.RhythmGame.JudgmentResult judgmentResult);
}

// Namespace: PRISM.Live
public class LiveBoostUsageRewardView : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.Image rewardObjectImage;
    private ENTERPRISE.UI.UITextMeshProUGUI liveRewardText;
    private ENTERPRISE.UI.UITextMeshProUGUI expRewardText;
    private ENTERPRISE.UI.UITextMeshProUGUI eventPointRewardText;
    private UnityEngine.GameObject eventPointRewardObject;
    private ENTERPRISE.UI.UITextMeshProUGUI eventPointRewardLabel;
    private UnityEngine.Sprite[] framePanelSprites;
    private UnityEngine.Color[] panelColors;
    private UnityEngine.UI.Image[] panelObjectImages;
    private UnityEngine.Color[] textTitleColors;
    private ENTERPRISE.UI.UITextMeshProUGUI[] panelTitleTexts;
    private UnityEngine.Color[] textColors;
    private ENTERPRISE.UI.UITextMeshProUGUI[] valueTexts;
    public void Show(int multipleValue, int eventId);
    private static string <Show>g__GetRewardMultiplierText|13_0(<>c__DisplayClass13_0& );

    private struct <>c__DisplayClass13_0 : System.ValueType
    {
        public int multipleValue;
    }
}

// Namespace: PRISM.Live
public class LiveBoostUsageSettingStatus
{
    private PRISM.Stamina.StaminaModel lbModel;
    protected PRISM.Live.LiveUnitConfirmationSaveData SaveData;
    private int <MinUsageCount>k__BackingField;
    private int <MaxUsageCount>k__BackingField;
    public int MinUsageCount { get; set; }
    public int MaxUsageCount { get; set; }
    public bool IsAlwaysMaxUsage { get; set; }
    public int UserPreferredUsageCount { get; set; }
    public int AlwaysMaxUsageActualUsageCount { get; set; }
    public int UsageCountSetting { get; set; }
    protected void ValidateUserPreferredUsageCount();
}

// Namespace: PRISM.Live
public class LiveBoostUsageSliderView : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.ToggleButton alwaysMaxToggle;
    private ENTERPRISE.UI.UITextMeshProUGUI currentValueText;
    private ENTERPRISE.UI.UITextMeshProUGUI campaignBadgeText;
    private PRISM.UI.MarkingAttachedSlider slider;
    private UnityEngine.UI.Graphic sliderFill;
    private UnityEngine.UI.Graphic[] sliderCurrentMarkings;
    private UnityEngine.Color sliderNormalColor;
    private UnityEngine.Color sliderEventColor;
    private UnityEngine.Color sliderAlwaysMaxUsageColor;
    private ENTERPRISE.UI.UITextMeshProUGUI campaignAnnotationText;
    private PRISM.Live.LiveBoostUsageRewardView rewardView;
    private UniRx.Subject<int> subject;
    private int previousValue;
    private bool isCampaign;
    private int maxUsageCount;
    private int eventId;
    public System.IObservable<int> OnValueChanged { get; set; }
    public int CurrentValue { get; set; }
    public bool IsAlwaysMax { get; set; }
    public void SetUp(PRISM.Live.LiveBoostUsageSettingStatus status, int eventId);
    private void Start();
    private void _update(int value, bool playSE);
    private void _updateSliderStatus();
    private void <Start>b__23_0(float value);

    private class <>c__DisplayClass22_0
    {
        public PRISM.Live.LiveBoostUsageSliderView <>4__this;
        public PRISM.Live.LiveBoostUsageSettingStatus status;
        private void <SetUp>b__0();
    }
}

// Namespace: PRISM.Live
public struct LiveMvUnitRecommendConfig : System.ValueType, System.IEquatable<PRISM.Live.LiveMvUnitRecommendConfig>
{
    private PRISM.Live.LiveUnitRecommendCostume <Costume>k__BackingField;
    private PRISM.Live.LiveMvUnitRecommendPriority <Priority>k__BackingField;
    private int <UnitId>k__BackingField;
    public PRISM.Live.LiveUnitRecommendCostume Costume { get; set; }
    public PRISM.Live.LiveMvUnitRecommendPriority Priority { get; set; }
    public int UnitId { get; set; }
    public string ToString();
    private bool PrintMembers(System.Text.StringBuilder builder);
    public static bool op_Inequality(PRISM.Live.LiveMvUnitRecommendConfig left, PRISM.Live.LiveMvUnitRecommendConfig right);
    public static bool op_Equality(PRISM.Live.LiveMvUnitRecommendConfig left, PRISM.Live.LiveMvUnitRecommendConfig right);
    public int GetHashCode();
    public bool Equals(object obj);
    public bool Equals(PRISM.Live.LiveMvUnitRecommendConfig other);
    public void Deconstruct(PRISM.Live.LiveUnitRecommendCostume& Costume, PRISM.Live.LiveMvUnitRecommendPriority& Priority, int& UnitId);
}

// Namespace: PRISM.Live
public enum LiveMvUnitRecommendPriority : System.Enum
{
    public int value__;
    public static PRISM.Live.LiveMvUnitRecommendPriority None;
    public static PRISM.Live.LiveMvUnitRecommendPriority Unit;
    public static PRISM.Live.LiveMvUnitRecommendPriority MvOriginalMember;
    public static PRISM.Live.LiveMvUnitRecommendPriority VoiceSeparated;
}

// Namespace: PRISM.Live
public class LiveStartData : PRISM.Live.ILiveStartData
{
    private PRISM.Definitions.MstSong <MusicMaster>k__BackingField;
    private SongDifficultyLevel <MusicDifficulty>k__BackingField;
    private int <MusicLevel>k__BackingField;
    private PRISM.Live.ScoreRankTarget <TargetScoreRanks>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.Live.LiveIdol> <LiveIdols>k__BackingField;
    private PRISM.UnitIdolWithMstCostume[] <OnStageIdols>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.RhythmGame.LiveSupportMember> <SupportMembers>k__BackingField;
    private int <CameraIndex>k__BackingField;
    private bool <IsVocalSeparatedOn>k__BackingField;
    private int <UnitTotalParameter>k__BackingField;
    private LiveStartType <StartType>k__BackingField;
    private PRISM.RhythmGame.LiveBackgroundMode <BackgroundMode>k__BackingField;
    private PRISM.Definitions.VocalSeparatedSoundEffectMode <SoundEffectMode>k__BackingField;
    private int <AdditionalLife>k__BackingField;
    private int <UsedLiveBoost>k__BackingField;
    private int <UnitId>k__BackingField;
    private PRISM.Adapters.LiveResultBeforeAfterStatus <BeforeStatus>k__BackingField;
    private PRISM.Live.LiveAutoLoopConfig <AutoLoopConfig>k__BackingField;
    private PRISM.Live.ILiveAutoLoopViewModel <AutoLoopViewModel>k__BackingField;
    private bool <IsShinyEnabled>k__BackingField;
    public PRISM.Definitions.MstSong MusicMaster { get; set; }
    public PRISM.Definitions.IMstMvStage MvStage { get; set; }
    public SongDifficultyLevel MusicDifficulty { get; set; }
    public int MusicLevel { get; set; }
    public PRISM.Live.ScoreRankTarget TargetScoreRanks { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Live.LiveIdol> LiveIdols { get; set; }
    public PRISM.UnitIdolWithMstCostume[] OnStageIdols { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.RhythmGame.LiveSupportMember> SupportMembers { get; set; }
    public int CameraIndex { get; set; }
    public bool IsVocalSeparatedOn { get; set; }
    public int UnitTotalParameter { get; set; }
    public LiveStartType StartType { get; set; }
    public PRISM.RhythmGame.LiveBackgroundMode BackgroundMode { get; set; }
    public PRISM.Definitions.VocalSeparatedSoundEffectMode SoundEffectMode { get; set; }
    public bool IsPortrait { get; set; }
    public int AdditionalLife { get; set; }
    public int UsedLiveBoost { get; set; }
    public int UnitId { get; set; }
    public PRISM.Adapters.LiveResultBeforeAfterStatus BeforeStatus { get; set; }
    public PRISM.Live.LiveAutoLoopConfig AutoLoopConfig { get; set; }
    public PRISM.Live.ILiveAutoLoopViewModel AutoLoopViewModel { get; set; }
    public int TechnicalHighScore { get; set; }
    public PRISM.RhythmGameRenderMode RenderMode { get; set; }
    public bool IsShinyEnabled { get; set; }
    public Cysharp.Threading.Tasks.UniTask<PRISM.RhythmGame.ChartEntity> LoadChartAsync(PRISM.RhythmGame.RhythmGameOption option);
    public PRISM.Live.ILiveBehaviour CreateBehaviour(PRISM.Adapters.IRhythmGameSpecialViewLocator locator);

    private struct <LoadChartAsync>d__70 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.RhythmGame.ChartEntity> <>t__builder;
        public PRISM.Live.LiveStartData <>4__this;
        public PRISM.RhythmGame.RhythmGameOption option;
        private Awaiter<byte[]> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Live
public class LiveUnitConfirmationSaveData : PRISM.Live.LiveUnitConfirmationSaveDataBase
{
    public int LBUsageCount;
    public bool IsLBAlwaysMaxUsage;
    public int SkipLiveLBUsageCount;
    public bool IsSkipLiveLBAlwaysMaxUsage;
    public PRISM.Live.LiveUnitConfirmationUnitEditTabType SelectedUnitEditTabType;
    public PRISM.Live.LiveUnitConfirmationStatusDisplayType SelectedStatusDisplayType;
    public PRISM.Live.LiveSupportSelectionDisplayMode SelectedSupportStatusDisplayType;
    public int LoopCount;
    public void Reset();
    public bool IsDefault();
}

// Namespace: PRISM.Live
public enum LiveUnitConfirmationStatusDisplayType : System.Enum
{
    public int value__;
    public static PRISM.Live.LiveUnitConfirmationStatusDisplayType None;
    public static PRISM.Live.LiveUnitConfirmationStatusDisplayType Bonuses;
    public static PRISM.Live.LiveUnitConfirmationStatusDisplayType LiveSkill;
    public static PRISM.Live.LiveUnitConfirmationStatusDisplayType CenterEffect;
    public static PRISM.Live.LiveUnitConfirmationStatusDisplayType ProduceIdolLevel;
}

// Namespace: PRISM.Live
public enum LiveUnitConfirmationUnitEditTabType : System.Enum
{
    public int value__;
    public static PRISM.Live.LiveUnitConfirmationUnitEditTabType Status;
    public static PRISM.Live.LiveUnitConfirmationUnitEditTabType Costume;
    public static PRISM.Live.LiveUnitConfirmationUnitEditTabType SupportMember;
    public static PRISM.Live.LiveUnitConfirmationUnitEditTabType Guest;
}

// Namespace: PRISM.Live
public class LiveUnitEditOnDragEffect : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject arrowIcon;
    private DG.Tweening.Tween tween;
    private void OnEnable();
    private void OnDisable();
}

// Namespace: PRISM.Live
public struct LiveUnitRecommendConfig : System.ValueType
{
    public PRISM.Live.LiveUnitRecommendTarget Target;
    public PRISM.Live.LiveUnitRecommendCostume Costume;
    public PRISM.Live.LiveUnitRecommendMemberPriority MemberPriority;
    public int MemberPriorityUnitId;
    public PRISM.Live.LiveUnitRecommendSupportMemberPriority SupportMemberPriority;
    public PRISM.Live.LiveUnitRecommendGuestPriority GuestPriority;
}

// Namespace: PRISM.Live
public enum LiveUnitRecommendTarget : System.Enum
{
    public int value__;
    public static PRISM.Live.LiveUnitRecommendTarget All;
    public static PRISM.Live.LiveUnitRecommendTarget Member;
    public static PRISM.Live.LiveUnitRecommendTarget SupportMember;
    public static PRISM.Live.LiveUnitRecommendTarget Guest;
}

// Namespace: PRISM.Live
public enum LiveUnitRecommendCostume : System.Enum
{
    public int value__;
    public static PRISM.Live.LiveUnitRecommendCostume Default;
    public static PRISM.Live.LiveUnitRecommendCostume MvOriginal;
    public static PRISM.Live.LiveUnitRecommendCostume Random;
    public static PRISM.Live.LiveUnitRecommendCostume RandomCasual;
}

// Namespace: PRISM.Live
public enum LiveUnitRecommendMemberPriority : System.Enum
{
    public int value__;
    public static PRISM.Live.LiveUnitRecommendMemberPriority Parameter;
    public static PRISM.Live.LiveUnitRecommendMemberPriority Unit;
    public static PRISM.Live.LiveUnitRecommendMemberPriority MvOriginalMember;
    public static PRISM.Live.LiveUnitRecommendMemberPriority VoiceSeparated;
}

// Namespace: PRISM.Live
public enum LiveUnitRecommendSupportMemberPriority : System.Enum
{
    public int value__;
    public static PRISM.Live.LiveUnitRecommendSupportMemberPriority Parameter;
    public static PRISM.Live.LiveUnitRecommendSupportMemberPriority SupportEffect;
}

// Namespace: PRISM.Live
public enum LiveUnitRecommendGuestPriority : System.Enum
{
    public int value__;
    public static PRISM.Live.LiveUnitRecommendGuestPriority CenterEffect;
    public static PRISM.Live.LiveUnitRecommendGuestPriority Friend;
    public static PRISM.Live.LiveUnitRecommendGuestPriority LoginDate;
}

// Namespace: PRISM.Live
public class NormalLiveLiveBoostUsageSettingStatus : PRISM.Live.LiveBoostUsageSettingStatus
{
    public bool IsAlwaysMaxUsage { get; set; }
    public int UserPreferredUsageCount { get; set; }
}

// Namespace: PRISM.Live
public class SkipLiveLiveBoostUsageSettingStatus : PRISM.Live.LiveBoostUsageSettingStatus
{
    public bool IsAlwaysMaxUsage { get; set; }
    public int UserPreferredUsageCount { get; set; }
    public int LoopCount { get; set; }
}

// Namespace: PRISM.Item
public class ItemExpireLabel : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject expireLabel;
    private ENTERPRISE.UI.UITextMeshProUGUI expireText;
    private System.IDisposable intervalDisposable;
    public void SetUp(PRISM.Module.Networking.IHavingProductStatus item);
    private void _registerTimer(System.DateTime expireTime);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IExpireDateStatus, System.Nullable<System.DateTime>> <>9__0_0;
        private System.Nullable<System.DateTime> <SetUp>b__0_0(PRISM.Module.Networking.IExpireDateStatus x);
    }

    private class <>c__DisplayClass1_0
    {
        public System.DateTime expireTime;
        public PRISM.Item.ItemExpireLabel <>4__this;
        private void <_registerTimer>b__0(long _);
    }
}

// Namespace: PRISM.Gasha
public class GashaExchangeExpiryDateInfoSave : ENTERPRISE.Data.LegacySaveDataBase
{
    public string[] GashaExchangeIds;
    public bool IsDefault();
    public void Reset();
    public void RegisterID(string gashaExchangeId);
    public string GetID(string gashaExchangeId);

    private class <>c__DisplayClass3_0
    {
        public string gashaExchangeId;
        private bool <RegisterID>b__0(string x);
    }

    private class <>c__DisplayClass4_0
    {
        public string gashaExchangeId;
        private bool <GetID>b__0(string x);
    }
}

// Namespace: PRISM.Gasha
public class GashaExchangeListCellModel
{
    private string <GashaExchangeRewardId>k__BackingField;
    private int <Point>k__BackingField;
    private PRISM.Module.Networking.ILimitedValueStatus <Value>k__BackingField;
    private int <SortId>k__BackingField;
    private PRISM.Gasha.GashaExchangeListCellProductModel <MainProduct>k__BackingField;
    private PRISM.Gasha.GashaExchangeListCellProductModel <AddProduct>k__BackingField;
    private bool <IsDuplicatedDisable>k__BackingField;
    public string GashaExchangeRewardId { get; set; }
    public int Point { get; set; }
    public PRISM.Module.Networking.ILimitedValueStatus Value { get; set; }
    public int SortId { get; set; }
    public PRISM.Gasha.GashaExchangeListCellProductModel MainProduct { get; set; }
    public PRISM.Gasha.GashaExchangeListCellProductModel AddProduct { get; set; }
    public bool IsDuplicatedDisable { get; set; }
    public bool GetAnyCompensationType(ProductType pt);
    private bool _isDuplicatedDisable(PRISM.Gasha.GashaExchangeListCellProductModel model);
}

// Namespace: PRISM.Gasha
public class GashaExchangeListCellProductModel
{
    private PRISM.Module.Networking.IProductWithAmountStatus <Product>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IGashaExtraRewardProductStatus> <ExtraList>k__BackingField;
    private PRISM.Module.Networking.IProductWithAmountStatus <ConvertedProduct>k__BackingField;
    private bool <IsHaving>k__BackingField;
    public PRISM.Module.Networking.IProductWithAmountStatus Product { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IGashaExtraRewardProductStatus> ExtraList { get; set; }
    public PRISM.Module.Networking.IProductWithAmountStatus ConvertedProduct { get; set; }
    public bool IsHaving { get; set; }
}

// Namespace: PRISM.Gasha
public class GashaExchangeListPopupViewModel
{
    private string <GashaExchangeId>k__BackingField;
    private int <Point>k__BackingField;
    private System.Nullable<System.DateTime> <EndDate>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.Gasha.GashaExchangeListCellModel> <RewardList>k__BackingField;
    public string GashaExchangeId { get; set; }
    public int Point { get; set; }
    public System.Nullable<System.DateTime> EndDate { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Gasha.GashaExchangeListCellModel> RewardList { get; set; }
    public bool IsChange { get; set; }
    public bool GetAnyCompensationType(ProductType pt);
    public void SetPopint(int p);
    private bool <get_IsChange>b__18_0(PRISM.Gasha.GashaExchangeListCellModel x);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IGashaExchangeRewardStatus, System.ValueTuple<System.ValueTuple<int, string>, PRISM.Module.Networking.IGashaExchangeRewardStatus>> <>9__16_0;
        public static System.Func<System.ValueTuple<System.ValueTuple<int, string>, PRISM.Module.Networking.IGashaExchangeRewardStatus>, System.ValueTuple<int, string>> <>9__16_1;
        public static System.Func<System.Linq.IGrouping<System.ValueTuple<int, string>, System.ValueTuple<System.ValueTuple<int, string>, PRISM.Module.Networking.IGashaExchangeRewardStatus>>, int> <>9__16_2;
        public static System.Func<System.Linq.IGrouping<System.ValueTuple<int, string>, System.ValueTuple<System.ValueTuple<int, string>, PRISM.Module.Networking.IGashaExchangeRewardStatus>>, PRISM.Gasha.GashaExchangeListCellModel> <>9__16_3;
        private System.ValueTuple<System.ValueTuple<int, string>, PRISM.Module.Networking.IGashaExchangeRewardStatus> <.ctor>b__16_0(PRISM.Module.Networking.IGashaExchangeRewardStatus exchangeReward);
        private System.ValueTuple<int, string> <.ctor>b__16_1(System.ValueTuple<System.ValueTuple<int, string>, PRISM.Module.Networking.IGashaExchangeRewardStatus> x);
        private int <.ctor>b__16_2(System.Linq.IGrouping<System.ValueTuple<int, string>, System.ValueTuple<System.ValueTuple<int, string>, PRISM.Module.Networking.IGashaExchangeRewardStatus>> x);
        private PRISM.Gasha.GashaExchangeListCellModel <.ctor>b__16_3(System.Linq.IGrouping<System.ValueTuple<int, string>, System.ValueTuple<System.ValueTuple<int, string>, PRISM.Module.Networking.IGashaExchangeRewardStatus>> x);
    }

    private class <>c__DisplayClass19_0
    {
        public ProductType pt;
        private bool <GetAnyCompensationType>b__0(PRISM.Gasha.GashaExchangeListCellModel x);
    }
}

// Namespace: PRISM.Gasha
public class GashaLocalSave : ENTERPRISE.Data.LegacySaveDataBase
{
    public string[] GashaIds;
    public bool IsDefault();
    public void Reset();
    public void RegisterGashaId(string gashaId);
}

// Namespace: PRISM.Gasha
public class GashaModel
{
    public static string TutorialGashaId;
    private PRISM.Domain.GashaService gashaService;
    private System.Collections.Generic.List<PRISM.Domain.Gasha> gashas;
    private System.Collections.Generic.List<PRISM.Domain.Gasha> openGashas;
    private System.Collections.Generic.List<PRISM.Domain.Gasha> activeGashas;
    private System.Collections.Generic.List<PRISM.Domain.GashaPrismGauge> <PrismGauges>k__BackingField;
    private System.Collections.Generic.List<PRISM.Gasha.GashaExchangeListPopupViewModel> <GashaExchanges>k__BackingField;
    private System.Collections.Generic.List<string> <ConvertExchangeIdList>k__BackingField;
    private System.Collections.Generic.List<string> <RevertExchangeIdList>k__BackingField;
    private string <SelectedGashaId>k__BackingField;
    private string <SelectedPriceId>k__BackingField;
    private static bool <IsEffectExec>k__BackingField;
    public System.Collections.Generic.List<PRISM.Domain.GashaPrismGauge> PrismGauges { get; set; }
    public System.Collections.Generic.List<PRISM.Gasha.GashaExchangeListPopupViewModel> GashaExchanges { get; set; }
    public System.Collections.Generic.List<string> ConvertExchangeIdList { get; set; }
    public System.Collections.Generic.List<string> RevertExchangeIdList { get; set; }
    public string SelectedGashaId { get; set; }
    public string SelectedPriceId { get; set; }
    public bool IsEffectExec { get; set; }
    public System.Collections.Generic.List<PRISM.Domain.Gasha> OpenGashas { get; set; }
    public System.Collections.Generic.List<PRISM.Domain.Gasha> ActiveGashas { get; set; }
    public Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.List<PRISM.Domain.Gasha>> GetGashaListAsync(System.Threading.CancellationToken ct, bool forceUpdate);
    public Cysharp.Threading.Tasks.UniTask<string> GetInitGashaResourceIdAsync(string selectResourceId, System.Threading.CancellationToken ct);
    public PRISM.Module.Networking.IGashaPriceStatus FindGashaPrice(string gashaPriceId);
    public PRISM.Domain.Gasha FindGasha(string gashaId);
    public bool GetIsOpen(string gashaId);
    public int GetInitGashaIndex(string targetResourceId);
    public int GetPrismPointByGashaId(string gashaId);
    public PRISM.Domain.GashaPrismGauge GetPrismGaugeByGashaId(string gashaId);
    public PRISM.Domain.GashaPrismGauge GetPrismGaugeByGaugeId(string prismGaugeId);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Gasha.GashaResultData> GashaDrawAsync(string gashaId, string gashaPriceId, int execCount, int oldPrismPoint, int oldExChangePoint, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Gasha.GashaResultData> RetryGashaDrawAsync(string gashaId, string gashaPriceId, int oldPrismPoint, int oldExChangePoint, PRISM.Domain.Gasha gasha, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask RetryGashaCommitAsync(string gashaId, string gashaPriceId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaMemberReply> GetGashaMemberAsync(string gashaId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaDetailReply> GetGashaDetailAsync(string gashaId, System.Collections.Generic.IReadOnlyList<string> detailIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaNotesReply> GetGashaNotesAsync(string gashaId, System.Collections.Generic.IReadOnlyList<string> detailIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaRateReply> GetGashaRateAsync(string gashaId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaHistoryListReply> GetGashaHistoryListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaBonusRateReply> GetGashaBonusRateAsync(string gashaId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<string> GetPrismGaugeDetailAsync(string prismGaugeId, System.Threading.CancellationToken ct);
    public PRISM.Gasha.GashaExchangeListPopupViewModel GetGashaExchange(string gashaId);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaExchangeInfoReply> GetGashaExchangeInfoAsync(string gashaExchangeId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IPurchaseGashaExchangeReply> PurchaseGashaExchangeAsync(string gashaExchangeRewardId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask RefreshExchangeListAsync(System.Threading.CancellationToken ct);
    public PRISM.Gasha.GashaExchangeListCellModel GetExchangeRewardProduct(string currentGashaId, string gashaExchangeRewardId);
    public PRISM.Domain.Gasha GetGasha(string gashaId);
    public bool SearchSelectGasha(string gashaId, PRISM.Domain.Gasha& currentGasha);
    public System.Collections.Generic.List<string> LoadGashaNewData();
    public void SaveGashaNewData(string gashaId);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProductDetailReply> GetProductDetailAsync(ProductType productType, int productMstId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Domain.Jewel> GetJewelAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IGashaExchangePointStatus>> GetGashaExchangePointListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<System.ValueTuple<PRISM.Module.Networking.IConvertGashaExchangePointReply, long, long>> ConvertGashaExchangePointAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask RevertGashaExchangePointAsync(System.Collections.Generic.List<string> revertExchangeIdList, System.Threading.CancellationToken ct);
    public string GetLastSelectGasha();
    public System.Collections.Generic.IReadOnlyList<string> GetDetailIdList(string gashaId);
    public int GetStep(string gashaId);
    private void _updateList();
    private bool <GetLastSelectGasha>b__71_0(PRISM.Domain.Gasha x);
    private bool <GetLastSelectGasha>b__71_1(PRISM.Domain.Gasha x);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IGashaStatus, PRISM.Domain.Gasha> <>9__38_0;
        public static System.Func<PRISM.Module.Networking.IGashaPrismGaugeStatus, PRISM.Domain.GashaPrismGauge> <>9__38_1;
        public static System.Func<PRISM.Module.Networking.IGashaExchangeStatus, PRISM.Gasha.GashaExchangeListPopupViewModel> <>9__38_2;
        public static System.Func<PRISM.Module.Networking.IGashaStepStatus, bool> <>9__39_1;
        public static System.Func<PRISM.Domain.Gasha, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IGashaPriceStatus>> <>9__40_0;
        public static System.Func<PRISM.Module.Networking.IGashaExchangeStatus, PRISM.Gasha.GashaExchangeListPopupViewModel> <>9__60_0;
        public static System.Func<PRISM.Domain.Gasha, bool> <>9__71_2;
        public static System.Func<PRISM.Domain.Gasha, int> <>9__71_3;
        public static System.Func<PRISM.Module.Networking.IGashaStepStatus, bool> <>9__73_0;
        public static System.Func<PRISM.Domain.Gasha, bool> <>9__74_0;
        public static System.Func<PRISM.Module.Networking.IGashaPriceStatus, bool> <>9__74_4;
        public static System.Func<PRISM.Domain.Gasha, bool> <>9__74_1;
        public static System.Func<PRISM.Domain.Gasha, int> <>9__74_2;
        public static System.Func<PRISM.Module.Networking.IGashaPriceStatus, bool> <>9__74_5;
        public static System.Func<PRISM.Domain.Gasha, bool> <>9__74_3;
        private PRISM.Domain.Gasha <GetGashaListAsync>b__38_0(PRISM.Module.Networking.IGashaStatus x);
        private PRISM.Domain.GashaPrismGauge <GetGashaListAsync>b__38_1(PRISM.Module.Networking.IGashaPrismGaugeStatus x);
        private PRISM.Gasha.GashaExchangeListPopupViewModel <GetGashaListAsync>b__38_2(PRISM.Module.Networking.IGashaExchangeStatus x);
        private bool <GetInitGashaResourceIdAsync>b__39_1(PRISM.Module.Networking.IGashaStepStatus w);
        private System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IGashaPriceStatus> <FindGashaPrice>b__40_0(PRISM.Domain.Gasha x);
        private PRISM.Gasha.GashaExchangeListPopupViewModel <RefreshExchangeListAsync>b__60_0(PRISM.Module.Networking.IGashaExchangeStatus x);
        private bool <GetLastSelectGasha>b__71_2(PRISM.Domain.Gasha x);
        private int <GetLastSelectGasha>b__71_3(PRISM.Domain.Gasha x);
        private bool <GetStep>b__73_0(PRISM.Module.Networking.IGashaStepStatus stepData);
        private bool <_updateList>b__74_0(PRISM.Domain.Gasha x);
        private bool <_updateList>b__74_1(PRISM.Domain.Gasha x);
        private bool <_updateList>b__74_4(PRISM.Module.Networking.IGashaPriceStatus x);
        private int <_updateList>b__74_2(PRISM.Domain.Gasha x);
        private bool <_updateList>b__74_3(PRISM.Domain.Gasha x);
        private bool <_updateList>b__74_5(PRISM.Module.Networking.IGashaPriceStatus x);
    }

    private class <>c__DisplayClass39_0
    {
        public string selectResourceId;
        private bool <GetInitGashaResourceIdAsync>b__0(PRISM.Domain.Gasha gasha);
        private bool <GetInitGashaResourceIdAsync>b__2(PRISM.Domain.Gasha gasha);
    }

    private class <>c__DisplayClass40_0
    {
        public string gashaPriceId;
        private bool <FindGashaPrice>b__1(PRISM.Module.Networking.IGashaPriceStatus x);
    }

    private class <>c__DisplayClass41_0
    {
        public string gashaId;
        private bool <FindGasha>b__0(PRISM.Domain.Gasha x);
    }

    private class <>c__DisplayClass42_0
    {
        public string gashaId;
        private bool <GetIsOpen>b__0(PRISM.Domain.Gasha x);
    }

    private class <>c__DisplayClass43_0
    {
        public string targetResourceId;
        public string lastSelectGashaId;
        public PRISM.Gasha.GashaModel <>4__this;
        public System.Func<PRISM.Module.Networking.IGashaStepStatus, bool> <>9__5;
        public System.Func<PRISM.Module.Networking.IGashaStepStatus, bool> <>9__6;
        private bool <GetInitGashaIndex>b__0(PRISM.Domain.Gasha x);
        private bool <GetInitGashaIndex>b__1(PRISM.Domain.Gasha x);
        private bool <GetInitGashaIndex>b__5(PRISM.Module.Networking.IGashaStepStatus step);
        private bool <GetInitGashaIndex>b__2(PRISM.Domain.Gasha x);
        private bool <GetInitGashaIndex>b__3(PRISM.Domain.Gasha x);
        private bool <GetInitGashaIndex>b__6(PRISM.Module.Networking.IGashaStepStatus step);
        private bool <GetInitGashaIndex>b__4(PRISM.Domain.Gasha x);
    }

    private class <>c__DisplayClass45_0
    {
        public string gashaId;
        private bool <GetPrismGaugeByGashaId>b__0(PRISM.Domain.Gasha x);
    }

    private class <>c__DisplayClass46_0
    {
        public string prismGaugeId;
        private bool <GetPrismGaugeByGaugeId>b__0(PRISM.Domain.GashaPrismGauge x);
    }

    private class <>c__DisplayClass47_0
    {
        public string gashaId;
        public string gashaPriceId;
        public PRISM.Module.Networking.IGashaDrawReply gashaDrawReply;
        private bool <GashaDrawAsync>b__0(PRISM.Domain.Gasha x);
        private bool <GashaDrawAsync>b__1(PRISM.Module.Networking.IGashaPriceStatus x);
        private bool <GashaDrawAsync>b__2(PRISM.Module.Networking.IGashaPriceStatus x);
        private bool <GashaDrawAsync>b__3(PRISM.Gasha.GashaExchangeListPopupViewModel x);
        private bool <GashaDrawAsync>b__4(PRISM.Domain.Gasha x);
    }

    private class <>c__DisplayClass49_0
    {
        public string gashaId;
        private bool <RetryGashaCommitAsync>b__0(PRISM.Domain.Gasha x);
    }

    private class <>c__DisplayClass57_0
    {
        public string gashaId;
        public PRISM.Domain.Gasha gasha;
        private bool <GetGashaExchange>b__0(PRISM.Domain.Gasha x);
        private bool <GetGashaExchange>b__1(PRISM.Gasha.GashaExchangeListPopupViewModel x);
    }

    private class <>c__DisplayClass59_0
    {
        public PRISM.Module.Networking.IPurchaseGashaExchangeReply data;
        private bool <PurchaseGashaExchangeAsync>b__0(PRISM.Gasha.GashaExchangeListPopupViewModel x);
    }

    private class <>c__DisplayClass61_0
    {
        public string gashaExchangeRewardId;
        private bool <GetExchangeRewardProduct>b__0(PRISM.Gasha.GashaExchangeListCellModel x);
    }

    private class <>c__DisplayClass62_0
    {
        public string gashaId;
        private bool <GetGasha>b__0(PRISM.Domain.Gasha x);
    }

    private class <>c__DisplayClass63_0
    {
        public string gashaId;
        private bool <SearchSelectGasha>b__0(PRISM.Domain.Gasha x);
    }

    private struct <ConvertGashaExchangePointAsync>d__69 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.ValueTuple<PRISM.Module.Networking.IConvertGashaExchangePointReply, long, long>> <>t__builder;
        public PRISM.Gasha.GashaModel <>4__this;
        public System.Threading.CancellationToken ct;
        private long <oldStarSpeck>5__2;
        private long <newStarSpeck>5__3;
        private PRISM.Domain.ProductService <ps>5__4;
        private Awaiter<PRISM.Module.Networking.IConvertGashaExchangePointReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GashaDrawAsync>d__47 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Gasha.GashaResultData> <>t__builder;
        public string gashaId;
        public string gashaPriceId;
        public PRISM.Gasha.GashaModel <>4__this;
        public int execCount;
        public System.Threading.CancellationToken ct;
        private <>c__DisplayClass47_0 <>8__1;
        public int oldPrismPoint;
        public int oldExChangePoint;
        private Awaiter<PRISM.Module.Networking.IGashaDrawReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetGashaExchangePointListAsync>d__68 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IGashaExchangePointStatus>> <>t__builder;
        public PRISM.Gasha.GashaModel <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetGashaExchangePointListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetGashaHistoryListAsync>d__54 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetGashaHistoryListReply> <>t__builder;
        public PRISM.Gasha.GashaModel <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetGashaHistoryListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetGashaListAsync>d__38 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.Collections.Generic.List<PRISM.Domain.Gasha>> <>t__builder;
        public PRISM.Gasha.GashaModel <>4__this;
        public bool forceUpdate;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetGashaListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetInitGashaResourceIdAsync>d__39 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<string> <>t__builder;
        public string selectResourceId;
        public PRISM.Gasha.GashaModel <>4__this;
        public System.Threading.CancellationToken ct;
        private <>c__DisplayClass39_0 <>8__1;
        private Awaiter<System.Collections.Generic.List<PRISM.Domain.Gasha>> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetPrismGaugeDetailAsync>d__56 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<string> <>t__builder;
        public PRISM.Gasha.GashaModel <>4__this;
        public string prismGaugeId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetPrismGaugeDetailReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <PurchaseGashaExchangeAsync>d__59 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IPurchaseGashaExchangeReply> <>t__builder;
        public PRISM.Gasha.GashaModel <>4__this;
        public string gashaExchangeRewardId;
        public System.Threading.CancellationToken ct;
        private <>c__DisplayClass59_0 <>8__1;
        private Awaiter<PRISM.Module.Networking.IPurchaseGashaExchangeReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <RefreshExchangeListAsync>d__60 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Gasha.GashaModel <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetGashaListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <RetryGashaCommitAsync>d__49 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public string gashaId;
        public PRISM.Gasha.GashaModel <>4__this;
        public string gashaPriceId;
        public System.Threading.CancellationToken ct;
        private <>c__DisplayClass49_0 <>8__1;
        private Awaiter<PRISM.Module.Networking.IRetryGashaCommitReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <RetryGashaDrawAsync>d__48 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Gasha.GashaResultData> <>t__builder;
        public PRISM.Gasha.GashaModel <>4__this;
        public string gashaId;
        public string gashaPriceId;
        public System.Threading.CancellationToken ct;
        public int oldPrismPoint;
        public int oldExChangePoint;
        public PRISM.Domain.Gasha gasha;
        private Awaiter<PRISM.Module.Networking.IRetryGashaDrawReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <RevertGashaExchangePointAsync>d__70 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Gasha.GashaModel <>4__this;
        public System.Collections.Generic.List<string> revertExchangeIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IRevertGashaExchangePointReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Gasha
public class GashaPriceExtension
{
    public static Cysharp.Threading.Tasks.UniTask<long> GetTicketRemainingAmountAsync(PRISM.Module.Networking.IGashaPriceStatus gashaPrice, System.Threading.CancellationToken ct);
    public static bool IsTicketGasha(PRISM.Module.Networking.IGashaPriceStatus status);
    public static bool IsOverFreeTime(PRISM.Module.Networking.IGashaPriceStatus status);
    public static bool IsOverDiscountTime(PRISM.Module.Networking.IGashaPriceStatus status);
    public static bool IsSameCountAndPrice(PRISM.Module.Networking.IGashaPriceStatus status, PRISM.Module.Networking.IGashaPriceStatus other);

    private struct <GetTicketRemainingAmountAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<long> <>t__builder;
        public PRISM.Module.Networking.IGashaPriceStatus gashaPrice;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IHavingProductStatus> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Gasha
public class GashaResultData
{
    private bool <IsShowRetryBtn>k__BackingField;
    private bool <IsRetryGasha>k__BackingField;
    private PRISM.Module.Networking.IGashaStatus <Gasha>k__BackingField;
    private PRISM.Module.Networking.IHavingProductGroupStatus <HavingGroup>k__BackingField;
    private System.Collections.Generic.List<PRISM.Module.Networking.IRewardProductStatus> <BonusProductList>k__BackingField;
    private System.Collections.Generic.List<PRISM.Module.Networking.IRewardProductStatus> <GaugeProductList>k__BackingField;
    private System.Collections.Generic.List<PRISM.Module.Networking.IGashaRewardProductStatus> <DrawProductList>k__BackingField;
    private PRISM.Module.Networking.IGashaEffectStatus <Effect>k__BackingField;
    private PRISM.Module.Networking.IGashaPrismGaugeStatus <PrismGauge>k__BackingField;
    private PRISM.Module.Networking.IGashaExchangeStatus <ExchangePoint>k__BackingField;
    private int <OldExChangePoint>k__BackingField;
    private int <OldPrismGaugePoint>k__BackingField;
    public bool IsShowRetryBtn { get; set; }
    public bool IsRetryGasha { get; set; }
    public PRISM.Module.Networking.IGashaStatus Gasha { get; set; }
    public PRISM.Module.Networking.IHavingProductGroupStatus HavingGroup { get; set; }
    public System.Collections.Generic.List<PRISM.Module.Networking.IRewardProductStatus> BonusProductList { get; set; }
    public System.Collections.Generic.List<PRISM.Module.Networking.IRewardProductStatus> GaugeProductList { get; set; }
    public System.Collections.Generic.List<PRISM.Module.Networking.IGashaRewardProductStatus> DrawProductList { get; set; }
    public PRISM.Module.Networking.IGashaEffectStatus Effect { get; set; }
    public PRISM.Module.Networking.IGashaPrismGaugeStatus PrismGauge { get; set; }
    public PRISM.Module.Networking.IGashaExchangeStatus ExchangePoint { get; set; }
    public int OldExChangePoint { get; set; }
    public int OldPrismGaugePoint { get; set; }
    public bool IsAnyPickup { get; set; }
    public bool IsProduceIdolResult { get; set; }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IGashaRewardProductStatus, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IGashaExtraRewardProductStatus>> <>9__50_0;
        public static System.Func<PRISM.Module.Networking.IGashaExtraRewardProductStatus, bool> <>9__50_1;
        public static System.Func<PRISM.Module.Networking.IGashaRewardProductStatus, bool> <>9__52_0;
        private System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IGashaExtraRewardProductStatus> <get_IsAnyPickup>b__50_0(PRISM.Module.Networking.IGashaRewardProductStatus x);
        private bool <get_IsAnyPickup>b__50_1(PRISM.Module.Networking.IGashaExtraRewardProductStatus y);
        private bool <get_IsProduceIdolResult>b__52_0(PRISM.Module.Networking.IGashaRewardProductStatus x);
    }
}

// Namespace: PRISM.Gasha
public class GashaSE
{
    public static string SheetName;
    public static PRISM.Definitions.SoundKey GashaTopSelect;
    public static PRISM.Definitions.SoundKey GashaCharaNameNew;
    public static PRISM.Definitions.SoundKey GashaCharaNameNewS;
    public static PRISM.Definitions.SoundKey GashaCharaNamePiace;
    public static PRISM.Definitions.SoundKey PGashaP6CharaNameR;
    public static PRISM.Definitions.SoundKey PGashaP6CharaNameSR;
    public static PRISM.Definitions.SoundKey PGashaP7CharaNameSSR;
    public static PRISM.Definitions.SoundKey SGashaS2Touch;
    public static PRISM.Definitions.SoundKey SGashaTouchSR;
    public static PRISM.Definitions.SoundKey SGashaTouchSSR;
    public static PRISM.Definitions.SoundKey SGashaS2Zoom;
    public static PRISM.Definitions.SoundKey SGashaHadukiMessage;
    public static PRISM.Definitions.SoundKey SGashaZentaiShokaku;
    public static PRISM.Definitions.SoundKey SGashaP4KakuteiR;
    public static PRISM.Definitions.SoundKey SGashaP4KakuteiSR;
    public static PRISM.Definitions.SoundKey SGashaP4KakuteiSSR;
    public static PRISM.Definitions.SoundKey SGashaS4KakuteiSSRLayer1;
    public static PRISM.Definitions.SoundKey SGashaS4KakuteiSSRLayer2;
    public static PRISM.Definitions.SoundKey GashaResultCard;
    public static PRISM.Definitions.SoundKey GashaResultEnd;
    public static PRISM.Definitions.SoundKey ResultPrismgageGet;
    public static PRISM.Definitions.SoundKey Gasha2S5Bundle;
}

// Namespace: PRISM.Gasha
public class GashaSign : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.RawImage image;
    private UnityEngine.Transform[] transformParents;
    public Cysharp.Threading.Tasks.UniTask PlaySignAsync(int rarity, int mstCharacterInfoId, bool isProduceIdol, int positionIndex, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken ct);
    private void <PlaySignAsync>b__2_0(float r);

    private struct <PlaySignAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Threading.CancellationToken ct;
        public PRISM.Gasha.GashaSign <>4__this;
        public int rarity;
        public int positionIndex;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        public int mstCharacterInfoId;
        public bool isProduceIdol;
        private UnityEngine.UI.RawImage <>7__wrap1;
        private Awaiter<UnityEngine.Material> <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Extensions
public class AnimatorExtensions
{
    public static Cysharp.Threading.Tasks.UniTask WaitAsync(UnityEngine.Animator animator, int layerIndex, bool isFirstWait, Cysharp.Threading.Tasks.PlayerLoopTiming playerLoopTiming, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask PlayAsync(UnityEngine.Animator animator, string stateName, int layerIndex, Cysharp.Threading.Tasks.PlayerLoopTiming playerLoopTiming, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask PlayAsync(UnityEngine.Animator animator, int stateNameHash, int layerIndex, Cysharp.Threading.Tasks.PlayerLoopTiming playerLoopTiming, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask SetTriggerAsync(UnityEngine.Animator animator, int id, int layerIndex, Cysharp.Threading.Tasks.PlayerLoopTiming playerLoopTiming, System.Threading.CancellationToken ct);

    private class <>c__DisplayClass0_0
    {
        public UnityEngine.Animator animator;
        public int layerIndex;
        private bool <WaitAsync>b__0();
    }

    private struct <WaitAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public UnityEngine.Animator animator;
        public int layerIndex;
        public bool isFirstWait;
        public System.Threading.CancellationToken ct;
        private <>c__DisplayClass0_0 <>8__1;
        public Cysharp.Threading.Tasks.PlayerLoopTiming playerLoopTiming;
        private System.Threading.CancellationTokenSource <tokenSource>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Extensions
public class CanvasGroupExtensions
{
    public static Cysharp.Threading.Tasks.UniTask FadeInAsync(UnityEngine.CanvasGroup self, float duration);
    public static Cysharp.Threading.Tasks.UniTask FadeOutAsync(UnityEngine.CanvasGroup self, float duration);
    private static Cysharp.Threading.Tasks.UniTask FadeAsync(UnityEngine.CanvasGroup self, bool isIn, float duration);

    private struct <FadeAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public UnityEngine.CanvasGroup self;
        public bool isIn;
        public float duration;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Extensions
public class DOTweenExtensions
{
    public static T ToReusable<T>(T t, UnityEngine.GameObject gameObject);
    public static DG.Tweening.Core.TweenerCore<string, string, DG.Tweening.Plugins.Options.StringOptions> DOText<T>(T target, string endValue, float duration, bool richTextEnabled, DG.Tweening.ScrambleMode scrambleMode, string scrambleChars);

    private class <>c__DisplayClass1_0`1<T>
    {
        public T target;
        private string <DOText>b__0();
        private void <DOText>b__1(string x);
    }
}

// Namespace: PRISM.Extensions
public class ScrollRectExtensions
{
    public static void RebuildLayoutAndAdjustMovementType(UnityEngine.UI.ScrollRect scrollRect);
    public static void JumpTo(UnityEngine.UI.ScrollRect scrollRect, int index, int offset);
}

// Namespace: PRISM.Extensions
public interface INormalizedPositionCalculator
{
    public float GetNormalizedPosition(UnityEngine.UI.ScrollRect rect, int index, int offset);
}

// Namespace: PRISM.Extensions
public class NormalizedPositionCalculatorBase : PRISM.Extensions.INormalizedPositionCalculator
{
    protected float ContentSize(UnityEngine.RectTransform content);
    public float GetNormalizedPosition(UnityEngine.UI.ScrollRect rect, int index, int offset);
}

// Namespace: PRISM.Extensions
public class VertialNormalizedPositionCalculator : PRISM.Extensions.NormalizedPositionCalculatorBase
{
    protected float ContentSize(UnityEngine.RectTransform content);
}

// Namespace: PRISM.Extensions
public class HorizontalNormalizedPositionCalculator : PRISM.Extensions.NormalizedPositionCalculatorBase
{
    protected float ContentSize(UnityEngine.RectTransform content);
}

// Namespace: PRISM.Extensions
public class TMPExtensions
{
    public static Cysharp.Threading.Tasks.UniTask AnimateNumberCountingUpAsync(TMPro.TextMeshProUGUI self, float startNumber, float number, System.Threading.CancellationToken cancellationToken, float duration, string format, bool punch);
    public static Cysharp.Threading.Tasks.UniTask AnimateNumberCountingUpAsync(TMPro.TextMeshProUGUI self, float startNumber, float number, System.Action<float> onNumberChange, System.Threading.CancellationToken cancellationToken, float duration, bool punch);
    public static Cysharp.Threading.Tasks.UniTask AnimateNumberCountingUpAsync(TMPro.TextMeshProUGUI self, System.Action<float> onProgress, System.Threading.CancellationToken cancellationToken, float duration, bool punch);
    public static Cysharp.Threading.Tasks.UniTask BindAsync(Cysharp.Threading.Tasks.UniTask<TMPro.TMP_ColorGradient> self, TMPro.TextMeshProUGUI textMeshProUGUI, System.Threading.CancellationToken cancellationToken);
    public static void SetLineBreakText(TMPro.TextMeshProUGUI self, string text, int lineBreakCount);

    private class <>c__DisplayClass0_0
    {
        public TMPro.TextMeshProUGUI self;
        public string format;
        private void <AnimateNumberCountingUpAsync>b__0(float num);
    }

    private class <>c__DisplayClass1_0
    {
        public System.Action<float> onNumberChange;
        public float startNumber;
        public float number;
        private void <AnimateNumberCountingUpAsync>b__0(float p);
    }

    private class <>c__DisplayClass2_0
    {
        public System.Action<float> onProgress;
        private void <AnimateNumberCountingUpAsync>b__0(float p);
    }

    private struct <AnimateNumberCountingUpAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Action<float> onProgress;
        public float duration;
        public System.Threading.CancellationToken cancellationToken;
        public bool punch;
        public TMPro.TextMeshProUGUI self;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <BindAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public Cysharp.Threading.Tasks.UniTask<TMPro.TMP_ColorGradient> self;
        public TMPro.TextMeshProUGUI textMeshProUGUI;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter<TMPro.TMP_ColorGradient> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Exchange
public class ExchangePriceRateClientModel
{
    private PRISM.Module.Networking.IRangeStatus <Range>k__BackingField;
    private PRISM.Module.Networking.IProductWithAmountStatus <ProductWithAmount>k__BackingField;
    public PRISM.Module.Networking.IRangeStatus Range { get; set; }
    public PRISM.Module.Networking.IProductWithAmountStatus ProductWithAmount { get; set; }
    public bool IsSetRangeMax { get; set; }
    public string RateText { get; set; }
    public int Price { get; set; }
    public bool IsMatchRate(int exchangeCount);
    public bool IsOverPriceRate(int totalExchangeCount);
    public int GetRemainingExchangeCount(int totalExchangeCount);
}

// Namespace: PRISM.Exchange
public class ExchangeSaveData : ENTERPRISE.Data.LegacySaveDataBase, UnityEngine.ISerializationCallbackReceiver
{
    private System.Collections.Generic.List<GoodsListData> serializeGoodsListDatas;
    private System.Collections.Generic.Dictionary<int, System.Collections.Generic.List<int>> goodsListDatas;
    public bool IsDefault();
    public void Reset();
    public bool IsNewGoods(int groupId, int productId);
    public bool IsAddedGoods(int mstExchangeGroupId, int mstExchangeProductId);
    public void SubscribeNewGoods(PRISM.Module.Networking.IExchangeGroupStatus group, PRISM.Module.Networking.IExchangeProductStatus goods);
    public void SubscribeNewGoods(int groupID, int goodsID);
    public void OnBeforeSerialize();
    public void OnAfterDeserialize();

    private class GoodsListData
    {
        public int GroupID;
        public System.Collections.Generic.List<int> GoodsIDs;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<System.Collections.Generic.KeyValuePair<int, System.Collections.Generic.List<int>>, GoodsListData> <>9__9_0;
        public static System.Func<GoodsListData, int> <>9__10_0;
        public static System.Func<GoodsListData, System.Collections.Generic.List<int>> <>9__10_1;
        private GoodsListData <OnBeforeSerialize>b__9_0(System.Collections.Generic.KeyValuePair<int, System.Collections.Generic.List<int>> pair);
        private int <OnAfterDeserialize>b__10_0(GoodsListData data);
        private System.Collections.Generic.List<int> <OnAfterDeserialize>b__10_1(GoodsListData data);
    }
}

// Namespace: PRISM.Mission
public class MissionNoticePresenter : UnityEngine.MonoBehaviour
{
    private PRISM.MissionNoticeView view;
    public System.Action<PRISM.Mission.MissionNoticePresenter> EndCallBack;
    public void Initialize(int missionId, int missionTypeId, int missionCategoryId, int missionAddMore);
    private Cysharp.Threading.Tasks.UniTask UpdateNotice();
    private bool <UpdateNotice>b__3_0();

    private struct <UpdateNotice>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Mission.MissionNoticePresenter <>4__this;
        private System.IDisposable <_>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Mission
public class MissionNoticeSystem : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject noticePrefab;
    private PRISM.Definitions.ScopedReactiveProperty<bool> isActive;
    private System.Collections.Generic.List<PRISM.Mission.MissionNoticePresenter> noticeViewList;
    private System.Collections.Generic.List<MissionNoticeInfo> waitMissionInfoList;
    private int viewNoticeMax;
    public System.IDisposable CreateActiveScope(bool isActive);
    public void ShowNoticeMissionComplete(int missionId, int missionType, int categoryId);
    public void ShowOverNoticeMissionComplete(int missionAddMore);
    public void Clear();
    private void ShowNotice(int missionId, int missionType, int missionCategoryId, int missionAddMore);
    public void Update();
    private void <ShowNotice>b__10_0(PRISM.Mission.MissionNoticePresenter presenter);

    private class MissionNoticeInfo
    {
        public int id;
        public int type;
        public int categoryId;
        public int addMore;
    }
}

// Namespace: PRISM.UI
public class TexAdditive : UnityEngine.EventSystems.UIBehaviour, UnityEngine.UI.IMaterialModifier
{
    private static int TintColorID;
    private static int EffectTextureID;
    private static int AdditiveAmountID;
    private UnityEngine.UI.Graphic graphic;
    private UnityEngine.Material texAdditiveMat;
    private UnityEngine.Shader shader;
    private UnityEngine.Color tintColor;
    private UnityEngine.Texture effectTexture;
    private float additiveAmount;
    public UnityEngine.UI.Graphic Graphic { get; set; }
    public UnityEngine.Color TintColor { get; set; }
    public UnityEngine.Texture EffectTexture { get; set; }
    public float AdditiveAmount { get; set; }
    public UnityEngine.Material GetModifiedMaterial(UnityEngine.Material baseMaterial);
    protected void OnEnable();
    protected void OnDisable();
    private void _releaseMaterial();
    protected void OnDidApplyAnimationProperties();
}

// Namespace: PRISM.UI
public class CenteringObjectsOutsideSafeArea : UnityEngine.MonoBehaviour
{
    private UnityEngine.RectTransform rectMarginObj;
    private UnityEngine.RectTransform rectCenteringReferenceObjInMargin;
    public void Adjust();
}

// Namespace: PRISM.UI
public enum LvRange : System.Enum
{
    public int value__;
    public static PRISM.UI.LvRange Min;
    public static PRISM.UI.LvRange InRange;
    public static PRISM.UI.LvRange Max;
    public static PRISM.UI.LvRange MinMax;
}

// Namespace: PRISM.UI
public enum IdolListTabType : System.Enum
{
    public int value__;
    public static PRISM.UI.IdolListTabType PI;
    public static PRISM.UI.IdolListTabType SC;
    public static PRISM.UI.IdolListTabType FU;
}

// Namespace: PRISM.UI
public enum CharacterType : System.Enum
{
    public int value__;
    public static PRISM.UI.CharacterType ProduceIdol;
    public static PRISM.UI.CharacterType SupportCharacter;
    public static PRISM.UI.CharacterType FesIdol;
}

// Namespace: PRISM.UI
public enum DisplayDetailPopupTabType : System.Enum
{
    public int value__;
    public static PRISM.UI.DisplayDetailPopupTabType All;
    public static PRISM.UI.DisplayDetailPopupTabType InLive;
    public static PRISM.UI.DisplayDetailPopupTabType InProduce;
}

// Namespace: PRISM.UI
public enum SupportCharaIconDisplayType : System.Enum
{
    public int value__;
    public static PRISM.UI.SupportCharaIconDisplayType Default;
    public static PRISM.UI.SupportCharaIconDisplayType Parameter;
    public static PRISM.UI.SupportCharaIconDisplayType SupportEffect;
    public static PRISM.UI.SupportCharaIconDisplayType GoodSchedule;
    public static PRISM.UI.SupportCharaIconDisplayType Num;
}

// Namespace: PRISM.UI
public enum ProduceIdolIconDisplayType : System.Enum
{
    public int value__;
    public static PRISM.UI.ProduceIdolIconDisplayType Total;
    public static PRISM.UI.ProduceIdolIconDisplayType Parameter;
    public static PRISM.UI.ProduceIdolIconDisplayType IdolInfo;
    public static PRISM.UI.ProduceIdolIconDisplayType AwakeningLv;
    public static PRISM.UI.ProduceIdolIconDisplayType LiveSkill;
    public static PRISM.UI.ProduceIdolIconDisplayType CenterEffect;
    public static PRISM.UI.ProduceIdolIconDisplayType Num;
}

// Namespace: PRISM.UI
public enum LvTicketSelectorButtonType : System.Enum
{
    public int value__;
    public static PRISM.UI.LvTicketSelectorButtonType LvMinus;
    public static PRISM.UI.LvTicketSelectorButtonType LvPlus;
    public static PRISM.UI.LvTicketSelectorButtonType TicketMinus;
    public static PRISM.UI.LvTicketSelectorButtonType TicketPlus;
}

// Namespace: PRISM.UI
public enum LvTicketSelectorButtonStateType : System.Enum
{
    public int value__;
    public static PRISM.UI.LvTicketSelectorButtonStateType Default;
    public static PRISM.UI.LvTicketSelectorButtonStateType Min;
    public static PRISM.UI.LvTicketSelectorButtonStateType Max;
    public static PRISM.UI.LvTicketSelectorButtonStateType Fix;
}

// Namespace: PRISM.UI
public enum SelectFavoriteMarkPopupType : System.Enum
{
    public int value__;
    public static PRISM.UI.SelectFavoriteMarkPopupType ProduceIdol;
    public static PRISM.UI.SelectFavoriteMarkPopupType SupportChara;
    public static PRISM.UI.SelectFavoriteMarkPopupType FesIdol;
    public static PRISM.UI.SelectFavoriteMarkPopupType FesUnit;
}

// Namespace: PRISM.UI
public enum UpgradingDisplayType : System.Enum
{
    public int value__;
    public static PRISM.UI.UpgradingDisplayType Live;
    public static PRISM.UI.UpgradingDisplayType Produce;
}

// Namespace: PRISM.UI
public enum InsufficientReasonType : System.Enum
{
    public int value__;
    public static PRISM.UI.InsufficientReasonType None;
    public static PRISM.UI.InsufficientReasonType Items;
    public static PRISM.UI.InsufficientReasonType Money;
    public static PRISM.UI.InsufficientReasonType MoneyAndItems;
    public static PRISM.UI.InsufficientReasonType Star;
}

// Namespace: PRISM.UI
public enum BitProduceIdolUpgradingFilterType : System.Enum
{
    public int value__;
    public static PRISM.UI.BitProduceIdolUpgradingFilterType None;
    public static PRISM.UI.BitProduceIdolUpgradingFilterType PIdolLv;
    public static PRISM.UI.BitProduceIdolUpgradingFilterType Awakening;
    public static PRISM.UI.BitProduceIdolUpgradingFilterType Training;
}

// Namespace: PRISM.UI
public class BitProduceIdolUpgradingFilterTypeExtensions
{
    public static bool HasFlagAny(PRISM.UI.BitProduceIdolUpgradingFilterType type, PRISM.UI.BitProduceIdolUpgradingFilterType searchType);
}

// Namespace: PRISM.UI
public enum BitSupportCharaUpgradingFilterType : System.Enum
{
    public int value__;
    public static PRISM.UI.BitSupportCharaUpgradingFilterType None;
    public static PRISM.UI.BitSupportCharaUpgradingFilterType Training;
    public static PRISM.UI.BitSupportCharaUpgradingFilterType MasterTraining;
}

// Namespace: PRISM.UI
public class BitSupportCharaUpgradingFilterTypeExtensions
{
    public static bool HasFlagAny(PRISM.UI.BitSupportCharaUpgradingFilterType type, PRISM.UI.BitSupportCharaUpgradingFilterType searchType);
}

// Namespace: PRISM.UI
public class DiamondDisplay : UnityEngine.MonoBehaviour
{
    private PRISM.UI.DiamondView[] diamonds;
    private UnityEngine.Sprite imgDiamond;
    private UnityEngine.Sprite imgBlankDiamond;
    private UnityEngine.Animator effectAnimator;
    protected UnityEngine.GameObject diamondEffectBg;
    protected UnityEngine.GameObject diamondEffectFr;
    public void Set(int value);
}

// Namespace: PRISM.UI
public class DiamondView : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.Image diamondImage;
    public void Set(UnityEngine.Sprite img);
}

// Namespace: PRISM.UI
public class EachCharactersCameraSettingAdjuster
{
    private static UnityEngine.Vector2 DefaultLensShift;
    private static UnityEngine.Vector2 HadukiLensShift;
    public static void Adjust(PRISM.Common.UI3DModelViewer viewer, ScreenType screenType, int mstCharacterInfoId);
    public static void AdjustBirthday(PRISM.Common.UI3DModelViewer viewer, int mstCharacterInfoId);
    private static void _setCameraFovAndPositionYScale(PRISM.Common.UI3DModelViewer viewer, float fov, float positionYOffset, UnityEngine.Vector2 lensShift);
}

// Namespace: PRISM.UI
public class FesUnitIconIdolView : UnityEngine.MonoBehaviour, System.IDisposable
{
    private UnityEngine.Transform trIdolOffset;
    private UnityEngine.CanvasGroup cgSeparatorLeft;
    private UnityEngine.CanvasGroup cgSeparatorRight;
    private System.Threading.CancellationTokenSource cts;
    public void Inactivate();
    public Cysharp.Threading.Tasks.UniTask ActivateAsync(int produceIdolId, bool isSeparatorLeftOn, bool isSeparatorRightOn, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    public void Reset();
    public void Dispose();
    private Cysharp.Threading.Tasks.UniTask _loadAlignedFaceIdolAsync(int produceIdolId, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken ct);
    private void OnDestroy();

    private struct <ActivateAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.UI.FesUnitIconIdolView <>4__this;
        public bool isSeparatorLeftOn;
        public bool isSeparatorRightOn;
        public int produceIdolId;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_loadAlignedFaceIdolAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        public int produceIdolId;
        public System.Threading.CancellationToken ct;
        public PRISM.UI.FesUnitIconIdolView <>4__this;
        private Awaiter<UnityEngine.GameObject> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.UI
public class FesUnitIdolPositioning : UnityEngine.MonoBehaviour
{
    private PRISM.UI.FesUnitIconIdolView[] iconIdolViews;
    private UnityEngine.CanvasGroup currentGroup;
    private System.Threading.CancellationToken ct;
    private int unitMemberNum;
    public void SetIdolPlacement(System.Collections.Generic.IReadOnlyList<int> idolList, PRISM.ResourceManagement.IResourceLoader resourceLoader);
}

// Namespace: PRISM.UI
public class FUnitIconView : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UIButton btn;
    private UnityEngine.UI.Image imgBg;
    private PRISM.UIGradient uiGradient;
    private PRISM.UI.FesUnitIdolPositioning fesUnitIdolPositioning;
    private UnityEngine.UI.RawImage imgFavoriteMark;
    private UnityEngine.CanvasGroup cgFavoriteMark;
    private UnityEngine.UI.RawImage imgRank;
    private UnityEngine.UI.Image imgRankFrame;
    private PRISM.Legacy.ParamRememberableAnimator rankEffectAnimator;
    private UnityEngine.CanvasGroup cgInheritance;
    private ENTERPRISE.UI.UITextMeshProUGUI txtInheritanceCount;
    private UnityEngine.GameObject goParameter;
    private ENTERPRISE.UI.UITextMeshProUGUI txtParameter;
    private ENTERPRISE.UI.ColorToOutlineForTextMeshProUGUI txtOutlineColor;
    private UnityEngine.CanvasGroup cgStatusLabel;
    private ENTERPRISE.UI.UITextMeshProUGUI txtStatusLabel;
    private UnityEngine.Gradient[] gradients;
    private PRISM.UIGrayOutController grayOutController;
    private UnityEngine.CanvasGroup cgSelectedCursor;
    private System.Threading.CancellationToken ct;
    private bool isAwakeCompleted;
    private UniRx.Subject<System.ValueTuple<int, UnityEngine.GameObject>> onClickSubject;
    private UniRx.Subject<System.ValueTuple<int, UnityEngine.GameObject>> onLongPressSubject;
    private int index;
    private OrderType orderType;
    private string unitName;
    private UniRx.CompositeDisposable disposables;
    private System.Collections.Generic.List<string> statusLabelList;
    private int nextStatusIndex;
    private System.IDisposable statusLabelBlinkDisposable;
    private System.IDisposable replaceStatusLabelDisposable;
    private UniRx.Subject<UniRx.Unit> replaceLabelSubject;
    public System.IObservable<System.ValueTuple<int, UnityEngine.GameObject>> OnClick { get; set; }
    public System.IObservable<System.ValueTuple<int, UnityEngine.GameObject>> OnLongPress { get; set; }
    private void Awake();
    private void _initialize();
    public Cysharp.Threading.Tasks.UniTask SetupFUnitIconAsync(PRISM.Common.Model.FUnitIcon fuIcon, PRISM.ResourceManagement.IResourceLoader resourceLoader, int dataIndex);
    public Cysharp.Threading.Tasks.UniTask SetupFUnitIconForIdolListAsync(PRISM.Common.Model.FUnitIcon fuIcon, System.IObservable<float> labelBlinkObservable, PRISM.ResourceManagement.IResourceLoader resourceLoader, int dataIndex);
    public void SetupFUnitIconForFUnitDetail(int unitId, System.Collections.Generic.IReadOnlyList<int> idolList, int inheritanceCount, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    public void SetupFUnitIconForProduceResult(int unitId, System.Collections.Generic.IReadOnlyList<int> idolList, int inheritanceCount, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    public Cysharp.Threading.Tasks.UniTask SetupFUnitIconTapNotAvailableAsync(PRISM.Common.Model.FUnitIcon fuIcon, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    public void SetOnClickContext(PRISM.IContextClick<int> context);
    public void SetOnClickContext(System.Action<int> clickAction, System.Action<int> longPressAction);
    private Cysharp.Threading.Tasks.UniTask _setupIconAsync(PRISM.Common.Model.FUnitIcon fuIcon, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    private void _setRankEffect(ProduceParameterRank rank);
    public void SetFavoriteMark(int mstFavoriteMarkId, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    public void SetGrayOut(bool isGrayOut);
    public void SwitchSelectedCursor(bool isActive);
    public void SetButtonEnable(bool isEnable);
    private void _setTotal(OrderType type, PRISM.Module.Networking.IProduceParameterStatus parameter);
    private void _switchCanvasGroup(UnityEngine.CanvasGroup cg, bool on);
    private void _setupStatusLabel(bool favorite, bool challengeTour, bool inherit, System.IObservable<float> blinkValueObservable);
    private void _disposeStatusLabel();
    private void _disposeCurrentSetup();
    public void Dispose();
    private bool <SetupFUnitIconTapNotAvailableAsync>b__43_0();
    private void <_setTotal>g__setColor|52_0(UnityEngine.Color color);
    private void <_setupStatusLabel>b__54_0(float f);
    private void <_setupStatusLabel>b__54_1(UniRx.Unit _);

    private enum UnitFilter : System.Enum
    {
        public int value__;
        public static UnitFilter Illlumina;
        public static UnitFilter Antica;
        public static UnitFilter Climax;
        public static UnitFilter Alst;
        public static UnitFilter Stray;
        public static UnitFilter Noctchill;
        public static UnitFilter Shhis;
        public static UnitFilter Cometik;
    }

    private class <>c__DisplayClass39_0
    {
        public PRISM.UI.FUnitIconView <>4__this;
        public int dataIndex;
        private void <SetupFUnitIconAsync>b__0();
        private void <SetupFUnitIconAsync>b__1();
    }

    private class <>c__DisplayClass40_0
    {
        public PRISM.UI.FUnitIconView <>4__this;
        public System.IObservable<float> labelBlinkObservable;
        public PRISM.Common.Model.FUnitIcon fuIcon;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        private void <SetupFUnitIconForIdolListAsync>b__0(string name);
        private void <SetupFUnitIconForIdolListAsync>b__1(System.ValueTuple<bool, bool, bool, bool> t);
        private void <SetupFUnitIconForIdolListAsync>b__2(int favoriteMarkId);
        private void <SetupFUnitIconForIdolListAsync>b__3(bool isGrayOut);
        private void <SetupFUnitIconForIdolListAsync>b__4(bool b);
        private void <SetupFUnitIconForIdolListAsync>b__5(int id);
    }

    private class <>c__DisplayClass44_0
    {
        public PRISM.IContextClick<int> context;
        public PRISM.UI.FUnitIconView <>4__this;
        private void <SetOnClickContext>b__0();
        private void <SetOnClickContext>b__1();
    }

    private class <>c__DisplayClass45_0
    {
        public System.Action<int> clickAction;
        public PRISM.UI.FUnitIconView <>4__this;
        public System.Action<int> longPressAction;
        private void <SetOnClickContext>b__0();
        private void <SetOnClickContext>b__1();
    }

    private struct <SetupFUnitIconTapNotAvailableAsync>d__43 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.UI.FUnitIconView <>4__this;
        public PRISM.Common.Model.FUnitIcon fuIcon;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.UI
public class PerformanceFader : UnityEngine.MonoBehaviour
{
    private UnityEngine.CanvasGroup cgWhite;
    private float fadeDuration;
    public Cysharp.Threading.Tasks.UniTask FadeInAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask FadeOutAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.UI
public class PFIdolCharacterNameView : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.Image outFrameImage;
    private ENTERPRISE.UI.UITextMeshProUGUI nameText;
    public void SetUp(int characterId);
}

// Namespace: PRISM.UI
public class PFIdolIconRectView : PRISM.UI.PFIdolIconViewBase
{
    private UnityEngine.CanvasGroup cgCenter;
    private UnityEngine.CanvasGroup cgOnStage;
    private bool <IsResetOnInitialize>k__BackingField;
    protected PRISM.Interactions.IconFrameType FrameType { get; set; }
    public bool IsResetOnInitialize { get; set; }
    public Cysharp.Threading.Tasks.UniTask SetupPIdolIconAsync(PRISM.Common.Model.PIdolIcon piIcon, PRISM.ResourceManagement.IResourceLoader resourceLoader, int dataIndex);
    public Cysharp.Threading.Tasks.UniTask SetupPIdolIconTapNotAvailableAsync(PRISM.Common.Model.PIdolIcon piIcon, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    public Cysharp.Threading.Tasks.UniTask SetupFIdolIconTapNotAvailableAsync(PRISM.Common.Model.FIdolIcon fiIcon, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    public Cysharp.Threading.Tasks.UniTask SetUpCharacterBaseIconAsync(int characterId, PRISM.Live.LiveIdolPositionMark positionMark, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken cancellationToken, bool withTap);
    public Cysharp.Threading.Tasks.UniTask SetUpIdolIconOnlyAsync(int starLevel, int produceIdolId, int unitId, PRISM.Live.LiveIdolPositionMark positionMark, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken cancellationToken);
    public void SetFavoriteMark(int mstFavoriteId, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    public Cysharp.Threading.Tasks.UniTask SetupProduceTopEditInfoAsync(int unitId, PRISM.Module.Networking.IInProduceIdolStatus inProduceIdol, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken cancellationToken);
    protected void _initializeAction();
    protected void _reset();
    private void _setUpPositionMark(PRISM.Live.LiveIdolPositionMark positionMark);

    private class <>c__DisplayClass8_0
    {
        public PRISM.UI.PFIdolIconRectView <>4__this;
        public int dataIndex;
        private void <SetupPIdolIconAsync>b__0();
        private void <SetupPIdolIconAsync>b__1();
    }
}

// Namespace: PRISM.UI
public class PFIdolIconView : PRISM.UI.PFIdolIconViewBase
{
    private UniRx.CompositeDisposable disposables;
    private int index;
    protected PRISM.Interactions.IconFrameType FrameType { get; set; }
    public Cysharp.Threading.Tasks.UniTask SetupPIdolIconAsync(PRISM.Common.Model.PIdolIcon piIcon, PRISM.ResourceManagement.IResourceLoader resourceLoader, int dataIndex, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask SetupSimplePIdolIconAsync(PRISM.Definitions.MstProduceIdol master, PRISM.ResourceManagement.IResourceLoader resourceLoader, int dataIndex, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask SetupAlbumPIdolIconAsync(PRISM.Common.Model.PIdolIcon piIcon, System.Action<int> clickAction, System.Action<int> longPressAction, PRISM.ResourceManagement.IResourceLoader resourceLoader, int dataIndex);
    public Cysharp.Threading.Tasks.UniTask SetupPIdolIconByProductAsync(PRISM.Domain.ProductKey product, PRISM.ResourceManagement.IResourceLoader resourceLoader, bool isShowStar, bool isShowAwakingLv, int dataIndex, bool enableButtonAction, bool isSetOnClick);
    public Cysharp.Threading.Tasks.UniTask SetupFIdolIconTapNotAvailableAsync(PRISM.Common.Model.FIdolIcon fiIcon, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    public Cysharp.Threading.Tasks.UniTask SetupFIdolIconAsync(PRISM.Common.Model.FIdolIcon fiIcon, PRISM.ResourceManagement.IResourceLoader resourceLoader, int dataIndex);
    public Cysharp.Threading.Tasks.UniTask SetUpCharacterBaseIconAsync(int characterId, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken cancellationToken, bool withTap);
    public Cysharp.Threading.Tasks.UniTask SetUpIdolIconOnlyAsync(int starLevel, int produceIdolId, int unitId, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken cancellationToken);
    public void SetOnClickContext(PRISM.IContextClick<int> context);
    public void SetOnClickContext(System.Action<int> clickAction, System.Action<int> longPressAction);
    public void SetFavoriteMark(int mstFavoriteMarkId, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    public void SetOnClickSound(bool isPlaySound);
    public void SetOnLongPressSound(bool isPlaySound);
    public void SetButtonScaleAnimation(bool isEnable);
    public void SwitchSelectedCursor(bool isActive);
    protected void _initializeAction();
    private void OnDestroy();
    private void <SetUpCharacterBaseIconAsync>b__10_0();

    private class <>c__DisplayClass12_0
    {
        public PRISM.IContextClick<int> context;
        public PRISM.UI.PFIdolIconView <>4__this;
        private void <SetOnClickContext>b__0();
        private void <SetOnClickContext>b__1();
    }

    private class <>c__DisplayClass13_0
    {
        public System.Action<int> clickAction;
        public PRISM.UI.PFIdolIconView <>4__this;
        public System.Action<int> longPressAction;
        private void <SetOnClickContext>b__0();
        private void <SetOnClickContext>b__1();
    }

    private class <>c__DisplayClass4_0
    {
        public PRISM.UI.PFIdolIconView <>4__this;
        public int dataIndex;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        private void <SetupPIdolIconAsync>b__0();
        private void <SetupPIdolIconAsync>b__1();
        private void <SetupPIdolIconAsync>b__2(int id);
    }

    private class <>c__DisplayClass5_0
    {
        public PRISM.UI.PFIdolIconView <>4__this;
        public int dataIndex;
        private void <SetupSimplePIdolIconAsync>b__0();
    }

    private class <>c__DisplayClass6_0
    {
        public System.Action<int> clickAction;
        public PRISM.UI.PFIdolIconView <>4__this;
        public System.Action<int> longPressAction;
        private void <SetupAlbumPIdolIconAsync>b__0();
        private void <SetupAlbumPIdolIconAsync>b__1();
    }

    private class <>c__DisplayClass7_0
    {
        public PRISM.UI.PFIdolIconView <>4__this;
        public int dataIndex;
        private void <SetupPIdolIconByProductAsync>b__0();
        private void <SetupPIdolIconByProductAsync>b__1();
    }

    private class <>c__DisplayClass9_0
    {
        public PRISM.UI.PFIdolIconView <>4__this;
        public int dataIndex;
        private void <SetupFIdolIconAsync>b__0();
        private void <SetupFIdolIconAsync>b__1();
    }
}

// Namespace: PRISM.UI
public class PFIdolIconViewBase : UnityEngine.MonoBehaviour
{
    protected ENTERPRISE.UI.UIButton btn;
    protected UnityEngine.UI.Image imgBg;
    protected UnityEngine.UI.RawImage imgIdol;
    protected UnityEngine.UI.Image imgFrame;
    protected UnityEngine.UI.RawImage imgUnit;
    protected PRISM.Legacy.ParamRememberableAnimator frameEffectAnimator;
    protected UnityEngine.GameObject[] frameEffectParents;
    protected UnityEngine.CanvasGroup cgPIdol;
    protected UnityEngine.CanvasGroup cgAwakenLv;
    protected ENTERPRISE.UI.UITextMeshProUGUI txtAwakenLv;
    protected UnityEngine.CanvasGroup cgStar;
    protected PRISM.UI.StarDisplay starDisplay;
    protected PRISM.AttributeIconViewForLegacy attributeIcon;
    protected UnityEngine.CanvasGroup cgFIdol;
    protected UnityEngine.UI.RawImage imgFesRank;
    protected PRISM.Legacy.ParamRememberableAnimator fesIdolRankEffectAnimator;
    protected UnityEngine.GameObject[] fesIdolRankEffectParents;
    protected UnityEngine.CanvasGroup cgTotal;
    protected ENTERPRISE.UI.UITextMeshProUGUI txtTotal;
    protected UnityEngine.CanvasGroup cgFavoriteMark;
    protected UnityEngine.UI.RawImage imgFavoriteMark;
    protected UnityEngine.CanvasGroup cgSelectedCursor;
    protected PRISM.UIGrayOutController grayOutController;
    protected PRISM.UI.PFIdolCharacterNameView characterNameView;
    protected UniRx.Subject<System.ValueTuple<int, UnityEngine.GameObject>> onClickSubject;
    protected UniRx.Subject<System.ValueTuple<int, UnityEngine.GameObject>> onLongPressSubject;
    private bool isInitialized;
    public System.IObservable<System.ValueTuple<int, UnityEngine.GameObject>> OnClick { get; set; }
    public System.IObservable<System.ValueTuple<int, UnityEngine.GameObject>> OnLongPress { get; set; }
    protected PRISM.Interactions.IconFrameType FrameType { get; set; }
    private void Awake();
    protected void _initialize();
    protected void _initializeAction();
    protected void _reset();
    protected Cysharp.Threading.Tasks.UniTask _setupFIdolIconAsync(PRISM.Common.Model.FIdolIcon fiIcon, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken cancellationToken);
    protected Cysharp.Threading.Tasks.UniTask _loadFesIdolRankAsync(ProduceParameterRank rank, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken cancellationToken);
    protected Cysharp.Threading.Tasks.UniTask _setupPIdolIconAsync(PRISM.Common.Model.PIdolIcon piIcon, PRISM.ResourceManagement.IResourceLoader resourceLoader, bool isShowStar, bool isShowAwakingLv, System.Threading.CancellationToken cancellationToken);
    protected Cysharp.Threading.Tasks.UniTask _setupIdolBaseIconAsync(int produceIdolId, int starLv, int unitId, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken cancellationToken);
    protected Cysharp.Threading.Tasks.UniTask _setupCharacterBaseIconAsync(int characterId, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken cancellationToken);
    protected void _setAwakenLv(int value, PRISM.ResourceManagement.IResourceLoader resourceLoader, bool active);
    protected void _setStar(int value, bool active);
    protected void _setTotal(int value, int type, bool active);
    protected static void _switchCanvasGroup(UnityEngine.CanvasGroup cg, bool on);
    protected static void _switchActive(UnityEngine.GameObject go, bool active);
    private void _setFrameEffectOn(bool isOn);
    private void _setFesIdolRankEffectOn(ProduceParameterRank rank);
    private static string <_setTotal>g__GetColorCode|44_0(UnityEngine.Color c);

    private struct <_loadFesIdolRankAsync>d__38 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.UI.PFIdolIconViewBase <>4__this;
        public ProduceParameterRank rank;
        public System.Threading.CancellationToken cancellationToken;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        private System.Threading.CancellationTokenSource <linkedCts>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_setupFIdolIconAsync>d__37 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.UI.PFIdolIconViewBase <>4__this;
        public PRISM.Common.Model.FIdolIcon fiIcon;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        public System.Threading.CancellationToken cancellationToken;
        private Cysharp.Threading.Tasks.UniTask <baseIconTask>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_setupIdolBaseIconAsync>d__40 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Threading.CancellationToken cancellationToken;
        public PRISM.UI.PFIdolIconViewBase <>4__this;
        public int starLv;
        public int unitId;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        public int produceIdolId;
        private System.Threading.CancellationTokenSource <linkedCts>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_setupPIdolIconAsync>d__39 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.UI.PFIdolIconViewBase <>4__this;
        public PRISM.Common.Model.PIdolIcon piIcon;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        public System.Threading.CancellationToken cancellationToken;
        public bool isShowAwakingLv;
        public bool isShowStar;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.UI
public class SCharaIconRectView : PRISM.UI.SCharaIconViewBase
{
    private UnityEngine.CanvasGroup cgBase;
    private UnityEngine.UI.RawImage imgChara;
    protected UnityEngine.UI.RawImage imgFrame;
    private ENTERPRISE.UI.UIButton btnChara;
    private UnityEngine.GameObject friend;
    private UnityEngine.GameObject levelText;
    private UnityEngine.CanvasGroup cgSetCharacter;
    private ENTERPRISE.UI.UIButton btnSetCharacter;
    private UnityEngine.CanvasGroup cgFriendWasToBeSelected;
    private UnityEngine.GameObject goFriendSettings;
    private UnityEngine.GameObject goGoodSchedule;
    private ENTERPRISE.UI.UITextMeshProUGUI txtGoodSchedule;
    private UnityEngine.GameObject goSelectedCursor;
    private UnityEngine.CanvasGroup cgBadgeUpperLabelSetting;
    private UnityEngine.CanvasGroup cgBadgeUpperLabelBuiltInto;
    private UnityEngine.CanvasGroup cgBadgeUpperLabelFavorite;
    private PRISM.UIGrayOutController grayOutController;
    private UniRx.Subject<System.ValueTuple<int, UnityEngine.GameObject>> onClickSubject;
    private UniRx.Subject<System.ValueTuple<int, UnityEngine.GameObject>> onLongPressSubject;
    private int index;
    private System.IDisposable favoriteDisposable;
    public System.IObservable<System.ValueTuple<int, UnityEngine.GameObject>> OnClick { get; set; }
    public System.IObservable<System.ValueTuple<int, UnityEngine.GameObject>> OnLongPress { get; set; }
    public void SetupSCharaIconRect(int supportCharacterId, SupportCharacterRarity rarity, int trainingLv, int diamondLv, int favoriteMarkId, PRISM.ResourceManagement.IResourceLoader resourceLoader, bool friendSettings, bool isProduce, int scheduleTypeId);
    public void SetupSCharaIconRectTapNotAvailable(int supportCharacterId, SupportCharacterRarity rarity, int trainingLv, int diamondLv, int favoriteMarkId, PRISM.ResourceManagement.IResourceLoader resourceLoader, bool friendSettings);
    public Cysharp.Threading.Tasks.UniTask SetupSCharaIconAsync(PRISM.Common.Model.SCharaIcon scIcon, PRISM.ResourceManagement.IResourceLoader resourceLoader, int dataIndex, bool isProduce, bool friendSettings, System.Threading.CancellationToken cancellationToken);
    public void SimpleSetup(int supportCharacterId, SupportCharacterRarity rarity, PRISM.ResourceManagement.IResourceLoader resourceLoader, int dataIndex, bool btnEnable);
    public void SimpleSetupForAlbum(int supportCharacterId, SupportCharacterRarity rarity, PRISM.ResourceManagement.IResourceLoader resourceLoader, bool isGrayOut, int dataIndex);
    public void SetupPlusBlank(bool friendSettings);
    public void SetupBlank(bool friendSettings);
    public void SetupFriendWasToBeSelected();
    public void Reset();
    public void SwitchUpperLabel(bool isSetting, bool isBuildIn, bool isFavorite);
    public void SetSelectCursor(bool selected);
    public void ProduceSetupSCharaIconRect(int supportCharacterId, SupportCharacterRarity rarity, int trainingLv, int diamondLv, bool isFriend, int favoriteMarkId, int currentIndex, PRISM.ResourceManagement.IResourceLoader resourceLoader, bool isProduce);
    public void UpdateCanvasGroup(UnityEngine.CanvasGroup cg, bool active);
    public void SetIconGrayOut(bool isGrayOut);
    public void SetActiveGoodSchedule(bool isActive);
    public void SetOnClickContext(PRISM.IContextClick<int> context);
    public void SetOnClickContext(System.Action<int> clickAction, System.Action<int> longPressAction);
    protected void _initializeAction();
    private Cysharp.Threading.Tasks.UniTask _loadCharaImageAsync(int iconId, int rarity, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken cancellationToken);
    private void _switchActive(UnityEngine.GameObject go, bool active);
    private void _switchUpperLabel(bool isSetting, bool isBuiltIn, bool isFavorite);
    private void OnDestroy();
    private void <SetupPlusBlank>b__30_0();

    private class <>c__DisplayClass25_0
    {
        public PRISM.UI.SCharaIconRectView <>4__this;
        public int supportCharacterId;
        private void <SetupSCharaIconRect>b__0();
        private void <SetupSCharaIconRect>b__1();
    }

    private class <>c__DisplayClass27_0
    {
        public PRISM.UI.SCharaIconRectView <>4__this;
        public int dataIndex;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        private void <SetupSCharaIconAsync>b__0();
        private void <SetupSCharaIconAsync>b__1();
        private void <SetupSCharaIconAsync>b__2(int id);
    }

    private class <>c__DisplayClass28_0
    {
        public PRISM.UI.SCharaIconRectView <>4__this;
        public int supportCharacterId;
        private void <SimpleSetup>b__0();
    }

    private class <>c__DisplayClass29_0
    {
        public PRISM.UI.SCharaIconRectView <>4__this;
        public bool isGrayOut;
        private void <SimpleSetupForAlbum>b__0();
    }

    private class <>c__DisplayClass36_0
    {
        public PRISM.UI.SCharaIconRectView <>4__this;
        public int currentIndex;
        private void <ProduceSetupSCharaIconRect>b__0();
    }

    private class <>c__DisplayClass40_0
    {
        public PRISM.IContextClick<int> context;
        public PRISM.UI.SCharaIconRectView <>4__this;
        private void <SetOnClickContext>b__0();
        private void <SetOnClickContext>b__1();
    }

    private class <>c__DisplayClass41_0
    {
        public System.Action<int> clickAction;
        public PRISM.UI.SCharaIconRectView <>4__this;
        public System.Action<int> longPressAction;
        private void <SetOnClickContext>b__0();
        private void <SetOnClickContext>b__1();
    }

    private struct <_loadCharaImageAsync>d__43 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Threading.CancellationToken cancellationToken;
        public PRISM.UI.SCharaIconRectView <>4__this;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        public int iconId;
        public int rarity;
        private System.Threading.CancellationTokenSource <linkedToken>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.UI
public class SCharaIconView : PRISM.UI.SCharaIconViewBase
{
    private ENTERPRISE.UI.UIButton btn;
    private UnityEngine.UI.RawImage imgChara;
    protected UnityEngine.UI.RawImage imgFrame;
    private PRISM.UIGrayOutController grayOutController;
    private UniRx.Subject<System.ValueTuple<int, UnityEngine.GameObject>> onClickSubject;
    private UniRx.Subject<System.ValueTuple<int, UnityEngine.GameObject>> onLongPressSubject;
    private UniRx.CompositeDisposable disposables;
    public System.IObservable<System.ValueTuple<int, UnityEngine.GameObject>> OnClick { get; set; }
    public System.IObservable<System.ValueTuple<int, UnityEngine.GameObject>> OnLongPress { get; set; }
    public Cysharp.Threading.Tasks.UniTask SetupSCharaIconAsync(PRISM.Common.Model.SCharaIcon scIcon, PRISM.ResourceManagement.IResourceLoader resourceLoader, int dataIndex, bool isProduce, System.Nullable<bool> diamondVisible, bool tapEnable, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask SetupSimpleSCharaIconAsync(int supportCharacterId, SupportCharacterRarity rarity, PRISM.ResourceManagement.IResourceLoader resourceLoader, int dataIndex, bool tapEnable, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask SetupSCharaIconByProductAsync(PRISM.Domain.ProductKey product, PRISM.ResourceManagement.IResourceLoader resourceLoader, int dataIndex, bool isProduce, bool enableButtonAction);
    public void SetupBlank(bool isBlock);
    protected void _initializeAction();
    protected void _reset();
    private Cysharp.Threading.Tasks.UniTask _loadCharaImageAsync(int iconId, int rarity, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    private void OnDestroy();

    private class <>c__DisplayClass11_0
    {
        public PRISM.UI.SCharaIconView <>4__this;
        public int dataIndex;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        private void <SetupSCharaIconAsync>b__0();
        private void <SetupSCharaIconAsync>b__1();
        private void <SetupSCharaIconAsync>b__2(int id);
    }

    private class <>c__DisplayClass12_0
    {
        public PRISM.UI.SCharaIconView <>4__this;
        public int dataIndex;
        private void <SetupSimpleSCharaIconAsync>b__0();
    }

    private class <>c__DisplayClass13_0
    {
        public PRISM.UI.SCharaIconView <>4__this;
        public int dataIndex;
        private void <SetupSCharaIconByProductAsync>b__0();
    }
}

// Namespace: PRISM.UI
public class SCharaIconViewBase : UnityEngine.MonoBehaviour
{
    protected ENTERPRISE.UI.UITextMeshProUGUI txtCharaLv;
    protected PRISM.UI.DiamondDisplay diamondDisplay;
    protected UnityEngine.CanvasGroup cgBlank;
    protected UnityEngine.UI.RawImage imgFavoriteMark;
    protected UnityEngine.CanvasGroup cgFavoriteMark;
    protected UnityEngine.Animator rarityEffect;
    protected System.Threading.CancellationToken ct;
    private bool isInitialized;
    public void SetFavoriteMark(int mstFavoriteMarkId, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    public void SetActiveCharaLevel(bool isActive);
    public void SetActiveDiamond(bool isActive);
    private void Awake();
    protected void _initialize();
    protected void _initializeAction();
    protected void _setupBase(SupportCharacterRarity rarity, int charaLv, int diamondLv);
    protected void _simpleSetupBase(SupportCharacterRarity rarity);
    protected void _switchCanvasGroup(UnityEngine.CanvasGroup cg, bool on, bool block);
    protected void _reset();
    private Cysharp.Threading.Tasks.UniTask _setRarityEffectAsync(SupportCharacterRarity rarity);

    private struct <_setRarityEffectAsync>d__18 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.UI.SCharaIconViewBase <>4__this;
        public SupportCharacterRarity rarity;
        private Awaiter<bool> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.UI
public class IdolSkillIconView : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UIButton btn;
    private UnityEngine.UI.RawImage rawImage;
    private UnityEngine.GameObject costObj;
    private ENTERPRISE.UI.UITextMeshProUGUI costText;
    private ENTERPRISE.UI.UITextMeshProUGUI levelText;
    private UniRx.Subject<int> onClick;
    private System.Threading.CancellationToken ct;
    private System.Action<bool> onRingIdolVoiceActivate;
    public UniRx.SerialDisposable OnClickSerialDisposable;
    public System.IObservable<int> OnClick { get; set; }
    private void Awake();
    public void Setup(int skillId, int currentSkillLevel, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Action<bool> ringIdolVoiceActivate);
    public void Setup(PRISM.Module.Networking.IInProduceIdolSkillStatus inProduceIdolSkill, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    public void Setup(int idolSkillId, int iconId, int currentLv, int cost, PRISM.ResourceManagement.IResourceLoader resourceLoader, bool showLevel, bool showCost, bool enableSingleTap, bool enableLongTap);
    public void Setup(int mstIdolSkillId, PRISM.ResourceManagement.IResourceLoader resourceLoader, int iconId, System.Nullable<int> skillLv, System.Nullable<int> cost, bool enableSingleTap, System.Collections.Generic.IEnumerable<System.ValueTuple<int, int, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IIdolSkillActionEffectStatus>, PRISM.Module.Networking.IIdolSkillActionConditionStatus>> skillLevelInfoList, System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypeList);
    public void Setup<T>(int mstIdolSkillId, int iconId, System.Nullable<int> skillLv, System.Nullable<int> cost, T state, System.Func<T, int, System.Threading.CancellationToken, Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D>> loadIdolSkillIconTask, bool enableSingleTap, System.Collections.Generic.IEnumerable<System.ValueTuple<int, int, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IIdolSkillActionEffectStatus>, PRISM.Module.Networking.IIdolSkillActionConditionStatus>> skillLevelInfoList, System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypeList, bool isInGame);
    public void Setup(int mstIdolSkillId, PRISM.ResourceManagement.IResourceLoader resourceLoader, int iconId, int level, int cost, System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypeList, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IIdolSkillActionEffectStatus> effects, PRISM.Module.Networking.IIdolSkillActionConditionStatus condition);
    public void Setup(int mstIdolSkillId, PRISM.ResourceManagement.IResourceLoader resourceLoader, int iconId, int level, int cost, System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypeList, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceActionEffectStatus> effects, PRISM.Module.Networking.IProduceActionConditionStatus condition);
    public void SetupInSchedule(int mstIdolSkillId, PRISM.ResourceManagement.IResourceLoader resourceLoader, int iconId, int level, int cost, System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypeList, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IIdolSkillActionEffectStatus> effects, PRISM.Module.Networking.IIdolSkillActionConditionStatus condition);
    private Cysharp.Threading.Tasks.UniTask _showIdolSkillDetailPUAsync(int mstIdolSkillId, int iconId, int level, int cost, System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypeList, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IIdolSkillActionEffectStatus> effects, PRISM.Module.Networking.IIdolSkillActionConditionStatus condition);
    private Cysharp.Threading.Tasks.UniTask _showIdolSkillDetailPUAsync(int mstIdolSkillId, int iconId, int level, int cost, System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypeList, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceActionEffectStatus> effects, PRISM.Module.Networking.IProduceActionConditionStatus condition);
    public void SetCost(int cost);
    private Cysharp.Threading.Tasks.UniTask _showIdolSkillDetailListPUAsync(int mstIdolSkillId, int level);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<int, ProduceParameterType> <>9__12_0;
        private ProduceParameterType <Setup>b__12_0(int x);
    }

    private class <>c__DisplayClass13_0
    {
        public PRISM.UI.IdolSkillIconView <>4__this;
        public PRISM.Module.Networking.IInProduceIdolSkillStatus inProduceIdolSkill;
        private void <Setup>b__0();
    }

    private class <>c__DisplayClass14_0
    {
        public PRISM.UI.IdolSkillIconView <>4__this;
        public int idolSkillId;
        public int currentLv;
        private void <Setup>b__0();
        private void <Setup>b__1();
    }

    private class <>c__DisplayClass15_0
    {
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        private Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> <Setup>b__0(int _, int iconId, System.Threading.CancellationToken ct);
    }

    private class <>c__DisplayClass16_0`1<T>
    {
        public PRISM.UI.IdolSkillIconView <>4__this;
        public int mstIdolSkillId;
        public System.Nullable<int> skillLv;
        private UnityEngine.Texture <Setup>b__0(UnityEngine.Texture2D x);
        private void <Setup>b__1();
        private void <Setup>b__2();
    }

    private class <>c__DisplayClass17_0
    {
        public PRISM.UI.IdolSkillIconView <>4__this;
        public int mstIdolSkillId;
        public int iconId;
        public int level;
        public int cost;
        public System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypeList;
        public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IIdolSkillActionEffectStatus> effects;
        public PRISM.Module.Networking.IIdolSkillActionConditionStatus condition;
        private void <Setup>b__0();
    }

    private class <>c__DisplayClass18_0
    {
        public PRISM.UI.IdolSkillIconView <>4__this;
        public int mstIdolSkillId;
        public int iconId;
        public int level;
        public int cost;
        public System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypeList;
        public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceActionEffectStatus> effects;
        public PRISM.Module.Networking.IProduceActionConditionStatus condition;
        private void <Setup>b__0();
    }

    private class <>c__DisplayClass19_0
    {
        public PRISM.UI.IdolSkillIconView <>4__this;
        public int mstIdolSkillId;
        public int iconId;
        public int level;
        public int cost;
        public System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypeList;
        public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IIdolSkillActionEffectStatus> effects;
        public PRISM.Module.Networking.IIdolSkillActionConditionStatus condition;
        private void <SetupInSchedule>b__0();
    }

    private struct <_showIdolSkillDetailPUAsync>d__20 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.UI.IdolSkillIconView <>4__this;
        public int mstIdolSkillId;
        public int iconId;
        public int cost;
        public System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypeList;
        public int level;
        public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IIdolSkillActionEffectStatus> effects;
        public PRISM.Module.Networking.IIdolSkillActionConditionStatus condition;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_showIdolSkillDetailPUAsync>d__21 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.UI.IdolSkillIconView <>4__this;
        public int mstIdolSkillId;
        public int iconId;
        public int cost;
        public System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypeList;
        public int level;
        public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceActionEffectStatus> effects;
        public PRISM.Module.Networking.IProduceActionConditionStatus condition;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.UI
public class StarDisplay : UnityEngine.MonoBehaviour
{
    private PRISM.UI.StarView[] stars;
    private UnityEngine.Sprite imgStar;
    private UnityEngine.Sprite imgBlankStar;
    private UnityEngine.Sprite imgMaxStar;
    public void Set(int value);
}

// Namespace: PRISM.UI
public class StarView : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.Image starImage;
    public void Set(UnityEngine.Sprite img);
}

// Namespace: PRISM.UI
public class UICharacterViewer : UnityEngine.MonoBehaviour, UnityEngine.EventSystems.IDragHandler, UnityEngine.EventSystems.IEventSystemHandler, UnityEngine.EventSystems.IScrollHandler
{
    private UnityEngine.UI.Image imgTouchDetector;
    private UnityEngine.UI.RawImage charaView;
    private UnityEngine.GameObject bgLayerView;
    private PRISM.Common.CharacterSpeechBalloonView speechBalloonView;
    private bool isEnableManualCamera;
    private float cameraRotateSensitivity;
    private float cameraMoveSensitivity;
    private float cameraPinchZoomSensitivity;
    private float cameraMouseZoomSensitivity;
    private float cameraMaxFov;
    private float cameraMinFov;
    private System.IDisposable onStopVoiceDisposable;
    private UniRx.CompositeDisposable setupForCostumeChangeDisposable;
    private System.Threading.CancellationTokenSource autoActionCts;
    private System.Func<bool> isOverlayShowFunc;
    private PRISM.Common.UI3DModelViewer viewer;
    private System.DateTime lastPlayTime;
    private UnityEngine.Texture defaultRenderTexture;
    private PRISM.UI.UICharacterVoiceInfo info;
    private UniRx.Subject<UnityEngine.Vector2> onSwipe;
    private UniRx.Subject<float> onPinch;
    private float currentFov;
    private PRISM.ResourceManagement.IResourceLoader keepOnChangeCostumeResourceLoader;
    public System.IObservable<UnityEngine.Vector2> OnSwipe { get; set; }
    public System.IObservable<float> OnPinch { get; set; }
    public void Inject(System.Func<bool> isOverlayShowFunc);
    public Cysharp.Threading.Tasks.UniTask SetupForCostumeChangeAsync(PRISM.UnitIdol unitIdol);
    public Cysharp.Threading.Tasks.UniTask<bool> SetupWithVoiceMotionAsync(PRISM.UI.UICharacterVoiceInfo voiceInfo, ScreenType voiceMotionScreenType, string requiredMotionCueSheetName, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask<bool> SetupHazukiVoiceMotionAsync(PRISM.UnitIdol unitIdol, PRISM.UI.UICharacterVoicePattern voicePattern, ScreenType screenType, string requiredMotionCueSheetName);
    public Cysharp.Threading.Tasks.UniTask<bool> SetupWithVoiceMotionFromLocalAsync(PRISM.UnitIdol unitIdol, string requiredCueSheets);
    public void SetAnimation(string requiredCueName);
    public void PausePlayingVoice();
    public void ReStartPlayVoice();
    public void ChangeCostume(PRISM.UnitIdol[] unitIdols);
    public void ReturnBackGroundFrom3D();
    public Cysharp.Threading.Tasks.UniTask ReleaseAsync();
    public void ResetCameraMode();
    public void ChangeCameraTarget(CameraTargetParameter parameter);
    private void ChangeFov(float fov);
    public void OnDrag(UnityEngine.EventSystems.PointerEventData eventData);
    public void OnScroll(UnityEngine.EventSystems.PointerEventData eventData);
    private Cysharp.Threading.Tasks.UniTask<bool> _load3DModelAndCueSheetAsync(PRISM.UI.UICharacterVoiceInfo voiceInfo, ScreenType voiceMotionScreenType, string requiredMotionCueSheetName);
    private Cysharp.Threading.Tasks.UniTaskVoid _playVoiceMessageAsync(float delay, System.Threading.CancellationToken ct);
    private void _playVoicePatternWithLoop(string cueName, int voiceResourceId);
    private System.IObservable<Status> _voiceObservableFunc();
    private void _doMotion();
    private Cysharp.Threading.Tasks.UniTaskVoid _autoPlayVoiceMessageAsync(float delay);
    private void OnDestroy();
    private void <SetupForCostumeChangeAsync>b__28_0(UnityEngine.Vector2 vector);
    private void <SetupForCostumeChangeAsync>b__28_1(float amount);
    private void <OnDrag>g__InvokeOnSwipe|41_0(UnityEngine.EventSystems.PointerEventData pointerEventData);
    private Cysharp.Threading.Tasks.UniTaskVoid <_playVoiceMessageAsync>b__44_0(Status _);
    private Cysharp.Threading.Tasks.UniTaskVoid <_playVoicePatternWithLoop>b__45_0(Status _);

    public class CameraTargetParameter
    {
        private ShootingType shootingType;
        private float angleX;
        private float angleY;
        private float fov;
        public ShootingType ShootingType { get; set; }
        public float AngleX { get; set; }
        public float AngleY { get; set; }
        public float Fov { get; set; }
    }

    private struct <<_playVoiceMessageAsync>b__44_0>d : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskVoidMethodBuilder <>t__builder;
        public PRISM.UI.UICharacterViewer <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <<_playVoicePatternWithLoop>b__45_0>d : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskVoidMethodBuilder <>t__builder;
        public PRISM.UI.UICharacterViewer <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.UI.UICharacterViewer, Status> <>9__46_0;
        public static System.Func<Status, bool> <>9__46_1;
        public static System.Func<Status, bool> <>9__46_2;
        private Status <_voiceObservableFunc>b__46_0(PRISM.UI.UICharacterViewer _);
        private bool <_voiceObservableFunc>b__46_1(Status s);
        private bool <_voiceObservableFunc>b__46_2(Status s);
    }

    private class <>c__DisplayClass31_0
    {
        public PRISM.UI.UICharacterViewer <>4__this;
        public PRISM.UnitIdol unitIdol;
        private void <SetupWithVoiceMotionFromLocalAsync>b__0();
    }

    private class <>c__DisplayClass43_0
    {
        public PRISM.UI.UICharacterViewer <>4__this;
        public ScreenType voiceMotionScreenType;
        public PRISM.UI.UICharacterVoiceInfo voiceInfo;
        private void <_load3DModelAndCueSheetAsync>b__0();
    }

    private struct <ReleaseAsync>d__37 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.UI.UICharacterViewer <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetupForCostumeChangeAsync>d__28 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.UI.UICharacterViewer <>4__this;
        public PRISM.UnitIdol unitIdol;
        private Awaiter<bool> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetupWithVoiceMotionAsync>d__29 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<bool> <>t__builder;
        public PRISM.UI.UICharacterViewer <>4__this;
        public PRISM.UI.UICharacterVoiceInfo voiceInfo;
        public ScreenType voiceMotionScreenType;
        public string requiredMotionCueSheetName;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter<bool> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetupWithVoiceMotionFromLocalAsync>d__31 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<bool> <>t__builder;
        public PRISM.UI.UICharacterViewer <>4__this;
        public PRISM.UnitIdol unitIdol;
        private <>c__DisplayClass31_0 <>8__1;
        public string requiredCueSheets;
        private System.Threading.CancellationToken <ct>5__2;
        private PRISM.UnitIdol[] <idols>5__3;
        private Awaiter<bool> <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_autoPlayVoiceMessageAsync>d__48 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskVoidMethodBuilder <>t__builder;
        public PRISM.UI.UICharacterViewer <>4__this;
        public float delay;
        private Awaiter<bool> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_load3DModelAndCueSheetAsync>d__43 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<bool> <>t__builder;
        public PRISM.UI.UICharacterViewer <>4__this;
        public ScreenType voiceMotionScreenType;
        public PRISM.UI.UICharacterVoiceInfo voiceInfo;
        private <>c__DisplayClass43_0 <>8__1;
        public string requiredMotionCueSheetName;
        private System.Threading.CancellationToken <ct>5__2;
        private PRISM.UnitIdol[] <idols>5__3;
        private Awaiter<bool> <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_playVoiceMessageAsync>d__44 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskVoidMethodBuilder <>t__builder;
        public PRISM.UI.UICharacterViewer <>4__this;
        public float delay;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.UI
public class UICharacterVoiceInfo
{
    private int <MstCharacterInfoId>k__BackingField;
    private string <CharaName>k__BackingField;
    private PRISM.UnitIdol <UnitIdol>k__BackingField;
    private PRISM.UI.UICharacterVoicePattern <VoicePattern>k__BackingField;
    public int MstCharacterInfoId { get; set; }
    public string CharaName { get; set; }
    public PRISM.UnitIdol UnitIdol { get; set; }
    public PRISM.UI.UICharacterVoicePattern VoicePattern { get; set; }
}

// Namespace: PRISM.UI
public class UICharacterVoicePattern
{
    private int <VoiceResourceId>k__BackingField;
    private string <CueSheetName>k__BackingField;
    private string <CueName>k__BackingField;
    public int VoiceResourceId { get; set; }
    public string CueSheetName { get; set; }
    public string CueName { get; set; }
}

// Namespace: PRISM.UI
public class VoDaViMeRankView : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UITextMeshProUGUI vo;
    private ENTERPRISE.UI.UITextMeshProUGUI da;
    private ENTERPRISE.UI.UITextMeshProUGUI vi;
    private ENTERPRISE.UI.UITextMeshProUGUI me;
    private UnityEngine.UI.RawImage[] rankArray;
    public void Set(PRISM.Module.Networking.IProduceParameterStatus param, PRISM.ResourceManagement.IResourceLoader resourceLoader);
}

// Namespace: PRISM.UI
public class IdolTapAreaView : UnityEngine.MonoBehaviour
{
    private UnityEngine.Transform imgParent;
    private ENTERPRISE.UI.UIButton btnIdol;
    private UnityEngine.UI.RawImage colorTarget;
    private UniRx.Subject<System.ValueTuple<int, int>> onTap;
    private UniRx.Subject<int> onLongTap;
    public System.IObservable<System.ValueTuple<int, int>> OnTap { get; set; }
    public System.IObservable<int> OnLongTap { get; set; }
    private void Awake();
    public Cysharp.Threading.Tasks.UniTask SetupAsync(int index, int mstCharacterInfoId, int mstProduceIdolId);
    public void InActive();
    public Cysharp.Threading.Tasks.UniTask ChangeProduceIdolAsync(int mstProduceIdolId);

    private class <>c__DisplayClass10_0
    {
        public PRISM.UI.IdolTapAreaView <>4__this;
        public int index;
        public int mstCharacterInfoId;
        private void <SetupAsync>b__0();
        private void <SetupAsync>b__1();
    }

    private struct <ChangeProduceIdolAsync>d__12 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public int mstProduceIdolId;
        public PRISM.UI.IdolTapAreaView <>4__this;
        private PRISM.Definitions.MstProduceIdol <mstPIdol>5__2;
        private Awaiter<UnityEngine.GameObject> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.UI
public class MarkingAttachedSlider : UnityEngine.UI.Slider
{
    private static float PRESS_SCALE;
    private static float PRESS_SCALE_DURATION;
    private UnityEngine.RectTransform markingContainer;
    private UnityEngine.GameObject headMarkingPrefab;
    private UnityEngine.GameObject betweenMarkingPrefab;
    public void CreateMarkings(int count);
    public void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData);
    public void OnPointerUp(UnityEngine.EventSystems.PointerEventData eventData);
}

// Namespace: PRISM.UI
public class ScrollRectArrowButtonView : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.ScrollRect scrollRect;
    private ENTERPRISE.UI.ButtonBase leftArrow;
    private ENTERPRISE.UI.ButtonBase rightArrow;
    private float arrowButtonScrollSensitivity;
    private DG.Tweening.Tween scrollTween;
    private void Start();
    private void LateUpdate();
    private void OnDestroy();
    private void _scroll(int dir, float time);
    private void _checkArrowButtonVisibility();

    private class <>c__DisplayClass5_0
    {
        public PRISM.UI.ScrollRectArrowButtonView <>4__this;
        public float leftForwardTime;
        public float rightForwardTime;
        private void <Start>b__0();
        private void <Start>b__1();
        private void <Start>b__2();
        private void <Start>b__3();
    }
}

// Namespace: PRISM.Module.Networking
public class ArchiveStreamProgramStatusExtensions
{
    public static bool IsViewingPeriodExpired(PRISM.Module.Networking.IArchiveStreamProgramStatus archiveStream);
    public static bool IsViewingPeriodExpiredComingSoon(PRISM.Module.Networking.IArchiveStreamProgramStatus archiveStream);
}

// Namespace: PRISM.Module.Networking
public class BuildUpParameterValueExtensions
{
    public static System.Collections.Generic.IEnumerable<ProduceParameterType> ToProduceParameterTypes(PRISM.Module.Networking.IBuildUpParameterValueStatus status);

    private class <ToProduceParameterTypes>d__0 : System.Collections.Generic.IEnumerable<ProduceParameterType>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<ProduceParameterType>, System.Collections.IEnumerator, System.IDisposable
    {
        private int <>1__state;
        private ProduceParameterType <>2__current;
        private int <>l__initialThreadId;
        private PRISM.Module.Networking.IBuildUpParameterValueStatus status;
        public PRISM.Module.Networking.IBuildUpParameterValueStatus <>3__status;
        private ProduceParameterType System.Collections.Generic.IEnumerator<PRISM.Module.Networking.Enums.ProduceParameterType>.Current { get; set; }
        private object System.Collections.IEnumerator.Current { get; set; }
        private void System.IDisposable.Dispose();
        private bool MoveNext();
        private void System.Collections.IEnumerator.Reset();
        private System.Collections.Generic.IEnumerator<ProduceParameterType> System.Collections.Generic.IEnumerable<PRISM.Module.Networking.Enums.ProduceParameterType>.GetEnumerator();
        private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
    }
}

// Namespace: PRISM.Module.Networking
public class PeriodExtensions
{
    public static bool IsNowTimeWithin(PRISM.Module.Networking.IPeriodStatus periodStatus);
}

// Namespace: PRISM.Module.Networking
public class StartProduceAdvReplyExtensions
{
    public static bool IsUnitCommu(PRISM.Module.Networking.IStartProduceAdvReply reply);
}

// Namespace: PRISM.Module.Networking
public class StoryTypeExtensions
{
    public static PRISM.Definitions.Story.StoryCategoryType ToCategoryType(StoryType storyType);
    public static string ToText(StoryType storyType);
}

// Namespace: PRISM.Service
public class ProduceService : PRISM.Service.IProduceService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Service.Produce.SupportCooperationEventModel> StartSupportCooperationEventExecuteAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<ProduceNextOrderType> FinishSupportCooperationEventExecuteAsync(System.Collections.Generic.IReadOnlyList<string> selectProduceCardIds, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISelectionSupportSkillStatus> selectSupportSkills, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Produce.LegacyLessonSuccessResultParameter> FinishLessonAsync(PRISM.Module.Networking.IInGameResultStatus inGameResultStatus, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Produce.LegacySpecialLessonResultParameter> FinishSpecialLessonAsync(PRISM.Module.Networking.IInGameResultStatus inGameResultStatus, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Produce.LegacyAuditionSuccessResultParameter> FinishAuditionAsync(PRISM.Module.Networking.IInGameResultStatus inGameResultStatus, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<ProduceNextOrderType> FinishAuditionResultAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<System.ValueTuple<PRISM.Module.Networking.IGettablePotentialSupportSkillStatus[], PRISM.Module.Networking.IInProducePotentialSupportSkillStatus[], int, int>> InheritanceSkillListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<ProduceNextOrderType> SelectInheritanceSkillAsync(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISelectionSupportSkillStatus> skills, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.IReadOnlyList<int>> SubSeasonListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<ProduceNextOrderType> SelectSubSeasonAsync(int mstSubSeasonId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<System.ValueTuple<PRISM.Module.Networking.IFesUnitStatus, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IIdolBaseRewardStatus>>> DetermineProduceResultAsync(int favoriteMarkID, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<System.ValueTuple<System.Collections.Generic.IEnumerable<string>, int, int, ProduceParameterRank, bool>> ProduceMVAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Produce.LegacyProduceFailureResultParameter> ProduceFailureResultAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask FinishProduceAsync(System.Threading.CancellationToken ct);
    public System.Collections.Generic.IReadOnlyList<PRISM.Legacy.ProduceLogData> GetLogDatas();

    private struct <DetermineProduceResultAsync>d__10 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.ValueTuple<PRISM.Module.Networking.IFesUnitStatus, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IIdolBaseRewardStatus>>> <>t__builder;
        public int favoriteMarkID;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IDetermineProduceResultReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishAuditionAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Produce.LegacyAuditionSuccessResultParameter> <>t__builder;
        public PRISM.Module.Networking.IInGameResultStatus inGameResultStatus;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishAuditionReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishAuditionResultAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<ProduceNextOrderType> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> selectProduceCardIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishAuditionResultReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishLessonAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Produce.LegacyLessonSuccessResultParameter> <>t__builder;
        public PRISM.Module.Networking.IInGameResultStatus inGameResultStatus;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishLessonReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishProduceAsync>d__13 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishProduceReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishSpecialLessonAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Produce.LegacySpecialLessonResultParameter> <>t__builder;
        public PRISM.Module.Networking.IInGameResultStatus inGameResultStatus;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishSpecialLessonReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishSupportCooperationEventExecuteAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<ProduceNextOrderType> <>t__builder;
        public System.Collections.Generic.IReadOnlyList<string> selectProduceCardIds;
        public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISelectionSupportSkillStatus> selectSupportSkills;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishSupportCooperationEventReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <InheritanceSkillListAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.ValueTuple<PRISM.Module.Networking.IGettablePotentialSupportSkillStatus[], PRISM.Module.Networking.IInProducePotentialSupportSkillStatus[], int, int>> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IInheritanceSkillListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ProduceFailureResultAsync>d__12 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Produce.LegacyProduceFailureResultParameter> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IProduceFailureResultReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ProduceMVAsync>d__11 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.ValueTuple<System.Collections.Generic.IEnumerable<string>, int, int, ProduceParameterRank, bool>> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IProduceMVReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SelectInheritanceSkillAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<ProduceNextOrderType> <>t__builder;
        public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISelectionSupportSkillStatus> skills;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISelectInheritanceSkillReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SelectSubSeasonAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<ProduceNextOrderType> <>t__builder;
        public int mstSubSeasonId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISelectSubSeasonReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartSupportCooperationEventExecuteAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Service.Produce.SupportCooperationEventModel> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartSupportCooperationEventReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SubSeasonListAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.Collections.Generic.IReadOnlyList<int>> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISubSeasonListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Service
public interface IProduceService
{
}

// Namespace: PRISM.Service.Produce
public class SupportCooperationEventModel
{
    public int SupportCharacterInfoID;
    public int ProduceIdolBaseID;
    public string SupportScenarioID;
    public int SupportCooperationEventRewardType;
    public PRISM.Module.Networking.IParameterVariationStatus ProduceIdolParameterVariation;
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceCardStatus> GettableProduceCards;
    public int GettableProduceCardAmount;
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceCardStatus> DeckProduceCards;
    public PRISM.Module.Networking.IProduceBaseInfoStatus ProduceBaseInfo;
    public int SelectableSupportSkillCount;
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IGettablePotentialSupportSkillStatus> GettablePotentialSupportSkillList;
    public PRISM.Module.Networking.IInProducePotentialSupportSkillStatus[] PotentialSupportSkills;
    public int SupportSkillSlotAmount;
    public PRISM.Module.Networking.IProduceAdvStateStatus ReadState;
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IExertSupportEffectStatus> ExertSupportEffects;

    private class <>c__DisplayClass15_0
    {
        public PRISM.Module.Networking.IStartSupportCooperationEventReply reply;
        private bool <.ctor>b__0(PRISM.Module.Networking.IInProduceSupportCharacterStatus e);
        private bool <.ctor>b__1(PRISM.Module.Networking.IInProduceIdolStatus x);
    }
}

// Namespace: PRISM.Stamina
public class StaminaConst
{
    public static int StaminaRecoveryMax;
    public static int LiveBonusRecoveryMax;
}

// Namespace: PRISM.Stamina
public class StaminaModel
{
    private UniRx.ReactiveProperty<int> currentValue;
    private StaminaType type;
    private int timeRecoveryMax;
    private System.DateTime recoveryTime;
    private int recoveryInterval;
    public StaminaType Type { get; set; }
    public int CurrentValue { get; set; }
    public int TimeRecoveryMax { get; set; }
    public System.DateTime RecoveryTime { get; set; }
    public int RecoveryInterval { get; set; }
    public System.IObservable<int> OnCurrentValueChanged { get; set; }
    public bool IsTimeRecoveryMax { get; set; }
    public int RecoveryMax { get; set; }
    public bool IsRecoveryMax { get; set; }
    public int RecoveryRemainSeconds { get; set; }
    public bool IsRecoveryRemain { get; set; }
    public string IntervalTimeText { get; set; }
    public string IntervalAllTimeText { get; set; }
    public string TypeText { get; set; }
    public string TypeInfoText { get; set; }
    public void UpdateStamina(PRISM.Module.Networking.IStaminaStatus stamina);
    public void UpdateRecovery();
    public string GetIntarvalTimeText();
    public string GetRemainTimeText();
    public bool IsMaxTimeRecovery(int recovery);
    public bool IsMaxRecovery(int recovery);
    public bool IsStaminaCost(int cost);
}

// Namespace: PRISM.Domain
public class Gasha : PRISM.Module.Networking.IGashaStatus
{
    private string <GashaId>k__BackingField;
    private GashaContentsType <GashaContentsType>k__BackingField;
    private System.Nullable<System.DateTime> <BeginDate>k__BackingField;
    private System.Nullable<System.DateTime> <EndDate>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IGashaPriceStatus> <PriceList>k__BackingField;
    private string <BannerUrl>k__BackingField;
    private string <Caution>k__BackingField;
    private string <ResourceId>k__BackingField;
    private bool <IsPickup>k__BackingField;
    private int <SortId>k__BackingField;
    private bool <IsBonus>k__BackingField;
    private string <PrismGaugeId>k__BackingField;
    private string <GashaExchangeId>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IGashaStepStatus> <StepList>k__BackingField;
    private bool <IsCompensation>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<string> <DetailIdList>k__BackingField;
    private System.Collections.Generic.List<PRISM.Gasha.GashaExchangeListPopupViewModel> gashaExchanges;
    private UniRx.ReactiveProperty<bool> onIsExchange;
    public string GashaId { get; set; }
    public GashaContentsType GashaContentsType { get; set; }
    public System.Nullable<System.DateTime> BeginDate { get; set; }
    public System.Nullable<System.DateTime> EndDate { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IGashaPriceStatus> PriceList { get; set; }
    public string BannerUrl { get; set; }
    public string Caution { get; set; }
    public string ResourceId { get; set; }
    public bool IsPickup { get; set; }
    public int SortId { get; set; }
    public bool IsBonus { get; set; }
    public string PrismGaugeId { get; set; }
    public string GashaExchangeId { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IGashaStepStatus> StepList { get; set; }
    public bool IsCompensation { get; set; }
    public System.Collections.Generic.IReadOnlyList<string> DetailIdList { get; set; }
    public bool IsFreeRemaining { get; set; }
    public bool IsNewPeriod { get; set; }
    public bool IsCloseToEndDate { get; set; }
    public bool IsOpen { get; set; }
    public bool IsPriceAnyActive { get; set; }
    public bool IsPermanent { get; set; }
    public int ActualSortId { get; set; }
    public bool IsEnable { get; set; }
    public PRISM.Gasha.GashaExchangeListPopupViewModel ExchangeInfo { get; set; }
    public System.IObservable<bool> OnIsExchange { get; set; }
    public void Apply(PRISM.Module.Networking.IGashaStatus status);
    public bool IsWarningGashaTicket();
    private long _getProductAmount(PRISM.Module.Networking.IProductStatus product);
    public void SetExchange(System.Collections.Generic.List<PRISM.Gasha.GashaExchangeListPopupViewModel> gashaExchanges);
    public void UpdateIsExchange();
    private bool <IsWarningGashaTicket>b__73_0(PRISM.Module.Networking.IGashaPriceStatus x);
    private bool <get_ExchangeInfo>b__87_0(PRISM.Gasha.GashaExchangeListPopupViewModel x);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IGashaPriceStatus, bool> <>9__68_0;
        public static System.Func<PRISM.Module.Networking.IGashaPriceStatus, bool> <>9__78_0;
        private bool <get_IsFreeRemaining>b__68_0(PRISM.Module.Networking.IGashaPriceStatus x);
        private bool <get_IsPriceAnyActive>b__78_0(PRISM.Module.Networking.IGashaPriceStatus x);
    }
}

// Namespace: PRISM.Domain
public class GashaPrismGauge : PRISM.Module.Networking.IGashaPrismGaugeStatus
{
    private string <PrismGaugeId>k__BackingField;
    private int <Point>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IGashaPrismGaugeRewardStatus> <RewardList>k__BackingField;
    private System.Nullable<System.DateTime> <EndDate>k__BackingField;
    public string PrismGaugeId { get; set; }
    public int Point { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IGashaPrismGaugeRewardStatus> RewardList { get; set; }
    public System.Nullable<System.DateTime> EndDate { get; set; }
    public void Apply(PRISM.Module.Networking.IGashaPrismGaugeStatus status);
    public void SetPoint(int point);
}

// Namespace: PRISM.Domain
public class SongCacheForResult
{
    private PRISM.Module.Networking.ISongStatus <Song>k__BackingField;
    private PRISM.Module.Networking.ITotalHighScoreRatingStatus <TotalHighScoreRating>k__BackingField;
    private PRISM.Module.Networking.ITotalTechnicalRatingStatus <TotalTechnicalRating>k__BackingField;
    private bool <IsShinyEnabled>k__BackingField;
    public PRISM.Module.Networking.ISongStatus Song { get; set; }
    public PRISM.Module.Networking.ITotalHighScoreRatingStatus TotalHighScoreRating { get; set; }
    public PRISM.Module.Networking.ITotalTechnicalRatingStatus TotalTechnicalRating { get; set; }
    public bool IsShinyEnabled { get; set; }
}

// Namespace: PRISM.Domain
public enum BitProduceParameterType : System.Enum
{
    public int value__;
    public static PRISM.Domain.BitProduceParameterType None;
    public static PRISM.Domain.BitProduceParameterType Vocal;
    public static PRISM.Domain.BitProduceParameterType Dance;
    public static PRISM.Domain.BitProduceParameterType Visual;
    public static PRISM.Domain.BitProduceParameterType Mental;
}

// Namespace: PRISM.Domain
public class BitProduceParameterTypeExtensions
{
    public static bool HasFlag(PRISM.Domain.BitProduceParameterType type, PRISM.Domain.BitProduceParameterType searchType);
    public static PRISM.Domain.BitProduceParameterType ToBit(ProduceParameterType type);
    public static PRISM.Domain.BitProduceParameterType ToBit(System.Collections.Generic.IReadOnlyList<ProduceParameterType> types);
}

// Namespace: PRISM.Domain
public struct Jewel : System.ValueType
{
    public long Free;
    public long Paid;
    public long Total { get; set; }
    public long GetAvailableJewelAmount(InGameCurrencyType jewelPurchaseType);
}

// Namespace: PRISM.Domain
public struct ProductKey : System.ValueType, System.IEquatable<PRISM.Domain.ProductKey>
{
    private ProductType <ProductType>k__BackingField;
    private int <ProductMstId>k__BackingField;
    public ProductType ProductType { get; set; }
    public int ProductMstId { get; set; }
    public string ToString();
    private bool PrintMembers(System.Text.StringBuilder builder);
    public static bool op_Inequality(PRISM.Domain.ProductKey left, PRISM.Domain.ProductKey right);
    public static bool op_Equality(PRISM.Domain.ProductKey left, PRISM.Domain.ProductKey right);
    public int GetHashCode();
    public bool Equals(object obj);
    public bool Equals(PRISM.Domain.ProductKey other);
    public void Deconstruct(ProductType& ProductType, int& ProductMstId);
}

// Namespace: PRISM.Domain
public class ProductKeyExtensions
{
    public static PRISM.Domain.ProductKey GetKey(PRISM.Module.Networking.IProductStatus status);
    public static PRISM.Domain.ProductKey GetKey(PRISM.Module.Networking.IProductWithAmountStatus status);
    public static PRISM.Domain.ProductKey GetKey(PRISM.Module.Networking.IHavingProductStatus status);
    public static PRISM.Domain.ProductKey GetKey(PRISM.Module.Networking.IRewardProductStatus status);
}

// Namespace: PRISM.Domain
public struct ProductKeyWithAmount : System.ValueType, System.IEquatable<PRISM.Domain.ProductKeyWithAmount>
{
    private PRISM.Domain.ProductKey <Key>k__BackingField;
    private int <Amount>k__BackingField;
    public PRISM.Domain.ProductKey Key { get; set; }
    public int Amount { get; set; }
    public System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKeyWithAmount> Extract(PRISM.Definitions.MasterData masterData);
    public System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKeyWithAmount> WithDeferenceCostumes(PRISM.Definitions.MasterData masterData);
    private System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKeyWithAmount> _getProductKeyWithAmount(int mstOriginalId, System.Collections.Generic.IEnumerable<PRISM.Definitions.IMstCostumeDifference> mstDifferences, ProductType type);
    public string ToString();
    private bool PrintMembers(System.Text.StringBuilder builder);
    public static bool op_Inequality(PRISM.Domain.ProductKeyWithAmount left, PRISM.Domain.ProductKeyWithAmount right);
    public static bool op_Equality(PRISM.Domain.ProductKeyWithAmount left, PRISM.Domain.ProductKeyWithAmount right);
    public int GetHashCode();
    public bool Equals(object obj);
    public bool Equals(PRISM.Domain.ProductKeyWithAmount other);
    public void Deconstruct(PRISM.Domain.ProductKey& Key, int& Amount);

    private class <>c__DisplayClass13_0
    {
        public int mstOriginalId;
        private bool <_getProductKeyWithAmount>b__0(PRISM.Definitions.IMstCostumeDifference mst);
    }

    private class <Extract>d__11 : System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKeyWithAmount>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<PRISM.Domain.ProductKeyWithAmount>, System.Collections.IEnumerator, System.IDisposable
    {
        private int <>1__state;
        private PRISM.Domain.ProductKeyWithAmount <>2__current;
        private int <>l__initialThreadId;
        public PRISM.Domain.ProductKeyWithAmount <>4__this;
        public PRISM.Domain.ProductKeyWithAmount <>3__<>4__this;
        private PRISM.Definitions.MasterData masterData;
        public PRISM.Definitions.MasterData <>3__masterData;
        private PRISM.Definitions.MstCostumeSet <set>5__2;
        private System.Collections.Generic.IEnumerator<PRISM.Definitions.MstAccessory> <>7__wrap2;
        private System.Collections.Generic.IEnumerator<string> <>7__wrap3;
        private PRISM.Domain.ProductKeyWithAmount System.Collections.Generic.IEnumerator<PRISM.Domain.ProductKeyWithAmount>.Current { get; set; }
        private object System.Collections.IEnumerator.Current { get; set; }
        private void System.IDisposable.Dispose();
        private bool MoveNext();
        private void <>m__Finally1();
        private void <>m__Finally2();
        private void System.Collections.IEnumerator.Reset();
        private System.Collections.Generic.IEnumerator<PRISM.Domain.ProductKeyWithAmount> System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKeyWithAmount>.GetEnumerator();
        private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
    }

    private class <WithDeferenceCostumes>d__12 : System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKeyWithAmount>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<PRISM.Domain.ProductKeyWithAmount>, System.Collections.IEnumerator, System.IDisposable
    {
        private int <>1__state;
        private PRISM.Domain.ProductKeyWithAmount <>2__current;
        private int <>l__initialThreadId;
        public PRISM.Domain.ProductKeyWithAmount <>4__this;
        public PRISM.Domain.ProductKeyWithAmount <>3__<>4__this;
        private PRISM.Definitions.MasterData masterData;
        public PRISM.Definitions.MasterData <>3__masterData;
        private System.Collections.Generic.IEnumerator<PRISM.Domain.ProductKeyWithAmount> <>7__wrap1;
        private PRISM.Domain.ProductKeyWithAmount System.Collections.Generic.IEnumerator<PRISM.Domain.ProductKeyWithAmount>.Current { get; set; }
        private object System.Collections.IEnumerator.Current { get; set; }
        private void System.IDisposable.Dispose();
        private bool MoveNext();
        private void <>m__Finally1();
        private void <>m__Finally2();
        private void <>m__Finally3();
        private void System.Collections.IEnumerator.Reset();
        private System.Collections.Generic.IEnumerator<PRISM.Domain.ProductKeyWithAmount> System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKeyWithAmount>.GetEnumerator();
        private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
    }

    private class <_getProductKeyWithAmount>d__13 : System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKeyWithAmount>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<PRISM.Domain.ProductKeyWithAmount>, System.Collections.IEnumerator, System.IDisposable
    {
        private int <>1__state;
        private PRISM.Domain.ProductKeyWithAmount <>2__current;
        private int <>l__initialThreadId;
        private int mstOriginalId;
        public int <>3__mstOriginalId;
        private System.Collections.Generic.IEnumerable<PRISM.Definitions.IMstCostumeDifference> mstDifferences;
        public System.Collections.Generic.IEnumerable<PRISM.Definitions.IMstCostumeDifference> <>3__mstDifferences;
        private ProductType type;
        public ProductType <>3__type;
        public PRISM.Domain.ProductKeyWithAmount <>4__this;
        public PRISM.Domain.ProductKeyWithAmount <>3__<>4__this;
        private System.Collections.Generic.IEnumerator<PRISM.Definitions.IMstCostumeDifference> <>7__wrap1;
        private PRISM.Domain.ProductKeyWithAmount System.Collections.Generic.IEnumerator<PRISM.Domain.ProductKeyWithAmount>.Current { get; set; }
        private object System.Collections.IEnumerator.Current { get; set; }
        private void System.IDisposable.Dispose();
        private bool MoveNext();
        private void <>m__Finally1();
        private void System.Collections.IEnumerator.Reset();
        private System.Collections.Generic.IEnumerator<PRISM.Domain.ProductKeyWithAmount> System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKeyWithAmount>.GetEnumerator();
        private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
    }
}

// Namespace: PRISM.Domain
public class ProductKeyWithAmountExtensions
{
    public static PRISM.Domain.ProductKeyWithAmount GetKeyWithAmount(PRISM.Module.Networking.IProductWithAmountStatus status);
    public static PRISM.Domain.ProductKeyWithAmount GetKeyWithAmount(PRISM.Module.Networking.IRewardProductStatus status);
}

// Namespace: PRISM.Domain
public class SpecialMission : PRISM.Module.Networking.ISpecialMissionStatus
{
    private int <MstSpecialMissionId>k__BackingField;
    private PRISM.Module.Networking.IPeriodStatus <Period>k__BackingField;
    private System.Nullable<System.DateTime> <ReceiveEndDate>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.Domain.SpecialMissionStep> <StepList>k__BackingField;
    public int MstSpecialMissionId { get; set; }
    public PRISM.Module.Networking.IPeriodStatus Period { get; set; }
    public System.Nullable<System.DateTime> ReceiveEndDate { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Domain.SpecialMissionStep> StepList { get; set; }
    private System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISpecialMissionStepStatus> PRISM.Module.Networking.ISpecialMissionStatus.StepList { get; set; }
    public void Apply(PRISM.Module.Networking.ISpecialMissionStatus status);
    public void UpdateStep(PRISM.Domain.SpecialMissionStep missionStep);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.ISpecialMissionStepStatus, PRISM.Domain.SpecialMissionStep> <>9__20_0;
        private PRISM.Domain.SpecialMissionStep <Apply>b__20_0(PRISM.Module.Networking.ISpecialMissionStepStatus x);
    }
}

// Namespace: PRISM.Domain
public class SpecialMissionStep : PRISM.Module.Networking.ISpecialMissionStepStatus
{
    private int <MstSpecialMissionStepId>k__BackingField;
    private System.Nullable<System.DateTime> <LastDisplayDate>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISpecialMissionMissionStatus> <MissionList>k__BackingField;
    private int <StepNumber>k__BackingField;
    private int <ReceivableCount>k__BackingField;
    private int <CompleteCount>k__BackingField;
    private bool <IsNew>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProductWithAmountStatus> <RewardList>k__BackingField;
    private bool <IsUnlocked>k__BackingField;
    private MissionState <State>k__BackingField;
    public int MstSpecialMissionStepId { get; set; }
    public System.Nullable<System.DateTime> LastDisplayDate { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISpecialMissionMissionStatus> MissionList { get; set; }
    public int StepNumber { get; set; }
    public int ReceivableCount { get; set; }
    public int CompleteCount { get; set; }
    public bool IsNew { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProductWithAmountStatus> RewardList { get; set; }
    public bool IsUnlocked { get; set; }
    public MissionState State { get; set; }
    public void Apply(PRISM.Module.Networking.ISpecialMissionStepStatus status);
    public void UpdateLastDisplayDate(System.Nullable<System.DateTime> date);
}

// Namespace: PRISM.Domain
public class AchievementService : PRISM.Domain.ServiceBase, PRISM.Domain.IAchievementService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetAchievementListReply> GetAchievementListAsync(System.Threading.CancellationToken ct);

    private struct <GetAchievementListAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetAchievementListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetAchievementListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IAchievementService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetAchievementListReply> GetAchievementListAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class AnnounceService : PRISM.Domain.ServiceBase, PRISM.Domain.IAnnounceService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IConfirmedAnnounceReply> ConfirmedAnnounceAsync(string articleId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetAnnounceDetailReply> GetAnnounceDetailAsync(string articleId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetAnnounceListReply> GetAnnounceListAsync(string cursor, int limit, AnnounceCategory category, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetAnnouncePopUpReply> GetAnnouncePopUpAsync(System.Threading.CancellationToken ct);

    private struct <ConfirmedAnnounceAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IConfirmedAnnounceReply> <>t__builder;
        public string articleId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IConfirmedAnnounceReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetAnnounceDetailAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetAnnounceDetailReply> <>t__builder;
        public string articleId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetAnnounceDetailReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetAnnounceListAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetAnnounceListReply> <>t__builder;
        public string cursor;
        public int limit;
        public AnnounceCategory category;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetAnnounceListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetAnnouncePopUpAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetAnnouncePopUpReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetAnnouncePopUpReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IAnnounceService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetAnnounceListReply> GetAnnounceListAsync(string cursor, int limit, AnnounceCategory category, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetAnnouncePopUpReply> GetAnnouncePopUpAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IConfirmedAnnounceReply> ConfirmedAnnounceAsync(string articleId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetAnnounceDetailReply> GetAnnounceDetailAsync(string articleId, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class AuthService : PRISM.Domain.ServiceBase, PRISM.Domain.IAuthService
{
    private static bool <IsLoggedIn>k__BackingField;
    public bool IsLoggedIn { get; set; }
    public static void SetLogin();
    public static void SetLogout();
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IConfirmTransferReply> ConfirmTransferAsync(TransferProviderType providerType, string token, string platform, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IConnectReleaseAndTokenReply> ConnectReleaseAndTokenAsync(string userId, string secret, TransferProviderType providerType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IExecuteConnectProviderAndTokenReply> ExecuteConnectProviderAndTokenAsync(string userId, string secret, TransferProviderType providerType, string token, TransferAuthenticationType authenticationType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IExecuteTransferReply> ExecuteTransferAsync(TransferProviderType providerType, string token, string platform, string platformUserId, TransferAuthenticationType authenticationType, long viewerId, string viewerIdSignature, string passPhrase, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetConnectURLAndTokenReply> GetConnectURLAndTokenAsync(string userId, string secret, TransferProviderType providerType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTransferStateReply> GetTransferStateAsync(string userId, string secret, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTransferURLReply> GetTransferURLAsync(TransferProviderType providerType, string passPhrase, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetUserForDmmGamesReply> GetUserForDmmGamesAsync(long viewerId, string viewerIdSignature, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ILoginReply> LoginAsync(string userId, string secret, string deviceName, string osName, string osVersion, string adId, long space, long viewerId, string viewerIdSignature, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IRegisterReply> RegisterAsync(string country, string platform, string platformUserId, string deviceName, string adId, long viewerId, string viewerIdSignature, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IUnlinkForDmmGamesReply> UnlinkForDmmGamesAsync(string userId, string secret, System.Threading.CancellationToken ct);

    private struct <ConfirmTransferAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IConfirmTransferReply> <>t__builder;
        public TransferProviderType providerType;
        public string token;
        public string platform;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IConfirmTransferReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ConnectReleaseAndTokenAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IConnectReleaseAndTokenReply> <>t__builder;
        public string userId;
        public string secret;
        public TransferProviderType providerType;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IConnectReleaseAndTokenReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ExecuteConnectProviderAndTokenAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IExecuteConnectProviderAndTokenReply> <>t__builder;
        public string userId;
        public string secret;
        public TransferProviderType providerType;
        public string token;
        public TransferAuthenticationType authenticationType;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IExecuteConnectProviderAndTokenReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ExecuteTransferAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IExecuteTransferReply> <>t__builder;
        public TransferProviderType providerType;
        public string token;
        public string platform;
        public string platformUserId;
        public TransferAuthenticationType authenticationType;
        public long viewerId;
        public string viewerIdSignature;
        public string passPhrase;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IExecuteTransferReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetConnectURLAndTokenAsync>d__10 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetConnectURLAndTokenReply> <>t__builder;
        public string userId;
        public string secret;
        public TransferProviderType providerType;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetConnectURLAndTokenReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetTransferStateAsync>d__11 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetTransferStateReply> <>t__builder;
        public string userId;
        public string secret;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetTransferStateReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetTransferURLAsync>d__12 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetTransferURLReply> <>t__builder;
        public TransferProviderType providerType;
        public string passPhrase;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetTransferURLReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetUserForDmmGamesAsync>d__13 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetUserForDmmGamesReply> <>t__builder;
        public long viewerId;
        public string viewerIdSignature;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetUserForDmmGamesReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <LoginAsync>d__14 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ILoginReply> <>t__builder;
        public string userId;
        public string secret;
        public string deviceName;
        public string osName;
        public string osVersion;
        public string adId;
        public long space;
        public long viewerId;
        public string viewerIdSignature;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ILoginReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <RegisterAsync>d__15 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IRegisterReply> <>t__builder;
        public string country;
        public string platform;
        public string platformUserId;
        public string deviceName;
        public string adId;
        public long viewerId;
        public string viewerIdSignature;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IRegisterReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <UnlinkForDmmGamesAsync>d__16 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IUnlinkForDmmGamesReply> <>t__builder;
        public string userId;
        public string secret;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IUnlinkForDmmGamesReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IAuthService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IRegisterReply> RegisterAsync(string country, string platform, string platformUserId, string deviceName, string adId, long viewerId, string viewerIdSignature, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ILoginReply> LoginAsync(string userId, string secret, string deviceName, string osName, string osVersion, string adId, long space, long viewerId, string viewerIdSignature, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTransferURLReply> GetTransferURLAsync(TransferProviderType providerType, string passPhrase, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IConfirmTransferReply> ConfirmTransferAsync(TransferProviderType providerType, string token, string platform, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IExecuteTransferReply> ExecuteTransferAsync(TransferProviderType providerType, string token, string platform, string platformUserId, TransferAuthenticationType authenticationType, long viewerId, string viewerIdSignature, string passPhrase, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetConnectURLAndTokenReply> GetConnectURLAndTokenAsync(string userId, string secret, TransferProviderType providerType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IExecuteConnectProviderAndTokenReply> ExecuteConnectProviderAndTokenAsync(string userId, string secret, TransferProviderType providerType, string token, TransferAuthenticationType authenticationType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IConnectReleaseAndTokenReply> ConnectReleaseAndTokenAsync(string userId, string secret, TransferProviderType providerType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetUserForDmmGamesReply> GetUserForDmmGamesAsync(long viewerId, string viewerIdSignature, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IUnlinkForDmmGamesReply> UnlinkForDmmGamesAsync(string userId, string secret, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTransferStateReply> GetTransferStateAsync(string userId, string secret, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class BannerService : PRISM.Domain.ServiceBase, PRISM.Domain.IBannerService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGlobalMenuBannerListReply> GetGlobalMenuBannerListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetHomeBannerListReply> GetHomeBannerListAsync(System.Threading.CancellationToken ct);

    private struct <GetGlobalMenuBannerListAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetGlobalMenuBannerListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetGlobalMenuBannerListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetHomeBannerListAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetHomeBannerListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetHomeBannerListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IBannerService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetHomeBannerListReply> GetHomeBannerListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGlobalMenuBannerListReply> GetGlobalMenuBannerListAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class BillingService : PRISM.Domain.ServiceBase, PRISM.Domain.IBillingService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IRegisterBillingBirthdateReply> RegisterBillingBirthdateAsync(string birthdate, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReserveStoreItemReply> ReserveStoreItemAsync(int mstStoreItemId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IVerifyReceiptForAppStoreReply> VerifyReceiptForAppStoreAsync(string orderId, string receiptData, string currencyCode, double unitPrice, string transactionId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IVerifyReceiptForDevelopReply> VerifyReceiptForDevelopAsync(string orderId, string currencyCode, double unitPrice, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IVerifyReceiptForDmmGamesReply> VerifyReceiptForDmmGamesAsync(string orderId, string receiptData, string dataSignature, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IVerifyReceiptForGooglePlayReply> VerifyReceiptForGooglePlayAsync(string orderId, string receiptData, string currencyCode, double unitPrice, string dataSignature, System.Threading.CancellationToken ct);

    private struct <RegisterBillingBirthdateAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IRegisterBillingBirthdateReply> <>t__builder;
        public string birthdate;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IRegisterBillingBirthdateReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ReserveStoreItemAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IReserveStoreItemReply> <>t__builder;
        public int mstStoreItemId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IReserveStoreItemReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <VerifyReceiptForAppStoreAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IVerifyReceiptForAppStoreReply> <>t__builder;
        public string orderId;
        public string receiptData;
        public string currencyCode;
        public double unitPrice;
        public string transactionId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IVerifyReceiptForAppStoreReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <VerifyReceiptForDevelopAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IVerifyReceiptForDevelopReply> <>t__builder;
        public string orderId;
        public string currencyCode;
        public double unitPrice;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IVerifyReceiptForDevelopReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <VerifyReceiptForDmmGamesAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IVerifyReceiptForDmmGamesReply> <>t__builder;
        public string orderId;
        public string receiptData;
        public string dataSignature;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IVerifyReceiptForDmmGamesReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <VerifyReceiptForGooglePlayAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IVerifyReceiptForGooglePlayReply> <>t__builder;
        public string orderId;
        public string receiptData;
        public string currencyCode;
        public double unitPrice;
        public string dataSignature;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IVerifyReceiptForGooglePlayReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IBillingService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReserveStoreItemReply> ReserveStoreItemAsync(int mstStoreItemId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IVerifyReceiptForDevelopReply> VerifyReceiptForDevelopAsync(string orderId, string currencyCode, double unitPrice, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IVerifyReceiptForAppStoreReply> VerifyReceiptForAppStoreAsync(string orderId, string receiptData, string currencyCode, double unitPrice, string transactionId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IVerifyReceiptForGooglePlayReply> VerifyReceiptForGooglePlayAsync(string orderId, string receiptData, string currencyCode, double unitPrice, string dataSignature, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IVerifyReceiptForDmmGamesReply> VerifyReceiptForDmmGamesAsync(string orderId, string receiptData, string dataSignature, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IRegisterBillingBirthdateReply> RegisterBillingBirthdateAsync(string birthdate, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class CacheService
{
    public static Cysharp.Threading.Tasks.UniTask SetupAsync(System.Threading.CancellationToken ct);
    public static void Reset();
    public static void ResetLargeCaches();
}

// Namespace: PRISM.Domain
public class ChallengeTourService : PRISM.Domain.ServiceBase, PRISM.Domain.IChallengeTourService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IBuildChallengeTourProduceIdolUnitReply> BuildChallengeTourProduceIdolUnitAsync(int challengeTourId, System.Collections.Generic.IEnumerable<int> mstProduceIdolIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishChallengeTourStageReply> FinishChallengeTourStageAsync(PRISM.Module.Networking.IChallengeTourInGameResultStatus inGameResult, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetChallengeTourReply> GetChallengeTourAsync(int challengeTourId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetChallengeTourUnitReply> SetChallengeTourUnitAsync(int challengeTourId, ChallengeTourUnitType unitType, string fesUnitId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartChallengeTourStageReply> StartChallengeTourStageAsync(int stageId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ITouchChallengeTourReply> TouchChallengeTourAsync(int challengeTourId, System.Threading.CancellationToken ct);

    private struct <BuildChallengeTourProduceIdolUnitAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IBuildChallengeTourProduceIdolUnitReply> <>t__builder;
        public int challengeTourId;
        public System.Collections.Generic.IEnumerable<int> mstProduceIdolIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IBuildChallengeTourProduceIdolUnitReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishChallengeTourStageAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishChallengeTourStageReply> <>t__builder;
        public PRISM.Module.Networking.IChallengeTourInGameResultStatus inGameResult;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishChallengeTourStageReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetChallengeTourAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetChallengeTourReply> <>t__builder;
        public int challengeTourId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetChallengeTourReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetChallengeTourUnitAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetChallengeTourUnitReply> <>t__builder;
        public int challengeTourId;
        public ChallengeTourUnitType unitType;
        public string fesUnitId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetChallengeTourUnitReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartChallengeTourStageAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartChallengeTourStageReply> <>t__builder;
        public int stageId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartChallengeTourStageReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <TouchChallengeTourAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ITouchChallengeTourReply> <>t__builder;
        public int challengeTourId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ITouchChallengeTourReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IChallengeTourService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetChallengeTourReply> GetChallengeTourAsync(int challengeTourId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetChallengeTourUnitReply> SetChallengeTourUnitAsync(int challengeTourId, ChallengeTourUnitType unitType, string fesUnitId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IBuildChallengeTourProduceIdolUnitReply> BuildChallengeTourProduceIdolUnitAsync(int challengeTourId, System.Collections.Generic.IEnumerable<int> mstProduceIdolIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ITouchChallengeTourReply> TouchChallengeTourAsync(int challengeTourId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartChallengeTourStageReply> StartChallengeTourStageAsync(int stageId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishChallengeTourStageReply> FinishChallengeTourStageAsync(PRISM.Module.Networking.IChallengeTourInGameResultStatus inGameResult, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class CostumeService : PRISM.Domain.ServiceBase, PRISM.Domain.ICostumeService
{
    private PRISM.Domain.ICachedCostumeService cachedService;
    public System.IObservable<System.ValueTuple<int, PRISM.Module.Networking.ICostumeSetStatus>> OnAddCostumeSet { get; set; }
    public System.IObservable<System.ValueTuple<int, PRISM.Module.Networking.ICostumeStatus>> OnAddCostume { get; set; }
    public System.IObservable<System.ValueTuple<int, PRISM.Module.Networking.IHairstyleStatus>> OnAddHairstyle { get; set; }
    public System.IObservable<System.ValueTuple<int, PRISM.Module.Networking.IAccessoryStatus>> OnAddAccessory { get; set; }
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IClearCostumePresetReply> ClearCostumePresetAsync(string costumePresetId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Domain.ICachedCostumeService> GetCachedServiceAsync(System.Threading.CancellationToken ct, bool forcedUpdate);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetCostumeListReply> GetCostumeListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetCostumeListReply> ForceGetCostumeListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetCostumePresetListReply> GetCostumePresetListAsync(int mstIdolId, CostumePresetType presetType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetCostumeUnlockLinkListReply> GetCostumeUnlockLinkListAsync(ProductType productType, int productMstId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetCostumePresetReply> SetCostumePresetAsync(string costumePresetId, int mstCostumeId, int mstHairstyleId, System.Collections.Generic.IEnumerable<int> mstAccessoryIdList, CostumePresetType presetType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetCostumePresetNameReply> SetCostumePresetNameAsync(string costumePresetId, string name, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IUnlockDressOrderReply> UnlockDressOrderAsync(int mstCostumeId, int mstIdolId, System.Threading.CancellationToken ct);

    private class CachedCostumeService : PRISM.Domain.ServiceBase, PRISM.Domain.ICachedCostumeService
    {
        public PRISM.Module.Networking.ICostumeStatus GetCostumeFromResourceId(int charaId, int resourceId, ProductType productType);
        public PRISM.Domain.CostumeSetData GetCostumeSetData(int costumeSetId);
        public PRISM.Domain.CostumeSetData GetCostumeSetData(PRISM.Module.Networking.IDressStatus status);
        public PRISM.Domain.CostumeSetData GetCostumeSetData(int mstCostumeId, int mstHairStyleId, System.Collections.Generic.IEnumerable<int> mstAccessoryIds);
        public PRISM.Module.Networking.ICostumeStatus GetCostume(int costumeId);
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ICostumeStatus> GetCostumes();
        public PRISM.Module.Networking.IHairstyleStatus GetHairstyle(int hairstyleId);
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IHairstyleStatus> GetHairstyles();
        public PRISM.Module.Networking.IAccessoryStatus GetAccessory(int accessoryId);
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IAccessoryStatus> GetAccessories();
    }

    private struct <ClearCostumePresetAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IClearCostumePresetReply> <>t__builder;
        public string costumePresetId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IClearCostumePresetReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ForceGetCostumeListAsync>d__13 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetCostumeListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetCostumeListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetCachedServiceAsync>d__10 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Domain.ICachedCostumeService> <>t__builder;
        public bool forcedUpdate;
        public PRISM.Domain.CostumeService <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetCostumeListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetCostumeListAsync>d__12 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetCostumeListReply> <>t__builder;
        public PRISM.Domain.CostumeService <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetCostumeListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetCostumePresetListAsync>d__14 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetCostumePresetListReply> <>t__builder;
        public int mstIdolId;
        public CostumePresetType presetType;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetCostumePresetListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetCostumeUnlockLinkListAsync>d__15 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetCostumeUnlockLinkListReply> <>t__builder;
        public ProductType productType;
        public int productMstId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetCostumeUnlockLinkListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetCostumePresetAsync>d__16 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetCostumePresetReply> <>t__builder;
        public string costumePresetId;
        public int mstCostumeId;
        public int mstHairstyleId;
        public System.Collections.Generic.IEnumerable<int> mstAccessoryIdList;
        public CostumePresetType presetType;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetCostumePresetReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetCostumePresetNameAsync>d__17 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetCostumePresetNameReply> <>t__builder;
        public string costumePresetId;
        public string name;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetCostumePresetNameReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <UnlockDressOrderAsync>d__18 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IUnlockDressOrderReply> <>t__builder;
        public int mstCostumeId;
        public int mstIdolId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IUnlockDressOrderReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface ICostumeSetData
{
    public PRISM.Module.Networking.ICostumeStatus Costume { get; set; }
    public PRISM.Module.Networking.IHairstyleStatus Hairstyle { get; set; }
    public System.Collections.Generic.IReadOnlyDictionary<AccessoryType, PRISM.Module.Networking.IAccessoryStatus> Accessories { get; set; }
}

// Namespace: PRISM.Domain
public class CostumeSetData : PRISM.Domain.ICostumeSetData
{
    private PRISM.Module.Networking.ICostumeStatus <Costume>k__BackingField;
    private PRISM.Module.Networking.IHairstyleStatus <Hairstyle>k__BackingField;
    private System.Collections.Generic.Dictionary<AccessoryType, PRISM.Module.Networking.IAccessoryStatus> accessories;
    public PRISM.Module.Networking.ICostumeStatus Costume { get; set; }
    public PRISM.Module.Networking.IHairstyleStatus Hairstyle { get; set; }
    public System.Collections.Generic.IReadOnlyDictionary<AccessoryType, PRISM.Module.Networking.IAccessoryStatus> Accessories { get; set; }
    public void CopyFrom(PRISM.Domain.ICostumeSetData c);
    public void SetAccessories(System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IAccessoryStatus> accessories);
    public void SetAccessory(AccessoryType type, PRISM.Module.Networking.IAccessoryStatus accessory);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IAccessoryStatus, AccessoryType> <>9__12_0;
        public static System.Func<PRISM.Module.Networking.IAccessoryStatus, PRISM.Module.Networking.IAccessoryStatus> <>9__12_1;
        private AccessoryType <.ctor>b__12_0(PRISM.Module.Networking.IAccessoryStatus x);
        private PRISM.Module.Networking.IAccessoryStatus <.ctor>b__12_1(PRISM.Module.Networking.IAccessoryStatus x);
    }
}

// Namespace: PRISM.Domain
public class CostumeSetDataExtensions
{
    public static bool IsAllUnlocked(PRISM.Domain.ICostumeSetData self);
    public static System.Collections.Generic.IEnumerable<int> GetAccessoryIds(PRISM.Domain.ICostumeSetData self);
    public static PRISM.UnitIdol ToUnitIdol(PRISM.Domain.ICostumeSetData self, System.Nullable<int> characterId);
    public static int GetMasterId(PRISM.Domain.ICostumeSetData self, PRISM.Definitions.CostumeCategory category);
    public static int GetMasterId(PRISM.Domain.ICostumeSetData self, PRISM.Definitions.CostumePartType partType);
    public static PRISM.Domain.ProductKey ToProductKey(PRISM.Domain.ICostumeSetData self, PRISM.Definitions.CostumePartType partType);
    public static System.Collections.Generic.IEnumerable<System.ValueTuple<PRISM.Domain.ProductKey, bool>> GetParts(PRISM.Domain.ICostumeSetData self);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IAccessoryStatus, bool> <>9__0_0;
        public static System.Func<PRISM.Module.Networking.IAccessoryStatus, int> <>9__1_0;
        public static System.Func<PRISM.Module.Networking.IAccessoryStatus, int> <>9__2_0;
        public static System.Func<System.Collections.Generic.KeyValuePair<AccessoryType, PRISM.Module.Networking.IAccessoryStatus>, int> <>9__6_0;
        private bool <IsAllUnlocked>b__0_0(PRISM.Module.Networking.IAccessoryStatus a);
        private int <GetAccessoryIds>b__1_0(PRISM.Module.Networking.IAccessoryStatus x);
        private int <ToUnitIdol>b__2_0(PRISM.Module.Networking.IAccessoryStatus x);
        private int <GetParts>b__6_0(System.Collections.Generic.KeyValuePair<AccessoryType, PRISM.Module.Networking.IAccessoryStatus> x);
    }

    private class <GetParts>d__6 : System.Collections.Generic.IEnumerable<System.ValueTuple<PRISM.Domain.ProductKey, bool>>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<System.ValueTuple<PRISM.Domain.ProductKey, bool>>, System.Collections.IEnumerator, System.IDisposable
    {
        private int <>1__state;
        private System.ValueTuple<PRISM.Domain.ProductKey, bool> <>2__current;
        private int <>l__initialThreadId;
        private PRISM.Domain.ICostumeSetData self;
        public PRISM.Domain.ICostumeSetData <>3__self;
        private System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<AccessoryType, PRISM.Module.Networking.IAccessoryStatus>> <>7__wrap1;
        private System.ValueTuple<PRISM.Domain.ProductKey, bool> System.Collections.Generic.IEnumerator<(PRISM.Domain.ProductKeyProductKey,System.BooleanIsUnlocked)>.Current { get; set; }
        private object System.Collections.IEnumerator.Current { get; set; }
        private void System.IDisposable.Dispose();
        private bool MoveNext();
        private void <>m__Finally1();
        private void System.Collections.IEnumerator.Reset();
        private System.Collections.Generic.IEnumerator<System.ValueTuple<PRISM.Domain.ProductKey, bool>> System.Collections.Generic.IEnumerable<(PRISM.Domain.ProductKeyProductKey,System.BooleanIsUnlocked)>.GetEnumerator();
        private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
    }
}

// Namespace: PRISM.Domain
public struct CostumeSetIds : System.ValueType
{
    public int Costume;
    public int Hairstyle;
    public System.Collections.Generic.IReadOnlyDictionary<AccessoryType, int> Accessories;
    public int GetMasterId(PRISM.Definitions.CostumePartType partType);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Definitions.MstAccessory, AccessoryType> <>9__3_0;
        public static System.Func<PRISM.Definitions.MstAccessory, int> <>9__3_1;
        private AccessoryType <.ctor>b__3_0(PRISM.Definitions.MstAccessory x);
        private int <.ctor>b__3_1(PRISM.Definitions.MstAccessory x);
    }
}

// Namespace: PRISM.Domain
public interface ICachedCostumeService
{
    public PRISM.Module.Networking.ICostumeStatus GetCostumeFromResourceId(int charaId, int resourceId, ProductType productType);
    public PRISM.Domain.CostumeSetData GetCostumeSetData(int costumeSetId);
    public PRISM.Domain.CostumeSetData GetCostumeSetData(PRISM.Module.Networking.IDressStatus status);
    public PRISM.Domain.CostumeSetData GetCostumeSetData(int mstCostumeId, int mstHairStyleId, System.Collections.Generic.IEnumerable<int> mstAccessoryIds);
    public PRISM.Module.Networking.ICostumeStatus GetCostume(int costumeId);
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ICostumeStatus> GetCostumes();
    public PRISM.Module.Networking.IHairstyleStatus GetHairstyle(int hairstyleId);
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IHairstyleStatus> GetHairstyles();
    public PRISM.Module.Networking.IAccessoryStatus GetAccessory(int accessoryId);
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IAccessoryStatus> GetAccessories();
}

// Namespace: PRISM.Domain
public interface ICostumeService
{
    public System.IObservable<System.ValueTuple<int, PRISM.Module.Networking.ICostumeSetStatus>> OnAddCostumeSet { get; set; }
    public System.IObservable<System.ValueTuple<int, PRISM.Module.Networking.ICostumeStatus>> OnAddCostume { get; set; }
    public System.IObservable<System.ValueTuple<int, PRISM.Module.Networking.IHairstyleStatus>> OnAddHairstyle { get; set; }
    public System.IObservable<System.ValueTuple<int, PRISM.Module.Networking.IAccessoryStatus>> OnAddAccessory { get; set; }
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetCostumeListReply> GetCostumeListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetCostumePresetListReply> GetCostumePresetListAsync(int mstIdolId, CostumePresetType presetType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetCostumePresetReply> SetCostumePresetAsync(string costumePresetId, int mstCostumeId, int mstHairstyleId, System.Collections.Generic.IEnumerable<int> mstAccessoryIdList, CostumePresetType presetType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetCostumePresetNameReply> SetCostumePresetNameAsync(string costumePresetId, string name, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IClearCostumePresetReply> ClearCostumePresetAsync(string costumePresetId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IUnlockDressOrderReply> UnlockDressOrderAsync(int mstCostumeId, int mstIdolId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetCostumeUnlockLinkListReply> GetCostumeUnlockLinkListAsync(ProductType productType, int productMstId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetCostumeListReply> ForceGetCostumeListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Domain.ICachedCostumeService> GetCachedServiceAsync(System.Threading.CancellationToken ct, bool forcedUpdate);
}

// Namespace: PRISM.Domain
public class DirectMessageService : PRISM.Domain.ServiceBase, PRISM.Domain.IDirectMessageService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetDirectMessageListReply> GetDirectMessageListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReadDirectMessageReply> ReadDirectMessageAsync(string directMessageId, System.Threading.CancellationToken ct);

    private struct <GetDirectMessageListAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetDirectMessageListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetDirectMessageListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ReadDirectMessageAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IReadDirectMessageReply> <>t__builder;
        public string directMessageId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IReadDirectMessageReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IDirectMessageService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetDirectMessageListReply> GetDirectMessageListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReadDirectMessageReply> ReadDirectMessageAsync(string directMessageId, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class DressUpRoomService : PRISM.Domain.ServiceBase, PRISM.Domain.IDressUpRoomService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetDressUpRoomCostumeListReply> GetDressUpRoomCostumeListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetDressUpRoomCostumeReply> SetDressUpRoomCostumeAsync(string dressUpRoomCostumeId, int mstCostumeId, int mstHairstyleId, System.Collections.Generic.IEnumerable<int> mstAccessoryIdList, DressUpRoomCostumeType dressUpRoomCostumeType, System.Threading.CancellationToken ct);

    private struct <GetDressUpRoomCostumeListAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetDressUpRoomCostumeListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetDressUpRoomCostumeListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetDressUpRoomCostumeAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetDressUpRoomCostumeReply> <>t__builder;
        public string dressUpRoomCostumeId;
        public int mstCostumeId;
        public int mstHairstyleId;
        public System.Collections.Generic.IEnumerable<int> mstAccessoryIdList;
        public DressUpRoomCostumeType dressUpRoomCostumeType;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetDressUpRoomCostumeReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IDressUpRoomService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetDressUpRoomCostumeListReply> GetDressUpRoomCostumeListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetDressUpRoomCostumeReply> SetDressUpRoomCostumeAsync(string dressUpRoomCostumeId, int mstCostumeId, int mstHairstyleId, System.Collections.Generic.IEnumerable<int> mstAccessoryIdList, DressUpRoomCostumeType dressUpRoomCostumeType, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class EventRankingService : PRISM.Domain.ServiceBase, PRISM.Domain.IEventRankingService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IEditRankingCommentReply> EditRankingCommentAsync(int mstEventId, string comment, int commentNumber, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetRankingReply> GetRankingAsync(EventRankingViewType rankingViewType, int mstEventRankingId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetRankingListReply> GetRankingListAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSelfRankingReply> GetSelfRankingAsync(int mstEventId, System.Threading.CancellationToken ct);

    private struct <EditRankingCommentAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IEditRankingCommentReply> <>t__builder;
        public int mstEventId;
        public string comment;
        public int commentNumber;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IEditRankingCommentReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetRankingAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetRankingReply> <>t__builder;
        public EventRankingViewType rankingViewType;
        public int mstEventRankingId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetRankingReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetRankingListAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetRankingListReply> <>t__builder;
        public int mstEventId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetRankingListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetSelfRankingAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetSelfRankingReply> <>t__builder;
        public int mstEventId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetSelfRankingReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IEventRankingService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetRankingListReply> GetRankingListAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetRankingReply> GetRankingAsync(EventRankingViewType rankingViewType, int mstEventRankingId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSelfRankingReply> GetSelfRankingAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IEditRankingCommentReply> EditRankingCommentAsync(int mstEventId, string comment, int commentNumber, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class ExchangeService : PRISM.Domain.ServiceBase, PRISM.Domain.IExchangeService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IExchangeShinyPartyTokenReply> ExchangeShinyPartyTokenAsync(int mstShinyPartyTokenProductId, int amount, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetExchangeAvailableShinyPartyTokenListReply> GetExchangeAvailableShinyPartyTokenListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetExchangeGroupListReply> GetExchangeGroupListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetExchangePurchaseHistoryListReply> GetExchangePurchaseHistoryListAsync(int mstExchangeGroupId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetExchangeShinyPartyTokenListReply> GetExchangeShinyPartyTokenListAsync(ProductType productType, int productMstId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetExchangeTicketProductListReply> GetExchangeTicketProductListAsync(ProductType productType, int productMstId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IPurchaseExchangeProductReply> PurchaseExchangeProductAsync(int mstExchangeProductId, int amount, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IPurchaseExchangeTicketProductReply> PurchaseExchangeTicketProductAsync(int mstSelectionTicketProductId, int purchaseTimes, System.Threading.CancellationToken ct);

    private struct <ExchangeShinyPartyTokenAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IExchangeShinyPartyTokenReply> <>t__builder;
        public int mstShinyPartyTokenProductId;
        public int amount;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IExchangeShinyPartyTokenReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetExchangeAvailableShinyPartyTokenListAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetExchangeAvailableShinyPartyTokenListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetExchangeAvailableShinyPartyTokenListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetExchangeGroupListAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetExchangeGroupListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetExchangeGroupListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetExchangePurchaseHistoryListAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetExchangePurchaseHistoryListReply> <>t__builder;
        public int mstExchangeGroupId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetExchangePurchaseHistoryListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetExchangeShinyPartyTokenListAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetExchangeShinyPartyTokenListReply> <>t__builder;
        public ProductType productType;
        public int productMstId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetExchangeShinyPartyTokenListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetExchangeTicketProductListAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetExchangeTicketProductListReply> <>t__builder;
        public ProductType productType;
        public int productMstId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetExchangeTicketProductListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <PurchaseExchangeProductAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IPurchaseExchangeProductReply> <>t__builder;
        public int mstExchangeProductId;
        public int amount;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IPurchaseExchangeProductReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <PurchaseExchangeTicketProductAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IPurchaseExchangeTicketProductReply> <>t__builder;
        public int mstSelectionTicketProductId;
        public int purchaseTimes;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IPurchaseExchangeTicketProductReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IExchangeService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetExchangeGroupListReply> GetExchangeGroupListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IPurchaseExchangeProductReply> PurchaseExchangeProductAsync(int mstExchangeProductId, int amount, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetExchangeTicketProductListReply> GetExchangeTicketProductListAsync(ProductType productType, int productMstId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IPurchaseExchangeTicketProductReply> PurchaseExchangeTicketProductAsync(int mstSelectionTicketProductId, int purchaseTimes, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetExchangePurchaseHistoryListReply> GetExchangePurchaseHistoryListAsync(int mstExchangeGroupId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetExchangeShinyPartyTokenListReply> GetExchangeShinyPartyTokenListAsync(ProductType productType, int productMstId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IExchangeShinyPartyTokenReply> ExchangeShinyPartyTokenAsync(int mstShinyPartyTokenProductId, int amount, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetExchangeAvailableShinyPartyTokenListReply> GetExchangeAvailableShinyPartyTokenListAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class FesUnitService : PRISM.Domain.ServiceBase, PRISM.Domain.IFesUnitService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFesUnitStatus> GetFesUnitAsync(string unitId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<int> GetNumberOfFesUnitsAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetFesUnitListReply> GetFesUnitListAsync(System.Threading.CancellationToken ct);
    private Cysharp.Threading.Tasks.UniTask _callFesUnitListAPI(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IMarkFavoriteFesUnitReply> MarkFavoriteFesUnitAsync(string fesUnitId, int mstFavoriteMarkId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetFesUnitNameReply> SetFesUnitNameAsync(string fesUnitId, string name, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ITransferFesUnitReply> TransferFesUnitAsync(System.Collections.Generic.IEnumerable<string> fesUnitIdList, System.Threading.CancellationToken ct);

    private struct <GetFesUnitAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFesUnitStatus> <>t__builder;
        public PRISM.Domain.FesUnitService <>4__this;
        public System.Threading.CancellationToken ct;
        public string unitId;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetFesUnitListAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetFesUnitListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetFesUnitListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetNumberOfFesUnitsAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<int> <>t__builder;
        public PRISM.Domain.FesUnitService <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <MarkFavoriteFesUnitAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IMarkFavoriteFesUnitReply> <>t__builder;
        public string fesUnitId;
        public int mstFavoriteMarkId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IMarkFavoriteFesUnitReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetFesUnitNameAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetFesUnitNameReply> <>t__builder;
        public string fesUnitId;
        public string name;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetFesUnitNameReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <TransferFesUnitAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ITransferFesUnitReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> fesUnitIdList;
        public System.Threading.CancellationToken ct;
        private PRISM.Module.Networking.ITransferFesUnitArgs <args>5__2;
        private Awaiter<PRISM.Module.Networking.ITransferFesUnitReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_callFesUnitListAPI>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetFesUnitListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IFesUnitService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetFesUnitListReply> GetFesUnitListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IMarkFavoriteFesUnitReply> MarkFavoriteFesUnitAsync(string fesUnitId, int mstFavoriteMarkId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ITransferFesUnitReply> TransferFesUnitAsync(System.Collections.Generic.IEnumerable<string> fesUnitIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetFesUnitNameReply> SetFesUnitNameAsync(string fesUnitId, string name, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFesUnitStatus> GetFesUnitAsync(string unitId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<int> GetNumberOfFesUnitsAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class FriendService : PRISM.Domain.ServiceBase, PRISM.Domain.IFriendService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFollowUserReply> FollowUserAsync(string userId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetFollowerListReply> GetFollowerListAsync(string cursor, SortOrderType sortOrderType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetFollowListReply> GetFollowListAsync(string cursor, SortOrderType sortOrderType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetRecommendedUserListReply> GetRecommendedUserListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IRemoveFollowReply> RemoveFollowAsync(string userId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IRemoveFollowerReply> RemoveFollowerAsync(string userId, System.Threading.CancellationToken ct);

    private struct <FollowUserAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFollowUserReply> <>t__builder;
        public string userId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFollowUserReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetFollowListAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetFollowListReply> <>t__builder;
        public string cursor;
        public SortOrderType sortOrderType;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetFollowListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetFollowerListAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetFollowerListReply> <>t__builder;
        public string cursor;
        public SortOrderType sortOrderType;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetFollowerListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetRecommendedUserListAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetRecommendedUserListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetRecommendedUserListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <RemoveFollowAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IRemoveFollowReply> <>t__builder;
        public string userId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IRemoveFollowReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <RemoveFollowerAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IRemoveFollowerReply> <>t__builder;
        public string userId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IRemoveFollowerReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IFriendService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFollowUserReply> FollowUserAsync(string userId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IRemoveFollowReply> RemoveFollowAsync(string userId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IRemoveFollowerReply> RemoveFollowerAsync(string userId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetFollowListReply> GetFollowListAsync(string cursor, SortOrderType sortOrderType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetFollowerListReply> GetFollowerListAsync(string cursor, SortOrderType sortOrderType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetRecommendedUserListReply> GetRecommendedUserListAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class FriendInvitationService : PRISM.Domain.ServiceBase, PRISM.Domain.IFriendInvitationService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetFriendInvitationTopReply> GetFriendInvitationTopAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IIssueInviteCodeReply> IssueInviteCodeAsync(int mstFriendInvitationId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReceiveInviteCodeReply> ReceiveInviteCodeAsync(int mstFriendInvitationId, string friendInvitationCode, System.Threading.CancellationToken ct);

    private struct <GetFriendInvitationTopAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetFriendInvitationTopReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetFriendInvitationTopReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <IssueInviteCodeAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IIssueInviteCodeReply> <>t__builder;
        public int mstFriendInvitationId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IIssueInviteCodeReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ReceiveInviteCodeAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IReceiveInviteCodeReply> <>t__builder;
        public int mstFriendInvitationId;
        public string friendInvitationCode;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IReceiveInviteCodeReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IFriendInvitationService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetFriendInvitationTopReply> GetFriendInvitationTopAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IIssueInviteCodeReply> IssueInviteCodeAsync(int mstFriendInvitationId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReceiveInviteCodeReply> ReceiveInviteCodeAsync(int mstFriendInvitationId, string friendInvitationCode, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class GalleryService : PRISM.Domain.ServiceBase, PRISM.Domain.IGalleryService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGalleryAlbumReply> GetGalleryAlbumAsync(int mstCharacterInfoId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGalleryCostumeListReply> GetGalleryCostumeListAsync(int mstCharacterInfoId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGalleryMovieListReply> GetGalleryMovieListAsync(int mstCharacterInfoId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGalleryVoiceListReply> GetGalleryVoiceListAsync(int mstCharacterInfoId, System.Threading.CancellationToken ct);

    private struct <GetGalleryAlbumAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetGalleryAlbumReply> <>t__builder;
        public int mstCharacterInfoId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetGalleryAlbumReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetGalleryCostumeListAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetGalleryCostumeListReply> <>t__builder;
        public int mstCharacterInfoId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetGalleryCostumeListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetGalleryMovieListAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetGalleryMovieListReply> <>t__builder;
        public int mstCharacterInfoId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetGalleryMovieListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetGalleryVoiceListAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetGalleryVoiceListReply> <>t__builder;
        public int mstCharacterInfoId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetGalleryVoiceListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IGalleryService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGalleryAlbumReply> GetGalleryAlbumAsync(int mstCharacterInfoId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGalleryCostumeListReply> GetGalleryCostumeListAsync(int mstCharacterInfoId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGalleryVoiceListReply> GetGalleryVoiceListAsync(int mstCharacterInfoId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGalleryMovieListReply> GetGalleryMovieListAsync(int mstCharacterInfoId, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class GameService : PRISM.Domain.ServiceBase, PRISM.Domain.IGameService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetDmmGamesAPITokenReply> GetDmmGamesAPITokenAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetVersionReply> GetVersionAsync(System.Threading.CancellationToken ct);

    private struct <GetDmmGamesAPITokenAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetDmmGamesAPITokenReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetDmmGamesAPITokenReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetVersionAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetVersionReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetVersionReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IGameService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetVersionReply> GetVersionAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetDmmGamesAPITokenReply> GetDmmGamesAPITokenAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class GameSettingService : PRISM.Domain.ServiceBase, PRISM.Domain.IGameSettingService
{
    public PRISM.Module.Networking.IGameSettingStatus GetCachedSettings();
    public PRISM.Module.Networking.IRecoverSettingStatus GetRecoverSetting(StaminaType staminaType);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSettingReply> GetSettingAsync(System.Threading.CancellationToken ct);

    private class <>c__DisplayClass1_0
    {
        public StaminaType staminaType;
        private bool <GetRecoverSetting>b__0(PRISM.Module.Networking.IRecoverSettingStatus x);
    }

    private struct <GetSettingAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetSettingReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetSettingReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IGameSettingService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSettingReply> GetSettingAsync(System.Threading.CancellationToken ct);
    public PRISM.Module.Networking.IGameSettingStatus GetCachedSettings();
}

// Namespace: PRISM.Domain
public class GashaService : PRISM.Domain.ServiceBase, PRISM.Domain.IGashaService
{
    public bool IsOpenExchangeExpiryDateInfo { get; set; }
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IConvertGashaExchangePointReply> ConvertGashaExchangePointAsync(System.Collections.Generic.IEnumerable<string> gashaExchangeIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGashaDrawReply> GashaDrawAsync(string gashaId, string gashaPriceId, int execCount, System.Threading.CancellationToken ct);
    public void OpenExchangeExpiryDateInfoDone(System.DateTime checkTime);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaBonusRateReply> GetGashaBonusRateAsync(string gashaId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaDetailReply> GetGashaDetailAsync(string gashaId, System.Collections.Generic.IEnumerable<string> detailIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaExchangeInfoReply> GetGashaExchangeInfoAsync(string gashaExchangeId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaExchangePointListReply> GetGashaExchangePointListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaHistoryListReply> GetGashaHistoryListAsync(string gashaId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaListReply> GetGashaListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaMemberReply> GetGashaMemberAsync(string gashaId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaNotesReply> GetGashaNotesAsync(string gashaId, System.Collections.Generic.IEnumerable<string> detailIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaRateReply> GetGashaRateAsync(string gashaId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetPrismGaugeDetailReply> GetPrismGaugeDetailAsync(string prismGaugeId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IPurchaseGashaExchangeReply> PurchaseGashaExchangeAsync(string gashaExchangeRewardId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IRetryGashaCommitReply> RetryGashaCommitAsync(string gashaId, string gashaPriceId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IRetryGashaDrawReply> RetryGashaDrawAsync(string gashaId, string gashaPriceId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IRevertGashaExchangePointReply> RevertGashaExchangePointAsync(System.Collections.Generic.IEnumerable<string> gashaExchangeIdList, System.Threading.CancellationToken ct);

    private struct <ConvertGashaExchangePointAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IConvertGashaExchangePointReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> gashaExchangeIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IConvertGashaExchangePointReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GashaDrawAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGashaDrawReply> <>t__builder;
        public string gashaId;
        public string gashaPriceId;
        public int execCount;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGashaDrawReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetGashaBonusRateAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetGashaBonusRateReply> <>t__builder;
        public string gashaId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetGashaBonusRateReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetGashaDetailAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetGashaDetailReply> <>t__builder;
        public string gashaId;
        public System.Collections.Generic.IEnumerable<string> detailIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetGashaDetailReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetGashaExchangeInfoAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetGashaExchangeInfoReply> <>t__builder;
        public string gashaExchangeId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetGashaExchangeInfoReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetGashaExchangePointListAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetGashaExchangePointListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetGashaExchangePointListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetGashaHistoryListAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetGashaHistoryListReply> <>t__builder;
        public string gashaId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetGashaHistoryListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetGashaListAsync>d__10 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetGashaListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetGashaListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetGashaMemberAsync>d__11 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetGashaMemberReply> <>t__builder;
        public string gashaId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetGashaMemberReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetGashaNotesAsync>d__12 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetGashaNotesReply> <>t__builder;
        public string gashaId;
        public System.Collections.Generic.IEnumerable<string> detailIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetGashaNotesReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetGashaRateAsync>d__13 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetGashaRateReply> <>t__builder;
        public string gashaId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetGashaRateReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetPrismGaugeDetailAsync>d__14 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetPrismGaugeDetailReply> <>t__builder;
        public string prismGaugeId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetPrismGaugeDetailReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <PurchaseGashaExchangeAsync>d__15 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IPurchaseGashaExchangeReply> <>t__builder;
        public string gashaExchangeRewardId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IPurchaseGashaExchangeReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <RetryGashaCommitAsync>d__16 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IRetryGashaCommitReply> <>t__builder;
        public string gashaId;
        public string gashaPriceId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IRetryGashaCommitReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <RetryGashaDrawAsync>d__17 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IRetryGashaDrawReply> <>t__builder;
        public string gashaId;
        public string gashaPriceId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IRetryGashaDrawReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <RevertGashaExchangePointAsync>d__18 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IRevertGashaExchangePointReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> gashaExchangeIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IRevertGashaExchangePointReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IGashaService
{
    public bool IsOpenExchangeExpiryDateInfo { get; set; }
    public void OpenExchangeExpiryDateInfoDone(System.DateTime checkTime);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaListReply> GetGashaListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGashaDrawReply> GashaDrawAsync(string gashaId, string gashaPriceId, int execCount, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaDetailReply> GetGashaDetailAsync(string gashaId, System.Collections.Generic.IEnumerable<string> detailIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaNotesReply> GetGashaNotesAsync(string gashaId, System.Collections.Generic.IEnumerable<string> detailIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaRateReply> GetGashaRateAsync(string gashaId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaMemberReply> GetGashaMemberAsync(string gashaId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaBonusRateReply> GetGashaBonusRateAsync(string gashaId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaHistoryListReply> GetGashaHistoryListAsync(string gashaId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IPurchaseGashaExchangeReply> PurchaseGashaExchangeAsync(string gashaExchangeRewardId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaExchangeInfoReply> GetGashaExchangeInfoAsync(string gashaExchangeId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IRetryGashaDrawReply> RetryGashaDrawAsync(string gashaId, string gashaPriceId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IRetryGashaCommitReply> RetryGashaCommitAsync(string gashaId, string gashaPriceId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetPrismGaugeDetailReply> GetPrismGaugeDetailAsync(string prismGaugeId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGashaExchangePointListReply> GetGashaExchangePointListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IConvertGashaExchangePointReply> ConvertGashaExchangePointAsync(System.Collections.Generic.IEnumerable<string> gashaExchangeIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IRevertGashaExchangePointReply> RevertGashaExchangePointAsync(System.Collections.Generic.IEnumerable<string> gashaExchangeIdList, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class GiftEventService : PRISM.Domain.ServiceBase, PRISM.Domain.IGiftEventService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGiftEventPointListReply> GetGiftEventPointListAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReceiveUnreceivedGiftEventRewardAllReply> ReceiveUnreceivedGiftEventRewardAllAsync(int mstGiftEventTokenId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISendGiftReply> SendGiftAsync(int mstGiftEventTokenId, int mstCharacterInfoId, int amount, System.Threading.CancellationToken ct);

    private struct <GetGiftEventPointListAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetGiftEventPointListReply> <>t__builder;
        public int mstEventId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetGiftEventPointListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ReceiveUnreceivedGiftEventRewardAllAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IReceiveUnreceivedGiftEventRewardAllReply> <>t__builder;
        public int mstGiftEventTokenId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IReceiveUnreceivedGiftEventRewardAllReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SendGiftAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISendGiftReply> <>t__builder;
        public int mstGiftEventTokenId;
        public int mstCharacterInfoId;
        public int amount;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISendGiftReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IGiftEventService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetGiftEventPointListReply> GetGiftEventPointListAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISendGiftReply> SendGiftAsync(int mstGiftEventTokenId, int mstCharacterInfoId, int amount, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReceiveUnreceivedGiftEventRewardAllReply> ReceiveUnreceivedGiftEventRewardAllAsync(int mstGiftEventTokenId, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class HomeService : PRISM.Domain.ServiceBase, PRISM.Domain.IHomeService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IAccessHomeReply> AccessHomeAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetHomeNotificationListReply> GetHomeNotificationListAsync(System.Collections.Generic.IEnumerable<NotificationPlace> needPlaceList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSuspendedLiveReply> GetSuspendedLiveAsync(string deviceToken, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ITmpGetHomeReply> TmpGetHomeUseCacheAsync(bool isUseCache, System.Threading.CancellationToken ct);
    public Home3DViewType GetHomeViewType(bool isCoercionProducer, bool isLoginBonus);
    public PRISM.UnitIdol GetHazukiCostume();
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetHomeSettingReply> SetHomeSettingAsync(PRISM.Module.Networking.IHomeSettingFavoriteIdolStatus favoriteIdolSetting, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ITmpGetHomeReply> TmpGetHomeAsync(System.Threading.CancellationToken ct);

    private struct <AccessHomeAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IAccessHomeReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IAccessHomeReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetHomeNotificationListAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetHomeNotificationListReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<NotificationPlace> needPlaceList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetHomeNotificationListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetSuspendedLiveAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetSuspendedLiveReply> <>t__builder;
        public string deviceToken;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetSuspendedLiveReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetHomeSettingAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetHomeSettingReply> <>t__builder;
        public PRISM.Module.Networking.IHomeSettingFavoriteIdolStatus favoriteIdolSetting;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetHomeSettingReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <TmpGetHomeAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ITmpGetHomeReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ITmpGetHomeReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <TmpGetHomeUseCacheAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ITmpGetHomeReply> <>t__builder;
        public bool isUseCache;
        public PRISM.Domain.HomeService <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ITmpGetHomeReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IHomeService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ITmpGetHomeReply> TmpGetHomeAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IAccessHomeReply> AccessHomeAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetHomeSettingReply> SetHomeSettingAsync(PRISM.Module.Networking.IHomeSettingFavoriteIdolStatus favoriteIdolSetting, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetHomeNotificationListReply> GetHomeNotificationListAsync(System.Collections.Generic.IEnumerable<NotificationPlace> needPlaceList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSuspendedLiveReply> GetSuspendedLiveAsync(string deviceToken, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ITmpGetHomeReply> TmpGetHomeUseCacheAsync(bool isUseCache, System.Threading.CancellationToken ct);
    public Home3DViewType GetHomeViewType(bool isCoercionProducer, bool isLoginBonus);
    public PRISM.UnitIdol GetHazukiCostume();
}

// Namespace: PRISM.Domain
public class IdolService : PRISM.Domain.ServiceBase, PRISM.Domain.IIdolService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetDearnessLevelRewardListReply> GetDearnessLevelRewardListAsync(int mstIdolId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IIdolBaseStatus> GetIdolBaseAsync(int idolId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetIdolBaseListReply> GetIdolBaseListAsync(System.Threading.CancellationToken ct);
    private Cysharp.Threading.Tasks.UniTask _callIdolBaseListAPI(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetIdolLevelRewardListReply> GetIdolLevelRewardListAsync(int mstIdolId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Domain.ICachedIdolService> GetCachedServiceAsync(System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetIdolBaseCostumeReply> SetIdolBaseCostumeAsync(int mstIdolId, IdolBaseCostumeTargetSceneType sceneType, int mstCostumeId, int mstHairstyleId, System.Collections.Generic.IEnumerable<int> mstAccessoryIdList, bool enable, System.Threading.CancellationToken ct);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<int, bool> <>9__6_0;
        private bool <SetIdolBaseCostumeAsync>b__6_0(int x);
    }

    private struct <GetCachedServiceAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Domain.ICachedIdolService> <>t__builder;
        public PRISM.Domain.IdolService <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetDearnessLevelRewardListAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetDearnessLevelRewardListReply> <>t__builder;
        public int mstIdolId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetDearnessLevelRewardListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetIdolBaseAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IIdolBaseStatus> <>t__builder;
        public PRISM.Domain.IdolService <>4__this;
        public System.Threading.CancellationToken ct;
        public int idolId;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetIdolBaseListAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetIdolBaseListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetIdolBaseListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetIdolLevelRewardListAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetIdolLevelRewardListReply> <>t__builder;
        public int mstIdolId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetIdolLevelRewardListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetIdolBaseCostumeAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetIdolBaseCostumeReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<int> mstAccessoryIdList;
        public int mstIdolId;
        public IdolBaseCostumeTargetSceneType sceneType;
        public int mstCostumeId;
        public int mstHairstyleId;
        public bool enable;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetIdolBaseCostumeReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_callIdolBaseListAPI>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetIdolBaseListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface ICachedIdolService
{
    public PRISM.Module.Networking.IIdolBaseStatus GetIdolBase(int idolId);
}

// Namespace: PRISM.Domain
public interface IIdolService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetIdolBaseListReply> GetIdolBaseListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetIdolBaseCostumeReply> SetIdolBaseCostumeAsync(int mstIdolId, IdolBaseCostumeTargetSceneType sceneType, int mstCostumeId, int mstHairstyleId, System.Collections.Generic.IEnumerable<int> mstAccessoryIdList, bool enable, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetIdolLevelRewardListReply> GetIdolLevelRewardListAsync(int mstIdolId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetDearnessLevelRewardListReply> GetDearnessLevelRewardListAsync(int mstIdolId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Domain.ICachedIdolService> GetCachedServiceAsync(System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IIdolBaseStatus> GetIdolBaseAsync(int idolId, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class InspectService : PRISM.Domain.ServiceBase, PRISM.Domain.IInspectService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ICheckNGWordReply> CheckNGWordAsync(System.Collections.Generic.IEnumerable<string> textList, System.Threading.CancellationToken ct);

    private struct <CheckNGWordAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ICheckNGWordReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> textList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ICheckNGWordReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IInspectService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ICheckNGWordReply> CheckNGWordAsync(System.Collections.Generic.IEnumerable<string> textList, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class IntroductionService : PRISM.Domain.ServiceBase, PRISM.Domain.IIntroductionService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IExecuteIntroductionReply> ExecuteIntroductionAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IExecuteIntroductionReply> GetIntroductionCacheAsync(System.Threading.CancellationToken ct);
    public int GetIntroductionIndex();
    public void SetIntroductionIndex(int index);
    public void ClearCache();

    private struct <ExecuteIntroductionAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IExecuteIntroductionReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IExecuteIntroductionReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetIntroductionCacheAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IExecuteIntroductionReply> <>t__builder;
        public PRISM.Domain.IntroductionService <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IExecuteIntroductionReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IIntroductionService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IExecuteIntroductionReply> ExecuteIntroductionAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IExecuteIntroductionReply> GetIntroductionCacheAsync(System.Threading.CancellationToken ct);
    public int GetIntroductionIndex();
    public void SetIntroductionIndex(int index);
    public void ClearCache();
}

// Namespace: PRISM.Domain
public class LiveService : PRISM.Domain.ServiceBase, PRISM.Domain.ILiveService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IBreakLiveReply> BreakLiveAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ICopyLiveUnitReply> CopyLiveUnitAsync(int srcUnitNumber, int dstUnitNumber, bool isCopyMainUnit, bool isCopySupportMember, bool isCopyGuest, bool isCopyUnitName, bool isCopySkillOrder, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ICopyMvUnitReply> CopyMvUnitAsync(int srcUnitNumber, int dstUnitNumber, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishLiveReply> FinishLiveAsync(int score, int combo, PRISM.Module.Networking.ILiveTimingJudgementStatus timingJudgement, PRISM.Module.Networking.ILiveTimingJudgementStatus baseTimingJudgement, int life, System.Collections.Generic.IEnumerable<int> activatedSkillSlotList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetEventListReply> GetEventListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveEnableReply> GetLiveEnableAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveGuestListReply> GetLiveGuestListAsync(Attribute attribute, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveHighScoreRankingReply> GetLiveHighScoreRankingAsync(int mstSongId, SongDifficultyLevel difficultyLevel, int page, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLivePlayRewardListReply> GetLivePlayRewardListAsync(int mstSongId, SongDifficultyLevel difficultyLevel, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveUnitReply> GetLiveUnitAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.IReadOnlyDictionary<int, PRISM.Module.Networking.ILiveUnitDetailStatus>> GetLiveUnitAsDictionaryAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ILiveUnitDetailStatus> GetLiveUnitAsync(int unitNumber, System.Threading.CancellationToken ct);
    private Cysharp.Threading.Tasks.UniTask _loadLiveUnitAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveUnitGuestReply> GetLiveUnitGuestAsync(int unitNumber, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveUnitHighScoreRankingReply> GetLiveUnitHighScoreRankingAsync(long mstLiveUnitRankingCategoryId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetMvUnitListReply> GetMvUnitListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSongListReply> GetSongListAndGetLiveEnableAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSongListReply> GetSongListAsync(System.Threading.CancellationToken ct);
    private Cysharp.Threading.Tasks.UniTask _loadSongListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSongRatingListReply> GetSongRatingListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetStartLiveInfoReply> GetStartLiveInfoAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<bool> GetShinyEnabledAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Domain.SongCacheForResult> GetSongCacheForResultAsync(int songId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IResetLiveUnitReply> ResetLiveUnitAsync(int unitNumber, bool isResetMainUnit, bool isResetSupportMember, bool isResetGuest, bool isResetUnitName, bool isResetSkillOrder, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IResetMvUnitReply> ResetMvUnitAsync(int unitNumber, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetFavoriteSongReply> SetFavoriteSongAsync(System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IFavoriteSongUpdateStatus> updateList, int mstSongId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetLiveUnitReply> SetLiveUnitAsync(int unitNumber, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ILiveUnitSlotStatus> slotList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetLiveUnitGuestReply> SetLiveUnitGuestAsync(int unitNumber, string userId, int mstProduceIdolId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetLiveUnitNameReply> SetLiveUnitNameAsync(int unitNumber, string name, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetLiveUnitSkillOrderReply> SetLiveUnitSkillOrderAsync(int unitNumber, int skillOrderId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetLiveUnitSupportMemberReply> SetLiveUnitSupportMemberAsync(int unitNumber, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ILiveUnitSupportMemberStatus> supportMemberList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetMvOriginalMemberReply> SetMvOriginalMemberAsync(int mstSongId, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IMvIdolStatus> idolList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetMvUnitReply> SetMvUnitAsync(int unitNumber, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IMvUnitSlotStatus> slotList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetMvUnitNameReply> SetMvUnitNameAsync(int unitNumber, string name, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISkipLiveReply> SkipLiveAsync(int mstSongId, SongDifficultyLevel difficultyLevel, int liveBoost, int unitNumber, int skipCount, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartLiveReply> StartLiveAsync(int mstSongId, SongDifficultyLevel difficultyLevel, LiveStartType startType, int liveBoost, int unitNumber, string deviceToken, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartMVReply> StartMVAsync(int mstSongId, int unitNumber, DynamicRange dynamicRange, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IUnlockLimitedSongPartsReply> UnlockLimitedSongPartsAsync(int mstSongId, System.Threading.CancellationToken ct);

    private struct <BreakLiveAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IBreakLiveReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IBreakLiveReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <CopyLiveUnitAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ICopyLiveUnitReply> <>t__builder;
        public int srcUnitNumber;
        public int dstUnitNumber;
        public bool isCopyMainUnit;
        public bool isCopySupportMember;
        public bool isCopyGuest;
        public bool isCopyUnitName;
        public bool isCopySkillOrder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ICopyLiveUnitReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <CopyMvUnitAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ICopyMvUnitReply> <>t__builder;
        public int srcUnitNumber;
        public int dstUnitNumber;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ICopyMvUnitReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishLiveAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishLiveReply> <>t__builder;
        public int score;
        public int combo;
        public PRISM.Module.Networking.ILiveTimingJudgementStatus timingJudgement;
        public PRISM.Module.Networking.ILiveTimingJudgementStatus baseTimingJudgement;
        public int life;
        public System.Collections.Generic.IEnumerable<int> activatedSkillSlotList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishLiveReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetEventListAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetEventListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetEventListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetLiveEnableAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetLiveEnableReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetLiveEnableReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetLiveGuestListAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetLiveGuestListReply> <>t__builder;
        public Attribute attribute;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetLiveGuestListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetLiveHighScoreRankingAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetLiveHighScoreRankingReply> <>t__builder;
        public int mstSongId;
        public SongDifficultyLevel difficultyLevel;
        public int page;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetLiveHighScoreRankingReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetLivePlayRewardListAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetLivePlayRewardListReply> <>t__builder;
        public int mstSongId;
        public SongDifficultyLevel difficultyLevel;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetLivePlayRewardListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetLiveUnitAsDictionaryAsync>d__10 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.Collections.Generic.IReadOnlyDictionary<int, PRISM.Module.Networking.ILiveUnitDetailStatus>> <>t__builder;
        public PRISM.Domain.LiveService <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetLiveUnitAsync>d__11 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ILiveUnitDetailStatus> <>t__builder;
        public PRISM.Domain.LiveService <>4__this;
        public System.Threading.CancellationToken ct;
        public int unitNumber;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetLiveUnitAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetLiveUnitReply> <>t__builder;
        public PRISM.Domain.LiveService <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetLiveUnitGuestAsync>d__13 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetLiveUnitGuestReply> <>t__builder;
        public int unitNumber;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetLiveUnitGuestReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetLiveUnitHighScoreRankingAsync>d__14 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetLiveUnitHighScoreRankingReply> <>t__builder;
        public long mstLiveUnitRankingCategoryId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetLiveUnitHighScoreRankingReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetMvUnitListAsync>d__15 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetMvUnitListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetMvUnitListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetShinyEnabledAsync>d__21 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<bool> <>t__builder;
        public PRISM.Domain.LiveService <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetSongCacheForResultAsync>d__22 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Domain.SongCacheForResult> <>t__builder;
        public PRISM.Domain.LiveService <>4__this;
        public System.Threading.CancellationToken ct;
        public int songId;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetSongListAndGetLiveEnableAsync>d__16 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetSongListReply> <>t__builder;
        public PRISM.Domain.LiveService <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetLiveEnableReply> <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetSongListAsync>d__17 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetSongListReply> <>t__builder;
        public PRISM.Domain.LiveService <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetSongRatingListAsync>d__19 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetSongRatingListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetSongRatingListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetStartLiveInfoAsync>d__20 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetStartLiveInfoReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetStartLiveInfoReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ResetLiveUnitAsync>d__23 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IResetLiveUnitReply> <>t__builder;
        public int unitNumber;
        public bool isResetMainUnit;
        public bool isResetSupportMember;
        public bool isResetGuest;
        public bool isResetUnitName;
        public bool isResetSkillOrder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IResetLiveUnitReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ResetMvUnitAsync>d__24 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IResetMvUnitReply> <>t__builder;
        public int unitNumber;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IResetMvUnitReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetFavoriteSongAsync>d__25 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetFavoriteSongReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IFavoriteSongUpdateStatus> updateList;
        public int mstSongId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetFavoriteSongReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetLiveUnitAsync>d__26 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetLiveUnitReply> <>t__builder;
        public int unitNumber;
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ILiveUnitSlotStatus> slotList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetLiveUnitReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetLiveUnitGuestAsync>d__27 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetLiveUnitGuestReply> <>t__builder;
        public int unitNumber;
        public string userId;
        public int mstProduceIdolId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetLiveUnitGuestReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetLiveUnitNameAsync>d__28 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetLiveUnitNameReply> <>t__builder;
        public int unitNumber;
        public string name;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetLiveUnitNameReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetLiveUnitSkillOrderAsync>d__29 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetLiveUnitSkillOrderReply> <>t__builder;
        public int unitNumber;
        public int skillOrderId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetLiveUnitSkillOrderReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetLiveUnitSupportMemberAsync>d__30 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetLiveUnitSupportMemberReply> <>t__builder;
        public int unitNumber;
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ILiveUnitSupportMemberStatus> supportMemberList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetLiveUnitSupportMemberReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetMvOriginalMemberAsync>d__31 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetMvOriginalMemberReply> <>t__builder;
        public int mstSongId;
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IMvIdolStatus> idolList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetMvOriginalMemberReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetMvUnitAsync>d__32 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetMvUnitReply> <>t__builder;
        public int unitNumber;
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IMvUnitSlotStatus> slotList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetMvUnitReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetMvUnitNameAsync>d__33 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetMvUnitNameReply> <>t__builder;
        public int unitNumber;
        public string name;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetMvUnitNameReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SkipLiveAsync>d__34 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISkipLiveReply> <>t__builder;
        public int mstSongId;
        public SongDifficultyLevel difficultyLevel;
        public int liveBoost;
        public int unitNumber;
        public int skipCount;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISkipLiveReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartLiveAsync>d__35 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartLiveReply> <>t__builder;
        public int mstSongId;
        public SongDifficultyLevel difficultyLevel;
        public LiveStartType startType;
        public int liveBoost;
        public int unitNumber;
        public string deviceToken;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartLiveReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartMVAsync>d__36 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartMVReply> <>t__builder;
        public int mstSongId;
        public int unitNumber;
        public DynamicRange dynamicRange;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartMVReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <UnlockLimitedSongPartsAsync>d__37 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IUnlockLimitedSongPartsReply> <>t__builder;
        public int mstSongId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IUnlockLimitedSongPartsReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_loadLiveUnitAsync>d__12 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetLiveUnitReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_loadSongListAsync>d__18 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetSongListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface ILiveService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSongListReply> GetSongListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSongRatingListReply> GetSongRatingListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetFavoriteSongReply> SetFavoriteSongAsync(System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IFavoriteSongUpdateStatus> updateList, int mstSongId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveUnitReply> GetLiveUnitAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetLiveUnitReply> SetLiveUnitAsync(int unitNumber, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ILiveUnitSlotStatus> slotList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetLiveUnitNameReply> SetLiveUnitNameAsync(int unitNumber, string name, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetLiveUnitSupportMemberReply> SetLiveUnitSupportMemberAsync(int unitNumber, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ILiveUnitSupportMemberStatus> supportMemberList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveUnitGuestReply> GetLiveUnitGuestAsync(int unitNumber, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetLiveUnitGuestReply> SetLiveUnitGuestAsync(int unitNumber, string userId, int mstProduceIdolId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetLiveUnitSkillOrderReply> SetLiveUnitSkillOrderAsync(int unitNumber, int skillOrderId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveGuestListReply> GetLiveGuestListAsync(Attribute attribute, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLivePlayRewardListReply> GetLivePlayRewardListAsync(int mstSongId, SongDifficultyLevel difficultyLevel, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartLiveReply> StartLiveAsync(int mstSongId, SongDifficultyLevel difficultyLevel, LiveStartType startType, int liveBoost, int unitNumber, string deviceToken, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishLiveReply> FinishLiveAsync(int score, int combo, PRISM.Module.Networking.ILiveTimingJudgementStatus timingJudgement, PRISM.Module.Networking.ILiveTimingJudgementStatus baseTimingJudgement, int life, System.Collections.Generic.IEnumerable<int> activatedSkillSlotList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IBreakLiveReply> BreakLiveAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetStartLiveInfoReply> GetStartLiveInfoAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISkipLiveReply> SkipLiveAsync(int mstSongId, SongDifficultyLevel difficultyLevel, int liveBoost, int unitNumber, int skipCount, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetMvUnitListReply> GetMvUnitListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetMvUnitReply> SetMvUnitAsync(int unitNumber, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IMvUnitSlotStatus> slotList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetMvUnitNameReply> SetMvUnitNameAsync(int unitNumber, string name, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetMvOriginalMemberReply> SetMvOriginalMemberAsync(int mstSongId, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IMvIdolStatus> idolList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveHighScoreRankingReply> GetLiveHighScoreRankingAsync(int mstSongId, SongDifficultyLevel difficultyLevel, int page, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveUnitHighScoreRankingReply> GetLiveUnitHighScoreRankingAsync(long mstLiveUnitRankingCategoryId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveEnableReply> GetLiveEnableAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartMVReply> StartMVAsync(int mstSongId, int unitNumber, DynamicRange dynamicRange, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetEventListReply> GetEventListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IResetLiveUnitReply> ResetLiveUnitAsync(int unitNumber, bool isResetMainUnit, bool isResetSupportMember, bool isResetGuest, bool isResetUnitName, bool isResetSkillOrder, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IResetMvUnitReply> ResetMvUnitAsync(int unitNumber, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IUnlockLimitedSongPartsReply> UnlockLimitedSongPartsAsync(int mstSongId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ICopyLiveUnitReply> CopyLiveUnitAsync(int srcUnitNumber, int dstUnitNumber, bool isCopyMainUnit, bool isCopySupportMember, bool isCopyGuest, bool isCopyUnitName, bool isCopySkillOrder, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ICopyMvUnitReply> CopyMvUnitAsync(int srcUnitNumber, int dstUnitNumber, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSongListReply> GetSongListAndGetLiveEnableAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.IReadOnlyDictionary<int, PRISM.Module.Networking.ILiveUnitDetailStatus>> GetLiveUnitAsDictionaryAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ILiveUnitDetailStatus> GetLiveUnitAsync(int unitNumber, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<bool> GetShinyEnabledAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Domain.SongCacheForResult> GetSongCacheForResultAsync(int songId, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class LiveEventAllSongService : PRISM.Domain.ServiceBase, PRISM.Domain.ILiveEventAllSongService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IAccessLiveEventAllSongAlbumReply> AccessLiveEventAllSongAlbumAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveEventAllSongBreakTimeReply> GetLiveEventAllSongBreakTimeAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveEventAllSongRewardListReply> GetLiveEventAllSongRewardListAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveEventAllSongTopPageReply> GetLiveEventAllSongTopPageAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetLiveEventAllSongBreakTimeReply> SetLiveEventAllSongBreakTimeAsync(int mstEventId, System.Nullable<System.DateTime> beginDate, System.Threading.CancellationToken ct);

    private struct <AccessLiveEventAllSongAlbumAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IAccessLiveEventAllSongAlbumReply> <>t__builder;
        public int mstEventId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IAccessLiveEventAllSongAlbumReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetLiveEventAllSongBreakTimeAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetLiveEventAllSongBreakTimeReply> <>t__builder;
        public int mstEventId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetLiveEventAllSongBreakTimeReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetLiveEventAllSongRewardListAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetLiveEventAllSongRewardListReply> <>t__builder;
        public int mstEventId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetLiveEventAllSongRewardListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetLiveEventAllSongTopPageAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetLiveEventAllSongTopPageReply> <>t__builder;
        public int mstEventId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetLiveEventAllSongTopPageReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetLiveEventAllSongBreakTimeAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetLiveEventAllSongBreakTimeReply> <>t__builder;
        public int mstEventId;
        public System.Nullable<System.DateTime> beginDate;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetLiveEventAllSongBreakTimeReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface ILiveEventAllSongService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveEventAllSongTopPageReply> GetLiveEventAllSongTopPageAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveEventAllSongRewardListReply> GetLiveEventAllSongRewardListAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveEventAllSongBreakTimeReply> GetLiveEventAllSongBreakTimeAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetLiveEventAllSongBreakTimeReply> SetLiveEventAllSongBreakTimeAsync(int mstEventId, System.Nullable<System.DateTime> beginDate, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IAccessLiveEventAllSongAlbumReply> AccessLiveEventAllSongAlbumAsync(int mstEventId, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class LiveEventAlphaService : PRISM.Domain.ServiceBase, PRISM.Domain.ILiveEventAlphaService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveEventAlphaRewardListReply> GetLiveEventAlphaRewardListAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveEventAlphaTopPageReply> GetLiveEventAlphaTopPageAsync(int mstEventId, System.Threading.CancellationToken ct);

    private struct <GetLiveEventAlphaRewardListAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetLiveEventAlphaRewardListReply> <>t__builder;
        public int mstEventId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetLiveEventAlphaRewardListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetLiveEventAlphaTopPageAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetLiveEventAlphaTopPageReply> <>t__builder;
        public int mstEventId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetLiveEventAlphaTopPageReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface ILiveEventAlphaService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveEventAlphaTopPageReply> GetLiveEventAlphaTopPageAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetLiveEventAlphaRewardListReply> GetLiveEventAlphaRewardListAsync(int mstEventId, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class LoginBonusService : PRISM.Domain.ServiceBase, PRISM.Domain.ILoginBonusService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IExecuteLoginBonusReply> ExecuteLoginBonusAsync(System.Threading.CancellationToken ct);

    private struct <ExecuteLoginBonusAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IExecuteLoginBonusReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IExecuteLoginBonusReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface ILoginBonusService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IExecuteLoginBonusReply> ExecuteLoginBonusAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class LoginBonusPassService : PRISM.Domain.ServiceBase, PRISM.Domain.ILoginBonusPassService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IExecuteLoginBonusPassReply> ExecuteLoginBonusPassAsync(System.Threading.CancellationToken ct);

    private struct <ExecuteLoginBonusPassAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IExecuteLoginBonusPassReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IExecuteLoginBonusPassReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface ILoginBonusPassService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IExecuteLoginBonusPassReply> ExecuteLoginBonusPassAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class MedalGashaService : PRISM.Domain.ServiceBase, PRISM.Domain.IMedalGashaService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IDrawMedalGashaReply> DrawMedalGashaAsync(int mstMedalGashaId, int execCount, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetMedalGashaReply> GetMedalGashaAsync(int mstMedalGashaId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.INextMedalGashaBoxReply> NextMedalGashaBoxAsync(int mstMedalGashaId, System.Threading.CancellationToken ct);

    private struct <DrawMedalGashaAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IDrawMedalGashaReply> <>t__builder;
        public int mstMedalGashaId;
        public int execCount;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IDrawMedalGashaReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetMedalGashaAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetMedalGashaReply> <>t__builder;
        public int mstMedalGashaId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetMedalGashaReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <NextMedalGashaBoxAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.INextMedalGashaBoxReply> <>t__builder;
        public int mstMedalGashaId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.INextMedalGashaBoxReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IMedalGashaService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetMedalGashaReply> GetMedalGashaAsync(int mstMedalGashaId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IDrawMedalGashaReply> DrawMedalGashaAsync(int mstMedalGashaId, int execCount, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.INextMedalGashaBoxReply> NextMedalGashaBoxAsync(int mstMedalGashaId, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class MissionService : PRISM.Domain.ServiceBase, PRISM.Domain.IMissionService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetMissionListReply> GetMissionListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IJumpToLinkReply> JumpToLinkAsync(PRISM.Module.Networking.IJumpStatus jump, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReceiveMissionGaugeRewardReply> ReceiveMissionGaugeRewardAsync(int mstMissionGroupId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReceiveMissionRewardReply> ReceiveMissionRewardAsync(System.Collections.Generic.IEnumerable<int> mstMissionIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IShareReply> ShareAsync(MissionShareType shareType, int detailId, System.Threading.CancellationToken ct);

    private struct <GetMissionListAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetMissionListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetMissionListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <JumpToLinkAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IJumpToLinkReply> <>t__builder;
        public PRISM.Module.Networking.IJumpStatus jump;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IJumpToLinkReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ReceiveMissionGaugeRewardAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IReceiveMissionGaugeRewardReply> <>t__builder;
        public int mstMissionGroupId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IReceiveMissionGaugeRewardReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ReceiveMissionRewardAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IReceiveMissionRewardReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<int> mstMissionIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IReceiveMissionRewardReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ShareAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IShareReply> <>t__builder;
        public MissionShareType shareType;
        public int detailId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IShareReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IMissionService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetMissionListReply> GetMissionListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReceiveMissionRewardReply> ReceiveMissionRewardAsync(System.Collections.Generic.IEnumerable<int> mstMissionIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReceiveMissionGaugeRewardReply> ReceiveMissionGaugeRewardAsync(int mstMissionGroupId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IJumpToLinkReply> JumpToLinkAsync(PRISM.Module.Networking.IJumpStatus jump, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IShareReply> ShareAsync(MissionShareType shareType, int detailId, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class MobileServiceExtensions
{
    public static Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTwestaListReply> GetAllKindTwestaListAsync(PRISM.Domain.IMobileService service, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTwestaListReply> GetFavoriteTwestaListAsync(PRISM.Domain.IMobileService service, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTwestaListReply> GetOneUserTwestaListAsync(PRISM.Domain.IMobileService service, int mstTwestaUserId, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class MobileService : PRISM.Domain.ServiceBase, PRISM.Domain.IMobileService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetChainReply> GetChainAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetPhoneCallListReply> GetPhoneCallListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTwestaAllReply> GetTwestaAllAsync(string cursor, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTwestaListReply> GetTwestaListAsync(bool isFavorite, int mstTwestaUserId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReadAllTwestaArticleReply> ReadAllTwestaArticleAsync(System.Nullable<System.DateTime> postDate, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReadChainTalkReply> ReadChainTalkAsync(int mstChainTalkId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReadPhoneCallReply> ReadPhoneCallAsync(int mstPhoneCallId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectChainOptionReply> SelectChainOptionAsync(int mstChainTalkId, int choice, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IToggleFavoriteTwestaArticleReply> ToggleFavoriteTwestaArticleAsync(int mstTwestaArticleId, System.Nullable<System.DateTime> favoriteDate, System.Threading.CancellationToken ct);

    private struct <GetChainAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetChainReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetChainReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetPhoneCallListAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetPhoneCallListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetPhoneCallListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetTwestaAllAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetTwestaAllReply> <>t__builder;
        public string cursor;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetTwestaAllReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetTwestaListAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetTwestaListReply> <>t__builder;
        public bool isFavorite;
        public int mstTwestaUserId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetTwestaListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ReadAllTwestaArticleAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IReadAllTwestaArticleReply> <>t__builder;
        public System.Nullable<System.DateTime> postDate;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IReadAllTwestaArticleReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ReadChainTalkAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IReadChainTalkReply> <>t__builder;
        public int mstChainTalkId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IReadChainTalkReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ReadPhoneCallAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IReadPhoneCallReply> <>t__builder;
        public int mstPhoneCallId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IReadPhoneCallReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SelectChainOptionAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISelectChainOptionReply> <>t__builder;
        public int mstChainTalkId;
        public int choice;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISelectChainOptionReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ToggleFavoriteTwestaArticleAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IToggleFavoriteTwestaArticleReply> <>t__builder;
        public int mstTwestaArticleId;
        public System.Nullable<System.DateTime> favoriteDate;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IToggleFavoriteTwestaArticleReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IMobileService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTwestaListReply> GetTwestaListAsync(bool isFavorite, int mstTwestaUserId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTwestaAllReply> GetTwestaAllAsync(string cursor, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReadAllTwestaArticleReply> ReadAllTwestaArticleAsync(System.Nullable<System.DateTime> postDate, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IToggleFavoriteTwestaArticleReply> ToggleFavoriteTwestaArticleAsync(int mstTwestaArticleId, System.Nullable<System.DateTime> favoriteDate, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetChainReply> GetChainAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectChainOptionReply> SelectChainOptionAsync(int mstChainTalkId, int choice, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReadChainTalkReply> ReadChainTalkAsync(int mstChainTalkId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetPhoneCallListReply> GetPhoneCallListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReadPhoneCallReply> ReadPhoneCallAsync(int mstPhoneCallId, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class PieceService : PRISM.Domain.ServiceBase, PRISM.Domain.IPieceService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IConvertPieceListReply> ConvertPieceListAsync(System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IUseProductStatus> convertPieceList, System.Threading.CancellationToken ct);

    private struct <ConvertPieceListAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IConvertPieceListReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IUseProductStatus> convertPieceList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IConvertPieceListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IPieceService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IConvertPieceListReply> ConvertPieceListAsync(System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IUseProductStatus> convertPieceList, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class PresentService : PRISM.Domain.ServiceBase, PRISM.Domain.IPresentService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetPresentHistoryListReply> GetPresentHistoryListAsync(string cursor, int limit, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetPresentListReply> GetPresentListAsync(string cursor, int limit, bool isSortAsc, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReceivePresentReply> ReceivePresentAsync(System.Collections.Generic.IEnumerable<string> idList, System.Threading.CancellationToken ct);

    private struct <GetPresentHistoryListAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetPresentHistoryListReply> <>t__builder;
        public string cursor;
        public int limit;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetPresentHistoryListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetPresentListAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetPresentListReply> <>t__builder;
        public string cursor;
        public int limit;
        public bool isSortAsc;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetPresentListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ReceivePresentAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IReceivePresentReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> idList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IReceivePresentReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IPresentService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetPresentListReply> GetPresentListAsync(string cursor, int limit, bool isSortAsc, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetPresentHistoryListReply> GetPresentHistoryListAsync(string cursor, int limit, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReceivePresentReply> ReceivePresentAsync(System.Collections.Generic.IEnumerable<string> idList, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class ProduceService : PRISM.Domain.ServiceBase, PRISM.Domain.IProduceService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ICancelProduceAutoPlayReply> CancelProduceAutoPlayAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ICardRankUpReply> CardRankUpAsync(System.Collections.Generic.IEnumerable<string> rankUpCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IDetermineProduceResultReply> DetermineProduceResultAsync(int mstFavoriteMarkId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishAuditionReply> FinishAuditionAsync(PRISM.Module.Networking.IInGameResultStatus inGameResult, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishAuditionResultReply> FinishAuditionResultAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishLessonReply> FinishLessonAsync(PRISM.Module.Networking.IInGameResultStatus inGameResult, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishLessonResultReply> FinishLessonResultAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishProduceAdvReply> FinishProduceAdvAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISelectionSupportSkillStatus> selectedSupportSkillList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishProduceReply> FinishProduceAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleActingPracticeReply> FinishScheduleActingPracticeAsync(System.Collections.Generic.IEnumerable<string> rankUpCardIdList, System.Collections.Generic.IEnumerable<string> deleteProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleAdviceReply> FinishScheduleAdviceAsync(System.Collections.Generic.IEnumerable<string> deleteProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleCostumeFittingReply> FinishScheduleCostumeFittingAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Collections.Generic.IEnumerable<string> deleteProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleMiniLiveReply> FinishScheduleMiniLiveAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Collections.Generic.IEnumerable<string> deleteProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleOutingReply> FinishScheduleOutingAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishSchedulePublicRelationsReply> FinishSchedulePublicRelationsAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleRestReply> FinishScheduleRestAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleScriptReadingReply> FinishScheduleScriptReadingAsync(System.Collections.Generic.IEnumerable<string> rankUpCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleShoppingReply> FinishScheduleShoppingAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleTalkShowReply> FinishScheduleTalkShowAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Collections.Generic.IEnumerable<string> deleteProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleTrainingReply> FinishScheduleTrainingAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleWorkingReply> FinishScheduleWorkingAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishSpecialLessonReply> FinishSpecialLessonAsync(PRISM.Module.Networking.IInGameResultStatus inGameResult, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishSupportCooperationEventReply> FinishSupportCooperationEventAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISelectionSupportSkillStatus> selectedSupportSkillList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetEpisodeListReply> GetEpisodeListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetFriendSupportCharacterListReply> GetFriendSupportCharacterListAsync(int mstUnitId, System.Collections.Generic.IEnumerable<int> mstSupportCharacterIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProduceAdvListReply> GetProduceAdvListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProduceAutoPlayProgressReply> GetProduceAutoPlayProgressAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProduceResumeReply> GetProduceResumeAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProduceTopReply> GetProduceTopAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProduceUnitReply> GetProduceUnitAsync(int mstUnitId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IInheritanceSkillListReply> InheritanceSkillListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IProduceFailureResultReply> ProduceFailureResultAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IProduceMVReply> ProduceMVAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IProduceResultReply> ProduceResultAsync(System.Threading.CancellationToken ct);
    public System.Collections.Generic.IReadOnlyList<PRISM.Legacy.ProduceLogData> GetLogDatas();
    public void ClearLogCache();
    public void SetResumeLog(PRISM.Module.Networking.IProduceBaseInfoStatus info);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IProduceStrategyListReply> ProduceStrategyListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectInheritanceSkillReply> SelectInheritanceSkillAsync(System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISelectionSupportSkillStatus> selectedSupportSkillList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectProduceAdvOptionReply> SelectProduceAdvOptionAsync(int optionNumber, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectProduceStrategyReply> SelectProduceStrategyAsync(int mstProduceStrategyId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectProduceStrategyRewardReply> SelectProduceStrategyRewardAsync(PRISM.Module.Networking.ISelectionSupportSkillStatus selectionSupportSkill, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectScheduleReply> SelectScheduleAsync(ScheduleDetailType scheduleDetailType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectSubSeasonReply> SelectSubSeasonAsync(int mstSubSeasonId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectSubSeasonIdolReply> SelectSubSeasonIdolAsync(int mstIdolId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetProduceUnitReply> SetProduceUnitAsync(int mstUnitId, int unitNumber, string name, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISetProduceUnitIdolStatus> setProduceUnitIdolList, System.Collections.Generic.IEnumerable<int> mstSupportCharacterIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartAuditionReply> StartAuditionAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartLessonReply> StartLessonAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartProduceAdvReply> StartProduceAdvAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartProduceReply> StartProduceAsync(int mstEpisodeId, ProduceDifficultyType difficulty, int unitNumberId, string friendSupportCharacterId, string inheritanceFesUnitId, bool isAutoPlay, PRISM.Module.Networking.IProduceAutoPlaySettingsStatus autoPlaySettings, int produceBoost, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleActingPracticeReply> StartScheduleActingPracticeAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleAdviceReply> StartScheduleAdviceAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleCostumeFittingReply> StartScheduleCostumeFittingAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleMiniLiveReply> StartScheduleMiniLiveAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleOutingReply> StartScheduleOutingAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartSchedulePublicRelationsReply> StartSchedulePublicRelationsAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleRestReply> StartScheduleRestAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleScriptReadingReply> StartScheduleScriptReadingAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleShoppingReply> StartScheduleShoppingAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleTalkShowReply> StartScheduleTalkShowAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleTrainingReply> StartScheduleTrainingAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleWorkingReply> StartScheduleWorkingAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartSpecialLessonReply> StartSpecialLessonAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartSupportCooperationEventReply> StartSupportCooperationEventAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISubSeasonListReply> SubSeasonListAsync(System.Threading.CancellationToken ct);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Legacy.ProduceLogData, bool> <>9__6_0;
        private bool <FinishLessonResultAsync>b__6_0(PRISM.Legacy.ProduceLogData x);
    }

    private class <>c__DisplayClass44_0
    {
        public PRISM.Legacy.ProduceLogData log;
        public int mstIdolId;
        private bool <SelectSubSeasonIdolAsync>b__0(PRISM.Definitions.MstSubSeasonOpeningAdvOption x);
        private bool <SelectSubSeasonIdolAsync>b__1(PRISM.Module.Networking.IInProduceIdolStatus x);
    }

    private class <>c__DisplayClass48_0
    {
        public PRISM.Module.Networking.IStartProduceAdvReply reply;
        private bool <StartProduceAdvAsync>b__1(PRISM.Definitions.MstSupportCharacterEvent x);
        private bool <StartProduceAdvAsync>b__0(PRISM.Module.Networking.IInProduceIdolStatus x);
    }

    private class <>c__DisplayClass5_0
    {
        public PRISM.Module.Networking.IFinishLessonReply reply;
        private bool <FinishLessonAsync>b__0(PRISM.Module.Networking.IInProduceIdolStatus x);
    }

    private class <>c__DisplayClass63_0
    {
        public PRISM.Module.Networking.IStartSupportCooperationEventReply reply;
        private bool <StartSupportCooperationEventAsync>b__0(PRISM.Module.Networking.IInProduceIdolStatus x);
    }

    private struct <CancelProduceAutoPlayAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ICancelProduceAutoPlayReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ICancelProduceAutoPlayReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <CardRankUpAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ICardRankUpReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> rankUpCardIdList;
        public System.Threading.CancellationToken ct;
        private PRISM.Module.Networking.ICardRankUpArgs <args>5__2;
        private Awaiter<PRISM.Module.Networking.ICardRankUpReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <DetermineProduceResultAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IDetermineProduceResultReply> <>t__builder;
        public int mstFavoriteMarkId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IDetermineProduceResultReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishAuditionAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishAuditionReply> <>t__builder;
        public PRISM.Module.Networking.IInGameResultStatus inGameResult;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishAuditionReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishAuditionResultAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishAuditionResultReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> selectProduceCardIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishAuditionResultReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishLessonAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishLessonReply> <>t__builder;
        public PRISM.Module.Networking.IInGameResultStatus inGameResult;
        public System.Threading.CancellationToken ct;
        private <>c__DisplayClass5_0 <>8__1;
        private Awaiter<PRISM.Module.Networking.IFinishLessonReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishLessonResultAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishLessonResultReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> selectProduceCardIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishLessonResultReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishProduceAdvAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishProduceAdvReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> selectProduceCardIdList;
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISelectionSupportSkillStatus> selectedSupportSkillList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishProduceAdvReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishProduceAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishProduceReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishProduceReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishScheduleActingPracticeAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishScheduleActingPracticeReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> rankUpCardIdList;
        public System.Collections.Generic.IEnumerable<string> deleteProduceCardIdList;
        public System.Threading.CancellationToken ct;
        private PRISM.Module.Networking.IFinishScheduleActingPracticeArgs <args>5__2;
        private Awaiter<PRISM.Module.Networking.IFinishScheduleActingPracticeReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishScheduleAdviceAsync>d__10 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishScheduleAdviceReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> deleteProduceCardIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishScheduleAdviceReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishScheduleCostumeFittingAsync>d__11 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishScheduleCostumeFittingReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> selectProduceCardIdList;
        public System.Collections.Generic.IEnumerable<string> deleteProduceCardIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishScheduleCostumeFittingReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishScheduleMiniLiveAsync>d__12 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishScheduleMiniLiveReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> selectProduceCardIdList;
        public System.Collections.Generic.IEnumerable<string> deleteProduceCardIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishScheduleMiniLiveReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishScheduleOutingAsync>d__13 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishScheduleOutingReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> selectProduceCardIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishScheduleOutingReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishSchedulePublicRelationsAsync>d__14 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishSchedulePublicRelationsReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> selectProduceCardIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishSchedulePublicRelationsReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishScheduleRestAsync>d__15 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishScheduleRestReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishScheduleRestReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishScheduleScriptReadingAsync>d__16 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishScheduleScriptReadingReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> rankUpCardIdList;
        public System.Threading.CancellationToken ct;
        private PRISM.Module.Networking.IFinishScheduleScriptReadingArgs <args>5__2;
        private Awaiter<PRISM.Module.Networking.IFinishScheduleScriptReadingReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishScheduleShoppingAsync>d__17 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishScheduleShoppingReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> selectProduceCardIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishScheduleShoppingReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishScheduleTalkShowAsync>d__18 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishScheduleTalkShowReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> selectProduceCardIdList;
        public System.Collections.Generic.IEnumerable<string> deleteProduceCardIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishScheduleTalkShowReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishScheduleTrainingAsync>d__19 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishScheduleTrainingReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishScheduleTrainingReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishScheduleWorkingAsync>d__20 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishScheduleWorkingReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> selectProduceCardIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishScheduleWorkingReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishSpecialLessonAsync>d__21 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishSpecialLessonReply> <>t__builder;
        public PRISM.Module.Networking.IInGameResultStatus inGameResult;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishSpecialLessonReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishSupportCooperationEventAsync>d__22 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishSupportCooperationEventReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<string> selectProduceCardIdList;
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISelectionSupportSkillStatus> selectedSupportSkillList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishSupportCooperationEventReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetEpisodeListAsync>d__23 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetEpisodeListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetEpisodeListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetFriendSupportCharacterListAsync>d__24 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetFriendSupportCharacterListReply> <>t__builder;
        public int mstUnitId;
        public System.Collections.Generic.IEnumerable<int> mstSupportCharacterIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetFriendSupportCharacterListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetProduceAdvListAsync>d__25 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetProduceAdvListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetProduceAdvListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetProduceAutoPlayProgressAsync>d__26 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetProduceAutoPlayProgressReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetProduceAutoPlayProgressReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetProduceResumeAsync>d__27 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetProduceResumeReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetProduceResumeReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetProduceTopAsync>d__28 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetProduceTopReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetProduceTopReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetProduceUnitAsync>d__29 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetProduceUnitReply> <>t__builder;
        public int mstUnitId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetProduceUnitReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <InheritanceSkillListAsync>d__30 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IInheritanceSkillListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IInheritanceSkillListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ProduceFailureResultAsync>d__31 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IProduceFailureResultReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IProduceFailureResultReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ProduceMVAsync>d__32 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IProduceMVReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IProduceMVReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ProduceResultAsync>d__33 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IProduceResultReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IProduceResultReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ProduceStrategyListAsync>d__37 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IProduceStrategyListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IProduceStrategyListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SelectInheritanceSkillAsync>d__38 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISelectInheritanceSkillReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISelectionSupportSkillStatus> selectedSupportSkillList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISelectInheritanceSkillReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SelectProduceAdvOptionAsync>d__39 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISelectProduceAdvOptionReply> <>t__builder;
        public int optionNumber;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISelectProduceAdvOptionReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SelectProduceStrategyAsync>d__40 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISelectProduceStrategyReply> <>t__builder;
        public int mstProduceStrategyId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISelectProduceStrategyReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SelectProduceStrategyRewardAsync>d__41 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISelectProduceStrategyRewardReply> <>t__builder;
        public PRISM.Module.Networking.ISelectionSupportSkillStatus selectionSupportSkill;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISelectProduceStrategyRewardReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SelectScheduleAsync>d__42 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISelectScheduleReply> <>t__builder;
        public ScheduleDetailType scheduleDetailType;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISelectScheduleReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SelectSubSeasonAsync>d__43 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISelectSubSeasonReply> <>t__builder;
        public int mstSubSeasonId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISelectSubSeasonReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SelectSubSeasonIdolAsync>d__44 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISelectSubSeasonIdolReply> <>t__builder;
        public int mstIdolId;
        public System.Threading.CancellationToken ct;
        private <>c__DisplayClass44_0 <>8__1;
        private Awaiter<PRISM.Module.Networking.ISelectSubSeasonIdolReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetProduceUnitAsync>d__45 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetProduceUnitReply> <>t__builder;
        public int mstUnitId;
        public int unitNumber;
        public string name;
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISetProduceUnitIdolStatus> setProduceUnitIdolList;
        public System.Collections.Generic.IEnumerable<int> mstSupportCharacterIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetProduceUnitReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartAuditionAsync>d__46 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartAuditionReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartAuditionReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartLessonAsync>d__47 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartLessonReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartLessonReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartProduceAdvAsync>d__48 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartProduceAdvReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private <>c__DisplayClass48_0 <>8__1;
        private Awaiter<PRISM.Module.Networking.IStartProduceAdvReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartProduceAsync>d__49 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartProduceReply> <>t__builder;
        public int produceBoost;
        public int mstEpisodeId;
        public ProduceDifficultyType difficulty;
        public int unitNumberId;
        public string friendSupportCharacterId;
        public string inheritanceFesUnitId;
        public bool isAutoPlay;
        public PRISM.Module.Networking.IProduceAutoPlaySettingsStatus autoPlaySettings;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartProduceReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartScheduleActingPracticeAsync>d__50 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartScheduleActingPracticeReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartScheduleActingPracticeReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartScheduleAdviceAsync>d__51 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartScheduleAdviceReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartScheduleAdviceReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartScheduleCostumeFittingAsync>d__52 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartScheduleCostumeFittingReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartScheduleCostumeFittingReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartScheduleMiniLiveAsync>d__53 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartScheduleMiniLiveReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartScheduleMiniLiveReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartScheduleOutingAsync>d__54 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartScheduleOutingReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartScheduleOutingReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartSchedulePublicRelationsAsync>d__55 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartSchedulePublicRelationsReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartSchedulePublicRelationsReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartScheduleRestAsync>d__56 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartScheduleRestReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartScheduleRestReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartScheduleScriptReadingAsync>d__57 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartScheduleScriptReadingReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartScheduleScriptReadingReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartScheduleShoppingAsync>d__58 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartScheduleShoppingReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartScheduleShoppingReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartScheduleTalkShowAsync>d__59 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartScheduleTalkShowReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartScheduleTalkShowReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartScheduleTrainingAsync>d__60 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartScheduleTrainingReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartScheduleTrainingReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartScheduleWorkingAsync>d__61 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartScheduleWorkingReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartScheduleWorkingReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartSpecialLessonAsync>d__62 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartSpecialLessonReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartSpecialLessonReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartSupportCooperationEventAsync>d__63 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartSupportCooperationEventReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private <>c__DisplayClass63_0 <>8__1;
        private Awaiter<PRISM.Module.Networking.IStartSupportCooperationEventReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SubSeasonListAsync>d__64 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISubSeasonListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISubSeasonListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IProduceService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProduceUnitReply> GetProduceUnitAsync(int mstUnitId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetProduceUnitReply> SetProduceUnitAsync(int mstUnitId, int unitNumber, string name, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISetProduceUnitIdolStatus> setProduceUnitIdolList, System.Collections.Generic.IEnumerable<int> mstSupportCharacterIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetFriendSupportCharacterListReply> GetFriendSupportCharacterListAsync(int mstUnitId, System.Collections.Generic.IEnumerable<int> mstSupportCharacterIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartProduceReply> StartProduceAsync(int mstEpisodeId, ProduceDifficultyType difficulty, int unitNumberId, string friendSupportCharacterId, string inheritanceFesUnitId, bool isAutoPlay, PRISM.Module.Networking.IProduceAutoPlaySettingsStatus autoPlaySettings, int produceBoost, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProduceResumeReply> GetProduceResumeAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProduceTopReply> GetProduceTopAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetEpisodeListReply> GetEpisodeListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IProduceStrategyListReply> ProduceStrategyListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectProduceStrategyReply> SelectProduceStrategyAsync(int mstProduceStrategyId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectProduceStrategyRewardReply> SelectProduceStrategyRewardAsync(PRISM.Module.Networking.ISelectionSupportSkillStatus selectionSupportSkill, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectScheduleReply> SelectScheduleAsync(ScheduleDetailType scheduleDetailType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleRestReply> StartScheduleRestAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleRestReply> FinishScheduleRestAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleTrainingReply> StartScheduleTrainingAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleTrainingReply> FinishScheduleTrainingAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleWorkingReply> StartScheduleWorkingAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleWorkingReply> FinishScheduleWorkingAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleOutingReply> StartScheduleOutingAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleOutingReply> FinishScheduleOutingAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleShoppingReply> StartScheduleShoppingAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleShoppingReply> FinishScheduleShoppingAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleAdviceReply> StartScheduleAdviceAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleAdviceReply> FinishScheduleAdviceAsync(System.Collections.Generic.IEnumerable<string> deleteProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartLessonReply> StartLessonAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishLessonReply> FinishLessonAsync(PRISM.Module.Networking.IInGameResultStatus inGameResult, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishLessonResultReply> FinishLessonResultAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartSpecialLessonReply> StartSpecialLessonAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishSpecialLessonReply> FinishSpecialLessonAsync(PRISM.Module.Networking.IInGameResultStatus inGameResult, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ICardRankUpReply> CardRankUpAsync(System.Collections.Generic.IEnumerable<string> rankUpCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartAuditionReply> StartAuditionAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishAuditionReply> FinishAuditionAsync(PRISM.Module.Networking.IInGameResultStatus inGameResult, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishAuditionResultReply> FinishAuditionResultAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartSupportCooperationEventReply> StartSupportCooperationEventAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishSupportCooperationEventReply> FinishSupportCooperationEventAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISelectionSupportSkillStatus> selectedSupportSkillList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartProduceAdvReply> StartProduceAdvAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectProduceAdvOptionReply> SelectProduceAdvOptionAsync(int optionNumber, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishProduceAdvReply> FinishProduceAdvAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISelectionSupportSkillStatus> selectedSupportSkillList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IProduceResultReply> ProduceResultAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IDetermineProduceResultReply> DetermineProduceResultAsync(int mstFavoriteMarkId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IProduceMVReply> ProduceMVAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishProduceReply> FinishProduceAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISubSeasonListReply> SubSeasonListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectSubSeasonReply> SelectSubSeasonAsync(int mstSubSeasonId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectSubSeasonIdolReply> SelectSubSeasonIdolAsync(int mstIdolId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IProduceFailureResultReply> ProduceFailureResultAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IInheritanceSkillListReply> InheritanceSkillListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectInheritanceSkillReply> SelectInheritanceSkillAsync(System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISelectionSupportSkillStatus> selectedSupportSkillList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProduceAutoPlayProgressReply> GetProduceAutoPlayProgressAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ICancelProduceAutoPlayReply> CancelProduceAutoPlayAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProduceAdvListReply> GetProduceAdvListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleMiniLiveReply> StartScheduleMiniLiveAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleMiniLiveReply> FinishScheduleMiniLiveAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Collections.Generic.IEnumerable<string> deleteProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleTalkShowReply> StartScheduleTalkShowAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleTalkShowReply> FinishScheduleTalkShowAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Collections.Generic.IEnumerable<string> deleteProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleScriptReadingReply> StartScheduleScriptReadingAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleScriptReadingReply> FinishScheduleScriptReadingAsync(System.Collections.Generic.IEnumerable<string> rankUpCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleCostumeFittingReply> StartScheduleCostumeFittingAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleCostumeFittingReply> FinishScheduleCostumeFittingAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Collections.Generic.IEnumerable<string> deleteProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartSchedulePublicRelationsReply> StartSchedulePublicRelationsAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishSchedulePublicRelationsReply> FinishSchedulePublicRelationsAsync(System.Collections.Generic.IEnumerable<string> selectProduceCardIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartScheduleActingPracticeReply> StartScheduleActingPracticeAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishScheduleActingPracticeReply> FinishScheduleActingPracticeAsync(System.Collections.Generic.IEnumerable<string> rankUpCardIdList, System.Collections.Generic.IEnumerable<string> deleteProduceCardIdList, System.Threading.CancellationToken ct);
    public void ClearLogCache();
}

// Namespace: PRISM.Domain
public class ProduceIdolService : PRISM.Domain.ServiceBase, PRISM.Domain.IProduceIdolService
{
    public System.IObservable<System.ValueTuple<int, PRISM.Module.Networking.IProduceIdolStatus>> OnChangeIdol { get; set; }
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IEvolveProduceIdolReply> EvolveProduceIdolAsync(int mstProduceIdolId, int evolutionLevel, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProduceIdolListReply> GetProduceIdolListAsync(System.Threading.CancellationToken ct);
    private Cysharp.Threading.Tasks.UniTask _callProduceIdolListAPI(System.Threading.CancellationToken ct);
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IProduceIdolStatus> GetProduceIdolListFromCache();
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ILevelUpIdolSkillReply> LevelUpIdolSkillAsync(int mstProduceIdolId, int idolSkillLevel, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ILevelUpProduceIdolReply> LevelUpProduceIdolAsync(int mstProduceIdolId, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IUseProductStatus> useProductList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ILimitBreakProduceIdolReply> LimitBreakProduceIdolAsync(int mstProduceIdolId, int star, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IMarkFavoriteProduceIdolReply> MarkFavoriteProduceIdolAsync(int mstProduceIdolId, int mstFavoriteMarkId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Domain.ICachedProduceIdolService> GetCachedServiceAsync(System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IProduceIdolStatus> GetProduceIdolAsync(int idolId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.Dictionary<int, int>> GetIdolsCurrentTrainingLv(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.HashSet<int>> GetOwnedIdolIdsAsync(System.Threading.CancellationToken ct);

    private class <>c__DisplayClass11_0
    {
        public PRISM.Definitions.SortedMasterTable<int, PRISM.Definitions.MstProduceIdol> mstProduceIdol;
        private int <GetOwnedIdolIdsAsync>b__0(PRISM.Module.Networking.IProduceIdolStatus x);
    }

    private struct <EvolveProduceIdolAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IEvolveProduceIdolReply> <>t__builder;
        public int mstProduceIdolId;
        public int evolutionLevel;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IEvolveProduceIdolReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetCachedServiceAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Domain.ICachedProduceIdolService> <>t__builder;
        public PRISM.Domain.ProduceIdolService <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetIdolsCurrentTrainingLv>d__10 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.Collections.Generic.Dictionary<int, int>> <>t__builder;
        public PRISM.Domain.ProduceIdolService <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetOwnedIdolIdsAsync>d__11 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.Collections.Generic.HashSet<int>> <>t__builder;
        public PRISM.Domain.ProduceIdolService <>4__this;
        public System.Threading.CancellationToken ct;
        private <>c__DisplayClass11_0 <>8__1;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetProduceIdolAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IProduceIdolStatus> <>t__builder;
        public PRISM.Domain.ProduceIdolService <>4__this;
        public System.Threading.CancellationToken ct;
        public int idolId;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetProduceIdolListAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetProduceIdolListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetProduceIdolListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <LevelUpIdolSkillAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ILevelUpIdolSkillReply> <>t__builder;
        public int mstProduceIdolId;
        public int idolSkillLevel;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ILevelUpIdolSkillReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <LevelUpProduceIdolAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ILevelUpProduceIdolReply> <>t__builder;
        public int mstProduceIdolId;
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IUseProductStatus> useProductList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ILevelUpProduceIdolReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <LimitBreakProduceIdolAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ILimitBreakProduceIdolReply> <>t__builder;
        public int mstProduceIdolId;
        public int star;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ILimitBreakProduceIdolReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <MarkFavoriteProduceIdolAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IMarkFavoriteProduceIdolReply> <>t__builder;
        public int mstProduceIdolId;
        public int mstFavoriteMarkId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IMarkFavoriteProduceIdolReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_callProduceIdolListAPI>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetProduceIdolListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface ICachedProduceIdolService
{
    public PRISM.Module.Networking.IProduceIdolStatus GetProduceIdol(int produceIdolId);
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IProduceIdolStatus> GetProduceIdols();
}

// Namespace: PRISM.Domain
public interface IProduceIdolService
{
    public System.IObservable<System.ValueTuple<int, PRISM.Module.Networking.IProduceIdolStatus>> OnChangeIdol { get; set; }
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProduceIdolListReply> GetProduceIdolListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IEvolveProduceIdolReply> EvolveProduceIdolAsync(int mstProduceIdolId, int evolutionLevel, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ILimitBreakProduceIdolReply> LimitBreakProduceIdolAsync(int mstProduceIdolId, int star, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ILevelUpIdolSkillReply> LevelUpIdolSkillAsync(int mstProduceIdolId, int idolSkillLevel, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IMarkFavoriteProduceIdolReply> MarkFavoriteProduceIdolAsync(int mstProduceIdolId, int mstFavoriteMarkId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ILevelUpProduceIdolReply> LevelUpProduceIdolAsync(int mstProduceIdolId, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IUseProductStatus> useProductList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IProduceIdolStatus> GetProduceIdolAsync(int idolId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Domain.ICachedProduceIdolService> GetCachedServiceAsync(System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.Dictionary<int, int>> GetIdolsCurrentTrainingLv(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.HashSet<int>> GetOwnedIdolIdsAsync(System.Threading.CancellationToken ct);
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IProduceIdolStatus> GetProduceIdolListFromCache();
}

// Namespace: PRISM.Domain
public class ProductService : PRISM.Domain.ServiceBase, PRISM.Domain.IProductService
{
    public System.IObservable<System.ValueTuple<PRISM.Domain.ProductKey, PRISM.Module.Networking.IHavingProductStatus>> OnChangeProduct { get; set; }
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetHavingItemAllReply> GetHavingItemAllAsync(System.Threading.CancellationToken ct);
    private Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetHavingItemAllReply> _getHavingItemAllAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IHavingProductStatus> GetHavingItemAsync(PRISM.Domain.ProductKey key, System.Threading.CancellationToken ct);
    public PRISM.Module.Networking.IHavingProductStatus GetHavingItem(PRISM.Domain.ProductKey key);
    public Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IHavingProductStatus>> GetHavingItemsAsync(System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKey> keys, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Domain.Jewel> GetJewelAsync(System.Threading.CancellationToken ct);
    private PRISM.Domain.Jewel _getJewel();
    public Cysharp.Threading.Tasks.UniTask<long> GetMoneyAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProductDetailReply> GetProductDetailAsync(ProductType productType, int productMstId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IHavingProductStatus>> GetHavingItemsWithTypeAsync(ProductType type, System.Threading.CancellationToken ct);
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IHavingProductStatus> GetHavingItemsWithType(ProductType type);
    public PRISM.Module.Networking.IHavingProductStatus GetHavingItemsByProduct(PRISM.Module.Networking.IProductStatus product);
    public PRISM.Module.Networking.IHavingProductStatus GetHavingItemsByProduct(ProductType productType, int ProductMstId);
    public Cysharp.Threading.Tasks.UniTask<UniRx.ReadOnlyReactiveProperty<long>> GetReactiveHavingItemAmountAsync(PRISM.Domain.ProductKey key, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<UniRx.ReadOnlyReactiveProperty<PRISM.Domain.Jewel>> GetReactiveJewelAsync(System.Threading.CancellationToken ct);
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IItemRemindStatus> GetCachedItemReminds();
    private PRISM.Domain.Jewel <GetReactiveJewelAsync>b__16_1(System.ValueTuple<PRISM.Domain.ProductKey, PRISM.Module.Networking.IHavingProductStatus> _);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Domain.ProductKey, PRISM.Module.Networking.IHavingProductStatus> <>9__4_0;
        public static System.Func<PRISM.Module.Networking.IHavingProductStatus, bool> <>9__4_1;
        public static System.Func<System.ValueTuple<PRISM.Domain.ProductKey, PRISM.Module.Networking.IHavingProductStatus>, long> <>9__15_1;
        public static System.Func<System.ValueTuple<PRISM.Domain.ProductKey, PRISM.Module.Networking.IHavingProductStatus>, bool> <>9__16_0;
        private PRISM.Module.Networking.IHavingProductStatus <GetHavingItemsAsync>b__4_0(PRISM.Domain.ProductKey key);
        private bool <GetHavingItemsAsync>b__4_1(PRISM.Module.Networking.IHavingProductStatus hp);
        private long <GetReactiveHavingItemAmountAsync>b__15_1(System.ValueTuple<PRISM.Domain.ProductKey, PRISM.Module.Networking.IHavingProductStatus> x);
        private bool <GetReactiveJewelAsync>b__16_0(System.ValueTuple<PRISM.Domain.ProductKey, PRISM.Module.Networking.IHavingProductStatus> x);
    }

    private class <>c__DisplayClass10_0
    {
        public ProductType type;
        private bool <GetHavingItemsWithType>b__0(PRISM.Module.Networking.IHavingProductStatus hp);
    }

    private class <>c__DisplayClass11_0
    {
        public PRISM.Module.Networking.IProductStatus product;
        private bool <GetHavingItemsByProduct>b__0(PRISM.Module.Networking.IHavingProductStatus x);
    }

    private class <>c__DisplayClass12_0
    {
        public int ProductMstId;
        private bool <GetHavingItemsByProduct>b__0(PRISM.Module.Networking.IHavingProductStatus x);
    }

    private class <>c__DisplayClass15_0
    {
        public PRISM.Domain.ProductKey key;
        private bool <GetReactiveHavingItemAmountAsync>b__0(System.ValueTuple<PRISM.Domain.ProductKey, PRISM.Module.Networking.IHavingProductStatus> x);
    }

    private class <>c__DisplayClass9_0
    {
        public ProductType type;
        private bool <GetHavingItemsWithTypeAsync>b__0(PRISM.Module.Networking.IHavingProductStatus hp);
    }

    private struct <GetHavingItemAllAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetHavingItemAllReply> <>t__builder;
        public PRISM.Domain.ProductService <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetHavingItemAllReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetHavingItemAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IHavingProductStatus> <>t__builder;
        public PRISM.Domain.ProductService <>4__this;
        public System.Threading.CancellationToken ct;
        public PRISM.Domain.ProductKey key;
        private Awaiter<PRISM.Module.Networking.IGetHavingItemAllReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetHavingItemsAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IHavingProductStatus>> <>t__builder;
        public PRISM.Domain.ProductService <>4__this;
        public System.Threading.CancellationToken ct;
        public System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKey> keys;
        private Awaiter<PRISM.Module.Networking.IGetHavingItemAllReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetHavingItemsWithTypeAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IHavingProductStatus>> <>t__builder;
        public ProductType type;
        public PRISM.Domain.ProductService <>4__this;
        public System.Threading.CancellationToken ct;
        private <>c__DisplayClass9_0 <>8__1;
        private Awaiter<PRISM.Module.Networking.IGetHavingItemAllReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetJewelAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Domain.Jewel> <>t__builder;
        public PRISM.Domain.ProductService <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetHavingItemAllReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetMoneyAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<long> <>t__builder;
        public PRISM.Domain.ProductService <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetHavingItemAllReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetProductDetailAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetProductDetailReply> <>t__builder;
        public ProductType productType;
        public int productMstId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetProductDetailReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetReactiveHavingItemAmountAsync>d__15 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<UniRx.ReadOnlyReactiveProperty<long>> <>t__builder;
        public PRISM.Domain.ProductKey key;
        public PRISM.Domain.ProductService <>4__this;
        public System.Threading.CancellationToken ct;
        private <>c__DisplayClass15_0 <>8__1;
        private Awaiter<PRISM.Module.Networking.IHavingProductStatus> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetReactiveJewelAsync>d__16 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<UniRx.ReadOnlyReactiveProperty<PRISM.Domain.Jewel>> <>t__builder;
        public PRISM.Domain.ProductService <>4__this;
        public System.Threading.CancellationToken ct;
        private System.IObservable<PRISM.Domain.Jewel> <>7__wrap1;
        private Awaiter<PRISM.Domain.Jewel> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_getHavingItemAllAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetHavingItemAllReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetHavingItemAllReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IProductService
{
    public System.IObservable<System.ValueTuple<PRISM.Domain.ProductKey, PRISM.Module.Networking.IHavingProductStatus>> OnChangeProduct { get; set; }
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetHavingItemAllReply> GetHavingItemAllAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProductDetailReply> GetProductDetailAsync(ProductType productType, int productMstId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IHavingProductStatus> GetHavingItemAsync(PRISM.Domain.ProductKey key, System.Threading.CancellationToken ct);
    public PRISM.Module.Networking.IHavingProductStatus GetHavingItem(PRISM.Domain.ProductKey key);
    public Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IHavingProductStatus>> GetHavingItemsAsync(System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKey> keys, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IHavingProductStatus>> GetHavingItemsWithTypeAsync(ProductType type, System.Threading.CancellationToken ct);
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IHavingProductStatus> GetHavingItemsWithType(ProductType type);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Domain.Jewel> GetJewelAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<long> GetMoneyAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<UniRx.ReadOnlyReactiveProperty<long>> GetReactiveHavingItemAmountAsync(PRISM.Domain.ProductKey key, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<UniRx.ReadOnlyReactiveProperty<PRISM.Domain.Jewel>> GetReactiveJewelAsync(System.Threading.CancellationToken ct);
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IItemRemindStatus> GetCachedItemReminds();
}

// Namespace: PRISM.Domain
public class ProfileService : PRISM.Domain.ServiceBase, PRISM.Domain.IProfileService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProducerEventInfoReply> GetProducerEventInfoAsync(ProfileEventType eventType, int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProducerEventInfoListReply> GetProducerEventInfoListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProducerInfoReply> GetProducerInfoAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProducerSeasonInfoListReply> GetProducerSeasonInfoListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSelfProfileReply> GetSelfProfileAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetUserProfileReply> GetUserProfileAsync(string userId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetUserProgressInfoReply> GetUserProgressInfoAsync(string userId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetLiveGuestIdolReply> SetLiveGuestIdolAsync(Attribute attribute, int mstProduceIdolId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetSelfProfileReply> SetSelfProfileAsync(string name, string displayName, string comment, string birthday, bool isBirthdayPublic, int mstProduceIdolId, int mstSupportCharacterId, System.Collections.Generic.IEnumerable<int> mstAchievementIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetSelfProfileNameReply> SetSelfProfileNameAsync(string name, System.Threading.CancellationToken ct);

    private struct <GetProducerEventInfoAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetProducerEventInfoReply> <>t__builder;
        public ProfileEventType eventType;
        public int mstEventId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetProducerEventInfoReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetProducerEventInfoListAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetProducerEventInfoListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetProducerEventInfoListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetProducerInfoAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetProducerInfoReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetProducerInfoReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetProducerSeasonInfoListAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetProducerSeasonInfoListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetProducerSeasonInfoListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetSelfProfileAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetSelfProfileReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetSelfProfileReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetUserProfileAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetUserProfileReply> <>t__builder;
        public string userId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetUserProfileReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetUserProgressInfoAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetUserProgressInfoReply> <>t__builder;
        public string userId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetUserProgressInfoReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetLiveGuestIdolAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetLiveGuestIdolReply> <>t__builder;
        public Attribute attribute;
        public int mstProduceIdolId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetLiveGuestIdolReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetSelfProfileAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetSelfProfileReply> <>t__builder;
        public string name;
        public string displayName;
        public string comment;
        public string birthday;
        public bool isBirthdayPublic;
        public int mstProduceIdolId;
        public int mstSupportCharacterId;
        public System.Collections.Generic.IEnumerable<int> mstAchievementIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetSelfProfileReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetSelfProfileNameAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetSelfProfileNameReply> <>t__builder;
        public string name;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetSelfProfileNameReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IProfileService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSelfProfileReply> GetSelfProfileAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetUserProfileReply> GetUserProfileAsync(string userId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetSelfProfileReply> SetSelfProfileAsync(string name, string displayName, string comment, string birthday, bool isBirthdayPublic, int mstProduceIdolId, int mstSupportCharacterId, System.Collections.Generic.IEnumerable<int> mstAchievementIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProducerInfoReply> GetProducerInfoAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetUserProgressInfoReply> GetUserProgressInfoAsync(string userId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProducerSeasonInfoListReply> GetProducerSeasonInfoListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProducerEventInfoListReply> GetProducerEventInfoListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProducerEventInfoReply> GetProducerEventInfoAsync(ProfileEventType eventType, int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetSelfProfileNameReply> SetSelfProfileNameAsync(string name, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetLiveGuestIdolReply> SetLiveGuestIdolAsync(Attribute attribute, int mstProduceIdolId, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class RunwayService : PRISM.Domain.ServiceBase, PRISM.Domain.IRunwayService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetEventRunwayTopPageReply> GetEventRunwayTopPageAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetEventRunwayUnitListReply> GetEventRunwayUnitListAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetEventRunwayUnitReply> SetEventRunwayUnitAsync(int mstEventId, PRISM.Module.Networking.IRunwayUnitStatus runwayUnit, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartRunwayReply> StartRunwayAsync(int mstRunwayStageId, int unitNumber, int mstEventId, System.Threading.CancellationToken ct);

    private struct <GetEventRunwayTopPageAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetEventRunwayTopPageReply> <>t__builder;
        public int mstEventId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetEventRunwayTopPageReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetEventRunwayUnitListAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetEventRunwayUnitListReply> <>t__builder;
        public int mstEventId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetEventRunwayUnitListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetEventRunwayUnitAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISetEventRunwayUnitReply> <>t__builder;
        public int mstEventId;
        public PRISM.Module.Networking.IRunwayUnitStatus runwayUnit;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISetEventRunwayUnitReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartRunwayAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartRunwayReply> <>t__builder;
        public int mstRunwayStageId;
        public int unitNumber;
        public int mstEventId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartRunwayReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IRunwayService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetEventRunwayUnitListReply> GetEventRunwayUnitListAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISetEventRunwayUnitReply> SetEventRunwayUnitAsync(int mstEventId, PRISM.Module.Networking.IRunwayUnitStatus runwayUnit, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartRunwayReply> StartRunwayAsync(int mstRunwayStageId, int unitNumber, int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetEventRunwayTopPageReply> GetEventRunwayTopPageAsync(int mstEventId, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class SeasonMissionService : PRISM.Domain.ServiceBase, PRISM.Domain.ISeasonMissionService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSeasonMissionReply> GetSeasonMissionAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReceiveSeasonMissionRankRewardReply> ReceiveSeasonMissionRankRewardAsync(int mstSeasonMissionId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReceiveSeasonMissionRewardReply> ReceiveSeasonMissionRewardAsync(System.Collections.Generic.IEnumerable<int> mstSeasonMissionMissionIdList, System.Threading.CancellationToken ct);

    private struct <GetSeasonMissionAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetSeasonMissionReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetSeasonMissionReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ReceiveSeasonMissionRankRewardAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IReceiveSeasonMissionRankRewardReply> <>t__builder;
        public int mstSeasonMissionId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IReceiveSeasonMissionRankRewardReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ReceiveSeasonMissionRewardAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IReceiveSeasonMissionRewardReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<int> mstSeasonMissionMissionIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IReceiveSeasonMissionRewardReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface ISeasonMissionService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSeasonMissionReply> GetSeasonMissionAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReceiveSeasonMissionRewardReply> ReceiveSeasonMissionRewardAsync(System.Collections.Generic.IEnumerable<int> mstSeasonMissionMissionIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReceiveSeasonMissionRankRewardReply> ReceiveSeasonMissionRankRewardAsync(int mstSeasonMissionId, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class ServiceBase
{
    private static PRISM.Domain.Cache.RuntimeCache cache;
    private PRISM.Domain.Cache.RuntimeCache Cache { get; set; }
    private static void ResetCache();
    private static void ResetLargeCaches();
}

// Namespace: PRISM.Domain
public enum ServiceResult : System.Enum
{
    public int value__;
    public static PRISM.Domain.ServiceResult Succeeded;
    public static PRISM.Domain.ServiceResult Cancelled;
    public static PRISM.Domain.ServiceResult ParameterInadequacy;
    public static PRISM.Domain.ServiceResult ConnectionFailed;
    public static PRISM.Domain.ServiceResult InternalServerError;
    public static PRISM.Domain.ServiceResult UnknownError;
}

// Namespace: PRISM.Domain
public class ShinyCompetitionService : PRISM.Domain.ServiceBase, PRISM.Domain.IShinyCompetitionService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IEditShinyCompetitionRankingCommentReply> EditShinyCompetitionRankingCommentAsync(int mstShinyCompetitionId, string comment, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetCurrentShinyCompetitionReply> GetCurrentShinyCompetitionAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShinyCompetitionFesUnitReply> GetShinyCompetitionFesUnitAsync(string fesUnitOriginId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShinyCompetitionRankingHistoryReply> GetShinyCompetitionRankingHistoryAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShinyCompetitionRankingRewardListReply> GetShinyCompetitionRankingRewardListAsync(int mstShinyCompetitionRankingId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShinyCompetitionRankingUserListReply> GetShinyCompetitionRankingUserListAsync(int mstShinyCompetitionRankingId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShinyCompetitionSelfRankingReply> GetShinyCompetitionSelfRankingAsync(int mstShinyCompetitionId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShinyCompetitionTopReply> GetShinyCompetitionTopAsync(int mstShinyCompetitionId, System.Threading.CancellationToken ct);

    private struct <EditShinyCompetitionRankingCommentAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IEditShinyCompetitionRankingCommentReply> <>t__builder;
        public int mstShinyCompetitionId;
        public string comment;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IEditShinyCompetitionRankingCommentReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetCurrentShinyCompetitionAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetCurrentShinyCompetitionReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetCurrentShinyCompetitionReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetShinyCompetitionFesUnitAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetShinyCompetitionFesUnitReply> <>t__builder;
        public string fesUnitOriginId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetShinyCompetitionFesUnitReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetShinyCompetitionRankingHistoryAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetShinyCompetitionRankingHistoryReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetShinyCompetitionRankingHistoryReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetShinyCompetitionRankingRewardListAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetShinyCompetitionRankingRewardListReply> <>t__builder;
        public int mstShinyCompetitionRankingId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetShinyCompetitionRankingRewardListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetShinyCompetitionRankingUserListAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetShinyCompetitionRankingUserListReply> <>t__builder;
        public int mstShinyCompetitionRankingId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetShinyCompetitionRankingUserListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetShinyCompetitionSelfRankingAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetShinyCompetitionSelfRankingReply> <>t__builder;
        public int mstShinyCompetitionId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetShinyCompetitionSelfRankingReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetShinyCompetitionTopAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetShinyCompetitionTopReply> <>t__builder;
        public int mstShinyCompetitionId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetShinyCompetitionTopReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IShinyCompetitionService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetCurrentShinyCompetitionReply> GetCurrentShinyCompetitionAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShinyCompetitionTopReply> GetShinyCompetitionTopAsync(int mstShinyCompetitionId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShinyCompetitionRankingRewardListReply> GetShinyCompetitionRankingRewardListAsync(int mstShinyCompetitionRankingId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShinyCompetitionSelfRankingReply> GetShinyCompetitionSelfRankingAsync(int mstShinyCompetitionId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShinyCompetitionRankingUserListReply> GetShinyCompetitionRankingUserListAsync(int mstShinyCompetitionRankingId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IEditShinyCompetitionRankingCommentReply> EditShinyCompetitionRankingCommentAsync(int mstShinyCompetitionId, string comment, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShinyCompetitionRankingHistoryReply> GetShinyCompetitionRankingHistoryAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShinyCompetitionFesUnitReply> GetShinyCompetitionFesUnitAsync(string fesUnitOriginId, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class ShopService : PRISM.Domain.ServiceBase, PRISM.Domain.IShopService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetDocumentReply> GetDocumentAsync(ShopDocumentType documentType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShopItemCostumeGroupReply> GetShopItemCostumeGroupAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShopItemGroupListReply> GetShopItemGroupListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShopItemItemGroupReply> GetShopItemItemGroupAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShopItemJewelGroupReply> GetShopItemJewelGroupAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShopItemLimitedTimeLoginBonusPassGroupReply> GetShopItemLimitedTimeLoginBonusPassGroupAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShopItemLoginBonusPassGroupReply> GetShopItemLoginBonusPassGroupAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShopItemSeasonPassGroupReply> GetShopItemSeasonPassGroupAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShopPurchaseHistoryReply> GetShopPurchaseHistoryAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IPurchaseShopItemReply> PurchaseShopItemAsync(int mstShopItemId, int amount, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReceivePurchaseCountBenefitReply> ReceivePurchaseCountBenefitAsync(System.Threading.CancellationToken ct);

    private struct <GetDocumentAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetDocumentReply> <>t__builder;
        public ShopDocumentType documentType;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetDocumentReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetShopItemCostumeGroupAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetShopItemCostumeGroupReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetShopItemCostumeGroupReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetShopItemGroupListAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetShopItemGroupListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetShopItemGroupListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetShopItemItemGroupAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetShopItemItemGroupReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetShopItemItemGroupReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetShopItemJewelGroupAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetShopItemJewelGroupReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetShopItemJewelGroupReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetShopItemLimitedTimeLoginBonusPassGroupAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetShopItemLimitedTimeLoginBonusPassGroupReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetShopItemLimitedTimeLoginBonusPassGroupReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetShopItemLoginBonusPassGroupAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetShopItemLoginBonusPassGroupReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetShopItemLoginBonusPassGroupReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetShopItemSeasonPassGroupAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetShopItemSeasonPassGroupReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetShopItemSeasonPassGroupReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetShopPurchaseHistoryAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetShopPurchaseHistoryReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetShopPurchaseHistoryReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <PurchaseShopItemAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IPurchaseShopItemReply> <>t__builder;
        public int mstShopItemId;
        public int amount;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IPurchaseShopItemReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ReceivePurchaseCountBenefitAsync>d__10 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IReceivePurchaseCountBenefitReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IReceivePurchaseCountBenefitReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IShopService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetDocumentReply> GetDocumentAsync(ShopDocumentType documentType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShopItemGroupListReply> GetShopItemGroupListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IPurchaseShopItemReply> PurchaseShopItemAsync(int mstShopItemId, int amount, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReceivePurchaseCountBenefitReply> ReceivePurchaseCountBenefitAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShopPurchaseHistoryReply> GetShopPurchaseHistoryAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShopItemJewelGroupReply> GetShopItemJewelGroupAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShopItemItemGroupReply> GetShopItemItemGroupAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShopItemSeasonPassGroupReply> GetShopItemSeasonPassGroupAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShopItemLoginBonusPassGroupReply> GetShopItemLoginBonusPassGroupAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShopItemCostumeGroupReply> GetShopItemCostumeGroupAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetShopItemLimitedTimeLoginBonusPassGroupReply> GetShopItemLimitedTimeLoginBonusPassGroupAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class SpecialMissionService : PRISM.Domain.ServiceBase, PRISM.Domain.ISpecialMissionService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSpecialMissionListReply> GetSpecialMissionListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReceiveSpecialMissionCompleteRewardReply> ReceiveSpecialMissionCompleteRewardAsync(int mstSpecialMissionStepId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReceiveSpecialMissionRewardReply> ReceiveSpecialMissionRewardAsync(int mstSpecialMissionStepId, System.Collections.Generic.IEnumerable<int> mstMissionIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ITouchSpecialMissionReply> TouchSpecialMissionAsync(int mstSpecialMissionStepId, System.Threading.CancellationToken ct);

    private struct <GetSpecialMissionListAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetSpecialMissionListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetSpecialMissionListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ReceiveSpecialMissionCompleteRewardAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IReceiveSpecialMissionCompleteRewardReply> <>t__builder;
        public int mstSpecialMissionStepId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IReceiveSpecialMissionCompleteRewardReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ReceiveSpecialMissionRewardAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IReceiveSpecialMissionRewardReply> <>t__builder;
        public int mstSpecialMissionStepId;
        public System.Collections.Generic.IEnumerable<int> mstMissionIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IReceiveSpecialMissionRewardReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <TouchSpecialMissionAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ITouchSpecialMissionReply> <>t__builder;
        public int mstSpecialMissionStepId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ITouchSpecialMissionReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface ISpecialMissionService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSpecialMissionListReply> GetSpecialMissionListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReceiveSpecialMissionRewardReply> ReceiveSpecialMissionRewardAsync(int mstSpecialMissionStepId, System.Collections.Generic.IEnumerable<int> mstMissionIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReceiveSpecialMissionCompleteRewardReply> ReceiveSpecialMissionCompleteRewardAsync(int mstSpecialMissionStepId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ITouchSpecialMissionReply> TouchSpecialMissionAsync(int mstSpecialMissionStepId, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class StaminaService : PRISM.Domain.ServiceBase, PRISM.Domain.IStaminaService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetStaminaListReply> GetStaminaListAsync(System.Threading.CancellationToken ct);
    private Cysharp.Threading.Tasks.UniTask _requestAndCache(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IRecoverStaminaByInGameCurrencyReply> RecoverStaminaByInGameCurrencyAsync(StaminaType staminaType, int recoverCount, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IRecoverStaminaByItemMultiReply> RecoverStaminaByItemMultiAsync(System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IUseProductStatus> useProductList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Stamina.StaminaModel> GetStaminaAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Stamina.StaminaModel> GetLiveBoostAsync(System.Threading.CancellationToken ct);

    private struct <GetLiveBoostAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Stamina.StaminaModel> <>t__builder;
        public PRISM.Domain.StaminaService <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetStaminaAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Stamina.StaminaModel> <>t__builder;
        public PRISM.Domain.StaminaService <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetStaminaListAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetStaminaListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetStaminaListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <RecoverStaminaByInGameCurrencyAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IRecoverStaminaByInGameCurrencyReply> <>t__builder;
        public StaminaType staminaType;
        public int recoverCount;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IRecoverStaminaByInGameCurrencyReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <RecoverStaminaByItemMultiAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IRecoverStaminaByItemMultiReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IUseProductStatus> useProductList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IRecoverStaminaByItemMultiReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_requestAndCache>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetStaminaListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IStaminaService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetStaminaListReply> GetStaminaListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IRecoverStaminaByInGameCurrencyReply> RecoverStaminaByInGameCurrencyAsync(StaminaType staminaType, int recoverCount, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IRecoverStaminaByItemMultiReply> RecoverStaminaByItemMultiAsync(System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IUseProductStatus> useProductList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Stamina.StaminaModel> GetStaminaAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Stamina.StaminaModel> GetLiveBoostAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class StoryService : PRISM.Domain.ServiceBase, PRISM.Domain.IStoryService
{
    private PRISM.Domain.ICachedStoryService cachedStoryService;
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishStoryReply> FinishStoryAsync(PRISM.Module.Networking.IStoryIDStatus storyId, StoryMode storyMode, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Domain.ICachedStoryService> GetCachedStoryServiceAsync(bool forceUpdate, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetEpisodeZeroStoryListReply> GetEpisodeZeroStoryListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetEventInfoForEventStoryReply> GetEventInfoForEventStoryAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetEventStoryListReply> GetEventStoryListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetExtraStoryListReply> GetExtraStoryListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetIdolStoryListReply> GetIdolStoryListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetMainStoryListReply> GetMainStoryListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProduceIdolScenarioListReply> GetProduceIdolScenarioListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProduceScenarioListReply> GetProduceScenarioListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetStoryListReply> GetStoryListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetStoryListReply> ForceGetStoryListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSupportCharacterScenarioListReply> GetSupportCharacterScenarioListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectStoryOptionReply> SelectStoryOptionAsync(PRISM.Module.Networking.IStoryIDStatus storyId, int optionId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartStoryReply> StartStoryAsync(PRISM.Module.Networking.IStoryIDStatus storyId, StoryMode storyMode, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IToggleStoryFavoriteReply> ToggleStoryFavoriteAsync(PRISM.Module.Networking.IStoryIDStatus storyId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ITouchStoryListReply> TouchStoryListAsync(System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IStoryIDStatus> storyIdList, System.Threading.CancellationToken ct);

    private class CachedStoryService : PRISM.Domain.ServiceBase, PRISM.Domain.ICachedStoryService
    {
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IStoryStatus> GetStories(PRISM.Definitions.Story.StoryCategoryType storyType);
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IMainStoryStatus> GetMainStories();
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IIdolStoryStatus> GetIdolStories();
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IEventStoryStatus> GetEventStories();
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IExtraStoryStatus> GetExtraStories();
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IProduceIdolScenarioStatus> GetProduceIdolScenarios();
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISupportCharacterScenarioStatus> GetSupportCharacterScenarios();
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IProduceMainScenarioStatus> GetProduceMainScenarios();
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IProduceMainIdolScenarioStatus> GetProduceMainIdolScenarios();
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IEpisodeZeroStoryStatus> GetEpisodeZeroStories();
    }

    private struct <FinishStoryAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishStoryReply> <>t__builder;
        public PRISM.Module.Networking.IStoryIDStatus storyId;
        public StoryMode storyMode;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishStoryReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ForceGetStoryListAsync>d__13 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetStoryListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetStoryListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetCachedStoryServiceAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Domain.ICachedStoryService> <>t__builder;
        public PRISM.Domain.StoryService <>4__this;
        public bool forceUpdate;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter<PRISM.Module.Networking.IGetStoryListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetEpisodeZeroStoryListAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetEpisodeZeroStoryListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetEpisodeZeroStoryListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetEventInfoForEventStoryAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetEventInfoForEventStoryReply> <>t__builder;
        public int mstEventId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetEventInfoForEventStoryReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetEventStoryListAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetEventStoryListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetEventStoryListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetExtraStoryListAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetExtraStoryListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetExtraStoryListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetIdolStoryListAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetIdolStoryListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetIdolStoryListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetMainStoryListAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetMainStoryListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetMainStoryListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetProduceIdolScenarioListAsync>d__10 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetProduceIdolScenarioListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetProduceIdolScenarioListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetProduceScenarioListAsync>d__11 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetProduceScenarioListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetProduceScenarioListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetStoryListAsync>d__12 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetStoryListReply> <>t__builder;
        public PRISM.Domain.StoryService <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetStoryListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetSupportCharacterScenarioListAsync>d__14 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetSupportCharacterScenarioListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetSupportCharacterScenarioListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SelectStoryOptionAsync>d__15 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISelectStoryOptionReply> <>t__builder;
        public PRISM.Module.Networking.IStoryIDStatus storyId;
        public int optionId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISelectStoryOptionReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartStoryAsync>d__16 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartStoryReply> <>t__builder;
        public PRISM.Module.Networking.IStoryIDStatus storyId;
        public StoryMode storyMode;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartStoryReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ToggleStoryFavoriteAsync>d__17 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IToggleStoryFavoriteReply> <>t__builder;
        public PRISM.Module.Networking.IStoryIDStatus storyId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IToggleStoryFavoriteReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <TouchStoryListAsync>d__18 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ITouchStoryListReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IStoryIDStatus> storyIdList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ITouchStoryListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface ICachedStoryService
{
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IStoryStatus> GetStories(PRISM.Definitions.Story.StoryCategoryType storyType);
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IMainStoryStatus> GetMainStories();
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IIdolStoryStatus> GetIdolStories();
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IEventStoryStatus> GetEventStories();
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IExtraStoryStatus> GetExtraStories();
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IProduceIdolScenarioStatus> GetProduceIdolScenarios();
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISupportCharacterScenarioStatus> GetSupportCharacterScenarios();
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IProduceMainScenarioStatus> GetProduceMainScenarios();
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IProduceMainIdolScenarioStatus> GetProduceMainIdolScenarios();
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IEpisodeZeroStoryStatus> GetEpisodeZeroStories();
}

// Namespace: PRISM.Domain
public interface IStoryService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetStoryListReply> GetStoryListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetMainStoryListReply> GetMainStoryListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetIdolStoryListReply> GetIdolStoryListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetEventStoryListReply> GetEventStoryListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetExtraStoryListReply> GetExtraStoryListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetEpisodeZeroStoryListReply> GetEpisodeZeroStoryListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProduceIdolScenarioListReply> GetProduceIdolScenarioListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSupportCharacterScenarioListReply> GetSupportCharacterScenarioListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetProduceScenarioListReply> GetProduceScenarioListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartStoryReply> StartStoryAsync(PRISM.Module.Networking.IStoryIDStatus storyId, StoryMode storyMode, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishStoryReply> FinishStoryAsync(PRISM.Module.Networking.IStoryIDStatus storyId, StoryMode storyMode, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectStoryOptionReply> SelectStoryOptionAsync(PRISM.Module.Networking.IStoryIDStatus storyId, int optionId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ITouchStoryListReply> TouchStoryListAsync(System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IStoryIDStatus> storyIdList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IToggleStoryFavoriteReply> ToggleStoryFavoriteAsync(PRISM.Module.Networking.IStoryIDStatus storyId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetEventInfoForEventStoryReply> GetEventInfoForEventStoryAsync(int mstEventId, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class StreamProgramService : PRISM.Domain.ServiceBase, PRISM.Domain.IStreamProgramService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetStreamArchiveListReply> GetStreamArchiveListAsync(string cursor, bool isFavorite, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetStreamArchiveLiveURLReply> GetStreamArchiveLiveURLAsync(int mstStreamProgramId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetStreamProgramListReply> GetStreamProgramListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetStreamProgramURLReply> GetStreamProgramURLAsync(int mstStreamProgramId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IMarkDisplayedArchiveStreamProgramReply> MarkDisplayedArchiveStreamProgramAsync(System.Collections.Generic.IEnumerable<StreamCategoryType> categoryTypes, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IPlayStreamReply> PlayStreamAsync(int mstStreamProgramId, StreamMovieType streamMovieType, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IStreamCastStatus> castList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReleasePremiumStreamReply> ReleasePremiumStreamAsync(int mstStreamProgramId, System.Threading.CancellationToken ct);
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ILiveStreamProgramStatus> GetCachedLiveStreamList();
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IArchiveStreamProgramStatus> GetCachedArchiveStreamList();
    public PRISM.Module.Networking.IArchiveStreamProgramStatus GetCachedArchiveStream(int mstStreamProgramId);
    public Cysharp.Threading.Tasks.UniTask SetOurStreamFavoriteAsync(int mstStreamProgramId, bool isOn, System.Threading.CancellationToken ct);
    public bool NotDisplayedArchiveExists();
    public int NotDisplayedArchiveCount();
    public void ClearLiveCache();
    public void ClearArchiveCache();
    public void UpdateCacheArchiveDisplayed(int mstStreamProgramId);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IToggleArchiveFavoriteReply> ToggleArchiveFavoriteAsync(int mstStreamProgramId, System.Threading.CancellationToken ct);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IArchiveStreamProgramStatus, bool> <>9__11_0;
        public static System.Func<PRISM.Module.Networking.IArchiveStreamProgramStatus, bool> <>9__12_0;
        private bool <NotDisplayedArchiveExists>b__11_0(PRISM.Module.Networking.IArchiveStreamProgramStatus x);
        private bool <NotDisplayedArchiveCount>b__12_0(PRISM.Module.Networking.IArchiveStreamProgramStatus x);
    }

    private struct <GetStreamArchiveListAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetStreamArchiveListReply> <>t__builder;
        public string cursor;
        public bool isFavorite;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetStreamArchiveListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetStreamArchiveLiveURLAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetStreamArchiveLiveURLReply> <>t__builder;
        public int mstStreamProgramId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetStreamArchiveLiveURLReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetStreamProgramListAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetStreamProgramListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetStreamProgramListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetStreamProgramURLAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetStreamProgramURLReply> <>t__builder;
        public int mstStreamProgramId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetStreamProgramURLReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <MarkDisplayedArchiveStreamProgramAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IMarkDisplayedArchiveStreamProgramReply> <>t__builder;
        public System.Collections.Generic.IEnumerable<StreamCategoryType> categoryTypes;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IMarkDisplayedArchiveStreamProgramReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <PlayStreamAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IPlayStreamReply> <>t__builder;
        public int mstStreamProgramId;
        public StreamMovieType streamMovieType;
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IStreamCastStatus> castList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IPlayStreamReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ReleasePremiumStreamAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IReleasePremiumStreamReply> <>t__builder;
        public int mstStreamProgramId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IReleasePremiumStreamReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetOurStreamFavoriteAsync>d__10 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Domain.StreamProgramService <>4__this;
        public int mstStreamProgramId;
        public bool isOn;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IToggleArchiveFavoriteReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ToggleArchiveFavoriteAsync>d__16 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IToggleArchiveFavoriteReply> <>t__builder;
        public int mstStreamProgramId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IToggleArchiveFavoriteReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IStreamProgramService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetStreamProgramListReply> GetStreamProgramListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetStreamProgramURLReply> GetStreamProgramURLAsync(int mstStreamProgramId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetStreamArchiveListReply> GetStreamArchiveListAsync(string cursor, bool isFavorite, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetStreamArchiveLiveURLReply> GetStreamArchiveLiveURLAsync(int mstStreamProgramId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IToggleArchiveFavoriteReply> ToggleArchiveFavoriteAsync(int mstStreamProgramId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IReleasePremiumStreamReply> ReleasePremiumStreamAsync(int mstStreamProgramId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IPlayStreamReply> PlayStreamAsync(int mstStreamProgramId, StreamMovieType streamMovieType, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IStreamCastStatus> castList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IMarkDisplayedArchiveStreamProgramReply> MarkDisplayedArchiveStreamProgramAsync(System.Collections.Generic.IEnumerable<StreamCategoryType> categoryTypes, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class SupportCharacterService : PRISM.Domain.ServiceBase, PRISM.Domain.ISupportCharacterService
{
    public Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.IEnumerable<PRISM.Common.Model.SCharaIcon>> GetCharacterIconListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISupportCharacterStatus> GetSupportCharacterAsync(int characterId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSupportCharacterListReply> GetSupportCharacterListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISupportCharacterStatus>> GetSupportCharacterListAsync(System.Collections.Generic.IEnumerable<int> sCharaIds, System.Threading.CancellationToken ct);
    private Cysharp.Threading.Tasks.UniTask _callSupportCharacterListAPI(System.Threading.CancellationToken ct);
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISupportCharacterStatus> GetSupportCharacterListFromCache();
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IMarkFavoriteSupportCharacterReply> MarkFavoriteSupportCharacterAsync(int mstSupportCharacterId, int mstFavoriteMarkId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IMasterTrainingSupportCharacterReply> MasterTrainingSupportCharacterAsync(int mstSupportCharacterId, int diamond, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Domain.ICachedSupportCharacterService> GetCachedServiceAsync(System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ITrainingSupportCharacterReply> TrainingSupportCharacterAsync(int mstSupportCharacterId, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IUseProductStatus> useProductList, System.Threading.CancellationToken ct);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.ISupportCharacterStatus, PRISM.Common.Model.SCharaIcon> <>9__0_0;
        private PRISM.Common.Model.SCharaIcon <GetCharacterIconListAsync>b__0_0(PRISM.Module.Networking.ISupportCharacterStatus x);
    }

    private class <>c__DisplayClass3_0
    {
        public System.Collections.Generic.IEnumerable<int> sCharaIds;
        private bool <GetSupportCharacterListAsync>b__0(PRISM.Module.Networking.ISupportCharacterStatus x);
    }

    private class <>c__DisplayClass3_1
    {
        public PRISM.Module.Networking.ISupportCharacterStatus x;
        private bool <GetSupportCharacterListAsync>b__1(int y);
    }

    private struct <GetCachedServiceAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Domain.ICachedSupportCharacterService> <>t__builder;
        public PRISM.Domain.SupportCharacterService <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetCharacterIconListAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.Collections.Generic.IEnumerable<PRISM.Common.Model.SCharaIcon>> <>t__builder;
        public PRISM.Domain.SupportCharacterService <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetSupportCharacterAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISupportCharacterStatus> <>t__builder;
        public PRISM.Domain.SupportCharacterService <>4__this;
        public System.Threading.CancellationToken ct;
        public int characterId;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetSupportCharacterListAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetSupportCharacterListReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetSupportCharacterListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetSupportCharacterListAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISupportCharacterStatus>> <>t__builder;
        public System.Collections.Generic.IEnumerable<int> sCharaIds;
        public PRISM.Domain.SupportCharacterService <>4__this;
        public System.Threading.CancellationToken ct;
        private <>c__DisplayClass3_0 <>8__1;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <MarkFavoriteSupportCharacterAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IMarkFavoriteSupportCharacterReply> <>t__builder;
        public int mstSupportCharacterId;
        public int mstFavoriteMarkId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IMarkFavoriteSupportCharacterReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <MasterTrainingSupportCharacterAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IMasterTrainingSupportCharacterReply> <>t__builder;
        public int mstSupportCharacterId;
        public int diamond;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IMasterTrainingSupportCharacterReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <TrainingSupportCharacterAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ITrainingSupportCharacterReply> <>t__builder;
        public int mstSupportCharacterId;
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IUseProductStatus> useProductList;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ITrainingSupportCharacterReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_callSupportCharacterListAPI>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetSupportCharacterListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface ICachedSupportCharacterService
{
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISupportCharacterStatus> GetSupportCharacters();
    public PRISM.Module.Networking.ISupportCharacterStatus GetSupportCharacter(int supportCharacterId);
}

// Namespace: PRISM.Domain
public interface ISupportCharacterService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSupportCharacterListReply> GetSupportCharacterListAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ITrainingSupportCharacterReply> TrainingSupportCharacterAsync(int mstSupportCharacterId, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IUseProductStatus> useProductList, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IMasterTrainingSupportCharacterReply> MasterTrainingSupportCharacterAsync(int mstSupportCharacterId, int diamond, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IMarkFavoriteSupportCharacterReply> MarkFavoriteSupportCharacterAsync(int mstSupportCharacterId, int mstFavoriteMarkId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Domain.ICachedSupportCharacterService> GetCachedServiceAsync(System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISupportCharacterStatus> GetSupportCharacterAsync(int characterId, System.Threading.CancellationToken ct);
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISupportCharacterStatus> GetSupportCharacterListFromCache();
}

// Namespace: PRISM.Domain
public class TechnicalChallengeService : PRISM.Domain.ServiceBase, PRISM.Domain.ITechnicalChallengeService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IBreakTechnicalChallengeReply> BreakTechnicalChallengeAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishTechnicalChallengeReply> FinishTechnicalChallengeAsync(int combo, PRISM.Module.Networking.ILiveTimingJudgementStatus timingJudgement, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTechnicalChallengeRewardListReply> GetTechnicalChallengeRewardListAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTechnicalChallengeTopReply> GetTechnicalChallengeTopAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IRetryTechnicalChallengeReply> RetryTechnicalChallengeAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartTechnicalChallengeReply> StartTechnicalChallengeAsync(int mstEventId, int mstSongId, SongDifficultyLevel difficultyLevel, string deviceToken, System.Threading.CancellationToken ct);

    private struct <BreakTechnicalChallengeAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IBreakTechnicalChallengeReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IBreakTechnicalChallengeReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <FinishTechnicalChallengeAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IFinishTechnicalChallengeReply> <>t__builder;
        public int combo;
        public PRISM.Module.Networking.ILiveTimingJudgementStatus timingJudgement;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishTechnicalChallengeReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetTechnicalChallengeRewardListAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetTechnicalChallengeRewardListReply> <>t__builder;
        public int mstEventId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetTechnicalChallengeRewardListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetTechnicalChallengeTopAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetTechnicalChallengeTopReply> <>t__builder;
        public int mstEventId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetTechnicalChallengeTopReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <RetryTechnicalChallengeAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IRetryTechnicalChallengeReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IRetryTechnicalChallengeReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartTechnicalChallengeAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartTechnicalChallengeReply> <>t__builder;
        public int mstEventId;
        public int mstSongId;
        public SongDifficultyLevel difficultyLevel;
        public string deviceToken;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartTechnicalChallengeReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface ITechnicalChallengeService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTechnicalChallengeTopReply> GetTechnicalChallengeTopAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTechnicalChallengeRewardListReply> GetTechnicalChallengeRewardListAsync(int mstEventId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartTechnicalChallengeReply> StartTechnicalChallengeAsync(int mstEventId, int mstSongId, SongDifficultyLevel difficultyLevel, string deviceToken, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishTechnicalChallengeReply> FinishTechnicalChallengeAsync(int combo, PRISM.Module.Networking.ILiveTimingJudgementStatus timingJudgement, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IRetryTechnicalChallengeReply> RetryTechnicalChallengeAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IBreakTechnicalChallengeReply> BreakTechnicalChallengeAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class TitleAnnounceService : PRISM.Domain.ServiceBase, PRISM.Domain.ITitleAnnounceService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTitleAnnounceDetailReply> GetTitleAnnounceDetailAsync(string platform, string articleId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTitleAnnounceListReply> GetTitleAnnounceListAsync(string platform, string cursor, int limit, AnnounceCategory category, System.Threading.CancellationToken ct);

    private struct <GetTitleAnnounceDetailAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetTitleAnnounceDetailReply> <>t__builder;
        public string platform;
        public string articleId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetTitleAnnounceDetailReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetTitleAnnounceListAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetTitleAnnounceListReply> <>t__builder;
        public string platform;
        public string cursor;
        public int limit;
        public AnnounceCategory category;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetTitleAnnounceListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface ITitleAnnounceService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTitleAnnounceListReply> GetTitleAnnounceListAsync(string platform, string cursor, int limit, AnnounceCategory category, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTitleAnnounceDetailReply> GetTitleAnnounceDetailAsync(string platform, string articleId, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class TransferService : PRISM.Domain.ServiceBase, PRISM.Domain.ITransferService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IConnectReleaseReply> ConnectReleaseAsync(TransferProviderType providerType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IExecuteConnectProviderReply> ExecuteConnectProviderAsync(TransferProviderType providerType, string token, TransferAuthenticationType authenticationType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetConnectURLReply> GetConnectURLAsync(TransferProviderType providerType, System.Threading.CancellationToken ct);

    private struct <ConnectReleaseAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IConnectReleaseReply> <>t__builder;
        public TransferProviderType providerType;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IConnectReleaseReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ExecuteConnectProviderAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IExecuteConnectProviderReply> <>t__builder;
        public TransferProviderType providerType;
        public string token;
        public TransferAuthenticationType authenticationType;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IExecuteConnectProviderReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetConnectURLAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetConnectURLReply> <>t__builder;
        public TransferProviderType providerType;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetConnectURLReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface ITransferService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetConnectURLReply> GetConnectURLAsync(TransferProviderType providerType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IConnectReleaseReply> ConnectReleaseAsync(TransferProviderType providerType, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IExecuteConnectProviderReply> ExecuteConnectProviderAsync(TransferProviderType providerType, string token, TransferAuthenticationType authenticationType, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class TutorialService : PRISM.Domain.ServiceBase, PRISM.Domain.ITutorialService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSelectedFirstProduceIdolReply> GetSelectedFirstProduceIdolAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTutorialProduceUnitReply> GetTutorialProduceUnitAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IProceedTutorialReply> ProceedTutorialAsync(PRISM.Module.Networking.ITutorialStatus tutorial, bool isSkip, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectFirstProduceIdolReply> SelectFirstProduceIdolAsync(int mstFirstProduceIdolId, bool isSkip, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartProduceTutorialReply> StartProduceTutorialAsync(System.Threading.CancellationToken ct);

    private struct <GetSelectedFirstProduceIdolAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetSelectedFirstProduceIdolReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetSelectedFirstProduceIdolReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetTutorialProduceUnitAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetTutorialProduceUnitReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetTutorialProduceUnitReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ProceedTutorialAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IProceedTutorialReply> <>t__builder;
        public PRISM.Module.Networking.ITutorialStatus tutorial;
        public bool isSkip;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IProceedTutorialReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SelectFirstProduceIdolAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISelectFirstProduceIdolReply> <>t__builder;
        public int mstFirstProduceIdolId;
        public bool isSkip;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISelectFirstProduceIdolReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <StartProduceTutorialAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IStartProduceTutorialReply> <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IStartProduceTutorialReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface ITutorialService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetTutorialProduceUnitReply> GetTutorialProduceUnitAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IStartProduceTutorialReply> StartProduceTutorialAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IProceedTutorialReply> ProceedTutorialAsync(PRISM.Module.Networking.ITutorialStatus tutorial, bool isSkip, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectFirstProduceIdolReply> SelectFirstProduceIdolAsync(int mstFirstProduceIdolId, bool isSkip, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetSelectedFirstProduceIdolReply> GetSelectedFirstProduceIdolAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Domain
public class UserService : PRISM.Domain.ServiceBase, PRISM.Domain.IUserService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetInGameCurrencyReply> GetInGameCurrencyAsync(long paidInGameCurrencyAmount, long freeInGameCurrencyAmount, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISearchUserReply> SearchUserAsync(string searchUserId, System.Threading.CancellationToken ct);
    public PRISM.Module.Networking.ISelfStatus GetUser();

    private struct <GetInGameCurrencyAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IGetInGameCurrencyReply> <>t__builder;
        public long paidInGameCurrencyAmount;
        public long freeInGameCurrencyAmount;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IGetInGameCurrencyReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SearchUserAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISearchUserReply> <>t__builder;
        public string searchUserId;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.ISearchUserReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Domain
public interface IUserService
{
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISearchUserReply> SearchUserAsync(string searchUserId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IGetInGameCurrencyReply> GetInGameCurrencyAsync(long paidInGameCurrencyAmount, long freeInGameCurrencyAmount, System.Threading.CancellationToken ct);
    public PRISM.Module.Networking.ISelfStatus GetUser();
}

// Namespace: PRISM.Domain
public class ButtonGoToTypeExtensions
{
    public static string GetText(ButtonGoToType type);
}

// Namespace: PRISM.Domain
public class GashaProductRateExtensions
{
    public static bool IsPickUp(PRISM.Module.Networking.IGashaProductRateStatus status);
    public static bool IsLimited(PRISM.Module.Networking.IGashaProductRateStatus status);
}

// Namespace: PRISM.Domain
public class GashaRateExtensions
{
    public static System.Collections.Generic.List<PRISM.Module.Networking.IGashaProductRateStatus> GetNormalPickupRarityData(PRISM.Module.Networking.IGashaRateStatus status, int Rarity);
    public static System.Collections.Generic.List<PRISM.Module.Networking.IGashaProductRateStatus> GetNormalRarityDataAddPromisedOnlyRateZero(PRISM.Module.Networking.IGashaRateStatus status, int rarity, bool isPickUpOnly);
    public static bool IsProduceGasha(PRISM.Module.Networking.IGashaRateStatus status, PRISM.Definitions.MasterData masterData);
    public static bool IsCostumeGasha(PRISM.Module.Networking.IGashaRateStatus status);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IGashaProductRateStatus, int> <>9__0_1;
        public static System.Func<PRISM.Module.Networking.IGashaProductRateStatus, bool> <>9__1_2;
        public static System.Func<PRISM.Module.Networking.IGashaProductRateStatus, int> <>9__1_3;
        public static System.Func<PRISM.Module.Networking.IGashaProductRateStatus, bool> <>9__1_4;
        public static System.Func<PRISM.Module.Networking.IGashaProductRateStatus, int> <>9__1_5;
        public static System.Func<PRISM.Domain.ProductKeyWithAmount, bool> <>9__2_1;
        public static System.Func<PRISM.Module.Networking.IGashaProductRateStatus, bool> <>9__3_0;
        private int <GetNormalPickupRarityData>b__0_1(PRISM.Module.Networking.IGashaProductRateStatus x);
        private bool <GetNormalRarityDataAddPromisedOnlyRateZero>b__1_2(PRISM.Module.Networking.IGashaProductRateStatus x);
        private int <GetNormalRarityDataAddPromisedOnlyRateZero>b__1_3(PRISM.Module.Networking.IGashaProductRateStatus x);
        private bool <GetNormalRarityDataAddPromisedOnlyRateZero>b__1_4(PRISM.Module.Networking.IGashaProductRateStatus x);
        private int <GetNormalRarityDataAddPromisedOnlyRateZero>b__1_5(PRISM.Module.Networking.IGashaProductRateStatus x);
        private bool <IsProduceGasha>b__2_1(PRISM.Domain.ProductKeyWithAmount product);
        private bool <IsCostumeGasha>b__3_0(PRISM.Module.Networking.IGashaProductRateStatus x);
    }

    private class <>c__DisplayClass0_0
    {
        public int Rarity;
        private bool <GetNormalPickupRarityData>b__0(PRISM.Module.Networking.IGashaProductRateStatus x);
    }

    private class <>c__DisplayClass1_0
    {
        public int rarity;
        private bool <GetNormalRarityDataAddPromisedOnlyRateZero>b__0(PRISM.Module.Networking.IGashaProductRateStatus x);
        private bool <GetNormalRarityDataAddPromisedOnlyRateZero>b__1(PRISM.Module.Networking.IGashaProductRateStatus x);
    }

    private class <>c__DisplayClass1_1
    {
        public PRISM.Module.Networking.IGashaProductRateStatus item;
        private bool <GetNormalRarityDataAddPromisedOnlyRateZero>b__6(PRISM.Module.Networking.IGashaProductRateStatus x);
    }

    private class <>c__DisplayClass2_0
    {
        public PRISM.Definitions.MasterData masterData;
        private bool <IsProduceGasha>b__0(PRISM.Module.Networking.IGashaProductRateStatus x);
    }
}

// Namespace: PRISM.Domain
public class IdolParameterExtensions
{
    public static PRISM.Module.Networking.IProduceParameterStatus ConvertAsLowerRank(PRISM.Definitions.IdolParameter status);
}

// Namespace: PRISM.Domain
public class IdolSkillExtensions
{
    public static int GetIconId(PRISM.Module.Networking.IInProduceIdolSkillStatus status);
    public static int GetIconId(PRISM.Module.Networking.IFesIdolAttachedIdolSkillStatus status);
    public static int GetIconId(PRISM.Module.Networking.IRivalSkillStatus status);
    public static int GetIconId(PRISM.Module.Networking.IInGameSkillStatus status);
}

// Namespace: PRISM.Domain
public class MissionExtensions
{
    public static int GetSortParam(MissionState state);
    public static bool IsExpired(PRISM.Module.Networking.IMissionStatus status);
}

// Namespace: PRISM.Domain
public class ParameterVariationExtensions
{
    public static bool IsChangeParameter(PRISM.Module.Networking.IParameterVariationStatus status);
}

// Namespace: PRISM.Domain
public class ProduceCardExtensions
{
    public static int GetUnitId(PRISM.Module.Networking.IProduceCardStatus status);
    public static bool IsDoubleCard(PRISM.Module.Networking.IProduceCardStatus status);
    public static int GetMaxRank(PRISM.Module.Networking.IProduceCardStatus status, DoubleCardUseType phase);
    public static int GetContentGroupTypeId(PRISM.Module.Networking.IProduceCardStatus status);
    public static System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceActionEffectStatus> GetCurrentActionEffectList(PRISM.Module.Networking.IProduceCardStatus status, SimplePhase phase);
    public static System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceActionEffectStatus> GetActionEffectList(PRISM.Module.Networking.IProduceCardStatus status, SimplePhase phase, int rank);
    public static System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceCardContentStatus> GetCardPerRankList(PRISM.Module.Networking.IProduceCardStatus status, SimplePhase phase);
    public static PRISM.Module.Networking.IProduceCardContentStatus GetCurrentCardPerRank(PRISM.Module.Networking.IProduceCardStatus status, SimplePhase phase);
    public static PRISM.Module.Networking.IProduceCardContentStatus GetCardPerRank(PRISM.Module.Networking.IProduceCardStatus status, SimplePhase phase, int rank);
    public static T GetCardInfo<T>(PRISM.Module.Networking.IProduceCardStatus status, System.Func<PRISM.Module.Networking.IProduceCardContentStatus, T> getResultFunc, System.Func<T, T, T> mixResultFunc, T initParam, DoubleCardUseType phase, int rank);
    public static PRISM.Domain.BitProduceParameterType GetAppealTypes(PRISM.Module.Networking.IProduceCardStatus status, DoubleCardUseType phase, int rank);
    public static int GetCost(PRISM.Module.Networking.IProduceCardStatus status, DoubleCardUseType phase, int rank);
    private static int _getCardMaxRankPerPhase(PRISM.Module.Networking.IProduceCardStatus status, SimplePhase phase);

    public enum SimplePhase : System.Enum
    {
        public int value__;
        public static SimplePhase Nichika;
        public static SimplePhase Mikoto;
    }

    private class <>O
    {
        public static System.Func<int, int, int> <0>__Max;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IProduceCardContentStatus, int, bool> <>9__9_0;
        public static System.Func<PRISM.Module.Networking.IProduceCardContentStatus, PRISM.Domain.BitProduceParameterType> <>9__11_0;
        public static System.Func<PRISM.Domain.BitProduceParameterType, PRISM.Domain.BitProduceParameterType, PRISM.Domain.BitProduceParameterType> <>9__11_1;
        public static System.Func<PRISM.Module.Networking.IProduceCardContentStatus, int> <>9__12_0;
        public static System.Func<PRISM.Module.Networking.IProduceCardContentStatus, int, int> <>9__13_0;
        private bool <GetCardPerRank>b__9_0(PRISM.Module.Networking.IProduceCardContentStatus c, int state);
        private PRISM.Domain.BitProduceParameterType <GetAppealTypes>b__11_0(PRISM.Module.Networking.IProduceCardContentStatus status);
        private PRISM.Domain.BitProduceParameterType <GetAppealTypes>b__11_1(PRISM.Domain.BitProduceParameterType appealType, PRISM.Domain.BitProduceParameterType addedAppealType);
        private int <GetCost>b__12_0(PRISM.Module.Networking.IProduceCardContentStatus status);
        private int <_getCardMaxRankPerPhase>b__13_0(PRISM.Module.Networking.IProduceCardContentStatus c, int _);
    }
}

// Namespace: PRISM.Domain
public class ProduceIdolExtensions
{
    public static float GetExpRate(PRISM.Module.Networking.IProduceIdolStatus idol);
    public static PRISM.Module.Networking.IProduceIdolStatus ToProduceIdol(PRISM.Module.Networking.IMaximumProduceIdolStatus maximumProduceIdol);
}

// Namespace: PRISM.Domain
public class ProduceParameterExtensions
{
    public static PRISM.Module.Networking.IProduceParameterStatus CreateAsLowerRank(int vocal, int dance, int visual, int mental);
    public static int GetTotal(PRISM.Module.Networking.IProduceParameterStatus status);
    public static PRISM.Module.Networking.IProduceParameterStatus Merge(PRISM.Module.Networking.IProduceParameterStatus status, PRISM.Module.Networking.IIdolParameterStatus target);
    public static PRISM.Module.Networking.IProduceParameterStatus GetUnitParameter(PRISM.Module.Networking.IProduceParameterStatus status, PRISM.Module.Networking.IProduceParameterStatus[] idolParameters);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IProduceParameterStatus, int> <>9__3_0;
        public static System.Func<PRISM.Module.Networking.IProduceParameterStatus, int> <>9__3_1;
        public static System.Func<PRISM.Module.Networking.IProduceParameterStatus, int> <>9__3_2;
        public static System.Func<PRISM.Module.Networking.IProduceParameterStatus, int> <>9__3_3;
        private int <GetUnitParameter>b__3_0(PRISM.Module.Networking.IProduceParameterStatus x);
        private int <GetUnitParameter>b__3_1(PRISM.Module.Networking.IProduceParameterStatus x);
        private int <GetUnitParameter>b__3_2(PRISM.Module.Networking.IProduceParameterStatus x);
        private int <GetUnitParameter>b__3_3(PRISM.Module.Networking.IProduceParameterStatus x);
    }
}

// Namespace: PRISM.Domain
public class ProductTypeExtensions
{
    public static bool IsStory(ProductType type);
}

// Namespace: PRISM.Domain
public class StoryExtensions
{
    public static bool IsUnread(PRISM.Module.Networking.IStoryStatus self);
    public static bool IsRead(PRISM.Module.Networking.IStoryStatus self);
    public static bool IsLocked(PRISM.Module.Networking.IStoryStatus self);
}

// Namespace: PRISM.Domain
public class StoryIDExtensions
{
    public static string GetThumbnailPath(PRISM.Module.Networking.IStoryIDStatus id);
    public static bool ElementEqual(PRISM.Module.Networking.IStoryIDStatus left, PRISM.Module.Networking.IStoryIDStatus right);
}

// Namespace: PRISM.Domain
public class SupportCharacterExtensions
{
    public static PRISM.Module.Networking.ISupportCharacterStatus ToSupportCharacter(PRISM.Module.Networking.IInProduceSupportCharacterStatus inProduceSupportCharacter);
    public static PRISM.Module.Networking.ISupportCharacterStatus ToSupportCharacter(PRISM.Module.Networking.IMaximumSupportCharacterStatus maximumSupportCharacter);
    public static PRISM.Module.Networking.IPotentialSupportSkillStatus ToPotentialSupportSkill(PRISM.Module.Networking.IGettablePotentialSupportSkillStatus status);
    public static PRISM.Module.Networking.IPotentialSupportSkillStatus ToPotentialSupportSkill(PRISM.Module.Networking.IInProducePotentialSupportSkillStatus status);

    private class <>c__DisplayClass1_0
    {
        public PRISM.Definitions.MstSupportCharacter supportCharacter;
        public PRISM.Module.Networking.IMaximumSupportCharacterStatus maximumSupportCharacter;
        private bool <ToSupportCharacter>b__0(PRISM.Definitions.MstSupportCharacterLevelExp x);
    }
}

// Namespace: PRISM.Domain
public class TutorialExtensions
{
    public static bool IsFinished(PRISM.Module.Networking.ITutorialStatus status);
    public static PRISM.Module.Networking.ITutorialStatus GetTutorial(PRISM.Module.Networking.ISelfStatus status, TutorialCategory category);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Definitions.MstTutorial, int> <>9__0_1;
        private int <IsFinished>b__0_1(PRISM.Definitions.MstTutorial x);
    }

    private class <>c__DisplayClass0_0
    {
        public PRISM.Module.Networking.ITutorialStatus status;
        private bool <IsFinished>b__0(PRISM.Definitions.MstTutorial x);
    }

    private class <>c__DisplayClass1_0
    {
        public TutorialCategory category;
        private bool <GetTutorial>b__0(PRISM.Module.Networking.ITutorialStatus x);
    }
}

// Namespace: PRISM.Domain.Cache
private class AccessoryCache : PRISM.Domain.Cache.ICache
{
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.IAccessoryStatus> accessoryMap;
    private UniRx.Subject<System.ValueTuple<int, PRISM.Module.Networking.IAccessoryStatus>> onAddAccessory;
    private bool <IsReady>k__BackingField;
    public bool IsReady { get; set; }
    public System.IObservable<System.ValueTuple<int, PRISM.Module.Networking.IAccessoryStatus>> OnAddAccessory { get; set; }
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IAccessoryStatus> GetAccessoryList();
    public PRISM.Module.Networking.IAccessoryStatus GetAccessory(int key);
    public System.Collections.Generic.IList<PRISM.Module.Networking.IAccessoryStatus> GetMatchAccessoryList(System.Collections.Generic.IEnumerable<int> keys);
    public System.Collections.Generic.IEnumerable<int> GetResourceIdList(System.Collections.Generic.IEnumerable<int> keys);
    public void Replace(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IAccessoryStatus> accessories);
    public void Store(PRISM.Module.Networking.IAccessoryStatus accessory);
    public void StoreList(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IAccessoryStatus> accessoryList);
    public void Remove(int key);
    public void RemoveList(System.Collections.Generic.IEnumerable<int> keys);
    private int <GetResourceIdList>b__11_0(int key);
}

// Namespace: PRISM.Domain.Cache
private class CostumeCache : PRISM.Domain.Cache.ICache
{
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.ICostumeStatus> costumeMap;
    private UniRx.Subject<System.ValueTuple<int, PRISM.Module.Networking.ICostumeStatus>> onAddCostume;
    private bool <IsReady>k__BackingField;
    public bool IsReady { get; set; }
    public UniRx.Subject<System.ValueTuple<int, PRISM.Module.Networking.ICostumeStatus>> OnAddCostume { get; set; }
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ICostumeStatus> GetCostumeList();
    public PRISM.Module.Networking.ICostumeStatus GetCostume(int key);
    public PRISM.Module.Networking.ICostumeStatus GetCostumeFromResourceId(int charaId, int resourceId, ProductType productType);
    public int GetResourceId(int key);
    public void Replace(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ICostumeStatus> costume);
    public void Store(PRISM.Module.Networking.ICostumeStatus costume);
    public void StoreList(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ICostumeStatus> costumeList);
    public void Remove(int key);
    public void RemoveList(System.Collections.Generic.IEnumerable<int> keys);

    private class <>c__DisplayClass10_0
    {
        public ProductType productType;
        public int charaId;
        public int resourceId;
        private bool <GetCostumeFromResourceId>b__0(PRISM.Module.Networking.ICostumeStatus x);
    }
}

// Namespace: PRISM.Domain.Cache
private class CostumeSetCache : PRISM.Domain.Cache.ICache
{
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.ICostumeSetStatus> costumeSetMap;
    private UniRx.Subject<System.ValueTuple<int, PRISM.Module.Networking.ICostumeSetStatus>> onAddCostumeSet;
    private bool <IsReady>k__BackingField;
    public bool IsReady { get; set; }
    public System.IObservable<System.ValueTuple<int, PRISM.Module.Networking.ICostumeSetStatus>> OnAddCostumeSet { get; set; }
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ICostumeSetStatus> GetCostumeSetList();
    public PRISM.Module.Networking.ICostumeSetStatus GetCostumeSet(int key);
    public void Replace(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ICostumeSetStatus> costumeSet);
    public void Store(PRISM.Module.Networking.ICostumeSetStatus costumeSet);
    public void StoreList(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ICostumeSetStatus> costumeSet);
    public void Remove(int key);
    public void RemoveList(System.Collections.Generic.IEnumerable<int> keys);
}

// Namespace: PRISM.Domain.Cache
private class DmmGamesCache : PRISM.Domain.Cache.ICache
{
    private PRISM.Module.Networking.IGetDmmGamesAPITokenReply sourceData;
    private bool <IsReady>k__BackingField;
    public bool IsReady { get; set; }
    public void Store(PRISM.Module.Networking.IGetDmmGamesAPITokenReply status);
    public PRISM.Module.Networking.IGetDmmGamesAPITokenReply GetAPIToken();
}

// Namespace: PRISM.Domain.Cache
private class FesUnitCache : PRISM.Domain.Cache.ICache
{
    private System.Collections.Generic.Dictionary<string, PRISM.Module.Networking.IFesUnitStatus> fesUnit;
    private bool <IsReady>k__BackingField;
    public bool IsReady { get; set; }
    public int Count { get; set; }
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IFesUnitStatus> GetFesUnit();
    public PRISM.Module.Networking.IFesUnitStatus GetFesUnit(string key);
    public void Replace(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IFesUnitStatus> unit);
    public void Store(PRISM.Module.Networking.IFesUnitStatus unit);
    public void StoreInheritanceCount(PRISM.Module.Networking.IInheritanceFesUnitStatus unit);
    public void Remove(string key);
    public void RemoveList(System.Collections.Generic.IEnumerable<string> keys);
    public void Reset();
}

// Namespace: PRISM.Domain.Cache
private class GameSettingCache : PRISM.Domain.Cache.ICache
{
    private PRISM.Module.Networking.IGameSettingStatus <Settings>k__BackingField;
    private bool <IsReady>k__BackingField;
    public PRISM.Module.Networking.IGameSettingStatus Settings { get; set; }
    public bool IsReady { get; set; }
    public void Store(PRISM.Module.Networking.IGameSettingStatus gameSetting);
}

// Namespace: PRISM.Domain.Cache
private class GameVersionCache : PRISM.Domain.Cache.ICache
{
    private PRISM.Module.Networking.IGetVersionReply sourceData;
    private bool <IsReady>k__BackingField;
    public bool IsReady { get; set; }
    public void Store(PRISM.Module.Networking.IGetVersionReply status);
    public PRISM.Module.Networking.IGetVersionReply GetVersion();
}

// Namespace: PRISM.Domain.Cache
public class GashaCashe : PRISM.Domain.Cache.ICache
{
    private System.DateTime openExchangeExpiryDateCheckTime;
    public bool IsOpenExchangeExpiryDateInfo { get; set; }
    public bool IsReady { get; set; }
    public void OpenExchangeExpiryDateInfoDone(System.DateTime checkTime);
}

// Namespace: PRISM.Domain.Cache
private class HairstyleCache : PRISM.Domain.Cache.ICache
{
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.IHairstyleStatus> hairstyleMap;
    private UniRx.Subject<System.ValueTuple<int, PRISM.Module.Networking.IHairstyleStatus>> onAddHairstyle;
    private bool <IsReady>k__BackingField;
    public bool IsReady { get; set; }
    public System.IObservable<System.ValueTuple<int, PRISM.Module.Networking.IHairstyleStatus>> OnAddHairstyle { get; set; }
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IHairstyleStatus> GetHairstyleList();
    public PRISM.Module.Networking.IHairstyleStatus GetHairstyle(int key);
    public System.ValueTuple<int, System.Collections.Generic.IEnumerable<int>> GetResourceId(int key);
    public void Replace(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IHairstyleStatus> hairstyles);
    public void Store(PRISM.Module.Networking.IHairstyleStatus hairstyle);
    public void StoreList(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IHairstyleStatus> hairstyleList);
    public void Remove(int key);
    public void RemoveList(System.Collections.Generic.IEnumerable<int> keys);
}

// Namespace: PRISM.Domain.Cache
public class HomeCashe : PRISM.Domain.Cache.ICache
{
    private PRISM.Module.Networking.ITmpGetHomeReply homeReply;
    private System.Nullable<System.DateTime> cacheDateTime;
    private bool <IsCutSceneDone>k__BackingField;
    private PRISM.UnitIdol <Hazuki>k__BackingField;
    public PRISM.Module.Networking.ITmpGetHomeReply HomeReply { get; set; }
    public bool IsCutSceneDone { get; set; }
    public PRISM.UnitIdol Hazuki { get; set; }
    public bool IsReady { get; set; }
    public void UpdateHome(PRISM.Module.Networking.ITmpGetHomeReply homeReply);
    public void UpdateIsCutSceneDone(bool isCutSceneDone);
    public void ClearCache();
    public void SetHazukiCostume(PRISM.Module.Networking.ICharacterCostumeStatus costume);
}

// Namespace: PRISM.Domain.Cache
private class IdolBaseCache : PRISM.Domain.Cache.ICache, PRISM.Domain.ICachedIdolService
{
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.IIdolBaseStatus> idolBaseMap;
    private bool <IsReady>k__BackingField;
    public bool IsReady { get; set; }
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IIdolBaseStatus> GetIdolBaseList();
    public PRISM.Module.Networking.IIdolBaseStatus GetIdolBase(int key);
    public void Replace(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IIdolBaseStatus> idols);
    public void StoreList(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IIdolBaseRewardStatus> rewards);
    public void StoreList(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IIdolBaseStatus> list);
    public void Store(PRISM.Module.Networking.IIdolBaseRewardStatus status);
    public void Store(PRISM.Module.Networking.IIdolBaseStatus idol);
    public void Remove(int key);
    public void RemoveList(System.Collections.Generic.IEnumerable<int> keys);
}

// Namespace: PRISM.Domain.Cache
public class IntroductionCache : PRISM.Domain.Cache.ICache
{
    private PRISM.Module.Networking.IExecuteIntroductionReply introductionReply;
    private int introductionIndex;
    public PRISM.Module.Networking.IExecuteIntroductionReply IntroductionReply { get; set; }
    public int IntroductionIndex { get; set; }
    public bool IsReady { get; set; }
    public void UpdateIntroduction(PRISM.Module.Networking.IExecuteIntroductionReply reply);
    public void SetIntroductionIndex(int index);
    public void ClearCache();
}

// Namespace: PRISM.Domain.Cache
private class LiveUnitCache : PRISM.Domain.Cache.ICache
{
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.ILiveUnitDetailStatus> liveUnits;
    private bool <IsReady>k__BackingField;
    public bool IsReady { get; set; }
    public System.Collections.Generic.IReadOnlyDictionary<int, PRISM.Module.Networking.ILiveUnitDetailStatus> Data { get; set; }
    public void Replace(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ILiveUnitDetailStatus> units);
    public void Store(PRISM.Module.Networking.ILiveUnitDetailStatus unit);
    public void Remove(int unitNumber);
}

// Namespace: PRISM.Domain.Cache
private class MVCache : PRISM.Domain.Cache.ICache
{
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.IMvUnitStatus> mvUnits;
    private bool <IsReady>k__BackingField;
    public bool IsReady { get; set; }
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IMvUnitStatus> GetAllUnits();
    public void Replace(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IMvUnitStatus> units);
    public void Store(PRISM.Module.Networking.IMvUnitStatus unit);
    public void Remove(int key);
    public void RemoveList(System.Collections.Generic.IEnumerable<int> keys);
}

// Namespace: PRISM.Domain.Cache
private class OurStreamCache : PRISM.Domain.Cache.ICache
{
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.ILiveStreamProgramStatus> <LiveStreamCache>k__BackingField;
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.IArchiveStreamProgramStatus> <ArchiveStreamCache>k__BackingField;
    private bool <IsReady>k__BackingField;
    public System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.ILiveStreamProgramStatus> LiveStreamCache { get; set; }
    public System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.IArchiveStreamProgramStatus> ArchiveStreamCache { get; set; }
    public bool IsReady { get; set; }
    public void Store(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ILiveStreamProgramStatus> liveStreamList);
    public void Store(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IArchiveStreamProgramStatus> archiveStreamList);
    public void Store(PRISM.Module.Networking.IArchiveStreamProgramStatus archiveStream);
    public void UpdateCachePremium(PRISM.Module.Networking.IReleasePremiumStreamReply releasePremium);
    public void UpdateCacheArchiveDisplayed(int mstStreamProgramId);
    public void ClearLiveCache();
    public void ClearArchiveCache();
}

// Namespace: PRISM.Domain.Cache
private class ProduceIdolCache : PRISM.Domain.Cache.ICache, PRISM.Domain.ICachedProduceIdolService
{
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.IProduceIdolStatus> produceIdols;
    private bool <IsReady>k__BackingField;
    private UniRx.Subject<System.ValueTuple<int, PRISM.Module.Networking.IProduceIdolStatus>> <OnChangeIdol>k__BackingField;
    public bool IsReady { get; set; }
    public UniRx.Subject<System.ValueTuple<int, PRISM.Module.Networking.IProduceIdolStatus>> OnChangeIdol { get; set; }
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IProduceIdolStatus> GetProduceIdols();
    public PRISM.Module.Networking.IProduceIdolStatus GetProduceIdol(int key);
    public void Replace(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceIdolStatus> idols);
    public void Store(PRISM.Module.Networking.IProduceIdolStatus idol);
    public void StoreList(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceIdolStatus> idols);
    public void Remove(int key);
    public void RemoveList(System.Collections.Generic.IEnumerable<int> keys);
}

// Namespace: PRISM.Domain.Cache
private class ProduceLogCache : PRISM.Domain.Cache.ICache
{
    private bool <IsReady>k__BackingField;
    public System.Collections.Generic.List<PRISM.Legacy.ProduceLogData> LogDatas;
    public bool IsReady { get; set; }
    public void Store(PRISM.Legacy.ProduceLogData data);
    public bool IsSameTypeCurrentData(LogItemType type);
    public PRISM.Legacy.ProduceLogData GetCurrentDataSafe(LogItemType type, PRISM.Module.Networking.IProduceBaseInfoStatus info);
    public PRISM.Legacy.ProduceLogData GetCurrentDataForUpdate(LogItemType type, PRISM.Module.Networking.IProduceBaseInfoStatus info);
    public PRISM.Legacy.ProduceLogData GetCurrentADVData();
    public void Clear();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Legacy.ProduceLogData, bool> <>9__9_0;
        private bool <GetCurrentADVData>b__9_0(PRISM.Legacy.ProduceLogData x);
    }

    private class <>c__DisplayClass8_0
    {
        public LogItemType type;
        private bool <GetCurrentDataForUpdate>b__0(PRISM.Legacy.ProduceLogData x);
    }
}

// Namespace: PRISM.Domain.Cache
private class ProductCache : PRISM.Domain.Cache.ICache
{
    private System.Collections.Generic.Dictionary<PRISM.Domain.ProductKey, PRISM.Module.Networking.IHavingProductStatus> havingProducts;
    private System.Collections.Generic.Dictionary<PRISM.Domain.ProductKey, PRISM.Module.Networking.IItemRemindStatus> itemReminds;
    private bool <IsReady>k__BackingField;
    private UniRx.Subject<System.ValueTuple<PRISM.Domain.ProductKey, PRISM.Module.Networking.IHavingProductStatus>> <OnChangeProduct>k__BackingField;
    public bool IsReady { get; set; }
    public UniRx.Subject<System.ValueTuple<PRISM.Domain.ProductKey, PRISM.Module.Networking.IHavingProductStatus>> OnChangeProduct { get; set; }
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IHavingProductStatus> GetHavingProducts();
    public PRISM.Module.Networking.IHavingProductStatus GetHavingProduct(PRISM.Domain.ProductKey key);
    public void Replace(PRISM.Module.Networking.IGetHavingItemAllReply reply);
    public void Store(PRISM.Module.Networking.IHavingProductStatus product);
    public void StoreList(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IHavingProductStatus> products);
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IItemRemindStatus> GetItemReminds();
}

// Namespace: PRISM.Domain.Cache
private class SongCache : PRISM.Domain.Cache.ICache
{
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.ISongStatus> songDic;
    private PRISM.Module.Networking.ITotalHighScoreRatingStatus totalHighScoreRating;
    private PRISM.Module.Networking.ITotalTechnicalRatingStatus totalTechnicalRating;
    private System.Collections.Generic.Dictionary<FavoriteSongSlot, PRISM.Module.Networking.IFavoriteSongStatus> favoriteSongDic;
    private bool <IsReady>k__BackingField;
    public bool IsReady { get; set; }
    public void Replace(PRISM.Module.Networking.IGetSongListReply status);
    public void Store(PRISM.Module.Networking.ISongStatus song);
    public void Store(PRISM.Module.Networking.ITotalHighScoreRatingStatus rating);
    public void Store(PRISM.Module.Networking.ITotalTechnicalRatingStatus rating);
    public void Store(PRISM.Module.Networking.IFavoriteSongStatus favorite);
    public PRISM.Module.Networking.IGetSongListReply GetSongListReply();
    public PRISM.Domain.SongCacheForResult GetSongCacheForResult(int mstSongId);
    public bool IsShinyEnabled();
}

// Namespace: PRISM.Domain.Cache
private class StaminaCache : PRISM.Domain.Cache.ICache
{
    private System.Collections.Generic.Dictionary<StaminaType, PRISM.Stamina.StaminaModel> dic;
    private bool <IsReady>k__BackingField;
    public bool IsReady { get; set; }
    public void StoreList(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IStaminaStatus> staminaList);
    public void Store(PRISM.Module.Networking.IStaminaStatus stamina);
    public PRISM.Stamina.StaminaModel Get(StaminaType type);
}

// Namespace: PRISM.Domain.Cache
public class StoryCache : PRISM.Domain.Cache.ICache
{
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.IMainStoryStatus> mainStoriesCache;
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.IIdolStoryStatus> idolStoriesCache;
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.IEventStoryStatus> eventStoriesCache;
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.IExtraStoryStatus> extraStoriesCache;
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.IProduceIdolScenarioStatus> produceIdolScenariosCache;
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.ISupportCharacterScenarioStatus> supportCharacterScenariosCache;
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.IProduceMainScenarioStatus> produceMainScenariosCache;
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.IProduceMainIdolScenarioStatus> produceMainIdolScenariosCache;
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.IEpisodeZeroStoryStatus> episodeZeroStoryCache;
    private bool <IsReady>k__BackingField;
    public System.Collections.Generic.IReadOnlyDictionary<int, PRISM.Module.Networking.IMainStoryStatus> MainStoriesCache { get; set; }
    public System.Collections.Generic.IReadOnlyDictionary<int, PRISM.Module.Networking.IIdolStoryStatus> IdolStoriesCache { get; set; }
    public System.Collections.Generic.IReadOnlyDictionary<int, PRISM.Module.Networking.IEventStoryStatus> EventStoriesCache { get; set; }
    public System.Collections.Generic.IReadOnlyDictionary<int, PRISM.Module.Networking.IExtraStoryStatus> ExtraStoriesCache { get; set; }
    public System.Collections.Generic.IReadOnlyDictionary<int, PRISM.Module.Networking.IProduceIdolScenarioStatus> ProduceIdolScenariosCache { get; set; }
    public System.Collections.Generic.IReadOnlyDictionary<int, PRISM.Module.Networking.ISupportCharacterScenarioStatus> SupportCharacterScenariosCache { get; set; }
    public System.Collections.Generic.IReadOnlyDictionary<int, PRISM.Module.Networking.IProduceMainScenarioStatus> ProduceMainScenariosCache { get; set; }
    public System.Collections.Generic.IReadOnlyDictionary<int, PRISM.Module.Networking.IProduceMainIdolScenarioStatus> ProduceMainIdolScenariosCache { get; set; }
    public System.Collections.Generic.IReadOnlyDictionary<int, PRISM.Module.Networking.IEpisodeZeroStoryStatus> EpisodeZeroStoryCache { get; set; }
    public bool IsReady { get; set; }
    public void Store(PRISM.Module.Networking.IGetStoryListReply reply);
    public void Store(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IMainStoryStatus> stories);
    public void Store(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IIdolStoryStatus> stories);
    public void Store(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IEventStoryStatus> stories);
    public void Store(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IExtraStoryStatus> stories);
    public void Store(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceIdolScenarioStatus> scenarios);
    public void Store(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISupportCharacterScenarioStatus> scenarios);
    public void Store(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceMainScenarioStatus> scenarios);
    public void Store(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceMainIdolScenarioStatus> scenarios);
    public void Store(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IEpisodeZeroStoryStatus> stories);
    public void OverwriteStory(PRISM.Module.Networking.IStoryStatus newStory);
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IStoryStatus> GetStories(PRISM.Definitions.Story.StoryCategoryType storyType);
    public PRISM.Module.Networking.IGetStoryListReply CreateGetStoryListReplyFromCache();
    public void Reset();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IEpisodeZeroStoryStatus, PRISM.Module.Networking.IStoryStatus> <>9__42_0;
        public static System.Func<PRISM.Module.Networking.IProduceMainScenarioStatus, PRISM.Module.Networking.IStoryStatus> <>9__42_1;
        public static System.Func<PRISM.Module.Networking.IProduceIdolScenarioStatus, PRISM.Module.Networking.IStoryStatus> <>9__42_2;
        public static System.Func<PRISM.Module.Networking.IEventStoryStatus, PRISM.Module.Networking.IStoryStatus> <>9__42_3;
        public static System.Func<PRISM.Module.Networking.IProduceIdolScenarioStatus, PRISM.Module.Networking.IStoryStatus> <>9__42_4;
        public static System.Func<PRISM.Module.Networking.ISupportCharacterScenarioStatus, PRISM.Module.Networking.IStoryStatus> <>9__42_5;
        public static System.Func<PRISM.Module.Networking.IMainStoryStatus, PRISM.Module.Networking.IStoryStatus> <>9__42_6;
        public static System.Func<PRISM.Module.Networking.IIdolStoryStatus, PRISM.Module.Networking.IStoryStatus> <>9__42_7;
        public static System.Func<PRISM.Module.Networking.IExtraStoryStatus, PRISM.Module.Networking.IStoryStatus> <>9__42_8;
        private PRISM.Module.Networking.IStoryStatus <GetStories>b__42_0(PRISM.Module.Networking.IEpisodeZeroStoryStatus x);
        private PRISM.Module.Networking.IStoryStatus <GetStories>b__42_1(PRISM.Module.Networking.IProduceMainScenarioStatus x);
        private PRISM.Module.Networking.IStoryStatus <GetStories>b__42_2(PRISM.Module.Networking.IProduceIdolScenarioStatus x);
        private PRISM.Module.Networking.IStoryStatus <GetStories>b__42_3(PRISM.Module.Networking.IEventStoryStatus x);
        private PRISM.Module.Networking.IStoryStatus <GetStories>b__42_4(PRISM.Module.Networking.IProduceIdolScenarioStatus x);
        private PRISM.Module.Networking.IStoryStatus <GetStories>b__42_5(PRISM.Module.Networking.ISupportCharacterScenarioStatus x);
        private PRISM.Module.Networking.IStoryStatus <GetStories>b__42_6(PRISM.Module.Networking.IMainStoryStatus x);
        private PRISM.Module.Networking.IStoryStatus <GetStories>b__42_7(PRISM.Module.Networking.IIdolStoryStatus x);
        private PRISM.Module.Networking.IStoryStatus <GetStories>b__42_8(PRISM.Module.Networking.IExtraStoryStatus x);
    }
}

// Namespace: PRISM.Domain.Cache
private class SupportCharacterCache : PRISM.Domain.Cache.ICache, PRISM.Domain.ICachedSupportCharacterService
{
    private System.Collections.Generic.Dictionary<int, PRISM.Module.Networking.ISupportCharacterStatus> supportCharacters;
    private bool <IsReady>k__BackingField;
    public bool IsReady { get; set; }
    public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISupportCharacterStatus> GetSupportCharacters();
    public PRISM.Module.Networking.ISupportCharacterStatus GetSupportCharacter(int key);
    public void Replace(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISupportCharacterStatus> characters);
    public void Store(PRISM.Module.Networking.ISupportCharacterStatus character);
    public void StoreList(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISupportCharacterStatus> characters);
    public void Remove(int key);
    public void RemoveList(System.Collections.Generic.IEnumerable<int> keys);
}

// Namespace: PRISM.Domain.Cache
private class UserCache : PRISM.Domain.Cache.ICache
{
    private PRISM.Module.Networking.ISelfStatus user;
    private bool <IsReady>k__BackingField;
    public bool IsReady { get; set; }
    public void Store(PRISM.Module.Networking.ISelfStatus status);
    public void Store(PRISM.Module.Networking.IUserProfileStatus status);
    public PRISM.Module.Networking.ISelfStatus GetUser();
}

// Namespace: PRISM.Domain.Cache
private interface ICache
{
    public bool IsReady { get; set; }
}

// Namespace: PRISM.Domain.Cache
private class RuntimeCache
{
    public PRISM.Domain.Cache.UserCache User;
    public PRISM.Domain.Cache.StaminaCache Stamina;
    public PRISM.Domain.Cache.ProductCache Product;
    public PRISM.Domain.Cache.GameVersionCache GameVersion;
    public PRISM.Domain.Cache.GameSettingCache GameSetting;
    public PRISM.Domain.Cache.ProduceIdolCache ProduceIdol;
    public PRISM.Domain.Cache.SupportCharacterCache SupportCharacter;
    public PRISM.Domain.Cache.LiveUnitCache LiveUnit;
    public PRISM.Domain.Cache.MVCache Mv;
    public PRISM.Domain.Cache.FesUnitCache FesUnit;
    public PRISM.Domain.Cache.IdolBaseCache IdolBase;
    public PRISM.Domain.Cache.CostumeSetCache CostumeSet;
    public PRISM.Domain.Cache.CostumeCache Costume;
    public PRISM.Domain.Cache.HairstyleCache Hairstyle;
    public PRISM.Domain.Cache.AccessoryCache Accessory;
    public PRISM.Domain.Cache.SongCache Song;
    public PRISM.Domain.Cache.OurStreamCache OurStream;
    public PRISM.Domain.Cache.HomeCashe Home;
    public PRISM.Domain.Cache.ProduceLogCache ProduceLog;
    public PRISM.Domain.Cache.StoryCache Story;
    public PRISM.Domain.Cache.IntroductionCache Introduction;
    public PRISM.Domain.Cache.GashaCashe Gasha;
    public PRISM.Domain.Cache.DmmGamesCache DmmGamesCache;
    public void Store(PRISM.Module.Networking.IHavingProductGroupStatus status);
    public void ResetLargeCaches();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IHavingProductStatus, bool> <>9__23_0;
        private bool <Store>b__23_0(PRISM.Module.Networking.IHavingProductStatus x);
    }
}

// Namespace: PRISM.DebugTool
public class ViewPMVDebug : ENTERPRISE.ViewBase
{
    private ViewPMVDebugParameter prm;
    private Cysharp.Threading.Tasks.UniTask preloadTask;
    private int unitID;
    protected Cysharp.Threading.Tasks.UniTask _initializeAsync();
    protected Cysharp.Threading.Tasks.UniTask _beginViewAsync();
    protected Cysharp.Threading.Tasks.UniTask _onBeginIdleAsync();
    protected Cysharp.Threading.Tasks.UniTask _terminateAsync();
    private void _jumpProduceMV();
    private Cysharp.Threading.Tasks.UniTask _requestProduceMvAndPreloadAsync();

    public class ViewPMVDebugParameter : ENTERPRISE.IViewParameter
    {
        public bool IsDebugPMV;
        public string debugMv;
        public int debugUnit;
        public int removingCSCount;
        public bool isSelectFile;
        public bool isArEffect;
        public string selectFileName;
        public string selectText;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<bool> <>9__9_0;
        public static System.Func<string, bool> <>9__9_1;
        private bool <_requestProduceMvAndPreloadAsync>b__9_0();
        private bool <_requestProduceMvAndPreloadAsync>b__9_1(string _);
    }

    private class <>c__DisplayClass9_0
    {
        public PRISM.DebugTool.ViewPMVDebug <>4__this;
        public System.Collections.Generic.Dictionary<string, string> tempSelectDic;
        private bool <_requestProduceMvAndPreloadAsync>b__2(string id);
    }

    private struct <_requestProduceMvAndPreloadAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.DebugTool.ViewPMVDebug <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.DebugTool
public interface IPmvDebugOptionPopupCaller : PRISM.Legacy.ILegacyCaller
{
    public Cysharp.Threading.Tasks.UniTask<ENTERPRISE.IViewParameter> ShowAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Data
public class LegacySaveDataContainer : Gleipnir.Savedata.SavedataBase
{
    public PRISM.Data.LoginUserData LoginUser;
    public PRISM.Common.BadgeSaveData Badge;
    public PRISM.HowToPlayPopupSaveData HowToPlayPopup;
    public PRISM.RhythmGame.RhythmGameOption RhythmGameOption;
    public PRISM.Live.LiveCostumeChangeSaveData LiveCostumeChange;
    public PRISM.Live.LiveCostumeChangeSaveData CasualCostumeChange;
    public PRISM.Live.LiveMVOption LiveMVOption;
    public PRISM.Live.LiveTokenSaveData LiveToken;
    public PRISM.Live.LiveMVUnitConfirmationSaveData LiveMVUnitConfirmation;
    public PRISM.Live.LiveMusicSelectionSaveData LiveMusicSelection;
    public PRISM.Live.LiveUnitConfirmationSaveData LiveUnitConfirmation;
    public PRISM.Purchase.PurchaseLocalSave Purchase;
    public PRISM.Exchange.ExchangeSaveData Exchange;
    public PRISM.Gasha.GashaLocalSave Gasha;
    public PRISM.Gasha.GashaExchangeExpiryDateInfoSave GashaExchangeExpiryDateInfo;
    public PRISM.Produce.ProduceOptionSaveData ProduceOption;
    public PRISM.Data.ProduceTutorialSaveData ProduceTutorial;
    public PRISM.Data.ProducePreparationEpisodeSelectSaveData ProducePreparationEpisodeSelect;
    public Gleipnir.Savedata.SavableJsonObject<PRISM.Produce.InGameSaveData> ProduceInGame;
    public Gleipnir.Savedata.SavableJsonObject<PRISM.Produce.InGameSaveData> ChallengeTourInGame;
}

// Namespace: PRISM.Data
public class LoginServerData : PRISM.Module.Networking.IServerConfig
{
    public static string BackupPrefsKey;
    private string host;
    private int port;
    private bool useCredentials;
    private bool useEncryption;
    private bool useTrace;
    private int requestTimeOutMs;
    public string Host { get; set; }
    public int GrpcPort { get; set; }
    public bool UseCredentials { get; set; }
    public bool UseEncryption { get; set; }
    public bool UseTrace { get; set; }
    public int RequestTimeOutMs { get; set; }
    private PRISM.Module.Networking.IServerConfig defaultServerConfig { get; set; }
    public int GrpcKeepAliveTimeMs { get; set; }
    public int GrpcKeepAliveTimeoutMs { get; set; }
    public int GrpcConnectTimeoutMs { get; set; }
    public void Reset();
}

// Namespace: PRISM.Data
public class LoginUserData : ENTERPRISE.Data.LegacySaveDataBase
{
    public static string BackupPrefsKey;
    private string userId;
    private string userSecret;
    private string loginToken;
    private bool tutorialFinished;
    private string searchUserId;
    private string userName;
    private string displayName;
    private long licenseLastUpdate;
    public string LoginUserID { get; set; }
    public string LoginUserSecret { get; set; }
    public string LoginToken { get; set; }
    public bool IsUserRegistered { get; set; }
    public bool TutorialFinished { get; set; }
    public bool IsLoggedIn { get; set; }
    public string SearchUserID { get; set; }
    public string UserName { get; set; }
    public string DisplayName { get; set; }
    public System.Nullable<System.DateTime> LicenseLastUpdate { get; set; }
    public void Reset();
    public void ClearLoginToken();
    public bool IsDefault();
    public bool ApplyRegister(string id, string secret, bool autoSaving);
    public bool ApplyLogin(string token, bool autoSaving);
    public bool FinishTutorial(bool autoSaving);
    public bool ApplySearchUserID(string id, bool autoSaving);
    public bool ApplyUserName(string name, bool autoSaving);
    public bool ApplyDisplayName(string name, bool autoSaving);
    public bool ApplyLicenseLastUpdate(System.DateTime date, bool autoSaving);
    public void Save();
    public bool LoadFromBackup();
    public void ClearBackup();
    private void _saveBackup();
    private bool _isUserRegistered();
    private bool _isLoggedIn();
}

// Namespace: PRISM.Data
public class PlayerPrefsSaveData`1<T> : System.IDisposable
{
    public static string Location;
    private T data;
    private Limelight.StorageLocationProvider provider;
    public T Data { get; set; }
    public void Save();
    public bool OverrideLoad();
    public void Clear();
    private string _getKeyName();
    public void Dispose();
}

// Namespace: PRISM.Data
private class ScrumbleProcessor : System.IDisposable
{
    private Limelight.StorageLocationProvider provider;
    public void Dispose();
    public string Parse(string data);
    public string Process(string data);
    private byte[] _crypt(byte[] src);
}

// Namespace: PRISM.Data
public class ProducePreparationEpisodeSelectSaveData : ENTERPRISE.Data.LegacySaveDataBase, UnityEngine.ISerializationCallbackReceiver
{
    public int SelectedUnitId;
    public System.Collections.Generic.Dictionary<int, System.ValueTuple<int, ProduceDifficultyType>> PlayEpisodeDictionary;
    private LastPlayEpisodeData[] playEpisodeDatas;
    public bool IsDefault();
    public void Reset();
    public void OnBeforeSerialize();
    public void OnAfterDeserialize();

    public class LastPlayEpisodeData
    {
        public int MstUnitId;
        public int MstEpisodeId;
        public ProduceDifficultyType Difficulty;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<System.Collections.Generic.KeyValuePair<int, System.ValueTuple<int, ProduceDifficultyType>>, LastPlayEpisodeData> <>9__6_0;
        public static System.Func<LastPlayEpisodeData, int> <>9__7_0;
        public static System.Func<LastPlayEpisodeData, System.ValueTuple<int, ProduceDifficultyType>> <>9__7_1;
        private LastPlayEpisodeData <OnBeforeSerialize>b__6_0(System.Collections.Generic.KeyValuePair<int, System.ValueTuple<int, ProduceDifficultyType>> pair);
        private int <OnAfterDeserialize>b__7_0(LastPlayEpisodeData data);
        private System.ValueTuple<int, ProduceDifficultyType> <OnAfterDeserialize>b__7_1(LastPlayEpisodeData data);
    }
}

// Namespace: PRISM.Data
public class ProduceTutorialSaveData : ENTERPRISE.Data.LegacySaveDataBase
{
    public int[] isCompletion;
    public int isActiveTutorial;
    public int activeTutorialType;
    public int activeUnitId;
    public int isShowInfoTutorialPU;
    public int isClearNewTutorial;
    public bool IsComplation(SequenceType sequenceType);
    public void SetComplation(SequenceType sequenceType);
    public void ResetComplation(SequenceType sequenceType);
    public bool IsActiveTutorial();
    public void SetActiveTutorial(bool isActive);
    public bool IsActiveisIllumination(int unitId);
    public void SetActiveisIllumination(int unitId);
    public SequenceType GetActiveTutorialType();
    public void SetActiveTutorialType(SequenceType sequenceType);
    public bool IsDefault();
    public void Reset();
    public void Load();
}

// Namespace: PRISM.Data.SaveData
public class UserSaveData
{
    public string UserId;
    public string UserSecret;
    public string UserName;
    public long LicenseLastUpdate;
    public PRISM.Data.LoginServerData ServerData;
    public bool TutorialFinished;
}

// Namespace: PRISM.Data.SaveData
public class UserSaveDataCollection
{
    private System.Collections.Generic.List<PRISM.Data.SaveData.UserSaveData> dataList;
    private int selectedIndex;
    public int Count { get; set; }
    public System.Collections.Generic.IEnumerable<PRISM.Data.SaveData.UserSaveData> Items { get; set; }
    public int SelectedIndex { get; set; }
    public PRISM.Data.SaveData.UserSaveData SelectedUser { get; set; }
    public PRISM.Data.SaveData.UserSaveData IndexAt(int index);
    public bool ChangeUser(int index);
    public void Add(PRISM.Data.SaveData.UserSaveData newData);
    public void RemoveAt(int index);
}

// Namespace: PRISM.Produce
public class ProduceUnitModel
{
    public int UnitId;
    public int UnitNumber;
    public string UnitName;
    public PRISM.Module.Networking.IProduceParameterStatus Parameter;
    public PRISM.Produce.FriendSupportModel FriendSupportModelData;
    public string InheritanceFUnitId;
    public System.Collections.Generic.List<PRISM.ProduceIdolModel> ProduceIdolModels;
    public System.Collections.Generic.List<PRISM.Produce.SupportCharacterModel> SupportCharacterModels;
    public PRISM.Common.Model.SCharaIcon FriendSCharaIcon { get; set; }
    public Cysharp.Threading.Tasks.UniTask<PRISM.Produce.ProduceUnitModel> UpdateProduceUnitModelAsync(PRISM.Module.Networking.IProduceIdolUnitStatus data, PRISM.Module.Networking.IFriendSupportStatus friendModel, string inheritanceFUId, System.Threading.CancellationToken ct);
    public void UpdateSupportCharacterModels(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISupportCharacterStatus> datas);
    public void UpdateSupportCharacterModel(PRISM.Module.Networking.ISupportCharacterStatus supportChara);
    public System.Collections.Generic.List<PRISM.ProduceIdolModel> GetSortedUnitFormationProduceIdolModelList();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.ProduceIdolModel, PRISM.UnitIdol> <>9__10_0;
        public static System.Func<PRISM.ProduceIdolModel, int> <>9__13_0;
        private PRISM.UnitIdol <UpdateProduceUnitModelAsync>b__10_0(PRISM.ProduceIdolModel x);
        private int <GetSortedUnitFormationProduceIdolModelList>b__13_0(PRISM.ProduceIdolModel x);
    }

    private class <>c__DisplayClass12_0
    {
        public PRISM.Module.Networking.ISupportCharacterStatus supportChara;
        private bool <UpdateSupportCharacterModel>b__0(PRISM.Produce.SupportCharacterModel x);
    }

    private struct <UpdateProduceUnitModelAsync>d__10 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Produce.ProduceUnitModel> <>t__builder;
        public PRISM.Produce.ProduceUnitModel <>4__this;
        public PRISM.Module.Networking.IProduceIdolUnitStatus data;
        public System.Threading.CancellationToken ct;
        public PRISM.Module.Networking.IFriendSupportStatus friendModel;
        public string inheritanceFUId;
        private int <loopCount>5__2;
        private int <i>5__3;
        private Awaiter<PRISM.ProduceIdolModel> <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class SupportCharacterModel
{
    public PRISM.Module.Networking.ISupportCharacterStatus SupportCharacterStatus;
    private int <CharaId>k__BackingField;
    public int CharaId { get; set; }
    public PRISM.UnitIdol GetUnitIdolForMiniCharaADV();
}

// Namespace: PRISM.Produce
public class AuditionPanel : PRISM.Produce.ProduceBaseView
{
}

// Namespace: PRISM.Produce
public class AuditionPresenter : PRISM.Produce.BasePresenter
{
    private PRISM.AuditionModel auditionModel;
    private PRISM.LessonAudition cacheLessonAuditionSource;
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(PRISM.LessonAudition lessonAuditionSource, System.Threading.CancellationToken ct);
    protected Cysharp.Threading.Tasks.UniTask _restartInitializeAsync(System.Threading.CancellationToken cancellationToken);
    private void _auditionFailedState();
    protected Cysharp.Threading.Tasks.UniTask _onClickRestartButtonAsync(System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask <>n__0(System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask <>n__1(System.Threading.CancellationToken cancellationToken);

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<GameEndStatus, PRISM.Produce.AuditionPresenter> <>9__3_0;
        public static System.Action<UniRx.Unit, PRISM.Produce.AuditionPresenter> <>9__3_1;
        private void <InitializeAsync>b__3_0(GameEndStatus status, PRISM.Produce.AuditionPresenter state);
        private void <InitializeAsync>b__3_1(UniRx.Unit _, PRISM.Produce.AuditionPresenter state);
    }

    private struct <InitializeAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.AuditionPresenter <>4__this;
        public PRISM.LessonAudition lessonAuditionSource;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_onClickRestartButtonAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.AuditionPresenter <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_restartInitializeAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.AuditionPresenter <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class BasePresenter
{
    private static float FadeTime;
    private static float RetryFadeOutTime;
    private PRISM.Produce.ProduceBaseView produceBaseView;
    private PRISM.Produce.ProduceBaseModel produceBaseModel;
    private PRISM.Produce.ProduceIngameViewModel viewModel;
    protected bool isInitialized;
    private UniRx.Subject<UniRx.Unit> onPlayBGMSubject;
    private UniRx.Subject<UniRx.Unit> onEndCountDownSubject;
    private UniRx.Subject<UniRx.Unit> onTapCardSubject;
    private UniRx.Subject<bool> onInGameEndSubject;
    private CriWare.CriAtomExPlayback successJinglePlayback;
    protected System.Threading.CancellationTokenSource tokenSource;
    protected UniRx.CompositeDisposable disposables;
    private ShowEnemyPCardState showEnemyPCardState;
    private System.IDisposable shakeUIDisposable;
    private bool isStopTapIngameContent;
    private System.Func<System.Threading.CancellationToken, Cysharp.Threading.Tasks.UniTask<bool>> <OnConfirmInGameFinishAsync>k__BackingField;
    private float ViewAnimationSpeed { get; set; }
    protected System.IObserver<bool> OnInGameEndObserver { get; set; }
    protected PRISM.Definitions.SoundKey SuccessJingle { get; set; }
    protected PRISM.Definitions.SoundKey FailureJingle { get; set; }
    protected PRISM.Produce.ChallengeMissionViewModel ChallengeMissionViewModel { get; set; }
    public System.IObservable<UniRx.Unit> OnPlayBGM { get; set; }
    public System.IObservable<UniRx.Unit> OnEndCountDown { get; set; }
    public System.IObservable<bool> OnInGameEnd { get; set; }
    public System.IObservable<UniRx.Unit> OnTapCard { get; set; }
    private System.Func<System.Threading.CancellationToken, Cysharp.Threading.Tasks.UniTask<bool>> OnConfirmInGameFinishAsync { get; set; }
    public Cysharp.Threading.Tasks.UniTask StartCountdownAsync(System.Threading.CancellationToken cancellationToken);
    public void UpdateMain();
    public Cysharp.Threading.Tasks.UniTask TerminateAsync();
    private void _subscribeViewCallBack();
    private void _subscribePlayerViewCallBack();
    private void _subscribeEnemyViewCallBack();
    private void _subscribeModelCallBack();
    private void _subscribePlayerModelCallBack();
    private void _subscribeEnemyModelCallBack();
    private void _subscribePlayerAndViewCommonCallBack(PRISM.Produce.IngamePlayerModel playerModel, PRISM.Produce.IInGamePlayerView playerView);
    protected Cysharp.Threading.Tasks.UniTask _initializeAsync(System.Threading.CancellationToken cancellationToken);
    protected Cysharp.Threading.Tasks.UniTask _restartInitializeAsync(System.Threading.CancellationToken cancellationToken);
    protected void _setupPauseContent(System.Collections.Generic.IReadOnlyList<PRISM.Produce.EnemySkillContentViewModel> enemySkillContentViewModels, System.Func<Cysharp.Threading.Tasks.UniTask> onPreCloseByRetryButtonFunc, System.Func<Cysharp.Threading.Tasks.UniTask> onPreCloseByGiveUpButtonFunc);
    private void _onFinishSuccess();
    private void _initializePlayerAndViewCommon(PRISM.Produce.IngamePlayerModel playerModel, PRISM.Produce.IInGamePlayerView playerView);
    private void _onClickProduceCard(int index);
    private void _dragSkillCardStart(int index);
    private void _updateSelectSkillCard();
    private void _dragSkillCardCancel();
    private void _dragSkillCardEndSuccess();
    private void _executeSkillCard(int skillcardButtonIndex);
    private void _updateProduceCardUsable();
    private void _updatIdolSkillUsable();
    private void _changeSkillCardButtonInteractable(int targetIndex, PCardAvailableState state);
    protected void _changeSkillCardButtonBuffDeBuff(int targetIndex, BuffStatus buffStatus);
    protected void _changeIdolSkillButtonBuffDeBuff(int targetIndex, BuffStatus buffStatus);
    protected void _updatePrediction();
    private void _updateExecuteCardIndex(int setIndex);
    private void _updateExecuteSkillIndex(int idolSkillIndex);
    private void _resetExecuteCardAndSkillIndex();
    protected void _onClickIdolSkillIcon(int index);
    protected void _onClickEnemySkillIcon(int index);
    protected void _showResult(bool isWaitSuccessJingle);
    protected void _showSuccessResult();
    private void _showFailureResult();
    private System.ValueTuple<CriWare.CriAtomExPlayback, CriWare.CriAtomExPlayback> _playFailureJingleAndBGM();
    private Cysharp.Threading.Tasks.UniTask _waitSuccessJingleEndAsync(System.Threading.CancellationToken cancellationToken);
    public void OnClickCancelButtonProcess();
    private void _executeEnemyPCard(PRISM.Produce.IngamePCardModel cardModel);
    protected Cysharp.Threading.Tasks.UniTask _onClickRestartButtonAsync(System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask<bool> _onClickFinishProduceButtonAsync<TState>(TState state, System.Action<TState> onProduceFinish, System.Threading.CancellationToken cancellationToken);
    protected void _onClickInGameEndButton();
    private Cysharp.Threading.Tasks.UniTask _onProduceEndFromPausePopupAsync(System.Threading.CancellationToken cancellationToken);
    protected CriWare.CriAtomExPlayback _playFailureBGM();
    private void <_subscribeViewCallBack>b__43_10(bool isShow, PRISM.Produce.ProduceBaseModel state);
    private void <_subscribeViewCallBack>b__43_8(int index, PRISM.Produce.BasePresenter state);
    private void <_subscribeViewCallBack>b__43_9(int index, PRISM.Produce.BasePresenter state);
    private bool <_subscribePlayerViewCallBack>b__44_1(int index);
    private void <_subscribeModelCallBack>b__46_1(int flag, PRISM.Produce.ProduceBaseView state);
    private PRISM.Produce.EnemySkillContentViewModel <_initializeAsync>b__50_1(PRISM.Produce.IngameSkillModel skill);
    private Cysharp.Threading.Tasks.UniTask <_initializeAsync>b__50_2();
    private Cysharp.Threading.Tasks.UniTask <_initializeAsync>b__50_3();
    private static bool <_restartInitializeAsync>g__isBGMStop|51_0();
    private bool <_waitSuccessJingleEndAsync>b__76_0();

    private class ShowEnemyPCardState
    {
        private System.Collections.Generic.List<int> opponentReleaseHandIndexes;
        private System.Collections.Generic.List<int> effectDisplayIds;
        private PRISM.Produce.BasePresenter <Presenter>k__BackingField;
        private int <OpponentDrawHandCount>k__BackingField;
        private int <TotalGetAppealPoint>k__BackingField;
        public PRISM.Produce.BasePresenter Presenter { get; set; }
        public int OpponentDrawHandCount { get; set; }
        public System.Collections.Generic.IReadOnlyList<int> OpponentReleaseHandIndexes { get; set; }
        public System.Collections.Generic.IReadOnlyList<int> EffectDisplayIds { get; set; }
        public int TotalGetAppealPoint { get; set; }
        public void SetState(PRISM.Produce.BasePresenter presenter, PRISM.Produce.CardAndSkillExecResult result);
    }

    private struct <<_initializeAsync>b__50_3>d : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.BasePresenter <>4__this;
        private Awaiter<bool> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<bool> <>9__40_0;
        public static System.Action<UniRx.Unit, PRISM.Produce.BasePresenter> <>9__43_0;
        public static System.Action<PRISM.Produce.ProduceOptionSaveData, PRISM.Produce.BasePresenter> <>9__43_1;
        public static System.Action<UniRx.Unit, PRISM.Produce.ProduceBaseModel> <>9__43_2;
        public static System.Action<UniRx.Unit, PRISM.Produce.ProduceBaseModel> <>9__43_3;
        public static System.Action<bool, PRISM.Produce.BasePresenter> <>9__43_4;
        public static System.Action<UniRx.Unit, PRISM.Produce.BasePresenter> <>9__43_5;
        public static System.Action<System.ValueTuple<OtherEffectType, PlayerType>, PRISM.Produce.ProduceBaseView> <>9__43_6;
        public static System.Action<UniRx.Unit, PRISM.Produce.BasePresenter> <>9__43_7;
        public static System.Action<int, PRISM.Produce.BasePresenter> <>9__44_0;
        public static System.Action<System.ValueTuple<int, DragState>, PRISM.Produce.BasePresenter> <>9__44_2;
        public static System.Action<int, PRISM.Produce.BasePresenter> <>9__44_3;
        public static System.Action<System.ValueTuple<int, SwipeState>, PRISM.Produce.BasePresenter> <>9__44_4;
        public static System.Action<int, PRISM.Produce.BasePresenter> <>9__45_0;
        public static System.Action<float, PRISM.Produce.BasePresenter> <>9__46_0;
        public static System.Action<UniRx.Unit, PRISM.Produce.BasePresenter> <>9__46_2;
        public static System.Action<bool, PRISM.Produce.BasePresenter> <>9__46_3;
        public static System.Action<FastForwardSpeedType, PRISM.Produce.BasePresenter> <>9__46_4;
        public static System.Action<System.ValueTuple<int, LogData>, PRISM.Produce.BasePresenter> <>9__46_5;
        public static System.Action<UniRx.Unit, PRISM.Produce.BasePresenter> <>9__47_0;
        public static System.Action<UniRx.Unit, System.ValueTuple<PRISM.Produce.BasePresenter, PRISM.Produce.IngamePlayerModel>> <>9__47_1;
        public static System.Action<System.ValueTuple<int, int, int>, PRISM.Produce.InGamePlayerView> <>9__47_2;
        public static System.Action<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.BasePresenter> <>9__47_3;
        public static System.Action<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.BasePresenter> <>9__47_4;
        public static System.Action<System.ValueTuple<int, PRISM.Produce.IngameSkillModel, PRISM.Produce.CardAndSkillExecResult>, System.ValueTuple<PRISM.Produce.BasePresenter, PRISM.Produce.IngamePlayerModel>> <>9__47_5;
        public static System.Action<PRISM.Produce.IngamePCardModel, System.ValueTuple<PRISM.Produce.InGamePlayerView, PRISM.AutoReleaseScope<System.Collections.Generic.List<int>>, int>> <>9__47_16;
        public static System.Action<System.ValueTuple<PRISM.Produce.IngamePCardModel, PRISM.Produce.CardAndSkillExecResult>, System.ValueTuple<PRISM.Produce.BasePresenter, PRISM.Produce.IngamePlayerModel>> <>9__47_6;
        public static System.Action<System.ValueTuple<int, PRISM.Produce.IngameEffectCauseModel>, System.ValueTuple<PRISM.Produce.BasePresenter, PRISM.Produce.IngamePlayerModel>> <>9__47_7;
        public static System.Action<System.ValueTuple<int, PRISM.Produce.IngamePCardModel>, PRISM.Produce.InGamePlayerView> <>9__47_8;
        public static System.Action<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.BasePresenter> <>9__47_9;
        public static System.Action<System.ValueTuple<ProduceParameterType, int>, PRISM.Produce.InGamePlayerView> <>9__47_10;
        public static System.Action<System.ValueTuple<PhaseType, int, PhaseChangeCostDownMode>, PRISM.Produce.InGamePlayerView> <>9__47_11;
        public static System.Action<System.ValueTuple<DoubleCardUseType, int, PhaseChangeCostDownMode>, System.ValueTuple<PRISM.Produce.InGamePlayerView, PRISM.Produce.IngamePlayerModel>> <>9__47_12;
        public static System.Action<System.ValueTuple<int, bool>, System.ValueTuple<PRISM.Produce.InGamePlayerView, PRISM.Produce.IngamePlayerModel>> <>9__47_13;
        public static System.Action<System.ValueTuple<OtherEffectType, PlayerType>, PRISM.Produce.ProduceBaseView> <>9__47_17;
        public static System.Action<System.ValueTuple<int, int, int, int>, PRISM.Produce.BasePresenter> <>9__47_14;
        public static System.Action<int, System.ValueTuple<PRISM.Produce.InGamePlayerView, PRISM.Produce.IngamePlayerModel>> <>9__47_15;
        public static System.Action<System.ValueTuple<int, PRISM.Produce.IngameSkillModel>, PRISM.Produce.InGameEnemyView> <>9__48_0;
        public static System.Action<System.ValueTuple<int, PRISM.Produce.IngameSkillModel, PRISM.Produce.CardAndSkillExecResult>, System.ValueTuple<PRISM.Produce.BasePresenter, PRISM.Produce.IngamePlayerModel>> <>9__48_1;
        public static System.Action<PRISM.Produce.IngamePCardModel, PRISM.Produce.BasePresenter> <>9__48_2;
        public static System.Action<System.ValueTuple<int, PRISM.Produce.IngameEffectCauseModel>, System.ValueTuple<PRISM.Produce.BasePresenter, PRISM.Produce.IngamePlayerModel>> <>9__48_3;
        public static System.Action<int, System.ValueTuple<PRISM.Produce.ProduceBaseView, PRISM.Produce.IngamePlayerModel, PRISM.Produce.ProduceBaseModel>> <>9__49_0;
        public static System.Action<System.ValueTuple<int, int>, PRISM.Produce.IInGamePlayerView> <>9__49_1;
        public static System.Action<System.ValueTuple<int, int, int, int, ProduceParameterType>, PRISM.Produce.IInGamePlayerView> <>9__49_2;
        public static System.Action<System.ValueTuple<int, int>, System.ValueTuple<PRISM.Produce.IInGamePlayerView, PRISM.Produce.IngamePlayerModel>> <>9__49_3;
        public static System.Action<System.ValueTuple<int, int, int, int>, System.ValueTuple<PRISM.Produce.IInGamePlayerView, PRISM.Produce.IngamePlayerModel>> <>9__49_4;
        public static System.Action<bool, PRISM.Produce.IInGamePlayerView> <>9__49_5;
        public static System.Action<float, PRISM.Produce.IInGamePlayerView> <>9__49_6;
        public static System.Action<int, System.ValueTuple<PRISM.Produce.IInGamePlayerView, PRISM.Produce.ProduceBaseModel>> <>9__49_7;
        public static System.Action<System.ValueTuple<int, int>, PRISM.Produce.IInGamePlayerView> <>9__49_8;
        public static System.Action<PRISM.Produce.InGameExecActionResult, PRISM.Produce.IInGamePlayerView> <>9__49_9;
        public static System.Action<System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffectGroup>, PRISM.Produce.IInGamePlayerView> <>9__49_10;
        public static System.Action<System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffectGroup>, PRISM.Produce.IInGamePlayerView> <>9__49_11;
        public static System.Action<System.ValueTuple<int, int>, PRISM.Produce.IInGamePlayerView> <>9__49_12;
        public static System.Action<System.ValueTuple<float, float>, PRISM.Produce.IInGamePlayerView> <>9__49_13;
        public static System.Action<System.ValueTuple<int, int, int>, PRISM.Produce.IInGamePlayerView> <>9__49_14;
        public static System.Action<PRISM.Produce.ProduceInGameEffect, System.ValueTuple<PRISM.Produce.IInGamePlayerView, PRISM.Produce.IngamePlayerModel>> <>9__49_15;
        public static System.Action<PRISM.Produce.ProduceInGameEffect, System.ValueTuple<PRISM.Produce.IInGamePlayerView, PRISM.Produce.IngamePlayerModel>> <>9__49_16;
        public static System.Action<System.ValueTuple<int, SkillAvailableState>, System.ValueTuple<PRISM.Produce.IInGamePlayerView, PRISM.Produce.ProduceBaseModel>> <>9__49_17;
        public static System.Action<System.ValueTuple<int, int, int>, PRISM.Produce.IInGamePlayerView> <>9__49_18;
        public static System.Action<System.ValueTuple<int, int, int, int>, PRISM.Produce.IngamePlayerModel> <>9__49_19;
        public static System.Action<int, PRISM.Produce.IngamePlayerModel> <>9__49_20;
        public static System.Action<System.ValueTuple<int, int>, PRISM.Produce.IngamePlayerModel> <>9__49_21;
        public static System.Func<PRISM.Produce.IngameSkillModel, PRISM.Produce.IdolSkillContentViewModel> <>9__50_0;
        public static System.Action<PRISM.Produce.BasePresenter> <>9__50_4;
        public static System.Action<AnimationState, ShowEnemyPCardState> <>9__78_0;
        public static System.Action<PRISM.Produce.BasePresenter> <>9__81_0;
        private bool <StartCountdownAsync>b__40_0();
        private void <_subscribeViewCallBack>b__43_0(UniRx.Unit _, PRISM.Produce.BasePresenter state);
        private void <_subscribeViewCallBack>b__43_1(PRISM.Produce.ProduceOptionSaveData option, PRISM.Produce.BasePresenter state);
        private void <_subscribeViewCallBack>b__43_2(UniRx.Unit _, PRISM.Produce.ProduceBaseModel state);
        private void <_subscribeViewCallBack>b__43_3(UniRx.Unit _, PRISM.Produce.ProduceBaseModel state);
        private void <_subscribeViewCallBack>b__43_4(bool _, PRISM.Produce.BasePresenter state);
        private void <_subscribeViewCallBack>b__43_5(UniRx.Unit _, PRISM.Produce.BasePresenter state);
        private void <_subscribeViewCallBack>b__43_6(System.ValueTuple<OtherEffectType, PlayerType> tuple, PRISM.Produce.ProduceBaseView state);
        private void <_subscribeViewCallBack>b__43_7(UniRx.Unit _, PRISM.Produce.BasePresenter state);
        private void <_subscribePlayerViewCallBack>b__44_0(int index, PRISM.Produce.BasePresenter state);
        private void <_subscribePlayerViewCallBack>b__44_2(System.ValueTuple<int, DragState> tuple, PRISM.Produce.BasePresenter state);
        private void <_subscribePlayerViewCallBack>b__44_3(int index, PRISM.Produce.BasePresenter state);
        private void <_subscribePlayerViewCallBack>b__44_4(System.ValueTuple<int, SwipeState> tuple, PRISM.Produce.BasePresenter state);
        private void <_subscribeEnemyViewCallBack>b__45_0(int index, PRISM.Produce.BasePresenter state);
        private void <_subscribeModelCallBack>b__46_0(float leftTime, PRISM.Produce.BasePresenter state);
        private void <_subscribeModelCallBack>b__46_2(UniRx.Unit _, PRISM.Produce.BasePresenter state);
        private void <_subscribeModelCallBack>b__46_3(bool _, PRISM.Produce.BasePresenter state);
        private void <_subscribeModelCallBack>b__46_4(FastForwardSpeedType speedType, PRISM.Produce.BasePresenter state);
        private void <_subscribeModelCallBack>b__46_5(System.ValueTuple<int, LogData> tuple, PRISM.Produce.BasePresenter state);
        private void <_subscribePlayerModelCallBack>b__47_0(UniRx.Unit _, PRISM.Produce.BasePresenter state);
        private void <_subscribePlayerModelCallBack>b__47_1(UniRx.Unit _, System.ValueTuple<PRISM.Produce.BasePresenter, PRISM.Produce.IngamePlayerModel> state);
        private void <_subscribePlayerModelCallBack>b__47_2(System.ValueTuple<int, int, int> tuple, PRISM.Produce.InGamePlayerView state);
        private void <_subscribePlayerModelCallBack>b__47_3(PRISM.Produce.ProduceInGameEffect tuple, PRISM.Produce.BasePresenter state);
        private void <_subscribePlayerModelCallBack>b__47_4(PRISM.Produce.ProduceInGameEffect tuple, PRISM.Produce.BasePresenter state);
        private void <_subscribePlayerModelCallBack>b__47_5(System.ValueTuple<int, PRISM.Produce.IngameSkillModel, PRISM.Produce.CardAndSkillExecResult> tuple, System.ValueTuple<PRISM.Produce.BasePresenter, PRISM.Produce.IngamePlayerModel> state);
        private void <_subscribePlayerModelCallBack>b__47_6(System.ValueTuple<PRISM.Produce.IngamePCardModel, PRISM.Produce.CardAndSkillExecResult> tuple, System.ValueTuple<PRISM.Produce.BasePresenter, PRISM.Produce.IngamePlayerModel> state);
        private void <_subscribePlayerModelCallBack>b__47_16(PRISM.Produce.IngamePCardModel _, System.ValueTuple<PRISM.Produce.InGamePlayerView, PRISM.AutoReleaseScope<System.Collections.Generic.List<int>>, int> stateTuple);
        private void <_subscribePlayerModelCallBack>b__47_7(System.ValueTuple<int, PRISM.Produce.IngameEffectCauseModel> tuple, System.ValueTuple<PRISM.Produce.BasePresenter, PRISM.Produce.IngamePlayerModel> state);
        private void <_subscribePlayerModelCallBack>b__47_8(System.ValueTuple<int, PRISM.Produce.IngamePCardModel> tuple, PRISM.Produce.InGamePlayerView state);
        private void <_subscribePlayerModelCallBack>b__47_9(PRISM.Produce.ProduceInGameEffect effect, PRISM.Produce.BasePresenter basePresenter);
        private void <_subscribePlayerModelCallBack>b__47_10(System.ValueTuple<ProduceParameterType, int> tuple, PRISM.Produce.InGamePlayerView state);
        private void <_subscribePlayerModelCallBack>b__47_11(System.ValueTuple<PhaseType, int, PhaseChangeCostDownMode> tuple, PRISM.Produce.InGamePlayerView state);
        private void <_subscribePlayerModelCallBack>b__47_12(System.ValueTuple<DoubleCardUseType, int, PhaseChangeCostDownMode> tuple, System.ValueTuple<PRISM.Produce.InGamePlayerView, PRISM.Produce.IngamePlayerModel> state);
        private void <_subscribePlayerModelCallBack>b__47_13(System.ValueTuple<int, bool> tuple, System.ValueTuple<PRISM.Produce.InGamePlayerView, PRISM.Produce.IngamePlayerModel> state);
        private void <_subscribePlayerModelCallBack>b__47_14(System.ValueTuple<int, int, int, int> tuple, PRISM.Produce.BasePresenter state);
        private void <_subscribePlayerModelCallBack>b__47_17(System.ValueTuple<OtherEffectType, PlayerType> tuple2, PRISM.Produce.ProduceBaseView state2);
        private void <_subscribePlayerModelCallBack>b__47_15(int drawCount, System.ValueTuple<PRISM.Produce.InGamePlayerView, PRISM.Produce.IngamePlayerModel> state);
        private void <_subscribeEnemyModelCallBack>b__48_0(System.ValueTuple<int, PRISM.Produce.IngameSkillModel> tuple, PRISM.Produce.InGameEnemyView state);
        private void <_subscribeEnemyModelCallBack>b__48_1(System.ValueTuple<int, PRISM.Produce.IngameSkillModel, PRISM.Produce.CardAndSkillExecResult> tuple, System.ValueTuple<PRISM.Produce.BasePresenter, PRISM.Produce.IngamePlayerModel> state);
        private void <_subscribeEnemyModelCallBack>b__48_2(PRISM.Produce.IngamePCardModel card, PRISM.Produce.BasePresenter state);
        private void <_subscribeEnemyModelCallBack>b__48_3(System.ValueTuple<int, PRISM.Produce.IngameEffectCauseModel> tuple, System.ValueTuple<PRISM.Produce.BasePresenter, PRISM.Produce.IngamePlayerModel> state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_0(int index, System.ValueTuple<PRISM.Produce.ProduceBaseView, PRISM.Produce.IngamePlayerModel, PRISM.Produce.ProduceBaseModel> state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_1(System.ValueTuple<int, int> tuple, PRISM.Produce.IInGamePlayerView state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_2(System.ValueTuple<int, int, int, int, ProduceParameterType> tuple, PRISM.Produce.IInGamePlayerView state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_3(System.ValueTuple<int, int> tuple, System.ValueTuple<PRISM.Produce.IInGamePlayerView, PRISM.Produce.IngamePlayerModel> state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_4(System.ValueTuple<int, int, int, int> tuple, System.ValueTuple<PRISM.Produce.IInGamePlayerView, PRISM.Produce.IngamePlayerModel> state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_5(bool isMentalBreak, PRISM.Produce.IInGamePlayerView state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_6(float mentalBreakTime, PRISM.Produce.IInGamePlayerView state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_7(int mentalGuard, System.ValueTuple<PRISM.Produce.IInGamePlayerView, PRISM.Produce.ProduceBaseModel> state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_8(System.ValueTuple<int, int> avoidRate, PRISM.Produce.IInGamePlayerView state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_9(PRISM.Produce.InGameExecActionResult result, PRISM.Produce.IInGamePlayerView state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_10(System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffectGroup> effectGroups, PRISM.Produce.IInGamePlayerView state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_11(System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffectGroup> effectGroups, PRISM.Produce.IInGamePlayerView state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_12(System.ValueTuple<int, int> tuple, PRISM.Produce.IInGamePlayerView state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_13(System.ValueTuple<float, float> tuple, PRISM.Produce.IInGamePlayerView state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_14(System.ValueTuple<int, int, int> _, PRISM.Produce.IInGamePlayerView state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_15(PRISM.Produce.ProduceInGameEffect effect, System.ValueTuple<PRISM.Produce.IInGamePlayerView, PRISM.Produce.IngamePlayerModel> state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_16(PRISM.Produce.ProduceInGameEffect effect, System.ValueTuple<PRISM.Produce.IInGamePlayerView, PRISM.Produce.IngamePlayerModel> state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_17(System.ValueTuple<int, SkillAvailableState> tuple, System.ValueTuple<PRISM.Produce.IInGamePlayerView, PRISM.Produce.ProduceBaseModel> state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_18(System.ValueTuple<int, int, int> tuple, PRISM.Produce.IInGamePlayerView state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_19(System.ValueTuple<int, int, int, int> tuple, PRISM.Produce.IngamePlayerModel state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_20(int tuple, PRISM.Produce.IngamePlayerModel state);
        private void <_subscribePlayerAndViewCommonCallBack>b__49_21(System.ValueTuple<int, int> avoidRate, PRISM.Produce.IngamePlayerModel state);
        private PRISM.Produce.IdolSkillContentViewModel <_initializeAsync>b__50_0(PRISM.Produce.IngameSkillModel skill);
        private void <_initializeAsync>b__50_4(PRISM.Produce.BasePresenter state);
        private void <_executeEnemyPCard>b__78_0(AnimationState animState, ShowEnemyPCardState state);
        private void <_onClickInGameEndButton>b__81_0(PRISM.Produce.BasePresenter state);
    }

    private class <>c__DisplayClass43_0
    {
        public LogData data;
        public PRISM.Produce.BasePresenter <>4__this;
        private PRISM.Produce.CardAndSkillPredictionModel <_subscribeViewCallBack>b__11(PRISM.Produce.IngameSkillModel _, PRISM.Produce.IngameActionEffectModel effect);
    }

    private class <>c__DisplayClass43_1
    {
        public LogData data;
        public PRISM.Produce.BasePresenter <>4__this;
        private PRISM.Produce.CardAndSkillPredictionModel <_subscribeViewCallBack>b__12(PRISM.Produce.IngameSkillModel _, PRISM.Produce.IngameActionEffectModel effect);
    }

    private class <>c__DisplayClass70_0
    {
        public PRISM.Produce.BasePresenter <>4__this;
        public PRISM.Produce.IngameSkillModel skill;
        private PRISM.Produce.CardAndSkillPredictionModel <_onClickIdolSkillIcon>b__0(PRISM.Produce.IngameSkillModel _, PRISM.Produce.IngameActionEffectModel effect);
    }

    private class <>c__DisplayClass82_0
    {
        public CriWare.CriAtomExPlayback jingle;
        public CriWare.CriAtomExPlayback bgm;
        private bool <_onProduceEndFromPausePopupAsync>b__0();
    }

    private struct <StartCountdownAsync>d__40 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.BasePresenter <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_initializeAsync>d__50 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.BasePresenter <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private PRISM.Produce.EnemySkillContentViewModel[] <enemySkillContentViewModels>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_onClickFinishProduceButtonAsync>d__80`1<TState> : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<bool> <>t__builder;
        public PRISM.Produce.BasePresenter <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        public System.Action<TState> onProduceFinish;
        public TState state;
        private Awaiter<bool> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_onClickRestartButtonAsync>d__79 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Threading.CancellationToken cancellationToken;
        public PRISM.Produce.BasePresenter <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_onProduceEndFromPausePopupAsync>d__82 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.BasePresenter <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private <>c__DisplayClass82_0 <>8__1;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_restartInitializeAsync>d__51 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.BasePresenter <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_waitSuccessJingleEndAsync>d__76 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.BasePresenter <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ProduceEpisodeEpisodeSelectDifficultyButton : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UIButton button;
    private UnityEngine.GameObject clearLabel;
    private UnityEngine.GameObject lockObject;
    private UnityEngine.GameObject selectObject;
    private PRISM.UIGrayOutController grayOutController;
    private System.IDisposable selectedDisposable;
    public ENTERPRISE.UI.UIButton Button { get; set; }
    public void Setup(PRISM.Module.Networking.IEpisodeDifficultyStatus status, UniRx.IReadOnlyReactiveProperty<ProduceDifficultyType> difficulty, bool unSelectedGrayOut);

    private class <>c__DisplayClass8_0
    {
        public PRISM.Module.Networking.IEpisodeDifficultyStatus status;
        public PRISM.Produce.ProduceEpisodeEpisodeSelectDifficultyButton <>4__this;
        public bool unSelectedGrayOut;
        private void <Setup>b__0(ProduceDifficultyType difficulty);
    }
}

// Namespace: PRISM.Produce
public class ProducePreparationEpisodeListCarousel : PRISM.Carousel<PRISM.Produce.ProducePreparationEpisodeSelectEpisodeModel, PRISM.DefaultCarouselContext>
{
    protected void Initialize();
}

// Namespace: PRISM.Produce
public class ProducePreparationEpisodeListCarouselCell : PRISM.CarouselCell<PRISM.Produce.ProducePreparationEpisodeSelectEpisodeModel, PRISM.DefaultCarouselContext>
{
    private ENTERPRISE.UI.UITextMeshProUGUI episodeIdText;
    private ENTERPRISE.UI.UITextMeshProUGUI staminaText;
    private ENTERPRISE.UI.UITextMeshProUGUI lockText;
    private UnityEngine.GameObject lockObject;
    private UnityEngine.UI.Image thumbnail;
    private UnityEngine.Animator animator;
    private UnityEngine.GameObject selectedFrame;
    public void UpdateContent(PRISM.Produce.ProducePreparationEpisodeSelectEpisodeModel model);
    public void UpdatePosition(float position);
}

// Namespace: PRISM.Produce
public class ProducePreparationEpisodeSelectAttributeIcon : UnityEngine.MonoBehaviour
{
    private PRISM.VoDaViMeLabel vodavimeLabel;
    public void Setup(ProduceParameterType type, bool isActive);
}

// Namespace: PRISM.Produce
public class ProducePreparationEpisodeSelectDetailContent : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UITextMeshProUGUI title;
    private ENTERPRISE.UI.UITextMeshProUGUI synopsisText;
    private UnityEngine.UI.Image thumbnail;
    private PRISM.Produce.ProducePreparationEpisodeSelectAttributeIcon voAttributeIcon;
    private PRISM.Produce.ProducePreparationEpisodeSelectAttributeIcon daAttributeIcon;
    private PRISM.Produce.ProducePreparationEpisodeSelectAttributeIcon viAttributeIcon;
    private PRISM.Produce.ProduceEpisodeEpisodeSelectDifficultyButton[] difficultyButtons;
    private UnityEngine.CanvasGroup fadeCanvasGroup;
    private UnityEngine.AnimationCurve fadeCurve;
    private System.IDisposable fadeTimeDisposable;
    public PRISM.Produce.ProduceEpisodeEpisodeSelectDifficultyButton[] DifficultyButtons { get; set; }
    private void Awake();
    private void OnDestroy();
    public Cysharp.Threading.Tasks.UniTask SetupAsync(PRISM.Produce.ProducePreparationEpisodeSelectEpisodeModel model, UniRx.IReadOnlyReactiveProperty<ProduceDifficultyType> difficulty, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken ct);
    public void SetupDifficultyButton(PRISM.Produce.ProducePreparationEpisodeSelectEpisodeModel model, UniRx.IReadOnlyReactiveProperty<ProduceDifficultyType> difficulty);
    public void Show();
    public void Hide();
    public void FadeContentChange(System.Action onChangeEvent, float fadeTime);
    private void _fade(bool isFadeOut, System.Action onCompleted, float fadeTime);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<float, bool> <>9__19_2;
        private bool <_fade>b__19_2(float rate);
    }

    private class <>c__DisplayClass18_0
    {
        public PRISM.Produce.ProducePreparationEpisodeSelectDetailContent <>4__this;
        public System.Action onChangeEvent;
        public float fadeTime;
        public System.Action <>9__1;
        private void <FadeContentChange>b__0();
        private void <FadeContentChange>b__1();
    }

    private class <>c__DisplayClass19_0
    {
        public float time;
        public float fadeTime;
        public PRISM.Produce.ProducePreparationEpisodeSelectDetailContent <>4__this;
        public bool isFadeOut;
        public System.Action onCompleted;
        private void <_fade>b__0(long _);
        private float <_fade>b__1(long _);
        private float <_fade>b__3(float rate);
        private void <_fade>b__4(float rate);
        private void <_fade>b__5();
    }
}

// Namespace: PRISM.Produce
public class ProducePreparationEpisodeSelectDetailView : UnityEngine.MonoBehaviour
{
    private PRISM.Produce.ProducePreparationEpisodeSelectDetailContent content;
    private ENTERPRISE.UI.UIButton nextButton;
    private ENTERPRISE.UI.UIButton prevButton;
    private ENTERPRISE.UI.UIButton decideButton;
    private ENTERPRISE.UI.UIButton cancelButton;
    private ENTERPRISE.UI.UIButton deckButton;
    private UnityEngine.CanvasGroup canvasGroup;
    private UnityEngine.GameObject touchBlockObject;
    private UnityEngine.UI.Image selectedThumbnail;
    private UnityEngine.Animator animator;
    private UnityEngine.GameObject overlayPrefabDummy;
    private System.IDisposable backKeyDisposable;
    private UnityEngine.GameObject overlay;
    private UnityEngine.Transform prevParent;
    public PRISM.Produce.ProducePreparationEpisodeSelectDetailContent Content { get; set; }
    public ENTERPRISE.UI.UIButton NextButton { get; set; }
    public ENTERPRISE.UI.UIButton PrevButton { get; set; }
    public ENTERPRISE.UI.UIButton DecideButton { get; set; }
    public ENTERPRISE.UI.UIButton CancelButton { get; set; }
    public ENTERPRISE.UI.UIButton DeckButton { get; set; }
    public Cysharp.Threading.Tasks.UniTask SetupAsync(PRISM.Produce.ProducePreparationEpisodeSelectEpisodeModel model, int currentEpisodeIndex, PRISM.Produce.ProducePreparationEpisodeSelectUnitEpisodeModel unitEpisodeModel, UniRx.IReadOnlyReactiveProperty<ProduceDifficultyType> difficulty, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ShowAsync();
    public void Hide();
    public Cysharp.Threading.Tasks.UniTask ShowDeckPopupAsync(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceCardStatus> cards, System.Threading.CancellationToken ct);
    private void Awake();
    private void <ShowAsync>b__27_0(UniRx.Unit _);

    private struct <ShowAsync>d__27 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ProducePreparationEpisodeSelectDetailView <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ProducePreparationEpisodeSelectEpisodeModel
{
    private PRISM.Module.Networking.IEpisodeStatus episodeStatus;
    private int attribute;
    public PRISM.Module.Networking.IEpisodeStatus EpisodeStatus { get; set; }
    public string TitleText { get; set; }
    public string SynopsisText { get; set; }
    public string LockText { get; set; }
    public string CircleThumbnailPath { get; set; }
    public string RectThumbnailPath { get; set; }
    public bool IsLock { get; set; }
    public static PRISM.Produce.ProducePreparationEpisodeSelectEpisodeModel Create(PRISM.Module.Networking.IEpisodeStatus status);
    public ProduceDifficultyType GetReleasedMaxDifficulty();
    public bool IsActiveAttribute(ProduceParameterType compare);

    public enum MultiDisplayAttributeIconType : System.Enum
    {
        public int value__;
        public static MultiDisplayAttributeIconType Vo;
        public static MultiDisplayAttributeIconType Da;
        public static MultiDisplayAttributeIconType Vi;
        public static MultiDisplayAttributeIconType VoDa;
        public static MultiDisplayAttributeIconType VoVi;
        public static MultiDisplayAttributeIconType DaVi;
        public static MultiDisplayAttributeIconType VoDaVi;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IEpisodeDifficultyStatus, bool> <>9__18_0;
        private bool <GetReleasedMaxDifficulty>b__18_0(PRISM.Module.Networking.IEpisodeDifficultyStatus x);
    }
}

// Namespace: PRISM.Produce
public class ProducePreparationEpisodeSelectListView : UnityEngine.MonoBehaviour
{
    private PRISM.Produce.ProducePreparationEpisodeListCarousel carousel;
    private ENTERPRISE.UI.UIButton nextButton;
    private ENTERPRISE.UI.UIButton prevButton;
    public PRISM.Produce.ProducePreparationEpisodeListCarousel Carousel { get; set; }
    public ENTERPRISE.UI.UIButton NextButton { get; set; }
    public ENTERPRISE.UI.UIButton PrevButton { get; set; }
}

// Namespace: PRISM.Produce
public class ProducePreparationEpisodeSelectUnitBackgroundView : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject[] backgroundObjects;
    private UnityEngine.CanvasGroup fadeCanvasGroup;
    private UnityEngine.AnimationCurve fadeCurve;
    private System.IDisposable fadeTimeDisposable;
    private void OnDestroy();
    public void Show(int index);
    public void FadeInShow(int index, float fadeTime);
    private void _setUnitBackground(int index);
    private void _fadeCanvasGropHide();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<float, bool> <>9__6_2;
        private bool <FadeInShow>b__6_2(float rate);
    }

    private class <>c__DisplayClass6_0
    {
        public float time;
        public float fadeTime;
        public PRISM.Produce.ProducePreparationEpisodeSelectUnitBackgroundView <>4__this;
        private void <FadeInShow>b__0(long _);
        private float <FadeInShow>b__1(long _);
        private float <FadeInShow>b__3(float rate);
        private void <FadeInShow>b__4(float rate);
        private void <FadeInShow>b__5();
    }
}

// Namespace: PRISM.Produce
public class ProducePreparationEpisodeSelectUnitEpisodeModel
{
    private int <UnitId>k__BackingField;
    private bool <HasProduceBonus>k__BackingField;
    private PRISM.Produce.ProducePreparationEpisodeSelectEpisodeModel[] <EpisodeModels>k__BackingField;
    public int UnitId { get; set; }
    public bool HasProduceBonus { get; set; }
    public PRISM.Produce.ProducePreparationEpisodeSelectEpisodeModel[] EpisodeModels { get; set; }
    public bool IsEpisodeList { get; set; }
    public int EpishodeListLength { get; set; }
    public static PRISM.Produce.ProducePreparationEpisodeSelectUnitEpisodeModel Create(int unitId, System.Collections.Generic.List<PRISM.Module.Networking.IEpisodeStatus> list, bool hasProduceBonus);
    public System.Collections.Generic.Dictionary<string, ProduceDifficultyType> GetReleasedDifficultyDic();

    private class <>O
    {
        public static System.Func<PRISM.Module.Networking.IEpisodeStatus, PRISM.Produce.ProducePreparationEpisodeSelectEpisodeModel> <0>__Create;
    }
}

// Namespace: PRISM.Produce
public class ProducePreparationEpisodeSelectUnitListContext : PRISM.CommonListViewContext
{
    private int <ItemCount>k__BackingField;
    public int ItemCount { get; set; }
}

// Namespace: PRISM.Produce
public class ProducePreparationEpisodeSelectUnitListItem : PRISM.CommonListViewCell<PRISM.Produce.ProducePreparationEpisodeSelectUnitListItemData, PRISM.Produce.ProducePreparationEpisodeSelectUnitListContext>
{
    private UnityEngine.UI.Image tabIcon;
    private UnityEngine.GameObject spaceLine;
    private System.Threading.CancellationTokenSource cts;
    public void UpdateContent(PRISM.Produce.ProducePreparationEpisodeSelectUnitListItemData data);
    private void OnDestroy();
}

// Namespace: PRISM.Produce
public class ProducePreparationEpisodeSelectUnitListItemData
{
    private PRISM.Produce.ProducePreparationEpisodeSelectUnitEpisodeModel <ListItemModel>k__BackingField;
    public PRISM.Produce.ProducePreparationEpisodeSelectUnitEpisodeModel ListItemModel { get; set; }
}

// Namespace: PRISM.Produce
public class ProducePreparationEpisodeSelectUnitListView : PRISM.CommonListView<PRISM.Produce.ProducePreparationEpisodeSelectUnitListItem, PRISM.Produce.ProducePreparationEpisodeSelectUnitListItemData, PRISM.Produce.ProducePreparationEpisodeSelectUnitListContext>
{
    private float scrollCorrectionDuration;
    private EasingCore.Ease scrollCorrectionEase;
    public void UpdateContents(System.Collections.Generic.IList<PRISM.Produce.ProducePreparationEpisodeSelectUnitListItemData> items);
    protected void Initialize();
    private void <Initialize>b__3_0(int index);
}

// Namespace: PRISM.Produce
public class FriendSupportModel
{
    public PRISM.Module.Networking.IFriendSupportStatus Data;
    public PRISM.Common.Model.SCharaIcon SCharaIcon;
    public PRISM.UnitIdol GetUnitIdolForMiniCharaADV();
}

// Namespace: PRISM.Produce
public class ProducePreparationIdolSkillSelectListItemContent : UnityEngine.MonoBehaviour
{
    private PRISM.UI.IdolSkillIconView idolSkillIconView;
    private PRISM.VoDaViMeMultiView voDaViMeMultiView;
    private UnityEngine.GameObject goVoDaViMeMultiView;
    private ENTERPRISE.UI.UITextMeshProUGUI idolSkillNameText;
    private UnityEngine.GameObject lockObject;
    private UnityEngine.GameObject releaseRequirementObject;
    private ENTERPRISE.UI.UITextMeshProUGUI releaseRequirementText;
    private UnityEngine.GameObject activeObject;
    private ENTERPRISE.UI.UIButton selectedButton;
    private UnityEngine.GameObject blockObject;
    public UnityEngine.GameObject ActiveObject { get; set; }
    public ENTERPRISE.UI.UIButton SelectedButton { get; set; }
    public UnityEngine.GameObject BlockObject { get; set; }
    public void Setup(int skillId, int currentSkillLv, int currentPIEvolutionLevel, int unlockPIEvolutionLevel, bool isSelected, PRISM.ResourceManagement.IResourceLoader loader);
    private void _skillTypeDisplay(System.Collections.Generic.IReadOnlyList<ProduceParameterType> produceParameterTypeList);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<int, ProduceParameterType> <>9__16_0;
        public static System.Func<ProduceParameterType, bool> <>9__17_0;
        private ProduceParameterType <Setup>b__16_0(int x);
        private bool <_skillTypeDisplay>b__17_0(ProduceParameterType x);
    }
}

// Namespace: PRISM.Produce
public class ViewProducePreparationIdolSelectModel
{
    public static int MustSupportCharaNum;
    private System.Threading.CancellationToken ct;
    private PRISM.Stamina.StaminaModel staminaModel;
    private System.Collections.Generic.List<PRISM.Produce.ProduceUnitModel> units;
    public System.Action<int, int> onUpdateSupportCharaFavoriteMark;
    public int CurrentUnitNumber;
    public PRISM.Stamina.StaminaModel StaminaModel { get; set; }
    public int UnitCount { get; set; }
    public PRISM.Produce.ProduceUnitModel CurrentProduceUnitModel { get; set; }
    public Cysharp.Threading.Tasks.UniTask PreloadAsync();
    public Cysharp.Threading.Tasks.UniTask RequestGetProduceUnitAsync();
    public void ApplyCurrentUnitNumber();
    public Cysharp.Threading.Tasks.UniTask<bool> RequestSetProduceUnitAsync();
    public Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.List<PRISM.Module.Networking.ISupportCharacterStatus>> GetSupportCharacterListAsync();
    public Cysharp.Threading.Tasks.UniTask<PRISM.Common.Model.PIdolIcon> GetPIdolIconAsync(int mstProduceIdolId);
    public Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.IEnumerable<PRISM.Common.Model.SCharaIcon>> GetSupportCharacterIconAsync(System.Collections.Generic.IEnumerable<PRISM.Module.Networking.ISupportCharacterStatus> sCharaLIst);
    public void UpdateSupportCharaFavoriteMark(int index, int favoriteMarkID);
    private Cysharp.Threading.Tasks.UniTask _getStaminaInfoAsync();
    private bool <ApplyCurrentUnitNumber>b__15_0(PRISM.Produce.ProduceUnitModel x);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.ProduceIdolModel, PRISM.Module.Networking.ISetProduceUnitIdolStatus> <>9__16_0;
        public static System.Func<PRISM.Produce.SupportCharacterModel, int> <>9__16_1;
        public static System.Func<PRISM.Module.Networking.ISupportCharacterStatus, PRISM.Common.Model.SCharaIcon> <>9__19_0;
        private PRISM.Module.Networking.ISetProduceUnitIdolStatus <RequestSetProduceUnitAsync>b__16_0(PRISM.ProduceIdolModel x);
        private int <RequestSetProduceUnitAsync>b__16_1(PRISM.Produce.SupportCharacterModel x);
        private PRISM.Common.Model.SCharaIcon <GetSupportCharacterIconAsync>b__19_0(PRISM.Module.Networking.ISupportCharacterStatus x);
    }

    private class <>c__DisplayClass18_0
    {
        public int mstProduceIdolId;
        private bool <GetPIdolIconAsync>b__0(PRISM.Common.Model.PIdolIcon x);
    }

    private struct <GetPIdolIconAsync>d__18 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Common.Model.PIdolIcon> <>t__builder;
        public int mstProduceIdolId;
        public PRISM.Produce.ViewProducePreparationIdolSelectModel <>4__this;
        private <>c__DisplayClass18_0 <>8__1;
        private Awaiter<System.Collections.Generic.IEnumerable<PRISM.Common.Model.PIdolIcon>> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetSupportCharacterListAsync>d__17 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.Collections.Generic.List<PRISM.Module.Networking.ISupportCharacterStatus>> <>t__builder;
        public PRISM.Produce.ViewProducePreparationIdolSelectModel <>4__this;
        private Awaiter<PRISM.Module.Networking.IGetSupportCharacterListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <PreloadAsync>d__13 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewProducePreparationIdolSelectModel <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <RequestGetProduceUnitAsync>d__14 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewProducePreparationIdolSelectModel <>4__this;
        private Awaiter<PRISM.Module.Networking.IGetTutorialProduceUnitReply> <>u__1;
        private PRISM.GlobalDataManager <>7__wrap1;
        private Awaiter<PRISM.Produce.ProduceUnitModel> <>u__2;
        private Awaiter<PRISM.Module.Networking.IGetProduceUnitReply> <>u__3;
        private System.Collections.Generic.IEnumerator<PRISM.Module.Networking.IProduceIdolUnitStatus> <>7__wrap2;
        private System.Collections.Generic.List<PRISM.Produce.ProduceUnitModel> <>7__wrap3;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <RequestSetProduceUnitAsync>d__16 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<bool> <>t__builder;
        public PRISM.Produce.ViewProducePreparationIdolSelectModel <>4__this;
        private PRISM.Produce.ProduceUnitModel <unit>5__2;
        private Awaiter<PRISM.Module.Networking.ISetProduceUnitReply> <>u__1;
        private Awaiter<PRISM.Produce.ProduceUnitModel> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_getStaminaInfoAsync>d__21 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewProducePreparationIdolSelectModel <>4__this;
        private Awaiter<PRISM.Stamina.StaminaModel> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ViewProducePreparationIdolSelectView : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UITextMeshProUGUI episodeName;
    private UnityEngine.GameObject[] difficultyIcons;
    private ENTERPRISE.UI.ButtonBase episodeDetailButton;
    private PRISM.UI.IdolSkillIconView[] skillIconButtonArray;
    private StatusInfo[] idolStatusArray;
    private PRISM.UI.IdolTapAreaView[] idolTapAreaViews;
    private UnityEngine.GameObject[] idolParentObjctArray;
    private ENTERPRISE.UI.UITextMeshProUGUI totalVo;
    private ENTERPRISE.UI.UITextMeshProUGUI totalDa;
    private ENTERPRISE.UI.UITextMeshProUGUI totalVi;
    private ENTERPRISE.UI.UITextMeshProUGUI totalHP;
    private UnityEngine.UI.RawImage totalVoRank;
    private UnityEngine.UI.RawImage totalDaRank;
    private UnityEngine.UI.RawImage totalViRank;
    private UnityEngine.UI.RawImage totalMeRank;
    private ENTERPRISE.UI.UIButton supportUnitButton;
    private ENTERPRISE.UI.UIButton[] emptySupportButtonArray;
    private PRISM.UI.SCharaIconView[] supportButtonArray;
    private UnityEngine.UI.Image footerBackGround;
    private System.Collections.Generic.List<UnityEngine.CanvasGroup> pageAnimationTarget;
    private System.Collections.Generic.List<UnityEngine.CanvasGroup> pageAnimationHideTarget;
    private float pageAnimationDistance;
    private float pageAnimationTime;
    private ENTERPRISE.UI.ButtonBase startButton;
    private TMPro.TextMeshProUGUI startButtonStText;
    private ENTERPRISE.UI.ButtonBase subSeasonDetailButton;
    private UnityEngine.GameObject subSeasonCheckOn;
    private UnityEngine.GameObject subSeasonCheckOff;
    private ENTERPRISE.UI.ButtonBase rightPageButton;
    private ENTERPRISE.UI.ButtonBase leftPageButton;
    private TMPro.TextMeshProUGUI staminaUsageStatusText;
    private TMPro.TextMeshProUGUI unitNameText;
    private ENTERPRISE.UI.UIButton unitNameEditButton;
    private string howToPlayManualKey;
    private PRISM.SubSeasonDetailContentViewModel subSeasonDetailContentViewModel;
    private PRISM.Produce.HowToPlayProduceManualData howToPlayProduceManualData;
    private UniRx.Subject<System.ValueTuple<int, int>> onClickIdol;
    private UniRx.Subject<int> onLongClickIdol;
    private UniRx.Subject<UniRx.Unit> onClickUnitNameEditButton;
    private UniRx.CompositeDisposable buttonDisposables;
    private PRISM.ResourceManagement.IResourceLoader loader;
    public System.Action OnClickStart;
    public System.Action OnClickEpisodeDetail;
    public System.Action OnCkickSupportEdit;
    public System.Action<int> OnClickSupport;
    public System.Action<PRISM.Produce.SupportCharacterModel, int> OnLongClickSupport;
    public System.Action OnClickSubSeasonButton;
    public System.Action<int> OnPageMove;
    public System.IObservable<System.ValueTuple<int, int>> OnClickIdol { get; set; }
    public System.IObservable<int> OnLongClickIdol { get; set; }
    public System.IObservable<UniRx.Unit> OnClickUnitNameEdit { get; set; }
    public PRISM.Produce.HowToPlayProduceManualData HowToPlayProduceManualData { get; set; }
    public Cysharp.Threading.Tasks.UniTask SetupAsync(int currentStamina, PRISM.Module.Networking.IEpisodeStatus episodeData, ProduceDifficultyType selectDifficulty, PRISM.SubSeasonDetailContentViewModel subSeasonDetailViewModel, PRISM.Produce.ProduceUnitModel produceUnitModel, System.Collections.Generic.IReadOnlyList<PRISM.Common.Model.SCharaIcon> sCharaDatas, PRISM.ResourceManagement.IResourceLoader resourceLoader, PRISM.Common.Model.SCharaIcon friendData, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask PageAnimateFadeOutAsync(bool isToLeft, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask PageAnimateFadeInAsync(bool isToLeft, System.Threading.CancellationToken ct);
    public void SetStartButtonStaminaText(int needSt);
    public Cysharp.Threading.Tasks.UniTask ChangeProduceIdolAsync(int index, int mstProduceIdolId);
    public Cysharp.Threading.Tasks.UniTask UpdateSupportCharaIconAsync(System.Collections.Generic.IReadOnlyList<PRISM.Common.Model.SCharaIcon> sCharaIcons, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken ct);
    public void UpdateSupportCharaFavoriteMark(int index, int favoriteMark);
    public void SetStaminaUsageText(int rateValue, bool isAlwaysMax);
    public void UpdateIdolSkillView(int index, int skillId, int currentLevel, PRISM.ResourceManagement.IResourceLoader loader);
    public Cysharp.Threading.Tasks.UniTask UpdateTotalStatusAsync(PRISM.Produce.ProduceUnitModel unit, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken ct);
    public void UpdateIdolStatusView(int index, PRISM.ProduceIdolModel produceIdolModel);
    public void SetupSubSeasonButtonStatus();
    public Cysharp.Threading.Tasks.UniTask TerminateAsync();
    public Cysharp.Threading.Tasks.UniTask SetupIdolsInfoAsync(PRISM.Produce.ProduceUnitModel unitModel, System.Collections.Generic.IReadOnlyList<PRISM.Common.Model.SCharaIcon> sCharaDatas, PRISM.ResourceManagement.IResourceLoader resourceLoader, PRISM.Common.Model.SCharaIcon friendData, System.Threading.CancellationToken ct);
    private void _setupIdolObjectDisplay(System.Collections.Generic.IReadOnlyList<PRISM.ProduceIdolModel> pIdolModels);
    private void _setupEpisodeInfo(int currentStamina, PRISM.Module.Networking.IEpisodeStatus data, ProduceDifficultyType selectDifficulty);
    private void _setupIdolsInfo(System.Collections.Generic.IReadOnlyList<PRISM.ProduceIdolModel> pIdolModels);
    private Cysharp.Threading.Tasks.UniTask _setupButtonsAsync(System.Collections.Generic.IReadOnlyList<PRISM.ProduceIdolModel> pIdolModels, System.Collections.Generic.IReadOnlyList<PRISM.Produce.SupportCharacterModel> sCharaModels, System.Collections.Generic.IReadOnlyList<PRISM.Common.Model.SCharaIcon> sCharaIcons, PRISM.ResourceManagement.IResourceLoader resourceLoader, PRISM.Common.Model.SCharaIcon friendData, System.Threading.CancellationToken ct);
    private Cysharp.Threading.Tasks.UniTask _setupSupportButtonAsync(System.Collections.Generic.IReadOnlyList<PRISM.Produce.SupportCharacterModel> supportIdols, System.Collections.Generic.IReadOnlyList<PRISM.Common.Model.SCharaIcon> sCharaIcons, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken ct);
    private void <SetupAsync>b__57_0();
    private void <PageAnimateFadeOutAsync>b__58_0(UnityEngine.CanvasGroup x);
    private void <PageAnimateFadeInAsync>b__59_0(UnityEngine.CanvasGroup x);

    public class StatusInfo
    {
        private UnityEngine.GameObject root;
        private TMPro.TextMeshProUGUI vo;
        private TMPro.TextMeshProUGUI da;
        private TMPro.TextMeshProUGUI vi;
        private TMPro.TextMeshProUGUI me;
        private TMPro.TextMeshProUGUI baseVo;
        private TMPro.TextMeshProUGUI baseDa;
        private TMPro.TextMeshProUGUI baseVi;
        private TMPro.TextMeshProUGUI baseMe;
        public UnityEngine.GameObject Root { get; set; }
        public void SetStatus(PRISM.ProduceIdolModel idol);
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.UI.IdolTapAreaView, System.IObservable<System.ValueTuple<int, int>>> <>9__74_0;
        public static System.Func<PRISM.UI.IdolTapAreaView, System.IObservable<int>> <>9__74_2;
        private System.IObservable<System.ValueTuple<int, int>> <_setupButtonsAsync>b__74_0(PRISM.UI.IdolTapAreaView x);
        private System.IObservable<int> <_setupButtonsAsync>b__74_2(PRISM.UI.IdolTapAreaView x);
    }

    private class <>c__DisplayClass74_0
    {
        public PRISM.Produce.ViewProducePreparationIdolSelectView <>4__this;
        public System.Collections.Generic.IReadOnlyList<PRISM.ProduceIdolModel> pIdolModels;
        private void <_setupButtonsAsync>b__1(System.ValueTuple<int, int> t);
        private void <_setupButtonsAsync>b__3(int index);
        private void <_setupButtonsAsync>b__4();
        private void <_setupButtonsAsync>b__5();
        private void <_setupButtonsAsync>b__6();
        private void <_setupButtonsAsync>b__7();
        private void <_setupButtonsAsync>b__8();
        private void <_setupButtonsAsync>b__9();
    }

    private class <>c__DisplayClass75_0
    {
        public PRISM.Produce.ViewProducePreparationIdolSelectView <>4__this;
        public System.Collections.Generic.IReadOnlyList<PRISM.Produce.SupportCharacterModel> supportIdols;
    }

    private class <>c__DisplayClass75_1
    {
        public int index;
        public <>c__DisplayClass75_0 CS$<>8__locals1;
        private void <_setupSupportButtonAsync>b__0(System.ValueTuple<int, UnityEngine.GameObject> _);
        private void <_setupSupportButtonAsync>b__1(System.ValueTuple<int, UnityEngine.GameObject> _);
        private void <_setupSupportButtonAsync>b__2();
    }

    private struct <SetupAsync>d__57 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewProducePreparationIdolSelectView <>4__this;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        public PRISM.SubSeasonDetailContentViewModel subSeasonDetailViewModel;
        public int currentStamina;
        public PRISM.Module.Networking.IEpisodeStatus episodeData;
        public ProduceDifficultyType selectDifficulty;
        public PRISM.Produce.ProduceUnitModel produceUnitModel;
        public System.Collections.Generic.IReadOnlyList<PRISM.Common.Model.SCharaIcon> sCharaDatas;
        public PRISM.Common.Model.SCharaIcon friendData;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.IdolSelectFooterColorData> <>u__1;
        private Awaiter <>u__2;
        private Awaiter<PRISM.Produce.HowToPlayProduceManualData> <>u__3;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetupIdolsInfoAsync>d__70 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ProduceUnitModel unitModel;
        public PRISM.Produce.ViewProducePreparationIdolSelectView <>4__this;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        public System.Threading.CancellationToken ct;
        public System.Collections.Generic.IReadOnlyList<PRISM.Common.Model.SCharaIcon> sCharaDatas;
        public PRISM.Common.Model.SCharaIcon friendData;
        private System.Collections.Generic.List<PRISM.ProduceIdolModel> <pIdolModels>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <UpdateSupportCharaIconAsync>d__62 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewProducePreparationIdolSelectView <>4__this;
        public System.Collections.Generic.IReadOnlyList<PRISM.Common.Model.SCharaIcon> sCharaIcons;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        public System.Threading.CancellationToken ct;
        private int <i>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_setupButtonsAsync>d__74 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewProducePreparationIdolSelectView <>4__this;
        public System.Collections.Generic.IReadOnlyList<PRISM.ProduceIdolModel> pIdolModels;
        private <>c__DisplayClass74_0 <>8__1;
        public System.Collections.Generic.IReadOnlyList<PRISM.Produce.SupportCharacterModel> sCharaModels;
        public System.Collections.Generic.IReadOnlyList<PRISM.Common.Model.SCharaIcon> sCharaIcons;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class AiComboData
{
    private SkillType <SkillType>k__BackingField;
    private int <CardId>k__BackingField;
    public SkillType SkillType { get; set; }
    public int CardId { get; set; }
}

// Namespace: PRISM.Produce
public class AiComboModel
{
    private System.Collections.Generic.List<PRISM.Produce.AiPatternData> aiPatternDataTargetList;
    private System.Collections.Generic.List<PRISM.Produce.AiPatternData> aiPatternDataAllList;
    public void Add(PRISM.Produce.AiPatternData data);
    public System.Collections.Generic.List<PRISM.Produce.AiPatternData> GetPatternDataTargetList();
    public void CalcPatternData(System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> deckData);
    public System.Collections.Generic.List<PRISM.Produce.AiPatternData> GetPatternDataListByCardId(int cardId);
    private bool _isCompleteCard(System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> deckData, PRISM.Produce.AiPatternData data);

    private class <>c__DisplayClass5_0
    {
        public int cardId;
        private bool <GetPatternDataListByCardId>b__0(PRISM.Produce.AiPatternData t);
    }

    private class <>c__DisplayClass6_0
    {
        public PRISM.Produce.AiComboData combo;
        private bool <_isCompleteCard>b__0(PRISM.Produce.IngamePCardModel card);
    }
}

// Namespace: PRISM.Produce
public class AiDefine
{
    public static int FirstCardScoreRate;
    public static int MaxTypeCounter;
    public static int TypeCounterPoint;
    public static int AppealZeroScore;
    public static int AddParamaterTypesScore;
    public static string EditorAiPatternScriptableObjectPath;
    public static string AiPatternScriptableObjectPath;
    public static string EditorAiExcelPath;

    public enum SkillType : System.Enum
    {
        public int value__;
        public static SkillType PCard;
        public static SkillType IdolSkill;
    }
}

// Namespace: PRISM.Produce
public class AiExternalAccess
{
    public System.Func<PRISM.Produce.IngamePlayerModel> GetIngamePlayerModelFunc;
    public System.Func<PRISM.Produce.IngamePlayerModel> GetIngameEnemyModelFunc;
    private System.Func<float> <GetIngameTimeFunc>k__BackingField;
    private System.Func<float> <GetIngameMaxTimeFunc>k__BackingField;
    private System.Func<int> <GetHandCardNumFunc>k__BackingField;
    private System.Func<int> <GetMaxHandCountFunc>k__BackingField;
    private System.Func<int> <GetUsePcardCountFunc>k__BackingField;
    private System.Func<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> <GetHandCardListFunc>k__BackingField;
    private System.Func<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> <GetDeckCardListFunc>k__BackingField;
    private System.Func<PRISM.Produce.IngamePlayerStatusModel> <GetMyStatusFunc>k__BackingField;
    private System.Func<float> <GetTimeRateFunc>k__BackingField;
    private System.Func<int> <GetUserPPFunc>k__BackingField;
    private System.Func<int> <GetUserAPFunc>k__BackingField;
    private System.Func<int> <GetUserAPMaxFunc>k__BackingField;
    private System.Func<int> <GetUserMentalFunc>k__BackingField;
    private System.Func<int> <GetUserMentalMaxFunc>k__BackingField;
    private System.Func<float> <GetMentalPercentFunc>k__BackingField;
    private System.Func<int> <GetAvoidRateFunc>k__BackingField;
    private System.Func<int> <GetEnemyMentalFunc>k__BackingField;
    private System.Func<int> <GetEnemyMentalMaxFunc>k__BackingField;
    private System.Func<int> <GetMentalGuardFunc>k__BackingField;
    private System.Func<PRISM.Produce.ProduceInGameEffectType, int> <GetEffectValueSumFunc>k__BackingField;
    private System.Func<PRISM.Produce.IngamePCardModel, int> <GetPlayerCurrentCardCostFunc>k__BackingField;
    private System.Func<PRISM.Produce.ProduceInGameEffectType, bool> <IsExistEffectFunc>k__BackingField;
    private System.Func<PRISM.Produce.IngamePCardModel, PRISM.Produce.IngameActionEffectModel, PRISM.AutoReleaseScope<PRISM.Produce.InGameActionResult>> <GetPredictionByCardEffectFunc>k__BackingField;
    private System.Func<PRISM.Produce.IngamePCardModel, float, PRISM.AutoReleaseScope<PRISM.Produce.InGameActionResult>> <GetPredictionByCardFunc>k__BackingField;
    private System.Action<int> <OnExecuteCard>k__BackingField;
    public UniRx.Subject<int> OnExecuteIdolSkillSubject;
    private System.Func<float> GetIngameTimeFunc { get; set; }
    private System.Func<float> GetIngameMaxTimeFunc { get; set; }
    private System.Func<int> GetHandCardNumFunc { get; set; }
    private System.Func<int> GetMaxHandCountFunc { get; set; }
    private System.Func<int> GetUsePcardCountFunc { get; set; }
    private System.Func<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetHandCardListFunc { get; set; }
    private System.Func<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetDeckCardListFunc { get; set; }
    private System.Func<PRISM.Produce.IngamePlayerStatusModel> GetMyStatusFunc { get; set; }
    private System.Func<float> GetTimeRateFunc { get; set; }
    private System.Func<int> GetUserPPFunc { get; set; }
    private System.Func<int> GetUserAPFunc { get; set; }
    private System.Func<int> GetUserAPMaxFunc { get; set; }
    private System.Func<int> GetUserMentalFunc { get; set; }
    private System.Func<int> GetUserMentalMaxFunc { get; set; }
    private System.Func<float> GetMentalPercentFunc { get; set; }
    private System.Func<int> GetAvoidRateFunc { get; set; }
    private System.Func<int> GetEnemyMentalFunc { get; set; }
    private System.Func<int> GetEnemyMentalMaxFunc { get; set; }
    private System.Func<int> GetMentalGuardFunc { get; set; }
    private System.Func<PRISM.Produce.ProduceInGameEffectType, int> GetEffectValueSumFunc { get; set; }
    private System.Func<PRISM.Produce.IngamePCardModel, int> GetPlayerCurrentCardCostFunc { get; set; }
    private System.Func<PRISM.Produce.ProduceInGameEffectType, bool> IsExistEffectFunc { get; set; }
    private System.Func<PRISM.Produce.IngamePCardModel, PRISM.Produce.IngameActionEffectModel, PRISM.AutoReleaseScope<PRISM.Produce.InGameActionResult>> GetPredictionByCardEffectFunc { get; set; }
    private System.Func<PRISM.Produce.IngamePCardModel, float, PRISM.AutoReleaseScope<PRISM.Produce.InGameActionResult>> GetPredictionByCardFunc { get; set; }
    private System.Action<int> OnExecuteCard { get; set; }
    public void ExecuteCard(int index);
    public void Terminate();
    public System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> GetHandCardList();
    public System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> GetDeckCardList();
    public float GetMyMentalRate();
    public float GetEnemyMentalRate();
    public bool IsMentalBreakEnemy();
    public int GetPlayerCurrentCardCost(PRISM.Produce.IngamePCardModel produceCard);
    public bool IsInHand(int id);
    public bool IsInDeck(int id);
    public int GetUserPP();
    public int GetUseCardAppealPoint(PRISM.Produce.IngamePCardModel card);
    public PRISM.AutoReleaseScope<PRISM.Produce.InGameActionResult> GetCardModel(PRISM.Produce.IngamePCardModel card);
    public PRISM.Produce.IngamePlayerStatusModel GetMyStatus();
    public float GetTimeRate();
    private int _getMyMentalPercent();

    private class <>c__DisplayClass111_0
    {
        public int id;
        private bool <IsInHand>b__0(PRISM.Produce.IngamePCardModel card);
    }

    private class <>c__DisplayClass112_0
    {
        public int id;
        private bool <IsInDeck>b__0(PRISM.Produce.IngamePCardModel card);
    }
}

// Namespace: PRISM.Produce
public class AiModel
{
    private static float CalcIntervalSec;
    private static int MinimumHandNum;
    private static float IdolSkillTimeRateCorrectionValue;
    private bool <IsLog>k__BackingField;
    private float debugTime;
    private int useCardIndex;
    private int useSkillIndex;
    private float time;
    private PRISM.Produce.AiExternalAccess externalAccess;
    private PRISM.Produce.AiTestDataCreateModel aiTestDataCreateModel;
    private PRISM.Produce.AiComboModel comboModel;
    private PRISM.Produce.IngameSkillActionModel skillActionModel;
    private System.Collections.Generic.List<SkillData> skillDataList;
    private ExecuteData executeData;
    private PRISM.Produce.CardAndSkillExecResult aiResult;
    private UniRx.CompositeDisposable disposables;
    public bool IsLog { get; set; }
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(PRISM.Produce.AiExternalAccess aiExternalAccess, PRISM.Produce.IngameSkillActionModel skillActionModel, PRISM.Produce.IngameRandomModel randomModel, System.Threading.CancellationToken token);
    public void Reset();
    public void Terminate();
    public int GetUseCardIndex();
    public int GetUseSkillIndex();
    public void Update(bool isUseCard, float deltaTime, bool isChangePP);
    private SkillData _getFreeSkillData();
    private void _calcUpdate(bool isUseCard);
    public void OnUseCard(PRISM.Produce.IngamePCardModel card);
    private void _aiDebugLog(string logText);

    public class SkillData
    {
        private PRISM.Produce.IngameSkillModel <skillModel>k__BackingField;
        private PRISM.Produce.IngamePCardModel <pcardModel>k__BackingField;
        public int index;
        public PRISM.Produce.IngameSkillModel skillModel { get; set; }
        public PRISM.Produce.IngamePCardModel pcardModel { get; set; }
        public static SkillData Construct();
        public static SkillData Instantiate();
        public void SetSkillData(PRISM.Produce.IngameSkillModel skillModel);
        public void SetSkillData(PRISM.Produce.IngamePCardModel pcardModel);
        public void Reset();
        public bool IsPcard();
    }

    public class ExecuteData
    {
        private SkillData[] skillDataList;
        private CardResultGroupData group;
        public CardResultGroupData Execute(PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngamePlayerModel opponent, PRISM.Produce.IngameSkillActionModel skillActionModel, float offsetSec, PRISM.Produce.CardAndSkillExecResult aiResult, SkillData skillDataA, SkillData skillDataB);
        public void Terminate();
    }

    public class CardResultGroupData
    {
        private SkillResultData[] skillResultDatas;
        public void Terminate();
        public SkillResultData GetCardResult(int index);
        public int CalcLastScore(float timeRate, PRISM.Produce.AiModel aiModel);
        public SkillData GetSkillData(int index);
        public string OutputLog(float timeRate, PRISM.Produce.AiModel aiModel);
        private string _getSkillName(SkillData skillData);
    }

    public class SkillResultData
    {
        private int offsetScore;
        private PRISM.Produce.IngamePlayerModel <Executor>k__BackingField;
        private PRISM.Produce.IngamePlayerModel <Opponent>k__BackingField;
        private SkillData <UseSkillData>k__BackingField;
        public PRISM.Produce.IngamePlayerModel Executor { get; set; }
        public PRISM.Produce.IngamePlayerModel Opponent { get; set; }
        public SkillData UseSkillData { get; set; }
        public void Execute(SkillData skillData, PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngamePlayerModel opponent, PRISM.Produce.IngameSkillActionModel skillActionModel, float offsetSec, PRISM.Produce.CardAndSkillExecResult aiResult);
        public void Terminate();
        public int CalcPlayerScore(float timeRate, int index, PRISM.Produce.AiModel aiModel);
        private int _calcMentalScore(int totalVoDaVi, PRISM.Produce.AiModel aiModel);
        public string OupPut(float timeRate, PRISM.Produce.AiModel aiModel);
    }

    private struct <InitializeAsync>d__20 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.AiModel <>4__this;
        public PRISM.Produce.AiExternalAccess aiExternalAccess;
        public System.Threading.CancellationToken token;
        public PRISM.Produce.IngameSkillActionModel skillActionModel;
        public PRISM.Produce.IngameRandomModel randomModel;
        private Awaiter<PRISM.Produce.AiComboModel> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class AiPatternData
{
    private int <ActionPatternId>k__BackingField;
    private int <Score>k__BackingField;
    private System.Collections.Generic.List<PRISM.Produce.AiComboData> <ComboDataList>k__BackingField;
    public int ActionPatternId { get; set; }
    public int Score { get; set; }
    public System.Collections.Generic.List<PRISM.Produce.AiComboData> ComboDataList { get; set; }
    public void SetData(int patternId, int score, PRISM.Produce.AiComboData[] comboDatas);
}

// Namespace: PRISM.Produce
public class AiPatternDataScriptableObject : UnityEngine.ScriptableObject
{
    private PRISM.Produce.EditorAPatternSetList editorAiPatternSetList;
    private PRISM.Produce.EditorAiConfig editorAiConfig;
    private PRISM.Produce.EditorAiSynergySetList editorAiSynergySetList;
    public void AddPattuanSet(PRISM.Produce.EditorAiPatternSet patternSet);
    public System.Collections.Generic.List<PRISM.Produce.EditorAiPatternSet> GetPatternSetList();
    public void AddSynergySet(PRISM.Produce.EditorAiSynergySet synergySet);
    public System.Collections.Generic.List<PRISM.Produce.EditorAiSynergySet> GetSynergySetList();
    public PRISM.Produce.EditorAiPatternSet GetActivePatternSet();
    public int GetActivePatternSetIndex();
    public void SetActivePatternSet(int index);
    public int GetActiveSynergyIndex();
    public void SetActiveSynergyIndex(int index);
    public PRISM.Produce.EditorAiSynergySet GetActiveSynergySet();
}

// Namespace: PRISM.Produce
public class AiScoreRateData
{
    private System.Collections.Generic.List<AiScoreRateSet> aiScoreRateSetList;
    public void AddScorete(int actionType, float rate);
    public float GetScoreRate(int actionType);

    public class AiScoreRateSet
    {
        private int <ActionType>k__BackingField;
        private float <Rate>k__BackingField;
        public int ActionType { get; set; }
        public float Rate { get; set; }
    }

    private class <>c__DisplayClass3_0
    {
        public int actionType;
        private bool <GetScoreRate>b__0(AiScoreRateSet item);
    }
}

// Namespace: PRISM.Produce
public class AiTestDataCreateModel
{
    private PRISM.Produce.AiComboModel aiComboModel;
    private PRISM.Produce.AiScoreRateData aiScoreRateData;
    public Cysharp.Threading.Tasks.UniTask<PRISM.Produce.AiComboModel> CreateAiComboModelAsync(System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> deckDataList, System.Threading.CancellationToken token);
    private void _addData(int patternId, int score, System.Collections.Generic.List<PRISM.Produce.EditorAiCombo> combo);
    private Cysharp.Threading.Tasks.UniTask _createTestDataAsync(System.Threading.CancellationToken token);

    private struct <CreateAiComboModelAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Produce.AiComboModel> <>t__builder;
        public PRISM.Produce.AiTestDataCreateModel <>4__this;
        public System.Threading.CancellationToken token;
        public System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> deckDataList;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_createTestDataAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Threading.CancellationToken token;
        public PRISM.Produce.AiTestDataCreateModel <>4__this;
        private PRISM.ResourceManagement.IResourceLoader <resourceLoader>5__2;
        private Awaiter<PRISM.Produce.AiPatternDataScriptableObject> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class EditorAiCombo
{
    public SkillType SkillType;
    public int SkillId;
}

// Namespace: PRISM.Produce
public class EditorAiConfig
{
    public int ActivePatternSetIndex;
    public int ActiveSynergyIndex;
}

// Namespace: PRISM.Produce
public class EditorAiPattern
{
    private string patternName;
    private int unitId;
    private System.Collections.Generic.List<PRISM.Produce.EditorAiCombo> comboList;
    public string GetPatternName();
    public void SetPatternName(string patternName);
    public int GetUnitId();
    public void SetUnitId(int unitId);
    public int GetScore();
    public void AddCombo(SkillType skillType, int skillId);
    public System.Collections.Generic.List<PRISM.Produce.EditorAiCombo> GetComboList();
}

// Namespace: PRISM.Produce
public class EditorAiPatternSet
{
    private System.Collections.Generic.List<PRISM.Produce.EditorAiPattern> editorAiPatternList;
    private string patternSetName;
    public string GetPatternSetName();
    public void SetPatternSetName(string name);
    public void AddAiPattern(PRISM.Produce.EditorAiPattern editorAiPattern);
    public System.Collections.Generic.List<PRISM.Produce.EditorAiPattern> GetEditorAiPatternList();
    public void Reset();
}

// Namespace: PRISM.Produce
public class EditorAPatternSetList
{
    private System.Collections.Generic.List<PRISM.Produce.EditorAiPatternSet> editorAiPatternSetList;
    public void AddEditorAiPattuanSet(PRISM.Produce.EditorAiPatternSet aiPatternSet);
    public System.Collections.Generic.List<PRISM.Produce.EditorAiPatternSet> GetEditorAiPatternSetList();
}

// Namespace: PRISM.Produce
public class EditorAiSynergy
{
    private string synergyName;
    private int unitId;
    private System.Collections.Generic.List<PRISM.Produce.EditorAiCombo> skillList;
    public string GetSynergyName();
    public void SetSynergyName(string patternName);
    public int GetUnitId();
    public void SetUnitId(int unitId);
    public System.Collections.Generic.List<PRISM.Produce.EditorAiCombo> GetSkillList();
    public void AddSkill(PRISM.Produce.EditorAiCombo aiCombo);
}

// Namespace: PRISM.Produce
public class EditorAiSynergySet
{
    private System.Collections.Generic.List<PRISM.Produce.EditorAiSynergy> editorSynergyList;
    private string synergySetName;
    public string GetSynergySetName();
    public void SetSynergySetName(string name);
    public void AddSynergy(PRISM.Produce.EditorAiSynergy editorSynergy);
    public System.Collections.Generic.List<PRISM.Produce.EditorAiSynergy> GetEditorSynergyList();
    public void Reset();
}

// Namespace: PRISM.Produce
public class EditorAiSynergySetList
{
    private System.Collections.Generic.List<PRISM.Produce.EditorAiSynergySet> editorAiSynergySetList;
    public void AddEditorAiPattuanSet(PRISM.Produce.EditorAiSynergySet synaergySet);
    public System.Collections.Generic.List<PRISM.Produce.EditorAiSynergySet> GetEditorAiSynergySetList();
}

// Namespace: PRISM.Produce
public class AppealPointGaugeContent : PRISM.Produce.InGameGaugeBase
{
    private static System.Collections.Generic.Dictionary<ProduceParameterType, string> InCreaseAppealTypeColorStrings;
    private static string InCreaseDefaultColorString;
    private static string DeCreaseDefaultColorString;
    private UnityEngine.GameObject valueTextArea;
    private System.Collections.Generic.IList<int> milestones;
    private UnityEngine.GameObject baseAppealMilestone;
    private UnityEngine.GameObject maxAppealMilestone;
    private UnityEngine.RectTransform appealMilestoneArea;
    private UnityEngine.Color appealHigherMilStoneColor;
    private UnityEngine.Color appealLowerMilStoneColor;
    private Coffee.UIExtensions.UIParticle effectParticle;
    private System.Collections.Generic.Dictionary<int, ENTERPRISE.UI.UITextMeshProUGUI> milstoneTextPairs;
    private bool isAnimation;
    private System.Collections.Generic.List<PRISM.Produce.AppealAnimationData> animationDataList;
    public void SetUpForSpecialLesson(int currentAppeal, int maxAppeal, System.Collections.Generic.IEnumerable<int> milestones);
    public void UpdateValueGauge(int current, int max);
    public void ShowVariationWithAnimation(int current, int changeValue, int getCount, int max, bool isCrease, ProduceParameterType parameterType, float duration);
    public void SetAnimationSpeed(float speed);
    public void AddAnimationData(int current, int changeValue, int getCount, int max, bool isCrease, ProduceParameterType parameterType);
    private Cysharp.Threading.Tasks.UniTask _showVariationWithAnimationAsync(int current, int changeValue, int getCount, int max, bool isCrease, ProduceParameterType parameterType, float duration, System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask _showVariationWithAnimationAsync(int current, int changeValue, int max, bool isCrease, ProduceParameterType parameterType, float duration, System.Threading.CancellationToken cancellationToken);
    protected void _updateGaugeFillAmount(UnityEngine.UI.Image gauge, float fillAmount);

    private struct <_showVariationWithAnimationAsync>d__19 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.AppealPointGaugeContent <>4__this;
        public int current;
        public int changeValue;
        public int getCount;
        public int max;
        public bool isCrease;
        public ProduceParameterType parameterType;
        public float duration;
        public System.Threading.CancellationToken cancellationToken;
        private PRISM.Produce.AppealAnimationData <data>5__2;
        private int <i>5__3;
        private Awaiter<bool> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class AvoidEffectContent : UnityEngine.MonoBehaviour
{
    private UnityEngine.Animator animator;
    private System.Threading.CancellationTokenSource tokenSource;
    public void Play();
    public void Hide();
    public void SetAnimationSpeed(float speed);
    public void Terminate();
    private Cysharp.Threading.Tasks.UniTask _playAsync(System.Threading.CancellationToken ct);
    private void _cancel();

    private struct <_playAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.AvoidEffectContent <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class PCardAndSkillAppealEffectModel : PRISM.Produce.PCardAndSkillUIEffectModelBase<PRISM.Produce.PCardAndSkillUIAppealEffect>
{
    private int playableAppeal;
    public int PlayableAppeal { get; set; }
    public bool TryGetEffect(System.Action<string> animEvent, UnityEngine.Component disposeComponent, PRISM.Produce.PCardAndSkillUIAppealEffect& effect);

    private class <>c__DisplayClass3_0
    {
        public System.Action<string> animEvent;
        private void <TryGetEffect>b__0(string eventTag);
    }
}

// Namespace: PRISM.Produce
public class PCardAndSkillUIAppealEffect : PRISM.Produce.PCardAndSkillUIEffect
{
    private ENTERPRISE.UI.AnimatorWithEvent animatorWithEvent;
    public ENTERPRISE.UI.AnimatorWithEvent AnimatorWithEvent { get; set; }
}

// Namespace: PRISM.Produce
public class PCardAndSkillUIEffect : UnityEngine.MonoBehaviour
{
    private UnityEngine.RectTransform moveTransform;
    private UnityEngine.Animator effectAnimator;
    private System.Collections.Generic.List<Cysharp.Threading.Tasks.UniTask> taskCaches;
    private float animationSpeed;
    private DG.Tweening.Tweener tweener;
    private UniRx.Subject<UniRx.Unit> onMoveComplete;
    public System.IObservable<UniRx.Unit> OnMoveComplete { get; set; }
    public bool IsDisplay { get; set; }
    public void SetDisplay(bool isDisplay);
    public void SetWorldPos(UnityEngine.Vector3 position);
    public void SetAnchoredPos(UnityEngine.Vector2 position);
    public void SetTrigger(int id);
    public Cysharp.Threading.Tasks.UniTask SetTriggerAsync(int id, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask MoveEffectAsync(UnityEngine.Vector3 from, UnityEngine.Vector3 to, float duration, PRISM.Definitions.SoundKey soundKey, System.Threading.CancellationToken ct);
    public void SetAnimationSpeed(float speed);
    private Cysharp.Threading.Tasks.UniTask _moveAsync(UnityEngine.Vector3 from, UnityEngine.Vector3 to, float duration, PRISM.Definitions.SoundKey soundKey, System.Threading.CancellationToken ct);
    private void OnDestroy();

    private struct <_moveAsync>d__17 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.PCardAndSkillUIEffect <>4__this;
        public UnityEngine.Vector3 from;
        public UnityEngine.Vector3 to;
        public float duration;
        public System.Threading.CancellationToken ct;
        public PRISM.Definitions.SoundKey soundKey;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class PCardAndSkillUIEffectModelBase`1<T>
{
    private T effectPrefab;
    private UnityEngine.Transform effectParent;
    protected System.Collections.Generic.List<T> effects;
    private float animationSpeed;
    public bool TryGetEffect(T& effect);
    public void HideAllEffect();
    public void SetAnimationSpeed(float speed);
}

// Namespace: PRISM.Produce
public class PCardAndSkillUIEffectModel : PRISM.Produce.PCardAndSkillUIEffectModelBase<PRISM.Produce.PCardAndSkillUIEffect>
{
}

// Namespace: PRISM.Produce
public class UsePCardAndSkillEffectController : UnityEngine.MonoBehaviour
{
    public static int DisplayEffectMax;
    private UniRx.Subject<System.ValueTuple<OtherEffectType, PlayerType>> onEndOtherEffectMove;
    private UnityEngine.Transform[] playerEffectPoints;
    private UnityEngine.Transform[] enemyEffectPoints;
    private PRISM.Produce.PCardAndSkillAppealEffectModel[] appealEffectModels;
    private PRISM.Produce.PCardAndSkillUIEffectModel[] otherEffectModels;
    private int moveFrame;
    private int displayEffectCount;
    private float animationSpeed;
    private System.Threading.CancellationTokenSource tokenSource;
    public System.IObservable<System.ValueTuple<OtherEffectType, PlayerType>> OnEndOtherEffectMove { get; set; }
    public float MoveDuration { get; set; }
    private int DisplayEffectCount { get; set; }
    public void PlayPlayerCardAppealEffect(int appeal, PlayerType toType);
    public void PlayAppealEffect(int appeal, UnityEngine.Vector3 from, PlayerType toType);
    public void PlayEffect(OtherEffectType effectType, EffectPoint from, PlayerType userType);
    public void PlayEffect(OtherEffectType effectType, UnityEngine.Vector3 from, PlayerType userType);
    public void HideAllEffect();
    public void SetAnimationSpeed(float speed);
    public void Terminate();
    private Cysharp.Threading.Tasks.UniTask _playPlayerCardAppealEffectAsync(int appeal, PlayerType toType, System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask _playAppealEffectAsync(int appeal, UnityEngine.Vector3 from, PlayerType toType, System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask _playEffectAsync(OtherEffectType effectType, EffectPoint from, PlayerType userType, System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask _playEffectAsync(OtherEffectType effectType, UnityEngine.Vector3 from, PlayerType userType, System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask _playEffectAsync(OtherEffectType effectType, UnityEngine.Vector3 from, System.ValueTuple<PlayerType, EffectPoint> to, System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask _playEffectAsync(OtherEffectType effectType, PlayerType playerType, UnityEngine.Vector3 from, UnityEngine.Vector3 to, System.Threading.CancellationToken cancellationToken);
    private bool _tryGetAppealEffect(int appeal, PRISM.Produce.PCardAndSkillUIAppealEffect& effect);
    private bool _tryGetOtherEffect(OtherEffectType effectType, PRISM.Produce.PCardAndSkillUIEffect& effect);
    private UnityEngine.Transform _getEffectPoint(PlayerType playerType, EffectPoint effectPoint);
    private Cysharp.Threading.Tasks.UniTask _moveEffectAsync(PRISM.Produce.PCardAndSkillUIEffect effect, UnityEngine.Vector3 from, UnityEngine.Vector3 to, PRISM.Definitions.SoundKey soundKey, System.Threading.CancellationToken cancellationToken);

    private enum AppealEffectType : System.Enum
    {
        public int value__;
        public static AppealEffectType Small;
        public static AppealEffectType Middle;
        public static AppealEffectType Large;
        public static AppealEffectType Num;
    }

    public enum PlayerType : System.Enum
    {
        public int value__;
        public static PlayerType Player;
        public static PlayerType Enemy;
    }

    public enum EffectPoint : System.Enum
    {
        public int value__;
        public static EffectPoint Appeal;
        public static EffectPoint BuffDeBuff;
        public static EffectPoint Mental;
        public static EffectPoint Avoid;
        public static EffectPoint Num;
    }

    public enum OtherEffectType : System.Enum
    {
        public int value__;
        public static OtherEffectType Recovery;
        public static OtherEffectType Buff;
        public static OtherEffectType DeBuff;
        public static OtherEffectType Damage;
        public static OtherEffectType SelfDamage;
        public static OtherEffectType AvoidBuff;
        public static OtherEffectType DeBuffSelf;
        public static OtherEffectType RecoveryOpponent;
        public static OtherEffectType BuffOpponent;
        public static OtherEffectType Num;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<UniRx.Unit, System.ValueTuple<UniRx.Subject<System.ValueTuple<OtherEffectType, PlayerType>>, OtherEffectType, PlayerType>> <>9__33_0;
        public static System.Action<string> <>9__34_0;
        private void <_playEffectAsync>b__33_0(UniRx.Unit _, System.ValueTuple<UniRx.Subject<System.ValueTuple<OtherEffectType, PlayerType>>, OtherEffectType, PlayerType> state);
        private void <_tryGetAppealEffect>b__34_0(string eventTag);
    }

    private struct <_playAppealEffectAsync>d__29 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.UsePCardAndSkillEffectController <>4__this;
        public int appeal;
        public PlayerType toType;
        public UnityEngine.Vector3 from;
        public System.Threading.CancellationToken cancellationToken;
        private PRISM.Produce.PCardAndSkillUIAppealEffect <effect>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_playEffectAsync>d__33 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.UsePCardAndSkillEffectController <>4__this;
        public OtherEffectType effectType;
        public PlayerType playerType;
        public UnityEngine.Vector3 from;
        public UnityEngine.Vector3 to;
        public System.Threading.CancellationToken cancellationToken;
        private PRISM.Produce.PCardAndSkillUIEffect <effect>5__2;
        private System.IDisposable <_>5__3;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_playPlayerCardAppealEffectAsync>d__28 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.UsePCardAndSkillEffectController <>4__this;
        public int appeal;
        public PlayerType toType;
        public System.Threading.CancellationToken cancellationToken;
        private PRISM.Produce.PCardAndSkillUIAppealEffect <effect>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ChallengeTourInGameModel : PRISM.Produce.ProduceBaseModel
{
    private float[] enemySkillExecuteTime;
    private PRISM.Module.Networking.IChallengeTourOpponentStatus opponent;
    private PRISM.Produce.ChallengeTourInGameTallyModel inGameTallyModel;
    public PRISM.Produce.ChallengeTourMissionProgressCalcModel ChallengeTourMissionProgressCalcModel;
    public InGameType InGameType { get; set; }
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(System.Threading.CancellationToken token);
    public void ResetValue();
    public PRISM.Module.Networking.IChallengeTourInGameResultStatus CreateChallengeTourInGameResultStatus();
    protected bool IsWinEnemy();
    protected float _getStartTimeSecond();
    protected void _enemyAttackReadyAction();
    protected float _getSkillExecuteTime();
    protected void _onPostExecuteEnemySkill();
    protected bool _isInGameEnd(ResultStatus& resultStatus, GameEndStatus& gameEndStatus);
    private void _subscribeTallyModelCallback();
    private void _tallyFromCardAndSkillExecResult(PRISM.Produce.IngamePlayerModel player, PRISM.Produce.CardAndSkillExecResult result);
    private Cysharp.Threading.Tasks.UniTask <>n__0(System.Threading.CancellationToken token);

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<PRISM.Produce.IngamePCardModel, PRISM.Produce.ChallengeTourInGameModel> <>9__16_0;
        public static System.Action<System.ValueTuple<PRISM.Produce.IngamePCardModel, PRISM.Produce.CardAndSkillExecResult>, PRISM.Produce.ChallengeTourInGameModel> <>9__16_1;
        public static System.Action<System.ValueTuple<int, PRISM.Produce.IngameSkillModel, PRISM.Produce.CardAndSkillExecResult>, PRISM.Produce.ChallengeTourInGameModel> <>9__16_2;
        public static System.Action<System.ValueTuple<int, bool>, PRISM.Produce.ChallengeTourInGameModel> <>9__16_3;
        public static System.Action<int, PRISM.Produce.ChallengeTourInGameModel> <>9__16_4;
        public static System.Action<UniRx.Unit, PRISM.Produce.ChallengeTourInGameModel> <>9__16_5;
        public static System.Action<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.ChallengeTourInGameModel> <>9__16_6;
        private void <_subscribeTallyModelCallback>b__16_0(PRISM.Produce.IngamePCardModel card, PRISM.Produce.ChallengeTourInGameModel state);
        private void <_subscribeTallyModelCallback>b__16_1(System.ValueTuple<PRISM.Produce.IngamePCardModel, PRISM.Produce.CardAndSkillExecResult> tuple, PRISM.Produce.ChallengeTourInGameModel state);
        private void <_subscribeTallyModelCallback>b__16_2(System.ValueTuple<int, PRISM.Produce.IngameSkillModel, PRISM.Produce.CardAndSkillExecResult> tuple, PRISM.Produce.ChallengeTourInGameModel state);
        private void <_subscribeTallyModelCallback>b__16_3(System.ValueTuple<int, bool> _, PRISM.Produce.ChallengeTourInGameModel state);
        private void <_subscribeTallyModelCallback>b__16_4(int _, PRISM.Produce.ChallengeTourInGameModel state);
        private void <_subscribeTallyModelCallback>b__16_5(UniRx.Unit _, PRISM.Produce.ChallengeTourInGameModel state);
        private void <_subscribeTallyModelCallback>b__16_6(PRISM.Produce.ProduceInGameEffect effect, PRISM.Produce.ChallengeTourInGameModel state);
    }

    private struct <InitializeAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ChallengeTourInGameModel <>4__this;
        public System.Threading.CancellationToken token;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ChallengeTourInGamePresenter : PRISM.Produce.BasePresenter
{
    private PRISM.Produce.ChallengeTourInGameView challengeTourInGameView;
    private PRISM.Produce.ChallengeTourInGameModel challengeTourInGameModel;
    private System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IChallengeTourStageRewardStatus> missionList;
    private PRISM.LessonAudition cacheLessonAuditionSource;
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(PRISM.LessonAudition lessonAuditionSource, System.Threading.CancellationToken ct);
    protected Cysharp.Threading.Tasks.UniTask _restartInitializeAsync(System.Threading.CancellationToken cancellationToken);
    private void _toFailedState();
    protected Cysharp.Threading.Tasks.UniTask _onClickRestartButtonAsync(System.Threading.CancellationToken cancellationToken);
    protected void _setupPauseContent(System.Collections.Generic.IReadOnlyList<PRISM.Produce.EnemySkillContentViewModel> enemySkillContentViewModels, System.Func<Cysharp.Threading.Tasks.UniTask> onPreCloseByRetryButtonFunc, System.Func<Cysharp.Threading.Tasks.UniTask> onPreCloseByGiveUpButtonFunc);
    private Cysharp.Threading.Tasks.UniTask <>n__0(System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask <>n__1(System.Threading.CancellationToken cancellationToken);

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<GameEndStatus, PRISM.Produce.ChallengeTourInGamePresenter> <>9__5_0;
        public static System.Action<UniRx.Unit, PRISM.Produce.ChallengeTourInGamePresenter> <>9__5_1;
        private void <InitializeAsync>b__5_0(GameEndStatus status, PRISM.Produce.ChallengeTourInGamePresenter state);
        private void <InitializeAsync>b__5_1(UniRx.Unit _, PRISM.Produce.ChallengeTourInGamePresenter state);
    }

    private struct <InitializeAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ChallengeTourInGamePresenter <>4__this;
        public PRISM.LessonAudition lessonAuditionSource;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_onClickRestartButtonAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ChallengeTourInGamePresenter <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_restartInitializeAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ChallengeTourInGamePresenter <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ChallengeTourInGameTallyModel
{
    private System.Collections.Generic.Dictionary<ProduceParameterType, int> typeCounterReleases;
    private System.Collections.Generic.List<System.ValueTuple<PRISM.Produce.IngamePCardModel, int>> cardCostCaches;
    private int costOneCardUseCount;
    private int cardCostDownCount;
    public int CostOneCardUseCount { get; set; }
    public int CardCostDownCount { get; set; }
    public void Initialize(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngamePCardModel> deckCards);
    public void Reset();
    public void UpdateCacheDeckCardCost();
    public void AddTypeCounterRelease(ProduceParameterType parameterType, int releaseCount);
    public int GetTypeCounterRelease(ProduceParameterType parameterType);
    public void AddCostOneCardUseCount(int count);
    public void CheckCardCostDown(PRISM.Produce.IngamePlayerModel playerModel);
    public PRISM.Module.Networking.IChallengeTourInGameResultStatus CreateChallengeTourInGameResult(PRISM.Module.Networking.IInGameResultStatus inGameResult, PRISM.Produce.IngamePlayerModel player, PRISM.Produce.IngamePlayerModel enemy);
    private PRISM.Module.Networking.IChallengeTourInGameClearStatus _createChallengeTourInGameClear(PRISM.Produce.IngamePlayerModel player);
    private PRISM.Module.Networking.IChallengeTourInGameAccumulatedStatus _createChallengeTourInGameAccumulated(PRISM.Produce.IngamePlayerModel player, PRISM.Produce.IngamePlayerModel enemy);
    private PRISM.Module.Networking.IChallengeTourInGameCardActionStatus _createChallengeTourInGameCardAction(PRISM.Produce.IngamePlayerModel player);
    private PRISM.Module.Networking.IChallengeTourInGameCounterStatus _createChallengeTourInGameCounter();
}

// Namespace: PRISM.Produce
public class ChallengeTourInGameView : PRISM.Produce.ProduceBaseView
{
    public void SetupPauseContent(System.Collections.Generic.IReadOnlyList<PRISM.Produce.EnemySkillContentViewModel> enemySkillModelList, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IChallengeTourStageRewardStatus> missionList, PRISM.Produce.ChallengeTourMissionProgressCalcModel calcModel, System.Func<Cysharp.Threading.Tasks.UniTask> onPreCloseByRetryButtonFunc, System.Func<Cysharp.Threading.Tasks.UniTask> onPreCloseByGiveUpButtonFunc);
}

// Namespace: PRISM.Produce
public class ChallengeTourMissionProgressCalcModel
{
    private PRISM.Produce.IngameTallyModel tallyModel;
    private PRISM.Produce.ChallengeTourInGameTallyModel challengeTourTallyModel;
    private PRISM.Produce.IngamePlayerModel playerModel;
    private PRISM.Produce.IngamePlayerModel enemyModel;
    public int GetProgress(int missionTypeID);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Produce.IngameSkillModel, PRISM.Produce.ChallengeTourMissionProgressCalcModel, int> <>9__5_0;
        private int <GetProgress>b__5_0(PRISM.Produce.IngameSkillModel skillModel, PRISM.Produce.ChallengeTourMissionProgressCalcModel b);
    }
}

// Namespace: PRISM.Produce
public class ViewChallengeTourInGame : PRISM.Produce.ViewProduceIngameBase<PRISM.Produce.ChallengeTourInGameModel>
{
    private PRISM.Produce.ChallengeTourInGamePresenter challengeTourInGamePresenter;
    private PRISM.Produce.ChallengeTourInGameView challengeTourInGameView;
    private PRISM.LessonAudition LessonAuditionSource;
    private UnityEngine.SceneManagement.Scene lessonAuditionScene;
    private PRISM.Legacy.ChallengeTourInGameViewParam viewParam;
    protected Gleipnir.Savedata.SavableJsonObject<PRISM.Produce.InGameSaveData> InGameSaveData { get; set; }
    protected Cysharp.Threading.Tasks.UniTask _beginViewAsync();
    private Cysharp.Threading.Tasks.UniTask _sceneLoadAsync();
    protected Cysharp.Threading.Tasks.UniTask _terminateAsync();
    private void Update();
    private Cysharp.Threading.Tasks.UniTask _jumpSuccessResultAsync(System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask _jumpChallengeTourTopAsync(System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IFinishChallengeTourStageReply> _finishChallengeTourStageAsync(System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask <>n__0();

    private class <>c__DisplayClass7_0
    {
        public PRISM.Produce.ViewChallengeTourInGame <>4__this;
        public PRISM.Produce.IngameUnitModel player;
        public string mvName;
        public System.Threading.CancellationToken ct;
        private bool <_beginViewAsync>b__0();
        private bool <_beginViewAsync>b__1(PRISM.Definitions.MstEpisode e);
        private bool <_beginViewAsync>b__2(PRISM.Definitions.MstAuditionSettings x);
        private void <_beginViewAsync>b__3(bool isSuccess);
    }

    private struct <_beginViewAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewChallengeTourInGame <>4__this;
        private <>c__DisplayClass7_0 <>8__1;
        private StartData <startData>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_jumpChallengeTourTopAsync>d__12 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewChallengeTourInGame <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter<PRISM.Module.Networking.IFinishChallengeTourStageReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_jumpSuccessResultAsync>d__11 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewChallengeTourInGame <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter<PRISM.Module.Networking.IFinishChallengeTourStageReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_terminateAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewChallengeTourInGame <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class CountdownContent : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject[] startUIs;
    private ENTERPRISE.UI.AnimatorWithEvent countdownAnimator;
    private int animatorHashID;
    public void Initialize(InGameType inGameType);
    public Cysharp.Threading.Tasks.UniTask StartCountDownAsync(System.Threading.CancellationToken cancellationToken);

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<string> <>9__3_0;
        private void <Initialize>b__3_0(string tag);
    }
}

// Namespace: PRISM.Produce
public class EnemyHandContent : UnityEngine.MonoBehaviour
{
    private static float AttackActionTime;
    private UnityEngine.GameObject showPCardObject;
    private PRISM.Produce.InGamePCardContent showPCardContent;
    private UnityEngine.Animator showPCardAnimator;
    private UnityEngine.Animator drawCardPrefab;
    private UnityEngine.Animator spaceKeeperPrefab;
    private UnityEngine.Transform handParent;
    private System.Collections.Generic.List<PCardDisplayModel> cardDisplayModels;
    private UnityEngine.Transform effectPoint;
    private System.Threading.CancellationTokenSource showCardTokenSource;
    private System.Threading.CancellationTokenSource drawCardTokenSource;
    private float animationSpeed;
    private PRISM.Produce.WaitDurationTask waitDurationTask;
    public UnityEngine.Vector3 EffectPoint { get; set; }
    public void UpdateDisplayHand(int handCount, int drawCount, System.Collections.Generic.IReadOnlyList<int> releaseHandIndexes);
    public void PlayShowCardAnimation<TState>(PRISM.Produce.IngamePCardModel produceCard, int handCount, int drawCount, System.Collections.Generic.IReadOnlyList<int> releaseHandIndexes, TState state, System.Action<AnimationState, TState> onChangeAnimationState, PRISM.Produce.ProduceIngameLoader resourceLoader);
    public void SetCostBuffDeBuff(int baseCost, int calcCost);
    public void HideCard();
    public void SetAnimationSpeed(float speed);
    public void Terminate();
    private System.Threading.CancellationTokenSource _getNewTokenSource(System.Threading.CancellationTokenSource& tokenSource);
    private void _cancelTask(System.Threading.CancellationTokenSource& tokenSource);
    private Cysharp.Threading.Tasks.UniTask _playCardAnimationAsync<TState>(PRISM.Produce.IngamePCardModel produceCard, int handCount, int drawCount, System.Collections.Generic.IReadOnlyList<int> releaseHandIndexes, TState state, System.Action<AnimationState, TState> onChangeAnimationState, PRISM.Produce.ProduceIngameLoader resourceLoader, System.Threading.CancellationToken ct);
    private Cysharp.Threading.Tasks.UniTask _setupExecuteCardAsync(PRISM.Produce.IngamePCardModel produceCard, PRISM.Produce.ProduceIngameLoader resourceLoader, System.Threading.CancellationToken ct);
    private Cysharp.Threading.Tasks.UniTask _playShowCardAnimationAsync(int handCount, int drawCount, System.Collections.Generic.IReadOnlyList<int> releaseHandIndexes, System.Threading.CancellationToken ct);
    private void _updateDisplayHand(int handCount);
    private Cysharp.Threading.Tasks.UniTask _playDrawAnimationAsync(int handCount, int drawCount, System.Collections.Generic.IReadOnlyList<int> releaseHandIndexes, System.Threading.CancellationToken ct);
    private PCardDisplayModel _getHand(int index);
    private PCardDisplayModel _createHand(int index);
    private Cysharp.Threading.Tasks.UniTask _playHideCardAnimationAsync(System.Threading.CancellationToken ct);

    public enum AnimationState : System.Enum
    {
        public int value__;
        public static AnimationState PostSetup;
        public static AnimationState PostShow;
        public static AnimationState PostHide;
    }

    private class PCardDisplayModel
    {
        public UnityEngine.Animator DrawCardAnimator;
        public UnityEngine.Animator SpaceKeeperAnimator;
        public void Reset(bool isShowCard);
        public Cysharp.Threading.Tasks.UniTask PlayDrawAnimationAsync(System.Threading.CancellationToken ct);
        public Cysharp.Threading.Tasks.UniTask PlaySpaceKeepAnimationAsync(System.Threading.CancellationToken ct);
        public void SetAnimationSpeed(float speed);

        private struct <PlaySpaceKeepAnimationAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
        {
            public int <>1__state;
            public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
            public PCardDisplayModel <>4__this;
            public System.Threading.CancellationToken ct;
            private Awaiter <>u__1;
            private void MoveNext();
            private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
        }
    }

    private class <>c__DisplayClass29_0
    {
        public System.Threading.CancellationToken ct;
        private Cysharp.Threading.Tasks.UniTask <_playDrawAnimationAsync>b__0(int drawCardIndex, int spaceKeeperIndex, PRISM.Produce.EnemyHandContent state, System.Threading.CancellationToken token);
    }

    private struct <_playCardAnimationAsync>d__25`1<TState> : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.EnemyHandContent <>4__this;
        public PRISM.Produce.IngamePCardModel produceCard;
        public PRISM.Produce.ProduceIngameLoader resourceLoader;
        public System.Threading.CancellationToken ct;
        public System.Action<AnimationState, TState> onChangeAnimationState;
        public TState state;
        public int handCount;
        public int drawCount;
        public System.Collections.Generic.IReadOnlyList<int> releaseHandIndexes;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_playHideCardAnimationAsync>d__32 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.EnemyHandContent <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_setupExecuteCardAsync>d__26 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.EnemyHandContent <>4__this;
        public PRISM.Produce.IngamePCardModel produceCard;
        public PRISM.Produce.ProduceIngameLoader resourceLoader;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class EnemySkillContent : PRISM.Produce.SkillContentBase
{
    private UnityEngine.UI.RawImage enemyIcon;
    private PRISM.Produce.TrainerSkillIconView skillIcon;
    private UnityEngine.GameObject skillBalloonObject;
    private UnityEngine.UI.Graphic skillBalloonImage;
    private ENTERPRISE.UI.UITextMeshProUGUI skillNameText;
    private float showSkillBalloonTime;
    private UnityEngine.Color voLessonColor;
    private UnityEngine.Color daLessonColor;
    private UnityEngine.Color viLessonColor;
    private UnityEngine.Color otherColor;
    private UnityEngine.Animator animator;
    private bool isShowSkillBalloon;
    private System.Threading.CancellationTokenSource tokenSource;
    private PRISM.Produce.WaitDurationTask waitDurationTask;
    public Cysharp.Threading.Tasks.UniTask SetUpAsync(PRISM.Produce.EnemySkillContentViewModel viewModel, PRISM.Produce.ProduceIngameLoader resourceLoader, System.Threading.CancellationToken ct);
    public void ShowSkillBalloon();
    public void HideSkillBalloon();
    public void SetAnimationSpeed(float speed);
    public void SetAvailableState(SkillAvailableState state);
    public void Terminate();
    private Cysharp.Threading.Tasks.UniTask _loadEnemyIconAsync(int iconID, InGameType inGameType, PRISM.Produce.ProduceIngameLoader resourceLoader, System.Threading.CancellationToken ct);
    private void _setSkillNameText(int skillID, InGameType inGameType);
    private void _setScheduleTypeColor(InGameType inGameType);
    private Cysharp.Threading.Tasks.UniTask _showSkillBalloonAsync(System.Threading.CancellationToken ct);
    private void _cancelTask();
    private System.Threading.CancellationTokenSource _getTokenSource();

    private struct <SetUpAsync>d__14 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.EnemySkillContent <>4__this;
        public PRISM.Produce.EnemySkillContentViewModel viewModel;
        public PRISM.Produce.ProduceIngameLoader resourceLoader;
        public System.Threading.CancellationToken ct;
        private PRISM.Produce.IngameSkillModel <enemySkill>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_showSkillBalloonAsync>d__23 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.EnemySkillContent <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class EnemySkillContentListView : PRISM.Produce.SkillContentListViewBase<PRISM.Produce.EnemySkillContent>
{
    private UnityEngine.RectTransform leftArea;
    private UnityEngine.RectTransform rightArea;
    public Cysharp.Threading.Tasks.UniTask SetupAsync(System.Collections.Generic.IReadOnlyList<PRISM.Produce.EnemySkillContentViewModel> viewModels, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask SetupAsync(System.Collections.Generic.IReadOnlyList<PRISM.Produce.EnemySkillContentViewModel> viewModels, PRISM.Produce.ProduceIngameLoader resourceLoader, System.Threading.CancellationToken ct);
    public void ShowSkillBalloon(int index);
    public void HideSkillBalloon();
    public void Terminate();
    protected UnityEngine.RectTransform _getContentParent(int index);

    private class <>c__DisplayClass3_0
    {
        public System.Collections.Generic.IReadOnlyList<PRISM.Produce.EnemySkillContentViewModel> viewModels;
        public System.Threading.CancellationToken ct;
        private Cysharp.Threading.Tasks.UniTask <SetupAsync>b__0(int index, PRISM.Produce.EnemySkillContent content, PRISM.Produce.ProduceIngameLoader loader);
    }
}

// Namespace: PRISM.Produce
public class EnemySkillContentViewModel
{
    public PRISM.Produce.IngameSkillModel EnemySkill;
    public int IconID;
    public InGameType InGameType;
}

// Namespace: PRISM.Produce
public class EvasionRateContent : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject parentObject;
    private ENTERPRISE.UI.UITextMeshProUGUI evasionRateText;
    public void ChangeValue(int value);
    private void _updateDisplay(int value);
}

// Namespace: PRISM.Produce
public class FastForwardButton : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UIButton button;
    private UnityEngine.UI.Image buttonImage;
    private UnityEngine.Sprite[] buttonImages;
    public System.IObservable<UniRx.Unit> OnClick { get; set; }
    public void UpdateView(FastForwardSpeedType speedType);
    public void SetEnable(bool isEnable);
}

// Namespace: PRISM.Produce
public class HandContent : UnityEngine.MonoBehaviour
{
    private static int HandCountViewMin;
    public static float DefaultCardScale;
    public static float ExpandCardScale;
    private int handMaxSpace;
    private int defaultSizeX;
    private PRISM.Produce.PlayerUsePCardContent produceCardPrefab;
    private UnityEngine.RectTransform handParent;
    private System.Collections.Generic.List<PCardDisplayModel> cardDisplayModels;
    private UnityEngine.RectTransform dragTransform;
    private UnityEngine.RectTransform draggableArea;
    private PRISM.Produce.PlayerUsePCardContent saveCard;
    private bool isDragNow;
    private UnityEngine.Vector3 lastSaveCardPos;
    private int saveCardChildIndex;
    private int saveCardIndex;
    private UnityEngine.UI.HorizontalOrVerticalLayoutGroup layoutGroup;
    private UniRx.Subject<int> onClick;
    private UnityEngine.RectTransform spaceKeeperPrefab;
    private UnityEngine.CanvasGroup handCanvasGroup;
    private PRISM.AutoCancellationTokenSource updateHandCTSource;
    private System.Collections.Generic.List<Cysharp.Threading.Tasks.UniTask> cacheSetupCardTasks;
    private PRISM.Produce.RemoveHandAnimationController removeHandAnimationController;
    private UnityEngine.Animator handAreaAnimator;
    private Coffee.UIExtensions.UIParticle handAreaParticle;
    private float animationSpeed;
    private UniRx.Subject<System.ValueTuple<int, DragState>> onDrag;
    private System.Func<int, bool> <IsAvailableCard>k__BackingField;
    public System.IObservable<int> OnClick { get; set; }
    public System.IObservable<System.ValueTuple<int, DragState>> OnDrag { get; set; }
    private System.Func<int, bool> IsAvailableCard { get; set; }
    public UnityEngine.Vector3 EffectPoint { get; set; }
    public void ResetContent();
    public UnityEngine.RectTransform GetCardRectTransform(int index);
    public void UpdateHand(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngamePCardModel> handModels, PRISM.Produce.ProduceIngameLoader resourceLoader, int drawCount, System.Collections.Generic.IReadOnlyList<int> releaseHandIndexes, bool isScaleReset);
    public Cysharp.Threading.Tasks.UniTask UpdateHandAsync(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngamePCardModel> handModels, PRISM.Produce.ProduceIngameLoader resourceLoader, int drawCount, System.Collections.Generic.IReadOnlyList<int> releaseHandIndexes, bool isScaleReset, System.Threading.CancellationToken ct);
    public void SetCardDragable(int index, PCardAvailableState state);
    public void ResetAllCardScale();
    public void UpdateCardScale(int index, float scale);
    public void CardCostBuffDeBuff(int index, int baseCost, int calcCost);
    public void UpdateCardBuffDeBuff(int index, BuffStatus buffStatus, bool isPlayAnim);
    public void UpdateCardAvailable(int index, bool isPlayAnim);
    public void UpdateCardEnabled(int index, bool isEnable);
    public void UpdateCardAppealType(int index, System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypes);
    public void ForceReleaseDragCard();
    public void PlayExecuteAnimation<TState>(PRISM.Produce.IngamePCardModel cardModel, TState state, System.Action<PRISM.Produce.IngamePCardModel, TState> onAnimationEnd, PRISM.Produce.ProduceIngameLoader resourceLoader);
    public void PlayExclusionAnimation(System.Collections.Generic.IReadOnlyList<System.ValueTuple<int, PRISM.Produce.IngamePCardModel>> exclusionCardModels, PRISM.Produce.ProduceIngameLoader resourceLoader);
    public void SetAnimationSpeed(float speed);
    public void Terminate();
    private PCardDisplayModel _createHand(int index);
    private Cysharp.Threading.Tasks.UniTask _cardDrawAsync(int drawCardIndex, int spaceKeeperIndex, System.Threading.CancellationToken ct);
    private UnityEngine.Vector2 _getCardParentSize(int cardCount);
    private UnityEngine.Vector3 _getCardCenterPos(int index);
    private void _onDragCard(int index, DragState dragState);
    private void _dragSkillCardBeginDragEvent(int index);
    private void _dragSkillCardDragEvent(int index);
    private void _updateSkillCardEvent(int index);
    private void _dragSkillCardDragEndEvent(int index);
    private void _dragSkillCardTracking();
    private void _releaseSkillCard(int index);
    private PCardDisplayModel _getHand(int index);
    private bool _tryGetMousePosition(UnityEngine.Vector3& position);
    private bool _isCardPositionOnArea(UnityEngine.Vector3 cardPosition);
    private void _dragEnd();

    private class PCardDisplayModel
    {
        public PRISM.Produce.PlayerUsePCardContent CardContent;
        public UnityEngine.RectTransform SpaceKeeper;
        public void Reset(float defaultSizeX);
    }

    public enum DragState : System.Enum
    {
        public int value__;
        public static DragState Begin;
        public static DragState Drag;
        public static DragState Update;
        public static DragState End;
        public static DragState Cancel;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<int, int, PRISM.Produce.HandContent, System.Threading.CancellationToken, Cysharp.Threading.Tasks.UniTask> <>9__41_1;
        public static System.Func<int, PRISM.Produce.HandContent, UnityEngine.Vector3> <>9__52_0;
        public static System.Action<UniRx.Unit, System.ValueTuple<PRISM.Produce.HandContent, int>> <>9__55_0;
        public static System.Action<DragState, System.ValueTuple<PRISM.Produce.HandContent, int>> <>9__55_1;
        private Cysharp.Threading.Tasks.UniTask <UpdateHandAsync>b__41_1(int drawCardIndex, int spaceKeeperIndex, PRISM.Produce.HandContent state, System.Threading.CancellationToken token);
        private UnityEngine.Vector3 <PlayExclusionAnimation>b__52_0(int index, PRISM.Produce.HandContent state);
        private void <_createHand>b__55_0(UniRx.Unit _, System.ValueTuple<PRISM.Produce.HandContent, int> tuple);
        private void <_createHand>b__55_1(DragState dragState, System.ValueTuple<PRISM.Produce.HandContent, int> tuple);
    }

    private class <>c__DisplayClass41_0
    {
        public PRISM.Produce.HandContent <>4__this;
        public System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngamePCardModel> handModels;
        public PRISM.Produce.ProduceIngameLoader resourceLoader;
        public System.Threading.CancellationToken ct;
        public bool isScaleReset;
        public int drawCount;
        private Cysharp.Threading.Tasks.UniTask <UpdateHandAsync>g__setupPCardAsync|0(int index);

        private struct <<UpdateHandAsync>g__setupPCardAsync|0>d : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
        {
            public int <>1__state;
            public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
            public <>c__DisplayClass41_0 <>4__this;
            public int index;
            private Awaiter <>u__1;
            private void MoveNext();
            private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
        }
    }

    private class <>c__DisplayClass56_0
    {
        public PCardDisplayModel drawCardModel;
        public UnityEngine.RectTransform spaceKeeper;
        public PRISM.Produce.HandContent <>4__this;
        public float space;
        public UnityEngine.RectTransform drawCardRect;
        private bool <_cardDrawAsync>b__0();
    }

    private struct <UpdateHandAsync>d__41 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.HandContent <>4__this;
        public System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngamePCardModel> handModels;
        public PRISM.Produce.ProduceIngameLoader resourceLoader;
        public System.Threading.CancellationToken ct;
        public bool isScaleReset;
        public int drawCount;
        private <>c__DisplayClass41_0 <>8__1;
        public System.Collections.Generic.IReadOnlyList<int> releaseHandIndexes;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_cardDrawAsync>d__56 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.HandContent <>4__this;
        public int spaceKeeperIndex;
        public int drawCardIndex;
        public System.Threading.CancellationToken ct;
        private <>c__DisplayClass56_0 <>8__1;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class HandUIUtility
{
    public static Cysharp.Threading.Tasks.UniTask PlayDrawAnimationAsync<TState>(int handCount, int drawCount, System.Collections.Generic.IReadOnlyList<int> releaseHandIndexes, TState state, System.Func<int, int, TState, System.Threading.CancellationToken, Cysharp.Threading.Tasks.UniTask> playDrawAnimationAsync, System.Threading.CancellationToken ct);

    private struct <PlayDrawAnimationAsync>d__0`1<TState> : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public int handCount;
        public int drawCount;
        public System.Collections.Generic.IReadOnlyList<int> releaseHandIndexes;
        public System.Func<int, int, TState, System.Threading.CancellationToken, Cysharp.Threading.Tasks.UniTask> playDrawAnimationAsync;
        public TState state;
        public System.Threading.CancellationToken ct;
        private int <i>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class RemoveHandAnimationContent : UnityEngine.MonoBehaviour
{
    private PRISM.Produce.InGamePCardContent cardContent;
    private UnityEngine.Animator animator;
    public Cysharp.Threading.Tasks.UniTask SetupAsync(PRISM.Produce.IngamePCardModel cardModel, PRISM.Produce.ProduceIngameLoader resourceLoader, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask PlayAnimationAsync(UnityEngine.Vector3 start, UnityEngine.Vector3 end, System.Threading.CancellationToken ct);
    public void SetSpeed(float speed);

    private class <>c__DisplayClass3_0
    {
        public PRISM.Produce.RemoveHandAnimationContent <>4__this;
        public UnityEngine.Vector3 start;
        public UnityEngine.Vector3 end;
        private bool <PlayAnimationAsync>b__0();
    }

    private struct <PlayAnimationAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.RemoveHandAnimationContent <>4__this;
        public UnityEngine.Vector3 start;
        public UnityEngine.Vector3 end;
        public System.Threading.CancellationToken ct;
        private System.Threading.CancellationTokenSource <tokenSource>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetupAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.RemoveHandAnimationContent <>4__this;
        public PRISM.Produce.IngamePCardModel cardModel;
        public PRISM.Produce.ProduceIngameLoader resourceLoader;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class RemoveHandAnimationController : UnityEngine.MonoBehaviour
{
    private UnityEngine.Transform effectPoint;
    private PRISM.Produce.RemoveHandAnimationContent executeCard;
    private PRISM.Produce.RemoveHandAnimationContent exclusionCardPrefab;
    private UnityEngine.Transform exclusionCardParent;
    private System.Collections.Generic.List<PRISM.Produce.RemoveHandAnimationContent> exclusionCards;
    private UnityEngine.GameObject exclusionEffect;
    private UnityEngine.Animator exclusionEffectAnimator;
    private System.Collections.Generic.List<Cysharp.Threading.Tasks.UniTask> taskCaches;
    private System.Threading.CancellationTokenSource execCardAnimationCTS;
    private System.Threading.CancellationTokenSource exclusionAnimationCTS;
    private float speed;
    public UnityEngine.Vector3 EffectPoint { get; set; }
    public void ResetContent();
    public void PlayExecCardAnimation<TState>(UnityEngine.Vector3 startPos, PRISM.Produce.IngamePCardModel cardModel, TState state, System.Action<PRISM.Produce.IngamePCardModel, TState> onAnimationEnd, PRISM.Produce.ProduceIngameLoader resourceLoader);
    public void PlayExclusionAnimation<TState>(System.Collections.Generic.IReadOnlyList<System.ValueTuple<int, PRISM.Produce.IngamePCardModel>> exclusionCardModels, TState state, System.Func<int, TState, UnityEngine.Vector3> getCardPos, PRISM.Produce.ProduceIngameLoader resourceLoader);
    public void SetSpeed(float speed);
    public void Terminate();
    private System.Threading.CancellationToken _getNewCancellationToken(System.Threading.CancellationTokenSource& tokenSource);
    private void _requestCancel(System.Threading.CancellationTokenSource& tokenSource);
    private Cysharp.Threading.Tasks.UniTask _playExecCardAnimationAsync<TState>(UnityEngine.Vector3 startPos, PRISM.Produce.IngamePCardModel cardModel, TState state, System.Action<PRISM.Produce.IngamePCardModel, TState> onAnimationEnd, PRISM.Produce.ProduceIngameLoader resourceLoader, System.Threading.CancellationToken ct);
    private Cysharp.Threading.Tasks.UniTask _playExclusionAnimationAsync<TState>(System.Collections.Generic.IReadOnlyList<System.ValueTuple<int, PRISM.Produce.IngamePCardModel>> exclusionCardModels, TState state, System.Func<int, TState, UnityEngine.Vector3> getCardPos, PRISM.Produce.ProduceIngameLoader resourceLoader, System.Threading.CancellationToken ct);
    private Cysharp.Threading.Tasks.UniTask _playExclusionEffectAsync(System.Threading.CancellationToken ct);
    private PRISM.Produce.RemoveHandAnimationContent _getExclusionCard(int index);

    private struct <_playExclusionAnimationAsync>d__21`1<TState> : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Collections.Generic.IReadOnlyList<System.ValueTuple<int, PRISM.Produce.IngamePCardModel>> exclusionCardModels;
        public PRISM.Produce.RemoveHandAnimationController <>4__this;
        public PRISM.Produce.ProduceIngameLoader resourceLoader;
        public System.Threading.CancellationToken ct;
        public System.Func<int, TState, UnityEngine.Vector3> getCardPos;
        public TState state;
        private int <modelCount>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_playExclusionEffectAsync>d__22 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.RemoveHandAnimationController <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_playExecCardAnimationAsync>d__20`1<TState> : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.RemoveHandAnimationController <>4__this;
        public PRISM.Produce.IngamePCardModel cardModel;
        public PRISM.Produce.ProduceIngameLoader resourceLoader;
        public System.Threading.CancellationToken ct;
        public UnityEngine.Vector3 startPos;
        public System.Action<PRISM.Produce.IngamePCardModel, TState> onAnimationEnd;
        public TState state;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class InGameDefine
{
    public static float HpThresholdValue;
    public static int InitialHandCount;
    public static PhaseType DefaultPhase;
    public static int HandCountMaxLimit;
    public static int MentalGuardLimit;
    public static int MentalFewRate;
    public static int MentalPinchRate;
    public static int MentalSafeHigh;
    public static int MentalSafeMiddle;
    public static int MentalSafeLow;
    public static int TypeCounterMax;
    public static int MaxProducePointValue;
    public static int ShhisUnitId;
    public static int AiLogicNum;
    public static int MinCardCost;
    public static int MaxCardCost;
    public static int MaxAvoid;
    public static float ShakePower;
    public static float ShakeTime;
    public static float ShakeReturnTime;
    public static float ShakeDelayRate;

    public enum InGameType : System.Enum
    {
        public int value__;
        public static InGameType VocalLesson;
        public static InGameType DanceLesson;
        public static InGameType VisualLesson;
        public static InGameType SpecialLesson;
        public static InGameType Audition;
        public static InGameType ChallengeTour;
    }

    public enum LessonStatus : System.Enum
    {
        public int value__;
        public static LessonStatus Initial;
        public static LessonStatus ResetInitial;
        public static LessonStatus CountDown;
        public static LessonStatus Work;
        public static LessonStatus End;
    }

    public enum CardUseTiming : System.Enum
    {
        public int value__;
        public static CardUseTiming None;
        public static CardUseTiming Avoid;
        public static CardUseTiming Exclusion;
    }

    public enum AttackReadyState : System.Enum
    {
        public int value__;
        public static AttackReadyState None;
        public static AttackReadyState PcardAttack;
        public static AttackReadyState SkillAttack;
    }

    public enum ResultStatus : System.Enum
    {
        public int value__;
        public static ResultStatus None;
        public static ResultStatus Success;
        public static ResultStatus Failed;
    }

    public enum EffectDeleteType : System.Enum
    {
        public int value__;
        public static EffectDeleteType None;
        public static EffectDeleteType PhaseChange;
        public static EffectDeleteType DontDeleteUse;
        public static EffectDeleteType DamageCount;
        public static EffectDeleteType OpponentDamageCount;
    }

    public enum PhaseChangeCostDownMode : System.Enum
    {
        public int value__;
        public static PhaseChangeCostDownMode Disable;
        public static PhaseChangeCostDownMode Num;
    }

    public enum GameEndStatus : System.Enum
    {
        public int value__;
        public static GameEndStatus None;
        public static GameEndStatus AppealMax;
        public static GameEndStatus TimeOver;
        public static GameEndStatus WinEnemy;
    }

    public enum MentalState : System.Enum
    {
        public int value__;
        public static MentalState None;
        public static MentalState Normal;
        public static MentalState Few;
        public static MentalState MentalBreak;
        public static MentalState MentalSafe;
    }

    public enum PhaseType : System.Enum
    {
        public int value__;
        public static PhaseType Double;
        public static PhaseType Nichika;
        public static PhaseType Mikoto;
    }

    public enum DoubleCardUseType : System.Enum
    {
        public int value__;
        public static DoubleCardUseType Both;
        public static DoubleCardUseType NichikaOnly;
        public static DoubleCardUseType MikotoOnly;
    }

    public enum StopType : System.Enum
    {
        public int value__;
        public static StopType Tutorial;
        public static StopType EasyPause;
        public static StopType ShowPausePU;
        public static StopType ShowTutorialSkipConfirmPU;
        public static StopType ActionLog;
        public static StopType ALL;
    }

    public enum SkillAvailableState : System.Enum
    {
        public int value__;
        public static SkillAvailableState Available;
        public static SkillAvailableState NotEnoughPP;
        public static SkillAvailableState NotAvailableByEffect;
        public static SkillAvailableState NotAvaliableByCondition;
        public static SkillAvailableState UseCountOut;
    }

    public enum PCardAvailableState : System.Enum
    {
        public int value__;
        public static PCardAvailableState Available;
        public static PCardAvailableState NotEnoughPP;
        public static PCardAvailableState NotAvailableByEffect;
        public static PCardAvailableState NotAvailableByCardCondition;
    }

    public enum CostType : System.Enum
    {
        public int value__;
        public static CostType None;
        public static CostType CostNotChange;
        public static CostType CostUp;
        public static CostType CostDown;
    }

    public enum FastForwardSpeedType : System.Enum
    {
        public int value__;
        public static FastForwardSpeedType Half;
        public static FastForwardSpeedType Constant;
        public static FastForwardSpeedType Double;
        public static FastForwardSpeedType Num;
    }
}

// Namespace: PRISM.Produce
public class InGameSaveData
{
    public PhaseType PhaseState;
    public int RandomSeed;
    private FastForwardSpeedType <FastForwardSpeedType>k__BackingField;
    public FastForwardSpeedType FastForwardSpeedType { get; set; }
}

// Namespace: PRISM.Produce
public class LessonTitleContent : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UITextMeshProUGUI lessonTitleText;
    public void SetTitle(InGameType inGameType, int level);
}

// Namespace: PRISM.Produce
public class ActionLogModel
{
    private UniRx.Subject<System.ValueTuple<int, LogData>> onAddLogData;
    private System.Collections.Generic.List<LogData> logList;
    public System.IObservable<System.ValueTuple<int, LogData>> OnAddLogData { get; set; }
    public System.Collections.Generic.IReadOnlyList<LogData> LogList { get; set; }
    public void Reset();
    public void Terminate();
    public void AddLog(int time, PRISM.Produce.IngamePCardModel card, PRISM.Produce.IngamePlayerModel usePlayer);
    public void AddLog(int time, PRISM.Produce.IngameSkillModel skill, PRISM.Produce.IngamePlayerModel usePlayer);
    private string _getCardName(PRISM.Produce.IngamePCardModel card);
    private string _getSkillName(PRISM.Produce.IngameSkillModel skill);

    public class LogData
    {
        private string <Name>k__BackingField;
        private int <Time>k__BackingField;
        private PRISM.Produce.IngamePCardModel <CardModel>k__BackingField;
        private PRISM.Produce.IngameSkillModel <SkillModel>k__BackingField;
        private PRISM.Produce.IngamePlayerModel <UsePlayer>k__BackingField;
        public string Name { get; set; }
        public int Time { get; set; }
        public PRISM.Produce.IngamePCardModel CardModel { get; set; }
        public PRISM.Produce.IngameSkillModel SkillModel { get; set; }
        public PRISM.Produce.IngamePlayerModel UsePlayer { get; set; }
    }
}

// Namespace: PRISM.Produce
public class CardAndSkillPlayerPredictionModel : PRISM.Produce.IInGamePlayerActionResult
{
    private int decrementAppealPoint;
    private int appealPointOnce;
    private int voiceAppealPointOnce;
    private int danceAppealPointOnce;
    private int visualAppealPointOnce;
    private int otherTypeAppealPointOnce;
    private int selfRecoveryMental;
    private int receivedRecoveryMental;
    private int receivedDamageMental;
    private int selfDamageMental;
    private int safeSelfDamageMental;
    private int fixMental;
    private bool isIgnoreSafeSubMental;
    private bool isIgnoreSwapDamage;
    private bool isMaxPPHandCardCost0;
    private int mentalGuard;
    private int addAvoidRate;
    private bool isIgnoreMentalGurad;
    private bool isResetAvoidEffect;
    private int getAppealPointCount;
    private PRISM.Produce.IngamePlayerModel playerModel;
    public int DecrementAppealPoint { get; set; }
    public int NormalAppealPointOnce { get; set; }
    public int VocalAppealPointOnce { get; set; }
    public int DanceAppealPointOnce { get; set; }
    public int VisualAppealPointOnce { get; set; }
    public int OtherTypeAppealPointOnce { get; set; }
    public int SelfRecoveryMental { get; set; }
    public int ReceivedRecoveryMental { get; set; }
    public int ReceivedDamageMental { get; set; }
    public int SelfDamageMental { get; set; }
    public int SafeSelfDamageMental { get; set; }
    public PRISM.Produce.InGameMentalActionResult MentalVariationResult { get; set; }
    public int FixMental { get; set; }
    public int MentalGuard { get; set; }
    public int AddAvoidRate { get; set; }
    public bool IsIgnoreSafeSubMental { get; set; }
    public bool IsIgnoreSwapDamage { get; set; }
    public bool IsMaxPPHandCardCost0 { get; set; }
    public bool IsIgnoreMentalGurad { get; set; }
    public bool IsResetAvoidEffect { get; set; }
    public int GetAppealPointCount { get; set; }
    public int TotalGetAppealPointOnce { get; set; }
    public int TotalGetAppealPoint { get; set; }
    public int CurrentAppealPoint { get; set; }
    public int MaxAppealPoint { get; set; }
    public int CurrentMe { get; set; }
    public int MaxMe { get; set; }
    public MentalState MentalState { get; set; }
    public bool IsPinch { get; set; }
    public void SetPlayerModel(PRISM.Produce.IngamePlayerModel playerModel);
    public void Reset();
    public void CopyActionResult<T>(T result);
    public void AddActionResult<T>(T result);
}

// Namespace: PRISM.Produce
public class CardAndSkillPredictionModel : PRISM.Produce.IInGameActionResult<PRISM.Produce.CardAndSkillPlayerPredictionModel>, PRISM.Produce.IInGameActionResult
{
    private PRISM.Produce.CardAndSkillPlayerPredictionModel <Opponent>k__BackingField;
    private PRISM.Produce.CardAndSkillPlayerPredictionModel <Executor>k__BackingField;
    private int displayValue;
    private bool isOverrideDisplayValue;
    public PRISM.Produce.CardAndSkillPlayerPredictionModel Opponent { get; set; }
    public PRISM.Produce.CardAndSkillPlayerPredictionModel Executor { get; set; }
    public int DisplayValue { get; set; }
    public void OverrideDisplayValue(int value);
    public void SetPlayerModel(PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngamePlayerModel opponent);
    public void Reset();
    public void CopyActionResult<T>(T result);
    public void CopyActionResult<T>(T executor, T opponent);
    public void AddActionResult<T>(T result);
    public void ResetAndSetPlayer(PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngamePlayerModel opponent);
}

// Namespace: PRISM.Produce
public class CardAndSkillExecResult : PRISM.Produce.IInGameExecActionResult<PRISM.Produce.InGamePlayerExecActionResult>, PRISM.Produce.IInGameExecActionResult, PRISM.Produce.IInGameActionResult
{
    private System.Collections.Generic.List<int> executeEffectDisplayIDs;
    private PRISM.Produce.InGamePlayerExecActionResult <Executor>k__BackingField;
    private PRISM.Produce.InGamePlayerExecActionResult <Opponent>k__BackingField;
    public PRISM.Produce.InGamePlayerExecActionResult Executor { get; set; }
    public PRISM.Produce.InGamePlayerExecActionResult Opponent { get; set; }
    public System.Collections.Generic.IReadOnlyList<int> ExecuteEffectDisplayIDs { get; set; }
    public void Reset();
    public void ResetEffectElapsedTime();
    public void CopyActionResult<T>(T result);
    public void CopyActionResult<T>(T executor, T opponent);
    public void AddActionResult<T>(T result);
    public void CopyExecResult<T>(T result);
    public void CopyExecResult<T>(T executor, T opponent);
    public void AddExecResult<T>(T result);
    public void AddDisplayID(int id);
}

// Namespace: PRISM.Produce
public struct InGameMentalActionResult : System.ValueType, System.IEquatable<PRISM.Produce.InGameMentalActionResult>
{
    private int <SelfRecovery>k__BackingField;
    private int <SelfDamage>k__BackingField;
    private int <ReceivedRecovery>k__BackingField;
    private int <ReceivedDamage>k__BackingField;
    private int <SafeSelfDamage>k__BackingField;
    public int SelfRecovery { get; set; }
    public int SelfDamage { get; set; }
    public int ReceivedRecovery { get; set; }
    public int ReceivedDamage { get; set; }
    public int SafeSelfDamage { get; set; }
    public PRISM.Produce.InGameMentalActionResult ApplyEffect(PRISM.Produce.ProduceInGameEffectManager effectManager, PRISM.Produce.IngamePlayerModel playerModel, bool isSwap);
    public PRISM.Produce.InGameMentalActionResult Swap();
    public string ToString();
    private bool PrintMembers(System.Text.StringBuilder builder);
    public static bool op_Inequality(PRISM.Produce.InGameMentalActionResult left, PRISM.Produce.InGameMentalActionResult right);
    public static bool op_Equality(PRISM.Produce.InGameMentalActionResult left, PRISM.Produce.InGameMentalActionResult right);
    public int GetHashCode();
    public bool Equals(object obj);
    public bool Equals(PRISM.Produce.InGameMentalActionResult other);
    public void Deconstruct(int& SelfRecovery, int& SelfDamage, int& ReceivedRecovery, int& ReceivedDamage, int& SafeSelfDamage);

    private class <>O
    {
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngamePlayerModel, int> <0>__DefaultNotDividedEffectValueFormula;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngamePlayerModel, bool> <>9__21_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngamePlayerModel, bool> <>9__21_1;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngamePlayerModel, bool> <>9__21_2;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngamePlayerModel, bool> <>9__21_3;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngamePlayerModel, bool> <>9__21_4;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngamePlayerModel, bool> <>9__21_5;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngamePlayerModel, bool> <>9__21_6;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngamePlayerModel, bool> <>9__21_7;
        private bool <ApplyEffect>b__21_0(PRISM.Produce.ProduceInGameEffect t, PRISM.Produce.IngamePlayerModel state);
        private bool <ApplyEffect>b__21_1(PRISM.Produce.ProduceInGameEffect t, PRISM.Produce.IngamePlayerModel state);
        private bool <ApplyEffect>b__21_2(PRISM.Produce.ProduceInGameEffect t, PRISM.Produce.IngamePlayerModel state);
        private bool <ApplyEffect>b__21_3(PRISM.Produce.ProduceInGameEffect t, PRISM.Produce.IngamePlayerModel state);
        private bool <ApplyEffect>b__21_4(PRISM.Produce.ProduceInGameEffect t, PRISM.Produce.IngamePlayerModel state);
        private bool <ApplyEffect>b__21_5(PRISM.Produce.ProduceInGameEffect t, PRISM.Produce.IngamePlayerModel state);
        private bool <ApplyEffect>b__21_6(PRISM.Produce.ProduceInGameEffect t, PRISM.Produce.IngamePlayerModel state);
        private bool <ApplyEffect>b__21_7(PRISM.Produce.ProduceInGameEffect t, PRISM.Produce.IngamePlayerModel state);
    }
}

// Namespace: PRISM.Produce
public class InGameExecActionResult : PRISM.Produce.IInGameExecActionResult<PRISM.Produce.InGamePlayerExecActionResult>, PRISM.Produce.IInGameExecActionResult, PRISM.Produce.IInGameActionResult
{
    private PRISM.Produce.InGamePlayerExecActionResult <Executor>k__BackingField;
    private PRISM.Produce.InGamePlayerExecActionResult <Opponent>k__BackingField;
    public PRISM.Produce.InGamePlayerExecActionResult Executor { get; set; }
    public PRISM.Produce.InGamePlayerExecActionResult Opponent { get; set; }
    public void Reset();
    public void CopyActionResult<T>(T result);
    public void CopyActionResult<T>(T executor, T opponent);
    public void AddActionResult<T>(T result);
    public void CopyExecResult<T>(T result);
    public void CopyExecResult<T>(T executor, T opponent);
    public void AddExecResult<T>(T result);
}

// Namespace: PRISM.Produce
public class InGamePlayerExecActionResult : PRISM.Produce.IInGamePlayerExecActionResult, PRISM.Produce.IInGamePlayerActionResult
{
    private int decrementAppealPoint;
    private int appealPointOnce;
    private int voiceAppealPointOnce;
    private int danceAppealPointOnce;
    private int visualAppealPointOnce;
    private int otherTypeAppealPointOnce;
    private int selfRecoveryMental;
    private int receivedRecoveryMental;
    private int receivedDamageMental;
    private int selfDamageMental;
    private int safeSelfDamageMental;
    private int fixMental;
    private int getAppealPointCount;
    private PRISM.Produce.IngamePlayerModel playerModel;
    private int drawHandCount;
    private System.Collections.Generic.List<int> releaseHandIndexes;
    private int mentalGuard;
    private int addAvoidRate;
    private System.Collections.Generic.List<PRISM.Produce.ProduceInGameEffect> produceInGameEffects;
    private int recoveryProducePoint;
    private int damageProducePoint;
    private int destructionCardNum;
    private int removeCardNum;
    private bool isAllRemoveHandCard;
    private PRISM.Produce.InGameSearchResult searchResult;
    private int normalDrowAfterCardNum;
    private System.Collections.Generic.List<System.ValueTuple<int, PRISM.Produce.IngamePCardModel>> exclusionCards;
    private int recoverySkillIndex;
    private int phaseChangeNum;
    private bool isNextDouble;
    private int rankUpNum;
    private bool isUseRankUpCard;
    private bool isResetAvoidEffect;
    private bool isResetDebuffEffect;
    private bool isIgnoreSafeSubMental;
    private bool isIgnoreMentalGurad;
    private bool isIgnoreSwapDamage;
    private bool isMaxPPHandCardCost0;
    private System.Collections.Generic.Dictionary<ProduceParameterType, int> typeCounterVariationValues;
    private System.Collections.Generic.Dictionary<ProduceParameterType, int> typeCounterAdditionValues;
    private System.Collections.Generic.Dictionary<ProduceParameterType, int> typeCounterMultiplyValues;
    private System.Collections.Generic.List<ProduceParameterType> usedSkillAndCardParameterTypes;
    private System.Collections.Generic.List<PRISM.Produce.IngameActionEffectModel> executeSkillAndCardAfterEffects;
    public int TotalGetAppealPointOnce { get; set; }
    public int DecrementAppealPoint { get; set; }
    public int NormalAppealPointOnce { get; set; }
    public int VocalAppealPointOnce { get; set; }
    public int DanceAppealPointOnce { get; set; }
    public int VisualAppealPointOnce { get; set; }
    public int OtherTypeAppealPointOnce { get; set; }
    public int SelfRecoveryMental { get; set; }
    public int ReceivedRecoveryMental { get; set; }
    public int SelfDamageMental { get; set; }
    public int ReceivedDamageMental { get; set; }
    public int SafeSelfDamageMental { get; set; }
    public PRISM.Produce.InGameMentalActionResult MentalVariationResult { get; set; }
    public int FixMental { get; set; }
    public int GetAppealPointCount { get; set; }
    public int TotalGetAppealPoint { get; set; }
    public int DrawHandCount { get; set; }
    public System.Collections.Generic.IReadOnlyList<int> ReleaseHandIndexes { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffect> ProduceInGameEffects { get; set; }
    public int MentalGuard { get; set; }
    public int AddAvoidRate { get; set; }
    public int RecoveryProducePoint { get; set; }
    public int DamageProducePoint { get; set; }
    public int DestructionCardNum { get; set; }
    public int RemoveCardNum { get; set; }
    public bool IsAllRemoveHandCard { get; set; }
    public PRISM.Produce.InGameSearchResult SearchResult { get; set; }
    public int NormalDrowAfterCardNum { get; set; }
    public int ExclusionCardNum { get; set; }
    public System.Collections.Generic.IReadOnlyList<System.ValueTuple<int, PRISM.Produce.IngamePCardModel>> ExclusionCards { get; set; }
    public int RecoverySkillIndex { get; set; }
    public int PhaseChangeNum { get; set; }
    public bool IsNextDouble { get; set; }
    public int RankUpNum { get; set; }
    public bool IsUseRankUpCard { get; set; }
    public bool IsResetAvoidEffect { get; set; }
    public bool IsResetDebuffEffect { get; set; }
    public bool IsIgnoreSafeSubMental { get; set; }
    public bool IsIgnoreMentalGurad { get; set; }
    public bool IsIgnoreSwapDamage { get; set; }
    public bool IsMaxPPHandCardCost0 { get; set; }
    public PRISM.Definitions.EnumerateOnlyDictionary<ProduceParameterType, int> TypeCounterVariationValues { get; set; }
    public PRISM.Definitions.EnumerateOnlyDictionary<ProduceParameterType, int> TypeCounterAdditionValues { get; set; }
    public PRISM.Definitions.EnumerateOnlyDictionary<ProduceParameterType, int> TypeCounterMultiplyValues { get; set; }
    public System.Collections.Generic.IReadOnlyList<ProduceParameterType> UsedSkillAndCardParameterTypes { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameActionEffectModel> ExecuteSkillAndCardAfterEffects { get; set; }
    public void ResetAppealPointOnce();
    public void GetTotalGetAppealPoint(ProduceParameterType type, int& vocal, int& dance, int& visual, int& other);
    private void _calcVoDaViAppeal(int decrementOneType, int& targetValue, int& totalDecrement, int& remainder, int& sub);
    public void Reset();
    public void ResetEffectElapsedTime();
    public void CopyActionResult<T>(T result);
    public void AddActionResult<T>(T result);
    public void AddReleaseHandIndex(int index);
    public void SetUsedSkillAndCardParameterTypes(System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypes);
    public void AddProduceInGameEffects(PRISM.Produce.ProduceInGameEffect effect);
    public void RemoveProduceInGameEffects(System.Predicate<PRISM.Produce.ProduceInGameEffect> isMatch);
    public void AddTypeCounterVariationValues(ProduceParameterType parameterType, int variationValue);
    public void AddTypeCounterMultiplyValues(ProduceParameterType parameterType, int multiplyValue);
    public void AddExecuteSkillAndCardAfterEffects(PRISM.Produce.IngameActionEffectModel effect);
    public void ApplyTypeCounterResult(PRISM.Produce.IngamePlayerModel model, bool isExecutor, System.Collections.Generic.IReadOnlyList<ProduceParameterType> parameterTypeList);
    public int CalculateTotalAcquiredCounter(PRISM.Produce.IngamePlayerModel playerModel, ProduceParameterType targetType, bool isExecutor, System.Collections.Generic.IReadOnlyList<ProduceParameterType> parameterTypeList);
    public void UpPowerRate(int rate);
    public void AddExclusionCard(int index, PRISM.Produce.IngamePCardModel card);
    public void CopyExecResult<T>(T result);
    public void AddExecResult<T>(T result);
    private void _addTypeCounterVariationValues(ProduceParameterType parameterType, int variationValue);
    private void _addTypeCounterAdditionValues(ProduceParameterType parameterType, int additionalValue);
}

// Namespace: PRISM.Produce
public class InGameActionResult : PRISM.Produce.IInGameActionResult<PRISM.Produce.InGamePlayerActionResult>, PRISM.Produce.IInGameActionResult
{
    private PRISM.Produce.InGamePlayerActionResult executor;
    private PRISM.Produce.InGamePlayerActionResult opponent;
    public PRISM.Produce.InGamePlayerActionResult Executor { get; set; }
    public PRISM.Produce.InGamePlayerActionResult Opponent { get; set; }
    public void Reset();
    public void CopyActionResult<T>(T result);
    public void CopyActionResult<T>(T executor, T opponent);
    public void AddActionResult<T>(T result);
    public static PRISM.Produce.InGameActionResult Construct();
}

// Namespace: PRISM.Produce
public class InGameActionResultPool`1<T>
{
    private int capacity;
    private System.Collections.Generic.List<T> results;
    private int currentIndex;
    public T GetResult();
}

// Namespace: PRISM.Produce
public class InGamePlayerActionResult : PRISM.Produce.IInGamePlayerActionResult
{
    private int decrementAppealPoint;
    private int appealPointOnce;
    private int voiceAppealPointOnce;
    private int danceAppealPointOnce;
    private int visualAppealPointOnce;
    private int otherTypeAppealPointOnce;
    private int selfRecoveryMental;
    private int receivedRecoveryMental;
    private int receivedDamageMental;
    private int selfDamageMental;
    private int safeSelfDamageMental;
    private int fixMental;
    private int mentalGuard;
    private int addAvoidRate;
    private int getAppealPointCount;
    private int phaseChangeNum;
    private int rankUpNum;
    private bool isUseRankUpCard;
    private bool isIgnoreSafeSubMental;
    private bool isIgnoreMentalGurad;
    private bool isResetAvoidEffect;
    private bool isIgnoreSwapDamage;
    private bool isMaxPPHandCardCost0;
    public int DecrementAppealPoint { get; set; }
    public int NormalAppealPointOnce { get; set; }
    public int VocalAppealPointOnce { get; set; }
    public int DanceAppealPointOnce { get; set; }
    public int VisualAppealPointOnce { get; set; }
    public int OtherTypeAppealPointOnce { get; set; }
    public int SelfRecoveryMental { get; set; }
    public int ReceivedRecoveryMental { get; set; }
    public int ReceivedDamageMental { get; set; }
    public int SelfDamageMental { get; set; }
    public int SafeSelfDamageMental { get; set; }
    public PRISM.Produce.InGameMentalActionResult MentalVariationResult { get; set; }
    public int FixMental { get; set; }
    public int MentalGuard { get; set; }
    public int AddAvoidRate { get; set; }
    public int GetAppealPointCount { get; set; }
    public int TotalGetAppealPoint { get; set; }
    public int PhaseChangeNum { get; set; }
    public int RankUpNum { get; set; }
    public bool IsUseRankUpCard { get; set; }
    public bool IsIgnoreSafeSubMental { get; set; }
    public bool IsIgnoreMentalGurad { get; set; }
    public bool IsIgnoreSwapDamage { get; set; }
    public bool IsMaxPPHandCardCost0 { get; set; }
    public bool IsResetAvoidEffect { get; set; }
    public int TotalGetAppealPointOnce { get; set; }
    public bool IsNotScoreMe(PRISM.Produce.InGamePlayerActionResult result);
    public bool IsHigherScoreMe(PRISM.Produce.InGamePlayerActionResult result);
    public void Reset();
    public void CopyActionResult<T>(T result);
    public void AddActionResult<T>(T result);
    public void UpPowerRate(int rate);
    public void ResetAppealPointOnce();
}

// Namespace: PRISM.Produce
public class InGameSearchResult
{
    private bool <IsSearch>k__BackingField;
    private int <DrawCardCount>k__BackingField;
    private int <SucceededSearchCount>k__BackingField;
    public bool IsSearch { get; set; }
    public int DrawCardCount { get; set; }
    public int SucceededSearchCount { get; set; }
    public PRISM.Produce.InGameSearchResult Copy();
    public void Add(bool isSearch, int drawCardCount, int succeededSearchCount);
    public void Add(PRISM.Produce.InGameSearchResult other);
}

// Namespace: PRISM.Produce
public interface IInGameActionResult
{
    public PRISM.Produce.IInGamePlayerActionResult Executor { get; set; }
    public PRISM.Produce.IInGamePlayerActionResult Opponent { get; set; }
    public void Reset();
    public void CopyActionResult<T>(T result);
    public void CopyActionResult<T>(T executor, T opponent);
    public void AddActionResult<T>(T result);
}

// Namespace: PRISM.Produce
public interface IInGameActionResult`1<T> : PRISM.Produce.IInGameActionResult
{
    public T Executor { get; set; }
    public T Opponent { get; set; }
    private PRISM.Produce.IInGamePlayerActionResult PRISM.Produce.IInGameActionResult.Executor { get; set; }
    private PRISM.Produce.IInGamePlayerActionResult PRISM.Produce.IInGameActionResult.Opponent { get; set; }
}

// Namespace: PRISM.Produce
public interface IInGameExecActionResult : PRISM.Produce.IInGameActionResult
{
    public PRISM.Produce.IInGamePlayerExecActionResult Executor { get; set; }
    public PRISM.Produce.IInGamePlayerExecActionResult Opponent { get; set; }
    private PRISM.Produce.IInGamePlayerActionResult PRISM.Produce.IInGameActionResult.Executor { get; set; }
    private PRISM.Produce.IInGamePlayerActionResult PRISM.Produce.IInGameActionResult.Opponent { get; set; }
    public void CopyExecResult<T>(T result);
    public void CopyExecResult<T>(T executor, T opponent);
    public void AddExecResult<T>(T result);
}

// Namespace: PRISM.Produce
public interface IInGameExecActionResult`1<T> : PRISM.Produce.IInGameExecActionResult, PRISM.Produce.IInGameActionResult
{
    public T Executor { get; set; }
    public T Opponent { get; set; }
    private PRISM.Produce.IInGamePlayerExecActionResult PRISM.Produce.IInGameExecActionResult.Executor { get; set; }
    private PRISM.Produce.IInGamePlayerExecActionResult PRISM.Produce.IInGameExecActionResult.Opponent { get; set; }
}

// Namespace: PRISM.Produce
public interface IInGamePlayerActionResult
{
    public int DecrementAppealPoint { get; set; }
    public int NormalAppealPointOnce { get; set; }
    public int VocalAppealPointOnce { get; set; }
    public int DanceAppealPointOnce { get; set; }
    public int VisualAppealPointOnce { get; set; }
    public int OtherTypeAppealPointOnce { get; set; }
    public int MentalGuard { get; set; }
    public int SelfRecoveryMental { get; set; }
    public int ReceivedRecoveryMental { get; set; }
    public int ReceivedDamageMental { get; set; }
    public int SelfDamageMental { get; set; }
    public int SafeSelfDamageMental { get; set; }
    public PRISM.Produce.InGameMentalActionResult MentalVariationResult { get; set; }
    public int FixMental { get; set; }
    public int AddAvoidRate { get; set; }
    public bool IsIgnoreSafeSubMental { get; set; }
    public bool IsIgnoreMentalGurad { get; set; }
    public bool IsIgnoreSwapDamage { get; set; }
    public bool IsMaxPPHandCardCost0 { get; set; }
    public int GetAppealPointCount { get; set; }
    public int TotalGetAppealPoint { get; set; }
    public bool IsResetAvoidEffect { get; set; }
    public void Reset();
    public void CopyActionResult<T>(T result);
    public void AddActionResult<T>(T result);
}

// Namespace: PRISM.Produce
public interface IInGamePlayerExecActionResult : PRISM.Produce.IInGamePlayerActionResult
{
    public int DrawHandCount { get; set; }
    public System.Collections.Generic.IReadOnlyList<int> ReleaseHandIndexes { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffect> ProduceInGameEffects { get; set; }
    public int RecoveryProducePoint { get; set; }
    public int DamageProducePoint { get; set; }
    public int DestructionCardNum { get; set; }
    public int RemoveCardNum { get; set; }
    public bool IsAllRemoveHandCard { get; set; }
    public PRISM.Produce.InGameSearchResult SearchResult { get; set; }
    public int NormalDrowAfterCardNum { get; set; }
    public int ExclusionCardNum { get; set; }
    public System.Collections.Generic.IReadOnlyList<System.ValueTuple<int, PRISM.Produce.IngamePCardModel>> ExclusionCards { get; set; }
    public int RecoverySkillIndex { get; set; }
    public int PhaseChangeNum { get; set; }
    public bool IsNextDouble { get; set; }
    public int RankUpNum { get; set; }
    public bool IsUseRankUpCard { get; set; }
    public bool IsResetAvoidEffect { get; set; }
    public bool IsResetDebuffEffect { get; set; }
    public bool IsMaxPPHandCardCost0 { get; set; }
    public PRISM.Definitions.EnumerateOnlyDictionary<ProduceParameterType, int> TypeCounterVariationValues { get; set; }
    public PRISM.Definitions.EnumerateOnlyDictionary<ProduceParameterType, int> TypeCounterAdditionValues { get; set; }
    public PRISM.Definitions.EnumerateOnlyDictionary<ProduceParameterType, int> TypeCounterMultiplyValues { get; set; }
    public System.Collections.Generic.IReadOnlyList<ProduceParameterType> UsedSkillAndCardParameterTypes { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameActionEffectModel> ExecuteSkillAndCardAfterEffects { get; set; }
    public void AddReleaseHandIndex(int index);
    public void AddProduceInGameEffects(PRISM.Produce.ProduceInGameEffect effect);
    public void RemoveProduceInGameEffects(System.Predicate<PRISM.Produce.ProduceInGameEffect> isMatch);
    public void AddTypeCounterVariationValues(ProduceParameterType parameterType, int variationValue);
    public void AddTypeCounterMultiplyValues(ProduceParameterType parameterType, int multiplyValue);
    public void AddExclusionCard(int exclusionIndex, PRISM.Produce.IngamePCardModel exclusionCard);
    public void CopyExecResult<T>(T result);
    public void AddExecResult<T>(T result);
}

// Namespace: PRISM.Produce
public class IngameAppealModel
{
    private int appealPoint;
    private int maxAppealPoint;
    private bool isNotMaxAppeal;
    private int totalGetAppealPointCount;
    private UniRx.Subject<System.ValueTuple<int, int>> onUpdateAppealPointSubject;
    private UniRx.Subject<System.ValueTuple<int, int, int, int, ProduceParameterType>> onAddAppealPointSubject;
    private int initialMaxAppealPoint;
    private System.Func<PRISM.Produce.ProduceInGameEffectManager> <GetStatusEffectManagerFunc>k__BackingField;
    private System.Func<PRISM.Produce.ProduceInGameEffectManager> GetStatusEffectManagerFunc { get; set; }
    public int TotalGetAppealPointCount { get; set; }
    public int AppealPoint { get; set; }
    public int MaxAppealPoint { get; set; }
    public bool IsNotMaxAppeal { get; set; }
    public System.IObservable<System.ValueTuple<int, int>> OnUpdateAppealPoint { get; set; }
    public System.IObservable<System.ValueTuple<int, int, int, int, ProduceParameterType>> OnAddAppealPoint { get; set; }
    public void Initialize(int maxAppealPoint);
    public void Reset();
    private System.ValueTuple<bool, int> _addAppeal(int addAppealOnce, int getAppealCount);
    public void AddAppeal(int addAppealOnce, System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypes, int getAppealCount);
    public void AddAppeal(int addAppealOnce, int getAppealCount, int drawVoice, int drawDance, int drawVisual, int drawOther);
    public bool IsAppealMax();
    public void Copy(PRISM.Produce.IngameAppealModel model);
    public void Terminate();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__29_0;
        private bool <_addAppeal>b__29_0(PRISM.Produce.ProduceInGameEffect t);
    }
}

// Namespace: PRISM.Produce
public class IngameAvoidModel
{
    private int avoidRate;
    private int _avoidCount;
    private bool _isAvoided;
    private UniRx.Subject<System.ValueTuple<int, int>> onChangeAvoidRate;
    private System.Collections.Generic.Dictionary<int, float> countAvoidWhenSecDic;
    private UniRx.Subject<int> onUpdateAvoidRateBySec;
    private PRISM.Produce.IngamePlayerModel player;
    private PRISM.Produce.InGameExecActionResult avoidResult;
    private UniRx.Subject<PRISM.Produce.InGameExecActionResult> onAvoidSuccess;
    private PRISM.Produce.IngameRandomModel randomModel;
    public int AvoidRate { get; set; }
    public int AvoidCount { get; set; }
    public bool IsAvoided { get; set; }
    public System.IObservable<System.ValueTuple<int, int>> OnChangeAvoidRate { get; set; }
    public System.IObservable<int> OnUpdateAvoidRateBySec { get; set; }
    public System.IObservable<PRISM.Produce.InGameExecActionResult> OnAvoidSuccess { get; set; }
    public void Reset();
    public void Copy(PRISM.Produce.IngameAvoidModel model);
    public System.ValueTuple<bool, PRISM.Produce.InGameExecActionResult> CheckAvoid(PRISM.Produce.IngamePlayerModel opponent);
    public void UpdateAvoid(float sec);
    public void Terminate();
    private void _checkAvoidEffect(float sec, int targetSec);
    private void _applyAvoidResultOnce(PRISM.Produce.IngamePlayerModel opponent, int tryAvoidRate);
    private PRISM.Produce.IngameEffectCauseModel <_applyAvoidResultOnce>g___constructSelfCause|32_1(PRISM.Produce.ProduceInGameEffectType effectType);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__32_0;
        public static System.Func<PRISM.Produce.IngameSkillModel, bool> <>9__32_3;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__32_2;
        private bool <_applyAvoidResultOnce>b__32_0(PRISM.Produce.ProduceInGameEffect t);
        private bool <_applyAvoidResultOnce>b__32_3(PRISM.Produce.IngameSkillModel e);
        private bool <_applyAvoidResultOnce>b__32_2(PRISM.Produce.ProduceInGameEffect e);
    }
}

// Namespace: PRISM.Produce
public class IngameBgmModel
{
    private System.Nullable<CriWare.CriAtomExPlayback> bgmCriAtomExPlayback;
    private string bgmCueSheet;
    private string bgmCueName;
    private int bgmStartTime;
    public bool IsPlayEnd();
    public void PlayBGM(string cueSheet, string cueName, int startTime);
    public void PlayBGM();
}

// Namespace: PRISM.Produce
public class IngameChallengeMissionProgressCalcModel
{
    private PRISM.Produce.IngameTallyModel tallyModel;
    public int GetProgress(int missionTypeID);
}

// Namespace: PRISM.Produce
public class IngameDeckModel
{
    private bool <IsFixSkillCard>k__BackingField;
    private int[] <StartTargetCardList>k__BackingField;
    private System.Collections.Generic.List<int> targetCardList;
    private int createCardIdCount;
    private int maxDefaultSelectCardLength;
    private int addHandCountMaxOnDraw;
    private PRISM.Produce.IngameRandomModel randomoModel;
    private System.Func<PRISM.Produce.ProduceInGameEffectManager> getStatusEffectManagerFunc;
    private System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> allCardList;
    private System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> deckDataList;
    private System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> handList;
    private System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> _graveyard;
    private System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> copyCardList;
    private System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> exclusionCards;
    private System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> exceptHandAndGraveyards;
    private UniRx.Subject<System.ValueTuple<int, bool>> onChangeExclusionCardSubject;
    private UniRx.Subject<PRISM.Produce.IngamePCardModel> onAddHandCardSubject;
    private UniRx.Subject<System.ValueTuple<int, PRISM.Produce.IngamePCardModel>> onUpdateHandStateSubject;
    private UniRx.Subject<System.ValueTuple<int, PRISM.Produce.IngameEffectCauseModel>> onIncreaseMaxHandNumSubject;
    private UniRx.Subject<PRISM.Produce.IngamePCardModel> onRemoveCardSubject;
    private System.Collections.Generic.Dictionary<ProduceParameterType, int> parameterTypeUseCardCounts;
    private System.Collections.Generic.Dictionary<ProduceParameterType, int> parameterTypeUseAppealCardCounts;
    private int <InitialDeckCount>k__BackingField;
    private int <TotalUseCardCount>k__BackingField;
    private int <TotalUseAppealCardCount>k__BackingField;
    private int <TotalUseAddAvoidCardCount>k__BackingField;
    private System.Collections.Generic.List<int> <ReleaseHandIndexes>k__BackingField;
    private System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> removeList;
    public bool IsFixSkillCard { get; set; }
    public int[] StartTargetCardList { get; set; }
    public System.Collections.Generic.IReadOnlyList<int> TargetCardIdListReadOnly { get; set; }
    public int InitialDeckCount { get; set; }
    public int TotalUseCardCount { get; set; }
    public int TotalUseAppealCardCount { get; set; }
    public int TotalUseAddAvoidCardCount { get; set; }
    public System.Collections.Generic.List<int> ReleaseHandIndexes { get; set; }
    public int ExclusionCardCount { get; set; }
    public System.IObservable<System.ValueTuple<int, bool>> OnChangeExclusionCard { get; set; }
    public System.IObservable<PRISM.Produce.IngamePCardModel> OnAddHandCard { get; set; }
    public System.IObservable<PRISM.Produce.IngamePCardModel> OnRemoveCard { get; set; }
    public System.IObservable<System.ValueTuple<int, PRISM.Produce.IngamePCardModel>> OnUpdateHandState { get; set; }
    public System.IObservable<System.ValueTuple<int, PRISM.Produce.IngameEffectCauseModel>> OnIncreaseMaxHandNum { get; set; }
    public System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> DeckDataList { get; set; }
    public System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> HandList { get; set; }
    public int HandCount { get; set; }
    public System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> Graveyard { get; set; }
    public int DeckRemainingCount { get; set; }
    public System.Collections.Generic.IReadOnlyDictionary<ProduceParameterType, int> ParameterTypeUseCardCounts { get; set; }
    public System.Collections.Generic.IReadOnlyDictionary<ProduceParameterType, int> ParameterTypeUseAppealCardCounts { get; set; }
    public void Initialize(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceCardStatus> produceCards);
    public void Terminate();
    public PRISM.Produce.IngamePCardModel CreateAddCopyCard(PRISM.Produce.IngamePCardModel card);
    public void Reset();
    public void Copy(PRISM.Produce.IngameDeckModel model);
    public void AddTargetCard(int id);
    public bool TryAddHand(PRISM.Produce.IngamePCardModel card);
    public void UseCard(PRISM.Produce.IngamePCardModel card);
    public bool TryExclusionCard(PRISM.Produce.IngamePCardModel card);
    public void OnAddEffectIncreaseMaxHandNum(int addNum, PRISM.Produce.IngameEffectCauseModel cause);
    public int GetLowCostValueByHand();
    public PRISM.Produce.IngamePCardModel GetRandomLowCostCard();
    public PRISM.Produce.IngamePCardModel GetRandomUnderCostCard(int cost);
    public int GetHighCostValueByHand();
    public PRISM.Produce.IngamePCardModel GetRandomHandCard();
    private void _decrementMaxOnDraw();
    public void AddMaxOnDraw(int offset);
    public int GetHandCountMax(bool includeOnDraw);
    public System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngamePCardModel> GetExceptHandAndGraveyardList(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngamePCardModel> exceptCards);
    public System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngamePCardModel> GetCardListExceptHand();
    public PRISM.Produce.IngamePCardModel CalcRandomExclusionCard<TState>(TState state, System.Func<PRISM.Produce.IngamePCardModel, TState, bool> isMatch);
    public PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetRandomHandCards(int num);
    public PRISM.Produce.IngamePCardModel CalcRandomHandCard<TState>(TState state, System.Func<PRISM.Produce.IngamePCardModel, TState, bool> isMatch);
    public PRISM.Produce.IngamePCardModel GetRandomHighCostCard();
    public void RestExclusionCardToDeck(PRISM.Produce.IngamePCardModel card);
    public void RestExclusionCardToHandCard(PRISM.Produce.IngamePCardModel card);
    public PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetExclusionCardList<TState>(TState state, System.Func<PRISM.Produce.IngamePCardModel, TState, bool> isMatch);
    public PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetUnitSkillCard(int& searchDrawNum, int unitId, int getCount);
    public PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetAvoidUpSkillCard(int& searchDrawNum, int getCount);
    public PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetSkillCardOverCost(int getCount, int cost);
    public PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetNonUnitSkillCard(int unitId, int getCount);
    public PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetAddCardSkillCard(int& searchDrawNum, int getCount);
    public PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetMentalAddCard(int& searchDrawNum, int getCount);
    public PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetParameterTypeAddCard(int& searchDrawNum, int getCount);
    public PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetParameterTypeArrangeCard(int& searchDrawNum, int getCount);
    public PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetNotIsDoubleAddCard(int& searchDrawNum, int getCount);
    public PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetIsDoubleAddCard(int& searchDrawNum, int getCount);
    public PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetSkillCard(int getCount, bool isDeckRefresh);
    public PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetSkillCard<TState>(int getCount, TState state, System.Func<PRISM.Produce.IngamePCardModel, TState, bool> isMatch, bool isDeckRefresh);
    public PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetSkillCard<TState>(int& searchDrowNum, int getCount, TState state, System.Func<PRISM.Produce.IngamePCardModel, TState, bool> isMatch, bool isDeckRefresh);
    public int GetParameterTypeCountByHandCard(ProduceParameterType produceParameterType);
    public PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetSkillCard<TState>(int& searchDrowNum, bool& isRandomDraw, int getCount, TState state, System.Func<PRISM.Produce.IngamePCardModel, TState, bool> isMatch, bool isDeckRefresh);
    public bool IsExistDeckCard<TState>(TState state, System.Func<PRISM.Produce.IngamePCardModel, TState, bool> isMatch);
    public void AddHandAppealType(ProduceParameterType appealType, int uniqueID);
    public void AddAllHandAppealType(ProduceParameterType appealType);
    public void RemoveHandAppealType(ProduceParameterType appealType, int uniqueID);
    public void AddUseCount(PRISM.Produce.IngamePCardModel cardModel, PRISM.Produce.CardAndSkillExecResult execResult);
    public int ConditionMatchHandCount(System.Func<PRISM.Produce.IngamePCardModel, bool> isMatch);
    public int GetDeckBaseCostSum();
    public PRISM.Produce.IngamePCardModel GetCardByPCardModel(PRISM.Produce.IngamePCardModel cardModel);
    private void _removeHand(PRISM.Produce.IngamePCardModel deckData);
    private void _clearTempraries();
    private PRISM.Produce.IngamePCardModel _calcRandomCard<TState>(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngamePCardModel> cards, TState state, System.Func<PRISM.Produce.IngamePCardModel, TState, bool> isMatch);
    private PRISM.Produce.IngamePCardModel _getCopyCard(PRISM.Produce.IngamePCardModel cardModel);
    private void _addHandAppealType(ProduceParameterType appealType, int index);
    private static bool _isZeroAppealCard(PRISM.Produce.IngamePCardModel card);
    private static bool _isAddAvoidRateEffectTypeID(int effectTypeId);
    private void <GetSkillCard>g___addRandomCard|118_0<TState>(<>c__DisplayClass118_0<TState>& );

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__80_0;
        public static System.Func<PRISM.Produce.IngameActionEffectModel, int, bool> <>9__85_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__88_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__89_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>, bool> <>9__98_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__100_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__104_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__105_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__106_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__107_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__108_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__109_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__110_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__111_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__112_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__113_0;
        public static System.Func<PRISM.Produce.IngameActionEffectModel, int, bool> <>9__123_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, PRISM.Produce.IngamePCardModel, bool> <>9__126_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, PRISM.Produce.IngamePCardModel, bool> <>9__130_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, PRISM.Produce.IngamePCardModel, bool> <>9__130_1;
        private bool <Reset>b__80_0(PRISM.Produce.IngamePCardModel card, int state);
        private bool <TryExclusionCard>b__85_0(PRISM.Produce.IngameActionEffectModel effect, int _);
        private bool <GetRandomLowCostCard>b__88_0(PRISM.Produce.IngamePCardModel t, int state);
        private bool <GetRandomUnderCostCard>b__89_0(PRISM.Produce.IngamePCardModel t, int state);
        private bool <GetRandomHandCards>b__98_0(PRISM.Produce.IngamePCardModel t, System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> state);
        private bool <GetRandomHighCostCard>b__100_0(PRISM.Produce.IngamePCardModel t, int state);
        private bool <GetUnitSkillCard>b__104_0(PRISM.Produce.IngamePCardModel x, int state);
        private bool <GetAvoidUpSkillCard>b__105_0(PRISM.Produce.IngamePCardModel x, int _);
        private bool <GetSkillCardOverCost>b__106_0(PRISM.Produce.IngamePCardModel x, int state);
        private bool <GetNonUnitSkillCard>b__107_0(PRISM.Produce.IngamePCardModel x, int state);
        private bool <GetAddCardSkillCard>b__108_0(PRISM.Produce.IngamePCardModel x, int _);
        private bool <GetMentalAddCard>b__109_0(PRISM.Produce.IngamePCardModel x, int _);
        private bool <GetParameterTypeAddCard>b__110_0(PRISM.Produce.IngamePCardModel x, int _);
        private bool <GetParameterTypeArrangeCard>b__111_0(PRISM.Produce.IngamePCardModel x, int _);
        private bool <GetNotIsDoubleAddCard>b__112_0(PRISM.Produce.IngamePCardModel x, int _);
        private bool <GetIsDoubleAddCard>b__113_0(PRISM.Produce.IngamePCardModel x, int _);
        private bool <AddUseCount>b__123_0(PRISM.Produce.IngameActionEffectModel effect, int _);
        private bool <GetCardByPCardModel>b__126_0(PRISM.Produce.IngamePCardModel card, PRISM.Produce.IngamePCardModel state);
        private bool <_getCopyCard>b__130_0(PRISM.Produce.IngamePCardModel status, PRISM.Produce.IngamePCardModel item);
        private bool <_getCopyCard>b__130_1(PRISM.Produce.IngamePCardModel status, PRISM.Produce.IngamePCardModel item);
    }

    private class <>c__118`1<TState>
    {
        public static <>c__118<TState> <>9;
        public static System.Func<PRISM.Produce.IngamePCardModel, System.Collections.Generic.List<int>, bool> <>9__118_2;
        public static System.Predicate<PRISM.Produce.IngamePCardModel> <>9__118_1;
        private bool <GetSkillCard>b__118_2(PRISM.Produce.IngamePCardModel card, System.Collections.Generic.List<int> targets);
        private bool <GetSkillCard>b__118_1(PRISM.Produce.IngamePCardModel e);
    }

    private struct <>c__DisplayClass118_0`1<TState> : System.ValueType
    {
        public PRISM.Produce.IngameDeckModel <>4__this;
        public System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> tempCards;
    }
}

// Namespace: PRISM.Produce
public class IngameEffectCauseModel : System.IDisposable
{
    private PRISM.Produce.IngamePlayerModel <Giver>k__BackingField;
    private PRISM.Produce.IngamePCardModel <PCard>k__BackingField;
    private PRISM.Produce.IngameSkillModel <IdolSkill>k__BackingField;
    private System.Nullable<SupportSkillType> <SupportSkillType>k__BackingField;
    private System.Nullable<PRISM.Produce.ProduceInGameEffectType> <EffectType>k__BackingField;
    public PRISM.Produce.IngamePlayerModel Giver { get; set; }
    public PRISM.Produce.IngamePCardModel PCard { get; set; }
    public PRISM.Produce.IngameSkillModel IdolSkill { get; set; }
    public System.Nullable<SupportSkillType> SupportSkillType { get; set; }
    public System.Nullable<PRISM.Produce.ProduceInGameEffectType> EffectType { get; set; }
    public static PRISM.Produce.IngameEffectCauseModel Construct(PRISM.Produce.IngamePlayerModel giver, PRISM.Produce.IngamePCardModel pCard);
    public static PRISM.Produce.IngameEffectCauseModel Construct(PRISM.Produce.IngamePlayerModel giver, PRISM.Produce.IngameSkillModel idolSkill);
    public static PRISM.Produce.IngameEffectCauseModel Construct(PRISM.Produce.IngamePlayerModel giver, SupportSkillType supportSkillType);
    public static PRISM.Produce.IngameEffectCauseModel Construct(PRISM.Produce.IngamePlayerModel giver, PRISM.Produce.ProduceInGameEffectType effectType);
    public void Dispose();
    public static PRISM.Produce.IngameEffectCauseModel Construct(PRISM.Produce.IngameEffectCauseModel origin);
    public static PRISM.Produce.IngameEffectCauseModel Instantiate();
}

// Namespace: PRISM.Produce
public class IngameMentalModel
{
    private int mentalGuardLimit;
    private int currentMental;
    private int maxMental;
    private int mentalBreakCount;
    private int mentalGurad;
    private int mentalDamageCount;
    private int mentalDamegeIgnoreZeroDamage;
    private int mentalRecoveryCount;
    private UniRx.Subject<int> onChangeMentalGuard;
    private System.Action onMentaleBreakAfter;
    private float currentBreakTime;
    private PRISM.Produce.TimingDictionaryOfIntervalSkill countRecoveryMentalWhenSecDic;
    private bool isOverrideMaxMentalBreakTime;
    private float overrideMaxMentalBreakTime;
    private System.Func<PRISM.Produce.ProduceInGameEffectManager> getProduceInGameEffectManagerFunc;
    private UniRx.Subject<System.ValueTuple<int, int>> onUpdateMentalSubject;
    private UniRx.Subject<System.ValueTuple<int, int, int, int>> onAddMentalSubject;
    private UniRx.Subject<bool> onUpdateMentalBreakStateSubjectForView;
    private UniRx.Subject<bool> onUpdateMentalBreakStateSubjectForLogic;
    private UniRx.Subject<float> onUpdateMentalBreakTimeSubject;
    private int <SelfDamageCount>k__BackingField;
    private float MentalBreakTimeLeft { get; set; }
    private float MentalBreakTime { get; set; }
    public int MentalGuardLimit { get; set; }
    public int MentalDamageCount { get; set; }
    public int MentalDamegeIgnoreZeroDamage { get; set; }
    public int MentalRecoveryCount { get; set; }
    public float MaxMentalBreakTime { get; set; }
    public int CurrentMental { get; set; }
    public int MaxMental { get; set; }
    public int MentalBreakCount { get; set; }
    public System.IObservable<int> OnChangeMentalGuard { get; set; }
    public System.Action OnMentaleBreakAfter { get; set; }
    public int MentalGuard { get; set; }
    public System.IObservable<System.ValueTuple<int, int>> OnUpdateMental { get; set; }
    public System.IObservable<System.ValueTuple<int, int, int, int>> OnAddMental { get; set; }
    public System.IObservable<bool> OnUpdateMentalBreakStateForView { get; set; }
    public System.IObservable<bool> OnUpdateMentalBreakStateForLogic { get; set; }
    public System.IObservable<float> OnUpdateMentalBreakTime { get; set; }
    public int SelfDamageCount { get; set; }
    public int OpponentDamageCount { get; set; }
    public void OverrideMaxMentalBreakTime(float sec);
    public void ResetOverrideMaxMentalBreakTime();
    public void Terminate();
    public void Reset();
    public void Copy(PRISM.Produce.IngameMentalModel model);
    public void StartMentalBreak();
    public void RecoverMentalBreak();
    public bool IsMentalBreak();
    public void AddMental(int offset, bool isDamage, bool isRecovery);
    public void SetMental(int mental);
    public void AddMentalDamageCount(bool isBlockDamage);
    public void AddSelfDamageCount();
    public void AddMentalRecoveryCount(int count);
    public int GetMentalPercent();
    public float GetMentalPercentFloat();
    public bool IsPinch(int unitId);
    public int GetPinchRate();
    public bool IsSafe(int unitId);
    public int GetSubMentalBySafeMode(int unitId);
    public float GetAddApealEffectRateBySafeMode(int unitId);
    public MentalState GetMentalState(int unitId);
    public void UpdateMental(float sec, PRISM.Produce.IngamePlayerModel playerModel, int avoidRate);
    public void UpdateMentalGuard(int mentalGuard);
    private void _executeMentalEffect(PRISM.Produce.IngamePlayerModel playerModel, PRISM.Produce.ProduceInGameEffectType type, bool isRecovery, bool isFixedValue, int judgeValue);
    private void _onUpdateMentalBreakStateSubject(bool isBreak);
    private static int _mentalEffectValueFormula(PRISM.Produce.ProduceInGameEffect effect, System.ValueTuple<PRISM.Produce.ProduceInGameEffectType, int> state);

    private class <>O
    {
        public static System.Func<PRISM.Produce.ProduceInGameEffect, System.ValueTuple<PRISM.Produce.ProduceInGameEffectType, int>, int> <0>___mentalEffectValueFormula;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, bool> <>9__89_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, System.ValueTuple<PRISM.Produce.ProduceInGameEffectType, int>, bool> <>9__91_0;
        private bool <UpdateMental>b__89_0(PRISM.Produce.ProduceInGameEffect t, int rate);
        private bool <_executeMentalEffect>b__91_0(PRISM.Produce.ProduceInGameEffect t, System.ValueTuple<PRISM.Produce.ProduceInGameEffectType, int> state);
    }
}

// Namespace: PRISM.Produce
public class IngamePhaseModel
{
    private static int PhaseNum;
    private PhaseType startPhase;
    private PhaseType phase;
    private int phaseChangeCount;
    private int[] cardUseCount;
    private UniRx.Subject<System.ValueTuple<PhaseType, int, PhaseChangeCostDownMode>> onPhaseChangeSubject;
    private UniRx.Subject<System.ValueTuple<DoubleCardUseType, int, PhaseChangeCostDownMode>> onDoubleCardUsageChangeSubject;
    private float lastPhaseChangeTime;
    private EffectCounter executeDoubleActionCounter;
    private EffectCounter doublePhaseCounter;
    private System.Func<float> getGameTimeFunc;
    private PRISM.Produce.TimingDictionaryOfIntervalSkill timingDictionaryOfIntervalSkill;
    public System.IObservable<System.ValueTuple<PhaseType, int, PhaseChangeCostDownMode>> OnPhaseChange { get; set; }
    public System.IObservable<System.ValueTuple<DoubleCardUseType, int, PhaseChangeCostDownMode>> OnDoubleCardUsageChange { get; set; }
    public System.Func<float> GetGameTime { get; set; }
    public PhaseType OriginPhase { get; set; }
    public DoubleCardUseType DoubleCardUsage { get; set; }
    public int PhaseChangeCount { get; set; }
    public void Initialize(PhaseType phase, System.Func<float> getGameTimeFunc);
    public void Reset();
    public void Copy(PRISM.Produce.IngamePhaseModel model);
    public void Terminate();
    public void UpdatePhaseMeasurement(float deltaTime, PRISM.Produce.IngamePlayerModel executor);
    public void UseCard(PRISM.Produce.ProduceInGameEffectManager effectManager);
    public int GetUseCount(int phase);
    public float GetPhaseChangeElapsedTime();
    public void PhaseChangeByNum(int num);
    public void OnAddEffect(PRISM.Produce.ProduceInGameEffect effect);
    public void OnRemoveEffect(PRISM.Produce.ProduceInGameEffect effect);
    public bool IsInPhase(PhaseType comparePhase);
    public bool IsInPhase(int effectJudgeValue);
    public bool IsInPhaseOriginal(PhaseType comparePhase);
    public bool IsInPhaseOriginal(int effectJudgeValue);
    private void _phaseChange(PhaseType phase, int changeNum);
    private void _setDoubleActionCounter(int count);
    private void _setDoublePhaseCounter(int count);
    private void _onUpdatePhase(int phaseChangeNum, PhaseChangeCostDownMode costDownMode);
    private static float _returnZero();

    private struct EffectCounter : System.ValueType
    {
        private int count;
        public int Count { get; set; }
        public bool IsExist { get; set; }
    }

    private class <>O
    {
        public static System.Func<float> <0>___returnZero;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Produce.IngamePhaseModel, PRISM.Produce.ProduceInGameEffect, PRISM.Produce.ProduceInGameEffectType, bool> <>9__30_0;
        private bool <UpdatePhaseMeasurement>b__30_0(PRISM.Produce.IngamePhaseModel phaseModel, PRISM.Produce.ProduceInGameEffect effect, PRISM.Produce.ProduceInGameEffectType effectType);
    }
}

// Namespace: PRISM.Produce
public class IngamePlayerActionData
{
    private System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> beforeDeckDataList;
    private System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> beforeGraveyardList;
    private System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> beforeHandList;
    private System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> exceptHandAndGraveyards;
    public int BeforeHandCardNum { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngamePCardModel> BeforeHandList { get; set; }
    public int BeforeHandListCount { get; set; }
    public void SetData(PRISM.Produce.IngamePlayerModel playerModel);
    public int GetIndexHandCard(PRISM.Produce.IngamePCardModel card);
    public System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngamePCardModel> GetBeforeExceptHandAndGraveyardList(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngamePCardModel> exceptCards);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Produce.IngamePCardModel, PRISM.Produce.IngamePCardModel, bool> <>9__11_0;
        private bool <GetIndexHandCard>b__11_0(PRISM.Produce.IngamePCardModel element, PRISM.Produce.IngamePCardModel state);
    }
}

// Namespace: PRISM.Produce
public class IngamePlayerModel
{
    private bool isPlayer;
    private int unitId;
    private bool isCopy;
    private System.Func<float> getGameLimitTimeFunc;
    private System.Func<PRISM.Produce.ProduceInGameEffectManager> getProduceInGameEffectManagerFunc;
    private PRISM.Produce.ProduceInGameEffectManager produceInGameEffectManager;
    private PRISM.Produce.IngamePlayerModel opponent;
    private PRISM.Produce.IngameSkillActionModel skillActionModel;
    private PRISM.Produce.CardAndSkillExecResult copyExecResult;
    private System.Collections.Generic.List<ProduceParameterType> useTypeCountersMentalRec;
    private int _selfDamageValue;
    private int _cacheDamageMental;
    private UniRx.Subject<System.ValueTuple<int, SkillAvailableState>> onChangeSkillStateSubject;
    private UniRx.Subject<System.ValueTuple<int, int, int>> onChangeSkillCostSubject;
    private UniRx.Subject<int> onUpdateHandWithoutSkillActionSubject;
    private PRISM.Produce.IngameRandomModel randomModel;
    private UniRx.CompositeDisposable disposable;
    private UniRx.CompositeDisposable skillSubscribers;
    private PRISM.Produce.IngameTallyModel tallyModel;
    private PRISM.Produce.ProduceInGameEffectType[] addIdolAppealEffectType;
    private PRISM.Produce.IngameUnitModel <UnitModel>k__BackingField;
    private PRISM.Produce.IngameAppealModel <AppealModel>k__BackingField;
    private PRISM.Produce.IngameAvoidModel <AvoidModel>k__BackingField;
    private PRISM.Produce.IngameDeckModel <DeckModel>k__BackingField;
    private PRISM.Produce.IngameMentalModel <MentalModel>k__BackingField;
    private PRISM.Produce.IngameProducePointModel <ProducePointModel>k__BackingField;
    private PRISM.Produce.IngameSkillListModel <SkillListModel>k__BackingField;
    private PRISM.Produce.IngameTypeCounterModel <TypeCounterModel>k__BackingField;
    private PRISM.Produce.IngamePhaseModel <IngamePhaseModel>k__BackingField;
    private PRISM.Produce.IngameUsedEffectModel usedEffectModel;
    public PRISM.Produce.IngameUnitModel UnitModel { get; set; }
    public PRISM.Produce.IngameAppealModel AppealModel { get; set; }
    public PRISM.Produce.IngameAvoidModel AvoidModel { get; set; }
    public PRISM.Produce.IngameDeckModel DeckModel { get; set; }
    public PRISM.Produce.IngameMentalModel MentalModel { get; set; }
    public PRISM.Produce.IngameProducePointModel ProducePointModel { get; set; }
    public PRISM.Produce.IngameSkillListModel SkillListModel { get; set; }
    public PRISM.Produce.IngameTypeCounterModel TypeCounterModel { get; set; }
    public PRISM.Produce.IngamePhaseModel IngamePhaseModel { get; set; }
    public PRISM.Produce.IngameMentalModel OpponentMentalModel { get; set; }
    public PRISM.Produce.IngameUnitModel OpponentIngameUnitModel { get; set; }
    public PRISM.Produce.IngamePlayerModel OpponentModel { get; set; }
    public PRISM.Produce.IngameUsedEffectModel UsedEffectModel { get; set; }
    public bool IsCopy { get; set; }
    public System.IObservable<int> OnUpdateHandWithoutSkillAction { get; set; }
    public System.IObservable<System.ValueTuple<int, SkillAvailableState>> OnChangeSkillState { get; set; }
    public System.IObservable<System.ValueTuple<int, int, int>> OnChangeSkillCost { get; set; }
    public int TotalGetAppealPointCount { get; set; }
    public void Initialize(PRISM.Produce.IngameUnitModel unitModel, PRISM.Produce.IngameSkillActionModel skillActionModel, System.Func<float> getGameTime, System.Func<float> getGameLimitTimeFunc, PhaseType startPhase, PRISM.Produce.IngameTallyModel tallyModel);
    public void Reset();
    public void Copy(PRISM.Produce.IngamePlayerModel model);
    public void Terminate();
    public void CalcUpdate(float deltaTime, bool& isChange);
    public bool IsPlayer();
    public void SetPlayer(bool isPlayer);
    public void SetOppnentModel(PRISM.Produce.IngamePlayerModel opponent);
    public int GetUnitId();
    public int GetDamageMental();
    public void AddDamageValue(int value);
    public int GetSelfDamageMental();
    public void AddSelfDamageValue(int value);
    public int GetReceivedDamageMental();
    public PRISM.Produce.ProduceInGameEffectManager GetEffectManager();
    public void AddEffect(PRISM.Produce.ProduceInGameEffect effect);
    public void RankUpCard(int rankUpNum);
    public void ResetRankUpCard();
    public void SetCopyExecResult(PRISM.Produce.CardAndSkillExecResult result);
    public PRISM.Produce.CardAndSkillExecResult GetCopyExecResult();
    public bool IsPinch();
    public bool IsSafe();
    public bool IsEnableTypeCounter();
    public bool IsEnablePhaseMode();
    public bool IsEnableExclusionCardCount();
    public float GetAddApealEffectRateBySafeMode();
    public int GetAddApealEffectRateBySafeModeParcent();
    public int GetUnitIdolNum();
    public int GetProduceIdolID(int index);
    public int GetRemoveCardInStatus();
    public PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetUnitSkillCard(int& searchDrawNum, int getCount);
    public PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetNonUnitSkillCard(int getCount);
    public PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> GetSkillParameterType(int& searchDrawNum, bool& isRandomDrow, int getCount, ProduceParameterType parameterType);
    public int GetHandCardCountByParameterTypes(ProduceParameterType parameterType);
    public int GetSubMentalBySafeMode();
    public void UpdateMental(int selfRecovery, int selfDamage, int receivedRecovery, int receivedDamage, int safeSelfDamage, bool isForce, int fixMental);
    private void _updateMentalInner(QueueObject<PRISM.Produce.IngameUpdateMentalArg> mentalUpdateQueue, int selfRecovery, int selfDamage, int receivedRecovery, int receivedDamage, int safeSelfDamage, bool isForce, int fixMental);
    private void _checkMentalZero();
    public bool UpdateProducePoint(int addProducePoint);
    public MentalState GetMentalState();
    public PCardAvailableState GetPCardState(PRISM.Produce.IngamePCardModel card);
    public int GetCurrentCardCost(PRISM.Produce.IngamePCardModel produceCard);
    public SkillAvailableState GetSkillState(int index);
    public PRISM.Produce.IngameUnitMemberModel GetRandomIdol(int charaId);
    public int GetIdolSkillCost(PRISM.Produce.IngameSkillModel skill);
    public void ApplyInGameEffectOnSearchCard();
    public int GetCostDownHandCardNum();
    public int GetUsableSkillTopHightCost();
    private void _onAddMental(int value);
    private void _startMentalBreak();
    private void _onRecoverMentalBreak();
    private void _onAddHandCard(PRISM.Produce.IngamePCardModel card);
    private void _onChangeMentalBreak(bool isMentalBareak);
    private void _setAddAndRemoveEffectEvent();
    private void _onPhaseChange(DoubleCardUseType doubleCardUseType, int num, PhaseChangeCostDownMode changeMode);
    public void AddAppealWithEffectReferedUnitParam(PRISM.Produce.ProduceInGameEffectType getAppealWhenMentalEffectType, ProduceParameterType voDaViType);
    public void AddAppealWithEffectReferedUnitParam<T>(PRISM.Produce.ProduceInGameEffectType getAppealWhenMentalEffectType, ProduceParameterType voDaViType, T isMatchState, System.Func<T, PRISM.Produce.ProduceInGameEffect, PRISM.Produce.ProduceInGameEffectType, bool> isMatch);
    public void AddAppealWithEffectReferedIdolParam(PRISM.Produce.ProduceInGameEffectType getAppealWhenMentalEffectType, ProduceParameterType voDaViType);
    private void _addAppealWithEffect<T>(PRISM.Produce.ProduceInGameEffectType getAppealWhenMentalEffectType, ProduceParameterType voDaViType, T state, System.Func<T, PRISM.Produce.ProduceInGameEffect, int> useStatusFormula);
    private void _addAppealWithEffect<TStatusState, TIsMatchState>(PRISM.Produce.ProduceInGameEffectType getAppealWhenMentalEffectType, ProduceParameterType voDaViType, TStatusState statusState, TIsMatchState isMatchState, System.Func<TStatusState, PRISM.Produce.ProduceInGameEffect, int> useStatusFormula, System.Func<TIsMatchState, PRISM.Produce.ProduceInGameEffect, PRISM.Produce.ProduceInGameEffectType, bool> isMatch);
    public int DrawCards<TState>(int count, TState state, System.Action<PRISM.Produce.IngamePCardModel, TState> onAddSuccess);
    public void AddUseCardCount(PRISM.Produce.IngamePCardModel cardModel, PRISM.Produce.CardAndSkillExecResult execResult);
    public void AddAppeal(int addAppealOnce, ProduceParameterType appealType, int getAppealCount);
    public void AddAppeal(int addAppealOnce, System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypes, int getAppealCount, int normalAppealPointOnce, int vocalAppealPointOnce, int danceAppealPointOnce, int visualAppealPointOnce, int otherAppealPointOnce, int drawVoice, int drawDance, int drawVisual, int drawOther);
    private void _addAppeal(int addAppealOnce, System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypes, int getAppealCount, int normalAppealPointOnce, int vocalAppealPointOnce, int danceAppealPointOnce, int visualAppealPointOnce, int otherAppealPointOnce, int drawVoice, int drawDance, int drawVisual, int drawOther);
    private PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> _getDrawCardIsMatch<TState>(int drawCount, PRISM.Produce.ProduceInGameEffectType skillType, TState state, bool isRandomDrawDelete, System.Func<PRISM.Produce.IngamePCardModel, TState, bool> isMatchSkillType);
    private void _checkSkillCost();
    private PRISM.Produce.ProduceInGameEffectManager <.ctor>b__65_0();
    private void <ApplyInGameEffectOnSearchCard>g___addSearchOnceBuffEffect|114_0(PRISM.Produce.ProduceInGameEffectType havingEffect, PRISM.Produce.ProduceInGameEffectType addEffect);
    private void <_onAddMental>g___addRecoverOnceBuffEffect|117_0(PRISM.Produce.ProduceInGameEffectType conditionEffect, PRISM.Produce.ProduceInGameEffectType addEffect);
    private void <_onRecoverMentalBreak>g___addMentalBreakEffect|119_0(PRISM.Produce.ProduceInGameEffectType conditionEffect, PRISM.Produce.ProduceInGameEffectType addEffect);
    private void <_onAddHandCard>g___addTimeLimitAddTypeEffect|120_0(PRISM.Produce.ProduceInGameEffectType effectType, <>c__DisplayClass120_0& );

    private class <>O
    {
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, int> <0>__DefaultNotDividedEffectValueFormula;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, ProduceParameterType, int> <1>__DefaultNotDividedEffectValueFormula;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngameSkillModel, int> <2>__DefaultNotDividedEffectValueFormula;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<PRISM.Produce.IngamePCardModel, PRISM.Produce.IngamePlayerModel> <>9__65_1;
        public static System.Action<System.ValueTuple<int, int, int>, PRISM.Produce.IngamePlayerModel> <>9__65_2;
        public static System.Action<System.ValueTuple<int, int>, PRISM.Produce.IngamePlayerModel> <>9__65_3;
        public static System.Action<System.ValueTuple<DoubleCardUseType, int, PhaseChangeCostDownMode>, PRISM.Produce.IngamePlayerModel> <>9__65_4;
        public static System.Action<PRISM.Produce.IngamePCardModel, PRISM.Produce.IngamePlayerModel> <>9__65_5;
        public static System.Action<System.ValueTuple<int, PRISM.Produce.IngamePCardModel>, PRISM.Produce.IngamePlayerModel> <>9__65_6;
        public static System.Action<PRISM.Produce.IngamePCardModel, PRISM.Produce.IngamePlayerModel> <>9__65_7;
        public static System.Action<bool, PRISM.Produce.IngamePlayerModel> <>9__66_0;
        public static System.Action<System.ValueTuple<int, int, int, int>, PRISM.Produce.IngamePlayerModel> <>9__66_1;
        public static System.Func<PRISM.Produce.IngamePCardModel, ProduceParameterType, bool> <>9__101_0;
        public static System.Action<PRISM.Produce.IngameUpdateMentalArg, QueueObject<PRISM.Produce.IngameUpdateMentalArg>> <>9__104_2;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, bool> <>9__104_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, bool> <>9__104_1;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__105_3;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__105_4;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__105_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__105_1;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, bool> <>9__105_5;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, bool> <>9__105_6;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__105_2;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, bool> <>9__109_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, bool> <>9__109_1;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__110_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, ProduceParameterType, bool> <>9__110_5;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, ProduceParameterType, bool> <>9__110_6;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, float, bool> <>9__110_1;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, bool> <>9__110_2;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, bool> <>9__110_3;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, bool> <>9__110_4;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, bool> <>9__111_0;
        public static System.Func<PRISM.Produce.IngameUnitMemberModel, int, bool> <>9__112_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngameSkillModel, bool> <>9__113_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngameSkillModel, bool> <>9__113_1;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, bool> <>9__113_2;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, bool> <>9__113_3;
        public static System.Func<PRISM.Produce.IngameActionEffectModel, int, bool> <>9__113_4;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__121_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__122_2;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__122_3;
        public static System.Action<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngamePlayerModel> <>9__122_0;
        public static System.Action<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngamePlayerModel> <>9__122_1;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__123_0;
        public static System.Func<System.ValueTuple<PRISM.Produce.IngamePlayerModel, ProduceParameterType>, PRISM.Produce.ProduceInGameEffect, int> <>9__124_0;
        public static System.Func<System.ValueTuple<PRISM.Produce.IngameSkillListModel, ProduceParameterType>, PRISM.Produce.ProduceInGameEffect, int> <>9__126_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, System.ValueTuple<ProduceParameterType, int, int, int>, bool> <>9__133_0;
        private void <.ctor>b__65_1(PRISM.Produce.IngamePCardModel card, PRISM.Produce.IngamePlayerModel state);
        private void <.ctor>b__65_2(System.ValueTuple<int, int, int> tuple, PRISM.Produce.IngamePlayerModel state);
        private void <.ctor>b__65_3(System.ValueTuple<int, int> tuple, PRISM.Produce.IngamePlayerModel state);
        private void <.ctor>b__65_4(System.ValueTuple<DoubleCardUseType, int, PhaseChangeCostDownMode> tuple, PRISM.Produce.IngamePlayerModel state);
        private void <.ctor>b__65_5(PRISM.Produce.IngamePCardModel _, PRISM.Produce.IngamePlayerModel state);
        private void <.ctor>b__65_6(System.ValueTuple<int, PRISM.Produce.IngamePCardModel> _, PRISM.Produce.IngamePlayerModel state);
        private void <.ctor>b__65_7(PRISM.Produce.IngamePCardModel _, PRISM.Produce.IngamePlayerModel state);
        private void <Initialize>b__66_0(bool isMentalBreak, PRISM.Produce.IngamePlayerModel state);
        private void <Initialize>b__66_1(System.ValueTuple<int, int, int, int> tuple, PRISM.Produce.IngamePlayerModel state);
        private bool <GetSkillParameterType>b__101_0(PRISM.Produce.IngamePCardModel x, ProduceParameterType state);
        private void <UpdateMental>b__104_2(PRISM.Produce.IngameUpdateMentalArg updateArg, QueueObject<PRISM.Produce.IngameUpdateMentalArg> state);
        private bool <UpdateMental>b__104_0(PRISM.Produce.ProduceInGameEffect eff, int state);
        private bool <UpdateMental>b__104_1(PRISM.Produce.ProduceInGameEffect eff, int state);
        private bool <_updateMentalInner>b__105_3(PRISM.Produce.ProduceInGameEffect e);
        private bool <_updateMentalInner>b__105_4(PRISM.Produce.ProduceInGameEffect e);
        private bool <_updateMentalInner>b__105_0(PRISM.Produce.ProduceInGameEffect e);
        private bool <_updateMentalInner>b__105_1(PRISM.Produce.ProduceInGameEffect e);
        private bool <_updateMentalInner>b__105_5(PRISM.Produce.ProduceInGameEffect effect, int _);
        private bool <_updateMentalInner>b__105_6(PRISM.Produce.ProduceInGameEffect effect, int _);
        private bool <_updateMentalInner>b__105_2(PRISM.Produce.ProduceInGameEffect item);
        private bool <GetPCardState>b__109_0(PRISM.Produce.ProduceInGameEffect e, int state);
        private bool <GetPCardState>b__109_1(PRISM.Produce.ProduceInGameEffect e, int state);
        private bool <GetCurrentCardCost>b__110_0(PRISM.Produce.ProduceInGameEffect e);
        private bool <GetCurrentCardCost>b__110_5(PRISM.Produce.ProduceInGameEffect e, ProduceParameterType state);
        private bool <GetCurrentCardCost>b__110_6(PRISM.Produce.ProduceInGameEffect e, ProduceParameterType state);
        private bool <GetCurrentCardCost>b__110_1(PRISM.Produce.ProduceInGameEffect t, float time);
        private bool <GetCurrentCardCost>b__110_2(PRISM.Produce.ProduceInGameEffect t, int rate);
        private bool <GetCurrentCardCost>b__110_3(PRISM.Produce.ProduceInGameEffect t, int state);
        private bool <GetCurrentCardCost>b__110_4(PRISM.Produce.ProduceInGameEffect t, int state);
        private bool <GetSkillState>b__111_0(PRISM.Produce.ProduceInGameEffect e, int state);
        private bool <GetRandomIdol>b__112_0(PRISM.Produce.IngameUnitMemberModel e, int state);
        private bool <GetIdolSkillCost>b__113_0(PRISM.Produce.ProduceInGameEffect t, PRISM.Produce.IngameSkillModel state);
        private bool <GetIdolSkillCost>b__113_1(PRISM.Produce.ProduceInGameEffect e, PRISM.Produce.IngameSkillModel state);
        private bool <GetIdolSkillCost>b__113_2(PRISM.Produce.ProduceInGameEffect e, int state);
        private bool <GetIdolSkillCost>b__113_3(PRISM.Produce.ProduceInGameEffect e, int state);
        private bool <GetIdolSkillCost>b__113_4(PRISM.Produce.IngameActionEffectModel effect, int _);
        private bool <_onChangeMentalBreak>b__121_0(PRISM.Produce.ProduceInGameEffect t);
        private void <_setAddAndRemoveEffectEvent>b__122_0(PRISM.Produce.ProduceInGameEffect effect, PRISM.Produce.IngamePlayerModel state);
        private bool <_setAddAndRemoveEffectEvent>b__122_2(PRISM.Produce.ProduceInGameEffect t);
        private bool <_setAddAndRemoveEffectEvent>b__122_3(PRISM.Produce.ProduceInGameEffect t);
        private void <_setAddAndRemoveEffectEvent>b__122_1(PRISM.Produce.ProduceInGameEffect effect, PRISM.Produce.IngamePlayerModel state);
        private bool <_onPhaseChange>b__123_0(PRISM.Produce.ProduceInGameEffect eff);
        private int <AddAppealWithEffectReferedUnitParam>b__124_0(System.ValueTuple<PRISM.Produce.IngamePlayerModel, ProduceParameterType> state, PRISM.Produce.ProduceInGameEffect effect);
        private int <AddAppealWithEffectReferedIdolParam>b__126_0(System.ValueTuple<PRISM.Produce.IngameSkillListModel, ProduceParameterType> state, PRISM.Produce.ProduceInGameEffect effect);
        private bool <_addAppeal>b__133_0(PRISM.Produce.ProduceInGameEffect e, System.ValueTuple<ProduceParameterType, int, int, int> state);
    }

    private class <>c__125`1<T>
    {
        public static <>c__125<T> <>9;
        public static System.Func<System.ValueTuple<PRISM.Produce.IngamePlayerModel, ProduceParameterType>, PRISM.Produce.ProduceInGameEffect, int> <>9__125_0;
        private int <AddAppealWithEffectReferedUnitParam>b__125_0(System.ValueTuple<PRISM.Produce.IngamePlayerModel, ProduceParameterType> state, PRISM.Produce.ProduceInGameEffect effect);
    }

    private class <>c__127`1<T>
    {
        public static <>c__127<T> <>9;
        public static System.Func<int, PRISM.Produce.ProduceInGameEffect, PRISM.Produce.ProduceInGameEffectType, bool> <>9__127_0;
        private bool <_addAppealWithEffect>b__127_0(int _, PRISM.Produce.ProduceInGameEffect effect, PRISM.Produce.ProduceInGameEffectType effectType);
    }

    private class <>c__129`1<TState>
    {
        public static <>c__129<TState> <>9;
        public static System.Func<PRISM.Produce.IngamePCardModel, ProduceParameterType, bool> <>9__129_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, ProduceParameterType, bool> <>9__129_1;
        public static System.Func<PRISM.Produce.IngamePCardModel, ProduceParameterType, bool> <>9__129_2;
        private bool <DrawCards>b__129_0(PRISM.Produce.IngamePCardModel x, ProduceParameterType type);
        private bool <DrawCards>b__129_1(PRISM.Produce.IngamePCardModel x, ProduceParameterType type);
        private bool <DrawCards>b__129_2(PRISM.Produce.IngamePCardModel x, ProduceParameterType type);
    }

    private class <>c__134`1<TState>
    {
        public static <>c__134<TState> <>9;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.ProduceInGameEffectType, bool> <>9__134_0;
        private bool <_getDrawCardIsMatch>b__134_0(PRISM.Produce.ProduceInGameEffect t, PRISM.Produce.ProduceInGameEffectType state);
    }

    private struct <>c__DisplayClass120_0 : System.ValueType
    {
        public PRISM.Produce.ProduceInGameEffectManager effectManager;
        public PRISM.Produce.IngamePlayerModel <>4__this;
        public PRISM.Produce.IngamePCardModel card;
    }

    private class <>c__DisplayClass120_1
    {
        public PRISM.Produce.ProduceInGameEffectType effectType;
        private bool <_onAddHandCard>b__1(PRISM.Produce.ProduceInGameEffect eff);
    }
}

// Namespace: PRISM.Produce
public class IngamePlayerStatusModel
{
    private int <Vocal>k__BackingField;
    private int <Dance>k__BackingField;
    private int <Visual>k__BackingField;
    private int <Mental>k__BackingField;
    public int Vocal { get; set; }
    public int Dance { get; set; }
    public int Visual { get; set; }
    public int Mental { get; set; }
    public void SetStatus(PRISM.Produce.IngamePlayerStatusModel statusModel);
    public void SetStatus(int vocal, int dance, int visual, int mental);
    public void AddStatus(PRISM.Produce.IngamePlayerStatusModel statusModel);
    public void AddStatus(int vocal, int dance, int visual, int mental);
    public void DivideStatus(int value);
}

// Namespace: PRISM.Produce
public class IngameProducePointModel
{
    private UniRx.Subject<System.ValueTuple<float, float>> onChangePpRecoveryTime;
    private UniRx.Subject<System.ValueTuple<int, int>> onChangeProducePointSubject;
    private UniRx.Subject<System.ValueTuple<int, int, int>> onTimeRecoveryProducePointSubject;
    private int producePointValue;
    private float currentPlayerPPRecoveryTime;
    private System.Func<bool> <IsMentaleBreakFunc>k__BackingField;
    private System.Func<float> <GetMentalPercentFunc>k__BackingField;
    private System.Func<PRISM.Produce.ProduceInGameEffectManager> <GetStatusEffectManagerFunc>k__BackingField;
    private int <ProducePointMaxBase>k__BackingField;
    public System.Func<bool> IsMentaleBreakFunc { get; set; }
    public System.Func<float> GetMentalPercentFunc { get; set; }
    public System.Func<PRISM.Produce.ProduceInGameEffectManager> GetStatusEffectManagerFunc { get; set; }
    private int ProducePointMaxBase { get; set; }
    public float CurrentPlayerPPRecoveryTime { get; set; }
    public System.IObservable<System.ValueTuple<int, int, int>> OnTimeRecoveryProducePoint { get; set; }
    public System.IObservable<System.ValueTuple<int, int>> OnChangeProducePoint { get; set; }
    public System.IObservable<System.ValueTuple<float, float>> OnChangePpRecoveryTime { get; set; }
    public int ProducePointMax { get; set; }
    public int ProducePointValue { get; set; }
    protected float playerPPRecoveryTime { get; set; }
    public void Reset();
    public void Terminate();
    public void Copy(PRISM.Produce.IngameProducePointModel model);
    public void AddProducePoint(int value);
    public void AddDecimalProducePoint(int value);
    public void SetProducePoint(int value);
    public int UpdatePlayerProducePointTimer(float addSec, int currentMental, int opponentCurrentMental, PRISM.Produce.IngamePhaseModel phaseModel);
    public void OnAddEffect(PRISM.Produce.ProduceInGameEffect effect);
    public void OnRemoveEffect(PRISM.Produce.ProduceInGameEffect effect);
    private void _onUpdateProducePoint();
    private void _setDecimalProducePoint(int value);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, System.ValueTuple<float, int, int, PRISM.Produce.IngamePhaseModel>, bool> <>9__38_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, System.ValueTuple<float, int, int, PRISM.Produce.IngamePhaseModel>, int> <>9__38_1;
        private bool <UpdatePlayerProducePointTimer>b__38_0(PRISM.Produce.ProduceInGameEffect e, System.ValueTuple<float, int, int, PRISM.Produce.IngamePhaseModel> state);
        private int <UpdatePlayerProducePointTimer>b__38_1(PRISM.Produce.ProduceInGameEffect e, System.ValueTuple<float, int, int, PRISM.Produce.IngamePhaseModel> state);
    }
}

// Namespace: PRISM.Produce
public class IngameRandomModel
{
    private int seed;
    public void SetUp(PRISM.Produce.ProduceBaseModel model, int seed);
    public void Reset();
    public void Copy(PRISM.Produce.IngameRandomModel model);
    public int Random(int min, int max);
}

// Namespace: PRISM.Produce
public class IngameSkillActionModel
{
    private UniRx.CompositeDisposable tempCallBackDisposable;
    private PRISM.Produce.IngameRandomModel randomModel;
    private PRISM.Produce.InGameExecActionResult avoidResult;
    private PRISM.Produce.IngamePlayerActionData ingamePlayerActionData;
    private PRISM.Produce.IngamePlayerActionData ingameOpponentActionData;
    public static System.Collections.Generic.IReadOnlyList<ProduceParameterType> emptyAppealTypes;
    public static System.Collections.Generic.IReadOnlyList<ProduceParameterType> voDaAppealTypes;
    public static System.Collections.Generic.IReadOnlyList<ProduceParameterType> voViAppealTypes;
    public static System.Collections.Generic.IReadOnlyList<ProduceParameterType> daViAppealTypes;
    public static System.Collections.Generic.IReadOnlyList<ProduceParameterType> voDaViAppealTypes;
    public static System.Collections.Generic.IReadOnlyList<ProduceParameterType> voAppealTypes;
    public static System.Collections.Generic.IReadOnlyList<ProduceParameterType> daAppealTypes;
    public static System.Collections.Generic.IReadOnlyList<ProduceParameterType> viAppealTypes;
    public static System.Collections.Generic.IReadOnlyList<ProduceParameterType> otherAppealTypes;
    private System.Func<float> <CurrentTimeSecondFunc>k__BackingField;
    private System.Func<float> <ElapsedTimeSecondFunc>k__BackingField;
    private System.Func<PRISM.Produce.InGameActionResultPool<PRISM.Produce.CardAndSkillExecResult>> <CardAndSkillExecResultPoolFunc>k__BackingField;
    private System.Collections.Generic.List<PRISM.Produce.ProduceInGameEffect> getEffectsList;
    public System.Func<float> CurrentTimeSecondFunc { get; set; }
    public System.Func<float> ElapsedTimeSecondFunc { get; set; }
    public System.Func<PRISM.Produce.InGameActionResultPool<PRISM.Produce.CardAndSkillExecResult>> CardAndSkillExecResultPoolFunc { get; set; }
    public static System.Collections.Generic.IReadOnlyList<ProduceParameterType> GetSingleAppealTypes(ProduceParameterType type);
    public void Reset(PRISM.Produce.IngamePlayerModel playerModel, PRISM.Produce.IngamePlayerModel opponentModel);
    public void Terminate();
    public PRISM.AutoReleaseScope<PRISM.Produce.InGameActionResult> GetIdolSkillCalcResult(PRISM.Produce.IngameSkillModel skillModel, PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngamePlayerModel opponent, bool isExecute, bool isBuff);
    public PRISM.AutoReleaseScope<PRISM.Produce.InGameActionResult> GetPCardCalcResult(PRISM.Produce.IngamePCardModel produceCard, float producePoint, PRISM.Produce.IngamePlayerModel myModel, PRISM.Produce.IngamePlayerModel targetModel, CardUseTiming cardUseTiming, bool isExecute, bool isBuff);
    private void _getPCardCalcResultEffect(PRISM.Produce.InGameActionResult result, PRISM.Produce.IngameActionEffectModel eff, PRISM.Produce.IngamePCardModel produceCard, float producePoint, UseTypeCounter& useTypeCounter, PRISM.Produce.IngamePlayerModel myModel, PRISM.Produce.IngamePlayerModel targetModel, CardUseTiming cardUseTiming, bool isExecute, bool isBuff);
    public PRISM.AutoReleaseScope<PRISM.Produce.InGameActionResult> GetActionEffectCalcResult(PRISM.Produce.IngameActionEffectModel cardEffect, System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypes, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel, PRISM.Produce.IngameSkillModel skillModel, PRISM.Produce.IngamePCardModel cardModel, CardUseTiming timing, bool isExecute, bool isBuff);
    private void _adaptEffect(PRISM.Produce.InGamePlayerActionResult executorResult, PRISM.Produce.InGamePlayerActionResult opponentResult, PRISM.Produce.IngamePCardModel cardModel, PRISM.Produce.IngameSkillModel skillModel, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel, System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypes, CardUseTiming timing, PRISM.Produce.ProduceInGameEffectManager executorEffectManager, bool isBuff, bool isExecute, bool ignoreCardBuff);
    public bool CheckActionEffectConditionSkillCard(PRISM.Produce.IngamePCardModel produceCard, PRISM.Produce.IngameActionEffectModel effect, int getAppealPoint, float beforeUseProducePoint, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel, bool isExecute);
    public bool CheckActionEffectConditionIdolSkill(PRISM.Produce.IngameSkillModel skillModel, PRISM.Produce.IngameActionEffectModel effect, int getAppealPoint, float beforeUseProducePoint, UseTypeCounter& useTypeCounter, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel);
    public bool CheckActionEffectConditionIdolSkill(PRISM.Produce.IngameSkillModel skillModel, PRISM.Produce.IngameActionEffectModel effect, int getAppealPoint, float beforeUseProducePoint, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel);
    public bool CheckActionCondition(PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngamePlayerModel opponent, int conditionTypeId, int conditionValue);
    public bool CheckActionEffectCondition(int discountCost, PRISM.Produce.IngameActionEffectModel effect, int getAppealPoint, float beforeUseProducePoint, UseTypeCounter& useTypeCounter, ProduceParameterType produceParameterType, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel, bool isExecute);
    public bool CheckActionEffectCondition(int conditionType, int conditionValue, int discountCost, PRISM.Produce.IngameActionEffectModel effect, int getAppealPoint, float beforeUseProducePoint, UseTypeCounter& useTypeCounter, ProduceParameterType produceParameterType, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel, bool isExecute);
    public void AddEffectByElapsedTimeSecond(float elapsedTimeSecond, PRISM.Produce.IngamePlayerModel executor);
    public void OnIncreaseMaxHandNum(PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngameEffectCauseModel increaseCause);
    public PRISM.Produce.CardAndSkillExecResult GetExecutePCardResult(PRISM.Produce.IngamePCardModel card, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel, PRISM.Produce.CardAndSkillExecResult inResult);
    public PRISM.Produce.CardAndSkillExecResult GetExecuteIdolSkillResult(PRISM.Produce.IngameSkillModel skill, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel);
    public PRISM.Produce.CardAndSkillExecResult GetExecuteActionResult(PRISM.Produce.CardAndSkillExecResult result, System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameActionEffectModel> effects, int beforeUseProducePoint, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel, CardUseTiming timing, PRISM.Produce.IngamePCardModel cardModel, PRISM.Produce.IngameSkillModel skillModel);
    public PRISM.Produce.CardAndSkillExecResult ExecuteSkill(PRISM.Produce.IngameSkillModel skill, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel);
    public PRISM.Produce.CardAndSkillExecResult ExecutePCard(PRISM.Produce.IngamePCardModel produceCard, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel, PRISM.Produce.CardAndSkillExecResult inResult);
    private bool _checkActionEffectConditionSkillCard(PRISM.Produce.IngamePCardModel produceCard, PRISM.Produce.IngameActionEffectModel effect, int getAppealPoint, float beforeUseProducePoint, UseTypeCounter& useTypeCounter, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel, bool isExecute);
    private void _executeCardAfter(PRISM.Produce.IngamePCardModel produceCard, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel, PRISM.Produce.CardAndSkillExecResult execResult, int beforeUseProducePoint);
    private void _executeSkillAfter(PRISM.Produce.IngameSkillModel skill, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel, PRISM.Produce.CardAndSkillExecResult execResult, int beforeUseProducePoint);
    private void _executeNormalDrowAfterSkillAndCard(PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel, PRISM.Produce.CardAndSkillExecResult execResult);
    private void _tryExecuteAddAppealTypeeVoHandCardByNomalDrowAfterEffect(PRISM.Produce.IngamePlayerModel playerModel, PRISM.Produce.ProduceInGameEffectType effectType, ProduceParameterType parameterType);
    private void _executeSkillAndCardAfterImpul(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameActionEffectModel> effects, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel, PRISM.Produce.CardAndSkillExecResult execResult, int beforeUseProducePoint, PRISM.Produce.IngamePCardModel produceCardModel, PRISM.Produce.IngameSkillModel skillModel, System.Collections.Generic.IReadOnlyList<ProduceParameterType> parameterTypeList, bool isCopy);
    private void _executeSkillAndCardAfter(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameActionEffectModel> effects, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel, PRISM.Produce.CardAndSkillExecResult execResult, int beforeUseProducePoint, PRISM.Produce.IngamePCardModel produceCardModel, PRISM.Produce.IngameSkillModel skillModel, System.Collections.Generic.IReadOnlyList<ProduceParameterType> parameterTypeList);
    private void _tryAppealByBuffDebuffWhenIdolParam(PRISM.Produce.ProduceInGameEffectType effectType, ProduceParameterType voDaViType, PRISM.Produce.InGamePlayerExecActionResult execActionResult, PRISM.Produce.ProduceInGameEffectManager executorEffectManager, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel, PRISM.Produce.IngamePCardModel card, PRISM.Produce.IngameSkillModel skill, int count);
    private void _normalDraw(PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePCardModel produceCard, PRISM.Produce.IInGamePlayerExecActionResult result);
    private void _normalDraw(PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePCardModel produceCard);
    private PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> _normalDrawCommon(PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePCardModel produceCard);
    public PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> _normalDrawByIsMatch<TState>(int drawCount, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.ProduceInGameEffectType skillType, TState state, bool isRandomDrawDelete, System.Func<PRISM.Produce.IngamePCardModel, TState, bool> isMatchSkillType);
    public void ApplyCardAndSkillResult(PRISM.Produce.CardAndSkillExecResult result, System.Collections.Generic.IReadOnlyList<ProduceParameterType> parameterTypeList, PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngamePlayerModel opponent);
    private void _applyCardAndSkillPlayerResultAfter(PRISM.Produce.InGamePlayerExecActionResult executorResult, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.InGamePlayerExecActionResult opponentResult, PRISM.Produce.IngamePlayerModel opponentPlayerModel, bool isExecuter, System.Collections.Generic.IReadOnlyList<ProduceParameterType> parameterTypeList);
    private void _applyCardAndSkillPlayerResult(PRISM.Produce.InGamePlayerExecActionResult executorResult, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.InGamePlayerExecActionResult opponentResult, PRISM.Produce.IngamePlayerModel opponentPlayerModel, bool isExecuter, System.Collections.Generic.IReadOnlyList<ProduceParameterType> parameterTypeList);
    private void _calcDamage(PRISM.Produce.InGamePlayerExecActionResult targetPlayerResult, PRISM.Produce.InGamePlayerExecActionResult actionPlayerResult, PRISM.Produce.IngamePlayerModel targetPlayerModel, PRISM.Produce.IngamePlayerModel actionPlayerModel);
    private PRISM.Produce.IInGamePlayerActionResult _addBuffDebuffAppeal(PRISM.Produce.IInGamePlayerActionResult executorResult, PRISM.Produce.IngamePCardModel cardModel, PRISM.Produce.IngameSkillModel skillModel, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel, System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypes, bool isExclusion);
    public System.ValueTuple<int, bool> CalcAppealBuffDebuff(PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel, int appeal, System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypes, PRISM.Produce.IngamePCardModel cardModel, PRISM.Produce.IngameSkillModel skillModel, bool isExclusion, bool isEnableSafe, bool isEnableForceIsUseIdolSkill, bool isIndirectAppeal);
    public PRISM.Produce.CardAndSkillPredictionModel GetPredictionBySkillEffect(PRISM.Produce.CardAndSkillPredictionModel predictionModel, PRISM.Produce.IngameSkillModel skillModel, PRISM.Produce.IngamePCardModel cardModel, PRISM.Produce.IngameActionEffectModel cardEffect, PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngamePlayerModel opponent, CardUseTiming useTiming);
    private void _applyInGameEffect(PRISM.Produce.IngamePlayerModel model, PRISM.Produce.InGamePlayerExecActionResult result, System.Predicate<PRISM.Produce.ProduceInGameEffect> isMatch);
    private bool _tryAddHandCard(PRISM.Produce.IngamePlayerModel playerModel, PRISM.Produce.IngamePCardModel card, PRISM.Produce.IInGamePlayerExecActionResult result);
    private bool _tryAddHandCard<TState>(PRISM.Produce.IngamePlayerModel playerModel, PRISM.Produce.IngamePCardModel card, PRISM.Produce.IInGamePlayerExecActionResult result, TState state, System.Action<PRISM.Produce.IngamePCardModel, TState> onAddSuccess);
    private void _tryAddRangeHand(PRISM.Produce.IngamePlayerModel playerModel, PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> deckDatas, PRISM.Produce.IInGamePlayerExecActionResult result);
    private void _tryAddRangeHand<TState>(PRISM.Produce.IngamePlayerModel playerModel, PRISM.AutoReleaseScope<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> deckDatas, PRISM.Produce.IInGamePlayerExecActionResult result, TState state, System.Action<PRISM.Produce.IngamePCardModel, TState> onAddSuccess);
    private void _randomDraw(PRISM.Produce.IngamePlayerModel playerModel, int count, PRISM.Produce.IInGamePlayerExecActionResult result);
    private void _randomDraw<TState>(PRISM.Produce.IngamePlayerModel playerModel, int count, PRISM.Produce.IInGamePlayerExecActionResult result, TState state, System.Action<PRISM.Produce.IngamePCardModel, TState> onAddSuccess);
    private void _removeAtHand(PRISM.Produce.IngamePlayerModel playerModel, PRISM.Produce.IngamePCardModel card, System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngamePCardModel> beforeHand, PRISM.Produce.IInGamePlayerExecActionResult result);
    private void _onExclusionCard(PRISM.Produce.IngamePlayerModel playerModel, PRISM.Produce.IngamePCardModel card, PRISM.Produce.IInGamePlayerExecActionResult result);
    private PRISM.Produce.CardAndSkillExecResult _exclusionCard(PRISM.Produce.CardAndSkillExecResult execResult, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel, int beforeUseProducePoint, PRISM.Produce.IngamePCardModel card);
    private PRISM.Produce.IngamePlayerActionData _getPlayerActionData(PRISM.Produce.IngamePlayerModel playerModel);
    private void _setDataPlayerActionData(PRISM.Produce.IngamePlayerModel playerModel);
    private void _actionReset(PRISM.Produce.IngamePlayerModel playerModel, PRISM.Produce.IngamePlayerModel opponentModel);
    private PRISM.Produce.IngameEffectCauseModel _constructEffectCause(PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngamePCardModel pCard, PRISM.Produce.IngameSkillModel skill);
    private void _applyIncreaseHandCardMaxByUseCardOrSkill(PRISM.Produce.ProduceInGameEffectManager executorEffectManager, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.InGamePlayerExecActionResult executorResult);
    private void _overwriteCost0ToMaxPPHandCard(PRISM.Produce.IngamePlayerModel executor);
    public static bool IsGetAppealZeroEffectTypeId(int effectTypeId);
    private static int _calculateCardPowerUpRate(PRISM.Produce.IngamePCardModel cardModel, PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.ProduceInGameEffectManager executorEffectManager);
    private static bool _isAvoidEffectTypeID(int effectTypeId);
    private static PRISM.Produce.IngameEffectCauseModel <OnIncreaseMaxHandNum>g___constructSelfBuffCause|44_0(PRISM.Produce.ProduceInGameEffectType effectType, <>c__DisplayClass44_0& );
    private PRISM.Produce.IngameEffectCauseModel <GetExecuteActionResult>g___constructCause|47_0(<>c__DisplayClass47_0& );
    private void <_normalDrawCommon>g___drawBySkillType|60_0<TState>(PRISM.Produce.ProduceInGameEffectType effectType, bool isRandomDrawDelete, TState state, System.Func<PRISM.Produce.IngamePCardModel, TState, bool> isMatchSkillType, <>c__DisplayClass60_0& );
    private void <_normalDrawCommon>g___drawBySkillTypePartialMatch|60_1(PRISM.Produce.ProduceInGameEffectType effectType, ProduceParameterType parameterType, bool isRandomDrawDelete, <>c__DisplayClass60_0& );

    public struct UseTypeCounter : System.ValueType
    {
        private int vocalCounter;
        private int danceCounter;
        private int visualCounter;
        public int GetCounter(ProduceParameterType parameterType);
        public void VaryCounter(ProduceParameterType parameterType, int value);
        public void ApplyResult(PRISM.Produce.IInGamePlayerExecActionResult result);
    }

    private class <>O
    {
        public static System.Func<PRISM.Produce.ProduceInGameEffect, float, int> <0>__DefaultNotDividedEffectValueFormula;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngamePlayerModel, int> <1>__DefaultNotDividedEffectValueFormula;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Produce.IngamePCardModel, System.ValueTuple<PRISM.Produce.IngamePlayerModel, PRISM.Produce.IngameActionEffectModel>, bool> <>9__35_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__35_1;
        public static System.Func<PRISM.Produce.IngamePCardModel, bool> <>9__40_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, bool> <>9__40_1;
        public static System.Func<PRISM.Produce.IngamePCardModel, bool> <>9__40_2;
        public static System.Func<PRISM.Produce.IngamePCardModel, bool> <>9__40_3;
        public static System.Func<PRISM.Produce.IngamePCardModel, bool> <>9__40_4;
        public static System.Func<PRISM.Produce.IngamePCardModel, bool> <>9__40_5;
        public static System.Func<PRISM.Produce.IngamePCardModel, bool> <>9__40_6;
        public static System.Func<PRISM.Produce.IngamePCardModel, bool> <>9__40_7;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__42_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__42_1;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, float, bool> <>9__43_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, float, bool> <>9__43_1;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__44_1;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__45_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__45_1;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__45_2;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__45_3;
        public static System.Func<PRISM.Produce.IngameSkillModel, bool> <>9__47_7;
        public static System.Func<PRISM.Produce.IngameSkillModel, PRISM.Produce.IngamePlayerModel, bool> <>9__47_8;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__47_12;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__47_13;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__47_9;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__47_10;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__47_11;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__47_14;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__47_15;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__47_1;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__47_2;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__47_3;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__47_4;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__47_5;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__47_6;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngameSkillActionModel, int> <>9__47_16;
        public static System.Action<PRISM.Produce.IngamePCardModel, System.ValueTuple<PRISM.Produce.CardAndSkillExecResult, PRISM.Produce.IngameActionEffectModel>> <>9__55_4;
        public static System.Action<PRISM.Produce.IngamePCardModel, System.ValueTuple<PRISM.Produce.CardAndSkillExecResult, PRISM.Produce.IngameActionEffectModel>> <>9__55_1;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__55_5;
        public static System.Func<PRISM.Produce.IngamePCardModel, System.ValueTuple<PRISM.Produce.IngamePlayerModel, PRISM.Produce.IngameActionEffectModel>, bool> <>9__55_6;
        public static System.Func<PRISM.Produce.IngamePCardModel, System.ValueTuple<PRISM.Produce.IngamePlayerModel, PRISM.Produce.IngameActionEffectModel>, bool> <>9__55_7;
        public static System.Func<PRISM.Produce.IngamePCardModel, System.ValueTuple<PRISM.Produce.IngamePlayerModel, PRISM.Produce.IngameActionEffectModel>, bool> <>9__55_8;
        public static System.Func<PRISM.Produce.IngamePCardModel, System.ValueTuple<PRISM.Produce.IngamePlayerModel, PRISM.Produce.IngameActionEffectModel>, bool> <>9__55_9;
        public static System.Action<PRISM.Produce.IngamePCardModel, PRISM.Produce.IngameActionEffectModel> <>9__55_10;
        public static System.Action<PRISM.Produce.IngamePCardModel, int> <>9__55_2;
        public static System.Func<PRISM.Produce.IngamePCardModel, System.ValueTuple<PRISM.Produce.IngamePlayerModel, PRISM.Produce.IngameActionEffectModel>, bool> <>9__55_11;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__55_12;
        public static System.Action<PRISM.Produce.IngamePCardModel, PRISM.Produce.IngameActionEffectModel> <>9__55_13;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__55_14;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__55_15;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__55_16;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__55_17;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__55_18;
        public static System.Action<PRISM.Produce.IngamePCardModel, int> <>9__55_19;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__55_20;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__56_3;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngamePlayerModel, bool> <>9__56_4;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngameSkillModel, bool> <>9__56_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngameSkillModel, bool> <>9__56_1;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, bool> <>9__56_2;
        public static System.Func<PRISM.Produce.IngamePCardModel, PRISM.Produce.IngamePlayerModel, bool> <>9__60_4;
        public static System.Func<PRISM.Produce.IngamePCardModel, ProduceParameterType, bool> <>9__60_5;
        public static System.Func<PRISM.Produce.IngamePCardModel, System.Collections.Generic.IReadOnlyList<ProduceParameterType>, bool> <>9__60_2;
        public static System.Func<PRISM.Produce.IngamePCardModel, int, bool> <>9__60_3;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__64_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__64_1;
        public static System.Predicate<PRISM.Produce.ProduceInGameEffect> <>9__64_2;
        public static System.Predicate<PRISM.Produce.ProduceInGameEffect> <>9__64_3;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, bool> <>9__64_4;
        public static System.Action<PRISM.Produce.IngamePCardModel, PRISM.Produce.InGameExecActionResult> <>9__65_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, PRISM.Produce.IngamePCardModel, bool> <>9__76_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngamePlayerModel, bool> <>9__86_0;
        private bool <GetActionEffectCalcResult>b__35_0(PRISM.Produce.IngamePCardModel x, System.ValueTuple<PRISM.Produce.IngamePlayerModel, PRISM.Produce.IngameActionEffectModel> state);
        private bool <GetActionEffectCalcResult>b__35_1(PRISM.Produce.ProduceInGameEffect item);
        private bool <CheckActionCondition>b__40_0(PRISM.Produce.IngamePCardModel x);
        private bool <CheckActionCondition>b__40_1(PRISM.Produce.IngamePCardModel x);
        private bool <CheckActionCondition>b__40_2(PRISM.Produce.IngamePCardModel x);
        private bool <CheckActionCondition>b__40_3(PRISM.Produce.IngamePCardModel x);
        private bool <CheckActionCondition>b__40_4(PRISM.Produce.IngamePCardModel x);
        private bool <CheckActionCondition>b__40_5(PRISM.Produce.IngamePCardModel x);
        private bool <CheckActionCondition>b__40_6(PRISM.Produce.IngamePCardModel x);
        private bool <CheckActionCondition>b__40_7(PRISM.Produce.IngamePCardModel x);
        private bool <CheckActionEffectCondition>b__42_0(PRISM.Produce.ProduceInGameEffect e);
        private bool <CheckActionEffectCondition>b__42_1(PRISM.Produce.ProduceInGameEffect e);
        private bool <AddEffectByElapsedTimeSecond>b__43_0(PRISM.Produce.ProduceInGameEffect e, float state);
        private bool <AddEffectByElapsedTimeSecond>b__43_1(PRISM.Produce.ProduceInGameEffect e, float state);
        private bool <OnIncreaseMaxHandNum>b__44_1(PRISM.Produce.ProduceInGameEffect e);
        private bool <GetExecutePCardResult>b__45_0(PRISM.Produce.ProduceInGameEffect e);
        private bool <GetExecutePCardResult>b__45_1(PRISM.Produce.ProduceInGameEffect e);
        private bool <GetExecutePCardResult>b__45_2(PRISM.Produce.ProduceInGameEffect e);
        private bool <GetExecutePCardResult>b__45_3(PRISM.Produce.ProduceInGameEffect e);
        private bool <GetExecuteActionResult>b__47_7(PRISM.Produce.IngameSkillModel e);
        private bool <GetExecuteActionResult>b__47_8(PRISM.Produce.IngameSkillModel e, PRISM.Produce.IngamePlayerModel state);
        private bool <GetExecuteActionResult>b__47_12(PRISM.Produce.ProduceInGameEffect t);
        private bool <GetExecuteActionResult>b__47_13(PRISM.Produce.ProduceInGameEffect t);
        private bool <GetExecuteActionResult>b__47_9(PRISM.Produce.ProduceInGameEffect e);
        private bool <GetExecuteActionResult>b__47_10(PRISM.Produce.ProduceInGameEffect e);
        private bool <GetExecuteActionResult>b__47_11(PRISM.Produce.ProduceInGameEffect effect);
        private bool <GetExecuteActionResult>b__47_14(PRISM.Produce.ProduceInGameEffect item);
        private bool <GetExecuteActionResult>b__47_15(PRISM.Produce.ProduceInGameEffect item);
        private bool <GetExecuteActionResult>b__47_1(PRISM.Produce.ProduceInGameEffect e);
        private bool <GetExecuteActionResult>b__47_2(PRISM.Produce.ProduceInGameEffect e);
        private bool <GetExecuteActionResult>b__47_3(PRISM.Produce.ProduceInGameEffect e);
        private bool <GetExecuteActionResult>b__47_4(PRISM.Produce.ProduceInGameEffect e);
        private bool <GetExecuteActionResult>b__47_5(PRISM.Produce.ProduceInGameEffect e);
        private bool <GetExecuteActionResult>b__47_6(PRISM.Produce.ProduceInGameEffect e);
        private int <GetExecuteActionResult>b__47_16(PRISM.Produce.ProduceInGameEffect e, PRISM.Produce.IngameSkillActionModel _);
        private void <_executeSkillAndCardAfterImpul>b__55_4(PRISM.Produce.IngamePCardModel card, System.ValueTuple<PRISM.Produce.CardAndSkillExecResult, PRISM.Produce.IngameActionEffectModel> state);
        private void <_executeSkillAndCardAfterImpul>b__55_1(PRISM.Produce.IngamePCardModel card, System.ValueTuple<PRISM.Produce.CardAndSkillExecResult, PRISM.Produce.IngameActionEffectModel> state);
        private bool <_executeSkillAndCardAfterImpul>b__55_5(PRISM.Produce.IngamePCardModel t, int _);
        private bool <_executeSkillAndCardAfterImpul>b__55_6(PRISM.Produce.IngamePCardModel e, System.ValueTuple<PRISM.Produce.IngamePlayerModel, PRISM.Produce.IngameActionEffectModel> state);
        private bool <_executeSkillAndCardAfterImpul>b__55_7(PRISM.Produce.IngamePCardModel e, System.ValueTuple<PRISM.Produce.IngamePlayerModel, PRISM.Produce.IngameActionEffectModel> state);
        private bool <_executeSkillAndCardAfterImpul>b__55_8(PRISM.Produce.IngamePCardModel e, System.ValueTuple<PRISM.Produce.IngamePlayerModel, PRISM.Produce.IngameActionEffectModel> state);
        private bool <_executeSkillAndCardAfterImpul>b__55_9(PRISM.Produce.IngamePCardModel e, System.ValueTuple<PRISM.Produce.IngamePlayerModel, PRISM.Produce.IngameActionEffectModel> state);
        private void <_executeSkillAndCardAfterImpul>b__55_10(PRISM.Produce.IngamePCardModel card, PRISM.Produce.IngameActionEffectModel state);
        private void <_executeSkillAndCardAfterImpul>b__55_2(PRISM.Produce.IngamePCardModel card, int _);
        private bool <_executeSkillAndCardAfterImpul>b__55_11(PRISM.Produce.IngamePCardModel e, System.ValueTuple<PRISM.Produce.IngamePlayerModel, PRISM.Produce.IngameActionEffectModel> state);
        private bool <_executeSkillAndCardAfterImpul>b__55_12(PRISM.Produce.IngamePCardModel t, int _);
        private void <_executeSkillAndCardAfterImpul>b__55_13(PRISM.Produce.IngamePCardModel card, PRISM.Produce.IngameActionEffectModel state);
        private bool <_executeSkillAndCardAfterImpul>b__55_14(PRISM.Produce.IngamePCardModel t, int state);
        private bool <_executeSkillAndCardAfterImpul>b__55_15(PRISM.Produce.IngamePCardModel t, int state);
        private bool <_executeSkillAndCardAfterImpul>b__55_16(PRISM.Produce.IngamePCardModel t, int state);
        private bool <_executeSkillAndCardAfterImpul>b__55_17(PRISM.Produce.IngamePCardModel t, int state);
        private bool <_executeSkillAndCardAfterImpul>b__55_18(PRISM.Produce.IngamePCardModel t, int state);
        private void <_executeSkillAndCardAfterImpul>b__55_19(PRISM.Produce.IngamePCardModel card, int state);
        private bool <_executeSkillAndCardAfterImpul>b__55_20(PRISM.Produce.ProduceInGameEffect item);
        private bool <_executeSkillAndCardAfter>b__56_3(PRISM.Produce.ProduceInGameEffect t);
        private bool <_executeSkillAndCardAfter>b__56_4(PRISM.Produce.ProduceInGameEffect e, PRISM.Produce.IngamePlayerModel state);
        private bool <_executeSkillAndCardAfter>b__56_0(PRISM.Produce.ProduceInGameEffect t, PRISM.Produce.IngameSkillModel state);
        private bool <_executeSkillAndCardAfter>b__56_1(PRISM.Produce.ProduceInGameEffect e, PRISM.Produce.IngameSkillModel state);
        private bool <_executeSkillAndCardAfter>b__56_2(PRISM.Produce.ProduceInGameEffect eff, int state);
        private bool <_normalDrawCommon>b__60_4(PRISM.Produce.IngamePCardModel deckData, PRISM.Produce.IngamePlayerModel state);
        private bool <_normalDrawCommon>b__60_5(PRISM.Produce.IngamePCardModel x, ProduceParameterType type);
        private bool <_normalDrawCommon>b__60_2(PRISM.Produce.IngamePCardModel x, System.Collections.Generic.IReadOnlyList<ProduceParameterType> types);
        private bool <_normalDrawCommon>b__60_3(PRISM.Produce.IngamePCardModel _, int _);
        private bool <_applyCardAndSkillPlayerResult>b__64_0(PRISM.Produce.ProduceInGameEffect e);
        private bool <_applyCardAndSkillPlayerResult>b__64_1(PRISM.Produce.ProduceInGameEffect e);
        private bool <_applyCardAndSkillPlayerResult>b__64_2(PRISM.Produce.ProduceInGameEffect t);
        private bool <_applyCardAndSkillPlayerResult>b__64_3(PRISM.Produce.ProduceInGameEffect t);
        private bool <_applyCardAndSkillPlayerResult>b__64_4(PRISM.Produce.ProduceInGameEffect e);
        private void <_calcDamage>b__65_0(PRISM.Produce.IngamePCardModel _, PRISM.Produce.InGameExecActionResult state);
        private bool <_removeAtHand>b__76_0(PRISM.Produce.IngamePCardModel element, PRISM.Produce.IngamePCardModel state);
        private bool <_calculateCardPowerUpRate>b__86_0(PRISM.Produce.ProduceInGameEffect t, PRISM.Produce.IngamePlayerModel state);
    }

    private class <>c__61`1<TState>
    {
        public static <>c__61<TState> <>9;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.ProduceInGameEffectType, bool> <>9__61_0;
        private bool <_normalDrawByIsMatch>b__61_0(PRISM.Produce.ProduceInGameEffect t, PRISM.Produce.ProduceInGameEffectType state);
    }

    private struct <>c__DisplayClass44_0 : System.ValueType
    {
        public PRISM.Produce.IngamePlayerModel executor;
    }

    private struct <>c__DisplayClass47_0 : System.ValueType
    {
        public PRISM.Produce.IngameSkillActionModel <>4__this;
        public PRISM.Produce.IngamePlayerModel executorModel;
        public PRISM.Produce.IngamePCardModel cardModel;
        public PRISM.Produce.IngameSkillModel skillModel;
    }

    private class <>c__DisplayClass55_0
    {
        public PRISM.Produce.IngameSkillActionModel <>4__this;
        public PRISM.Produce.IngamePlayerModel executorModel;
        public PRISM.Produce.IngamePCardModel produceCardModel;
        public PRISM.Produce.IngameSkillModel skillModel;
        public System.Action<PRISM.Produce.ProduceInGameEffect, System.ValueTuple<PRISM.Produce.ProduceInGameEffectManager, PRISM.Produce.IngameActionEffectModel, PRISM.Produce.ProduceInGameEffect>> <>9__3;
        private PRISM.Produce.IngameEffectCauseModel <_executeSkillAndCardAfterImpul>g___constructCause|0();
        private void <_executeSkillAndCardAfterImpul>b__3(PRISM.Produce.ProduceInGameEffect removed, System.ValueTuple<PRISM.Produce.ProduceInGameEffectManager, PRISM.Produce.IngameActionEffectModel, PRISM.Produce.ProduceInGameEffect> state);
    }

    private class <>c__DisplayClass55_1
    {
        public int highCost;
        private bool <_executeSkillAndCardAfterImpul>b__21(PRISM.Produce.IngameSkillModel e, PRISM.Produce.IngamePlayerModel state);
    }

    private struct <>c__DisplayClass60_0 : System.ValueType
    {
        public int diffCardCount;
        public PRISM.Produce.IngameSkillActionModel <>4__this;
        public PRISM.Produce.IngamePlayerModel executorModel;
        public System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> tempCards;
    }

    private class <>c__DisplayClass75_0`1<TState>
    {
        public System.Action<PRISM.Produce.IngamePCardModel, TState> onAddSuccess;
        private void <_randomDraw>b__0(PRISM.Produce.IngamePCardModel card, System.ValueTuple<TState, PRISM.Produce.IInGamePlayerExecActionResult> stateResultPair);
    }

    private class <>c__DisplayClass86_0
    {
        public PRISM.Produce.IngamePlayerModel executorModel;
        private bool <_calculateCardPowerUpRate>b__1(PRISM.Produce.ProduceInGameEffect t, PRISM.Produce.IngamePlayerModel state);
    }
}

// Namespace: PRISM.Produce
public class IngameTallyModel
{
    private System.Collections.Generic.Dictionary<ProduceParameterType, int> getAttributeAppealPoints;
    private System.Collections.Generic.List<System.ValueTuple<int, int>> pIdolIDAndIdolSkillIDPairs;
    private int totalGetAppealPoint;
    private int clearTime;
    private System.Collections.Generic.List<string> produceCardMstIdList;
    public int UseIdolSkillCount { get; set; }
    public int UseProduceCardCount { get; set; }
    public void Reset();
    public void AddAttributesAppealPoint(System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypes, int offset);
    public void AddAttributeAppealPoint(ProduceParameterType appealTypes, int offset);
    public int GetAttributeAppealPoint(ProduceParameterType appealType);
    public void SetClearTime(int time);
    public void AddSkillUsePIdolIDAndSkillID(int skillID, int pIdolID);
    public void AddProduceCardMstIdList(string cardMstId);
    public PRISM.Module.Networking.IInGameResultStatus CreateInGameResultStatus(ResultStatus resultStatus);
    private PRISM.Module.Networking.IInGameAppealPointStatus _createAppealPointStatus();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<System.ValueTuple<int, int>, PRISM.Module.Networking.IInGameIdolSkillStatus> <>9__16_0;
        private PRISM.Module.Networking.IInGameIdolSkillStatus <CreateInGameResultStatus>b__16_0(System.ValueTuple<int, int> e);
    }
}

// Namespace: PRISM.Produce
public class IngameTypeCounterModel
{
    private int[] typeCounters;
    private UniRx.Subject<System.ValueTuple<ProduceParameterType, int>> onUpdateCounterSubject;
    public System.IObservable<System.ValueTuple<ProduceParameterType, int>> OnUpdateCounter { get; set; }
    public int GetCounter(ProduceParameterType parameterType);
    public ProduceParameterType GetHighVoDaViType();
    public ProduceParameterType GetLowVoDaViType();
    public void VariationCounter(ProduceParameterType parameterType, int variationValue);
    public void MultiplyCounter(ProduceParameterType parameterType, int multiplyValue);
    public void Reset();
    public void Copy(PRISM.Produce.IngameTypeCounterModel typeCounterModel);
    public bool IsEnable(int unitID);
    private void _setCounter(ProduceParameterType parameterType, int count);
    public void Terminate();
    public static int TryVariationCounter(int baseValue, int variationValue);
    public static int TryAddCounter(int baseValue, int additionalValue);
    public static int TryMultiplyCounter(int baseValue, int multiplyValue);
    private static int _typeToIndex(ProduceParameterType type);
    private static int _clampCounterValue(int value);
    private static int _addCounterFormula(int baseValue, int additionalValue);
    private static int _multiplyCounterFormula(int baseValue, int multiplyValue);
}

// Namespace: PRISM.Produce
public class IngameUpdateMentalArg : System.IDisposable
{
    private PRISM.Produce.IngamePlayerModel <Executor>k__BackingField;
    private int <SelfRecovery>k__BackingField;
    private int <SelfDamage>k__BackingField;
    private int <ReceivedRecovery>k__BackingField;
    private int <ReceivedDamage>k__BackingField;
    private int <SafeSelfDamage>k__BackingField;
    private bool <IsForce>k__BackingField;
    private int <FixMental>k__BackingField;
    public PRISM.Produce.IngamePlayerModel Executor { get; set; }
    public int SelfRecovery { get; set; }
    public int SelfDamage { get; set; }
    public int ReceivedRecovery { get; set; }
    public int ReceivedDamage { get; set; }
    public int SafeSelfDamage { get; set; }
    public bool IsForce { get; set; }
    public int FixMental { get; set; }
    public static PRISM.Produce.IngameUpdateMentalArg Instantiate(PRISM.Produce.IngamePlayerModel executor, int selfRecovery, int selfDamage, int receivedRecovery, int receivedDamage, int safeSelfDamage, bool isForce, int fixMental);
    public void Dispose();
    public static PRISM.Produce.IngameUpdateMentalArg Instantiate();
}

// Namespace: PRISM.Produce
public class IngameUsedEffectModel
{
    private System.Collections.Generic.List<PRISM.Produce.ProduceInGameEffectType> usedEffectList;
    public void Reset();
    public bool IsUsedEffect(PRISM.Produce.ProduceInGameEffectType effectType);
    public void AddUsedEffect(PRISM.Produce.ProduceInGameEffectType effectType);
}

// Namespace: PRISM.Produce
public class IngameActionEffectModel
{
    private static string produceCardDescription;
    private string baseDescription;
    private int[] effectValues;
    public int EffectID;
    public int EffectTypeID;
    public int ConditionTypeID;
    public int ConditionValue;
    public int SubConditionTypeID;
    public int SubConditionValue;
    public System.Collections.Generic.IReadOnlyList<int> EffectDisplayIDs;
    public System.ValueTuple<int, System.Collections.Generic.IReadOnlyList<int>> IdAndValues;
    public int IconID;
    public PRISM.Module.Networking.ISkillBufferDisplayStatus SkillBufferDisplay;
    public int ActivationTimingTypeId;
    public bool IsHideConditionEffect;
    public PRISM.Module.Networking.ISkillBufferDisplayStatus GrantSkillBufferDisplay;
    public System.Collections.Generic.IReadOnlyList<ProduceParameterType> AppealTypeList;
    public bool IsUsePinchCondition { get; set; }
    public bool IsUseTypeCounterCondition { get; set; }
    public bool IsUseTypeArrangeCondition { get; set; }
    public int GetNotDividedEffectValue(int index);
    public int GetDividedEffectValue(int index);
    public int MultiplyEffectValue(int baseValue, int index);
    public static int MultiplyBaseValueAndEffectValue(int baseValue, int effectValue);
    public string GetDescriptionWithValue(int value);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<int, bool> <>9__23_0;
        private bool <.ctor>b__23_0(int e);
    }
}

// Namespace: PRISM.Produce
public class IngamePCardContentModel
{
    private System.Collections.Generic.IReadOnlyList<ProduceParameterType> originalAppealTypes;
    private System.Collections.Generic.List<ProduceParameterType> appealTypes;
    private System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameActionEffectModel> <DisplaySortCardEffects>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameActionEffectModel> <CardEffects>k__BackingField;
    private int <BaseCost>k__BackingField;
    private DoubleCardUseType <Phase>k__BackingField;
    private int <Rank>k__BackingField;
    private int <ConditionTypeId>k__BackingField;
    private int <ConditionValue>k__BackingField;
    private int <GroupId>k__BackingField;
    public System.Collections.Generic.IReadOnlyList<ProduceParameterType> AppealTypes { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameActionEffectModel> DisplaySortCardEffects { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameActionEffectModel> CardEffects { get; set; }
    public int BaseCost { get; set; }
    public DoubleCardUseType Phase { get; set; }
    public int Rank { get; set; }
    public int ConditionTypeId { get; set; }
    public int ConditionValue { get; set; }
    public int GroupId { get; set; }
    public void Setup(PRISM.Module.Networking.IProduceCardStatus card, DoubleCardUseType phase, int rank);
    public void Copy(PRISM.Produce.IngamePCardContentModel model);
    public void AddAppealType(ProduceParameterType appealType);
    public void CopyAppealType(System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypes);
    public void RemoveAppealType(ProduceParameterType appealType);
    public void ResetAppealType();
    public bool IsMatchParameterTypes(System.Collections.Generic.IReadOnlyList<ProduceParameterType> parameterTypes);
    public bool IsMatchParameterTypes(ProduceParameterType parameterType);
    public bool IsAddParameterTypes();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IProduceCardContentGroupStatus, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceCardContentStatus>> <>9__36_5;
        public static System.Func<PRISM.Produce.IngameActionEffectModel, bool> <>9__36_0;
        public static System.Func<PRISM.Produce.IngameActionEffectModel, bool> <>9__36_1;
        public static System.Func<PRISM.Produce.IngameActionEffectModel, int> <>9__36_2;
        public static System.Func<ProduceParameterType, bool> <>9__36_3;
        public static System.Func<ProduceParameterType, bool> <>9__36_4;
        private System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceCardContentStatus> <Setup>b__36_5(PRISM.Module.Networking.IProduceCardContentGroupStatus e);
        private bool <Setup>b__36_0(PRISM.Produce.IngameActionEffectModel e);
        private bool <Setup>b__36_1(PRISM.Produce.IngameActionEffectModel e);
        private int <Setup>b__36_2(PRISM.Produce.IngameActionEffectModel e);
        private bool <Setup>b__36_3(ProduceParameterType e);
        private bool <Setup>b__36_4(ProduceParameterType e);
    }

    private class <>c__DisplayClass36_0
    {
        public int rank;
        public System.Func<PRISM.Module.Networking.IProduceCardContentStatus, bool> <>9__7;
        private PRISM.Module.Networking.IProduceCardContentStatus <Setup>b__6(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceCardContentStatus> e);
        private bool <Setup>b__7(PRISM.Module.Networking.IProduceCardContentStatus content);
        private bool <Setup>b__9(PRISM.Module.Networking.IProduceCardContentStatus x);
    }

    private class <>c__DisplayClass36_1
    {
        public PRISM.Module.Networking.IProduceCardContentStatus[] cardContents;
        public int i;
        public System.Func<PRISM.Module.Networking.IProduceActionEffectStatus, PRISM.Produce.IngameActionEffectModel> <>9__8;
        private PRISM.Produce.IngameActionEffectModel <Setup>b__8(PRISM.Module.Networking.IProduceActionEffectStatus e);
    }

    private class <>c__DisplayClass36_2
    {
        public PRISM.Module.Networking.IProduceCardContentStatus currentData;
        private PRISM.Produce.IngameActionEffectModel <Setup>b__10(PRISM.Module.Networking.IProduceActionEffectStatus e);
    }
}

// Namespace: PRISM.Produce
public class IngamePCardModel
{
    public static DoubleCardUseType DefaultPhase;
    private PRISM.Module.Networking.IProduceCardStatus produceCard;
    private int uniqueId;
    private System.Collections.Generic.List<PRISM.Produce.IngamePCardContentModel> ingamePCardCardContentModels;
    private PRISM.Produce.IngamePCardContentModel currentContent;
    private System.Collections.Generic.IReadOnlyList<string> phaseCharaNames;
    private bool isCostOverWrite;
    private int overWriteCost;
    private int downCost;
    private bool isRankOverWrite;
    private int overWriteRank;
    private DoubleCardUseType phase;
    private int handCardPhaseChangeCount;
    private int handCardExcludedCount;
    private int useCount;
    public int BaseRank;
    private bool <IsPravCardAvailable>k__BackingField;
    private BuffStatus <PravCardBuffDebuffState>k__BackingField;
    public PRISM.Module.Networking.IProduceCardStatus ProduceCard { get; set; }
    public int UniqueId { get; set; }
    public int ProduceCardID { get; set; }
    public int ContentGroupId { get; set; }
    public string StrID { get; set; }
    public int UnitID { get; set; }
    public DoubleCardUseType Phase { get; set; }
    public int HandCardPhaseChangeCount { get; set; }
    public int HandCardExcludedCount { get; set; }
    public int Rank { get; set; }
    public bool IsOverWriteRank { get; set; }
    public bool IsCostDown { get; set; }
    public int BaseCost { get; set; }
    public int Cost { get; set; }
    public int UseCount { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameActionEffectModel> CardEffects { get; set; }
    public ProduceParameterType AppealTypeFirst { get; set; }
    public System.Collections.Generic.IReadOnlyList<ProduceParameterType> AppealTypes { get; set; }
    public bool IsDoubleCard { get; set; }
    public bool IsDoublePhaseMode { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngamePCardContentModel> InGamePCardCardContentModels { get; set; }
    public int ConditionTypeId { get; set; }
    public int ConditionValue { get; set; }
    public bool IsPravCardAvailable { get; set; }
    public BuffStatus PravCardBuffDebuffState { get; set; }
    public void Reset();
    public void CardUsed();
    public void ResetData();
    public void Copy(PRISM.Produce.IngamePCardModel model);
    public PRISM.Produce.IngamePCardModel ReproductUsedCardModel();
    public void ChangePhase(DoubleCardUseType doubleCardUseType);
    public void ChangePhaseHandCard(int num);
    private void _resetChangePhaseHandCard();
    public void OverWriteCost(int overWriteCost);
    public void DecreaseCost(int value);
    private void _resetOverWriteCost();
    private void _resetDecreaseCost();
    public void AddRank(int rankNum);
    public void ResetOverWriteRank();
    public void OnExcludedOtherCard();
    private void _resetHandCardExcludedCount();
    public void AddAppealType(ProduceParameterType appealType);
    public void RemoveAppealType(ProduceParameterType appealType);
    private void _resetAppealType();
    public bool IsMatchParameterTypes(System.Collections.Generic.IReadOnlyList<ProduceParameterType> parameterTypes);
    public bool IsMatchParameterTypes(ProduceParameterType parameterType);
    public bool IsAddParameterTypes();
    public string GetContentDescriptionWithValue(PRISM.Produce.IngamePlayerModel usePlayer, DoubleCardUseType cardPhase, int cardRank, System.Func<PRISM.Produce.ShowProduceCardDetailParam, PRISM.Produce.CardAndSkillPredictionModel> getPredictionFunc);
    private PRISM.Produce.IngamePCardContentModel _createContentModel(DoubleCardUseType phase, int rank);
    private void _updateRankAndPhase();
    private bool <.ctor>b__71_0(PRISM.Definitions.MstCharacterInfo e);

    public enum BuffStatus : System.Enum
    {
        public int value__;
        public static BuffStatus Buff;
        public static BuffStatus Normal;
        public static BuffStatus Debuff;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Definitions.MstCharacterInfo, string> <>9__71_1;
        public static System.Func<PRISM.Produce.IngamePCardContentModel, System.ValueTuple<int, DoubleCardUseType>, bool> <>9__96_0;
        public static System.Func<PRISM.Produce.IngamePCardContentModel, int, bool> <>9__96_1;
        public static System.Func<PRISM.Produce.IngamePCardContentModel, System.ValueTuple<int, DoubleCardUseType>, bool> <>9__96_2;
        private string <.ctor>b__71_1(PRISM.Definitions.MstCharacterInfo e);
        private bool <_updateRankAndPhase>b__96_0(PRISM.Produce.IngamePCardContentModel currentContent, System.ValueTuple<int, DoubleCardUseType> state);
        private bool <_updateRankAndPhase>b__96_1(PRISM.Produce.IngamePCardContentModel currentContent, int r);
        private bool <_updateRankAndPhase>b__96_2(PRISM.Produce.IngamePCardContentModel currentContent, System.ValueTuple<int, DoubleCardUseType> state);
    }
}

// Namespace: PRISM.Produce
public class IngameSkillListModel
{
    private UniRx.Subject<System.ValueTuple<int, int, int>> onUpdateUsableCountSubject;
    private UniRx.Subject<System.ValueTuple<int, int>> onOverWriteCost;
    private UniRx.CompositeDisposable skillSubscribers;
    private UniRx.Subject<System.ValueTuple<int, PRISM.Produce.IngameSkillModel>> onPreUseSkill;
    private int <TotalSkillUseCount>k__BackingField;
    private System.Collections.Generic.List<PRISM.Produce.IngameSkillModel> skillModelList;
    public int TotalSkillUseCount { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameSkillModel> SkillModels { get; set; }
    public System.IObservable<System.ValueTuple<int, int, int>> OnUpdateUsableCount { get; set; }
    public System.IObservable<System.ValueTuple<int, PRISM.Produce.IngameSkillModel>> OnPreUseSkill { get; set; }
    public System.IObservable<System.ValueTuple<int, int>> OnOverWriteCost { get; set; }
    public void Initialize(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameSkillModel> skillModels);
    public void Reset();
    public void Copy(PRISM.Produce.IngameSkillListModel skillListModel);
    public void ResetUsableCount(int index);
    public void UseSkill(int index);
    public bool IsExistConditionMatchSkill(System.Func<PRISM.Produce.IngameSkillModel, bool> isMatch);
    public bool IsExistConditionMatchSkillWithState<TState>(TState state, System.Func<PRISM.Produce.IngameSkillModel, TState, bool> isMatch);
    public PRISM.Produce.IngameUnitMemberModel GetUnitMember(int memberId);
    public PRISM.Produce.IngameSkillModel GetSkillBySkillId(int skillId);
    public int GetIndex(int memberId);
    public void Terminate();

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<System.ValueTuple<int, int>, System.ValueTuple<int, UniRx.Subject<System.ValueTuple<int, int, int>>>> <>9__18_0;
        public static System.Action<int, System.ValueTuple<int, UniRx.Subject<System.ValueTuple<int, int>>>> <>9__18_1;
        public static System.Func<PRISM.Produce.IngameSkillModel, System.Func<PRISM.Produce.IngameSkillModel, bool>, bool> <>9__23_0;
        public static System.Func<PRISM.Produce.IngameSkillModel, int, bool> <>9__25_0;
        public static System.Func<PRISM.Produce.IngameSkillModel, int, bool> <>9__26_0;
        public static System.Func<PRISM.Produce.IngameSkillModel, int, bool> <>9__27_0;
        private void <Initialize>b__18_0(System.ValueTuple<int, int> tuple, System.ValueTuple<int, UniRx.Subject<System.ValueTuple<int, int, int>>> state);
        private void <Initialize>b__18_1(int cost, System.ValueTuple<int, UniRx.Subject<System.ValueTuple<int, int>>> state);
        private bool <IsExistConditionMatchSkill>b__23_0(PRISM.Produce.IngameSkillModel model, System.Func<PRISM.Produce.IngameSkillModel, bool> predicate);
        private bool <GetUnitMember>b__25_0(PRISM.Produce.IngameSkillModel model, int id);
        private bool <GetSkillBySkillId>b__26_0(PRISM.Produce.IngameSkillModel model, int id);
        private bool <GetIndex>b__27_0(PRISM.Produce.IngameSkillModel model, int id);
    }

    private class <>c__24`1<TState>
    {
        public static <>c__24<TState> <>9;
        public static System.Func<PRISM.Produce.IngameSkillModel, System.ValueTuple<TState, System.Func<PRISM.Produce.IngameSkillModel, TState, bool>>, bool> <>9__24_0;
        private bool <IsExistConditionMatchSkillWithState>b__24_0(PRISM.Produce.IngameSkillModel model, System.ValueTuple<TState, System.Func<PRISM.Produce.IngameSkillModel, TState, bool>> tuple);
    }
}

// Namespace: PRISM.Produce
public class IngameSkillModel
{
    private int usableCount;
    private bool isOverWriteCost;
    private int overWriteCost;
    private UniRx.Subject<System.ValueTuple<int, int>> onUpdateUsableCountSubject;
    private UniRx.Subject<int> onOverWriteCost;
    private System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameActionEffectModel> displaySortEffects;
    private int <SkillID>k__BackingField;
    private int <Level>k__BackingField;
    private PRISM.Module.Networking.IInGameSkillStatus <InGameSkillStatus>k__BackingField;
    private int <IconId>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<ProduceParameterType> <AppealTypes>k__BackingField;
    private int <BaseCost>k__BackingField;
    private int <MaxUsableCount>k__BackingField;
    private int <ConditionTypeId>k__BackingField;
    private int <ConditionValue>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameActionEffectModel> <SkillEffectList>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<System.ValueTuple<int, System.Collections.Generic.IReadOnlyList<int>>> <IdAndValuesList>k__BackingField;
    private PRISM.Produce.IngameUnitMemberModel <Owner>k__BackingField;
    private object <SkillStatus>k__BackingField;
    public int SkillID { get; set; }
    public int Level { get; set; }
    public PRISM.Module.Networking.IInGameSkillStatus InGameSkillStatus { get; set; }
    public int IconId { get; set; }
    public System.Collections.Generic.IReadOnlyList<ProduceParameterType> AppealTypes { get; set; }
    public int BaseCost { get; set; }
    public int Cost { get; set; }
    public bool IsCostDown { get; set; }
    public int MaxUsableCount { get; set; }
    public int ConditionTypeId { get; set; }
    public int ConditionValue { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameActionEffectModel> SkillEffectList { get; set; }
    public System.Collections.Generic.IReadOnlyList<System.ValueTuple<int, System.Collections.Generic.IReadOnlyList<int>>> IdAndValuesList { get; set; }
    public PRISM.Produce.IngameUnitMemberModel Owner { get; set; }
    public object SkillStatus { get; set; }
    public int UsableCount { get; set; }
    public ProduceParameterType AppealTypeFirst { get; set; }
    public System.IObservable<System.ValueTuple<int, int>> OnUpdateUsableCount { get; set; }
    public System.IObservable<int> OnOverWriteCost { get; set; }
    public bool IsUsable { get; set; }
    public int UseCount { get; set; }
    public void UseSkill();
    public void OverWriteCost(int cost);
    public void Reset();
    public void ResetOverWriteCost();
    public void ResetUsableCount();
    public void Copy(PRISM.Produce.IngameSkillModel model, PRISM.Produce.IngameUnitMemberModel memberModel);
    public string GetDescriptionWithValue(System.Func<PRISM.Produce.IngameSkillModel, PRISM.Produce.IngameActionEffectModel, PRISM.Produce.CardAndSkillPredictionModel> getPredictionFunc, System.ValueTuple<int, int> condition);
    public void Terminate();
    public bool IsMatchParameterTypes(System.Collections.Generic.IReadOnlyList<ProduceParameterType> parameterTypes);
    private void _setup(PRISM.Module.Networking.IInGameSkillStatus inGameSkill, PRISM.Produce.IngameUnitMemberModel owner);
    private PRISM.Produce.IngameActionEffectModel <_setup>b__89_2(PRISM.Module.Networking.IProduceActionEffectStatus x);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<ProduceParameterType, bool> <>9__89_0;
        public static System.Func<ProduceParameterType, bool> <>9__89_1;
        public static System.Func<PRISM.Produce.IngameActionEffectModel, bool> <>9__89_3;
        public static System.Func<PRISM.Produce.IngameActionEffectModel, bool> <>9__89_4;
        public static System.Func<PRISM.Produce.IngameActionEffectModel, int> <>9__89_5;
        public static System.Func<PRISM.Produce.IngameActionEffectModel, System.ValueTuple<int, System.Collections.Generic.IReadOnlyList<int>>> <>9__89_6;
        private bool <_setup>b__89_0(ProduceParameterType e);
        private bool <_setup>b__89_1(ProduceParameterType e);
        private bool <_setup>b__89_3(PRISM.Produce.IngameActionEffectModel e);
        private bool <_setup>b__89_4(PRISM.Produce.IngameActionEffectModel e);
        private int <_setup>b__89_5(PRISM.Produce.IngameActionEffectModel e);
        private System.ValueTuple<int, System.Collections.Generic.IReadOnlyList<int>> <_setup>b__89_6(PRISM.Produce.IngameActionEffectModel x);
    }
}

// Namespace: PRISM.Produce
public class IngameSupportSkillModel
{
    private System.Collections.Generic.IReadOnlyList<int> effectValues;
    public int SkillID;
    public SupportSkillType SkillType;
    public PRISM.Module.Networking.ISkillBufferDisplayStatus SkillBufferDisplay;
    public PRISM.Module.Networking.ISkillBufferDisplayStatus GrantSkillBufferDisplay;
    public int GetNotDividedEffectValue(int index);
    public int GetDividedEffectValue(int index);

    public enum SupportSkillType : System.Enum
    {
        public int value__;
        public static SupportSkillType LessonPPBonus;
        public static SupportSkillType SPLessonPPBonus;
        public static SupportSkillType AuditionPPBonus;
        public static SupportSkillType MentalGuardBonus;
        public static SupportSkillType MentalVoApeealRate;
        public static SupportSkillType MentalDaApeealRate;
        public static SupportSkillType MentalViApeealRate;
        public static SupportSkillType AvoidVoAppealRate;
        public static SupportSkillType AvoidDaAppealRate;
        public static SupportSkillType AvoidViAppealRate;
        public static SupportSkillType GuardFirstMentalBreakOnce;
        public static SupportSkillType LimitPPBonus;
        public static SupportSkillType AppealRateBonus;
        public static SupportSkillType VoAppealRateBonus;
        public static SupportSkillType DaAppealRateBonus;
        public static SupportSkillType ViAppealRateBonus;
        public static SupportSkillType VoUpDaViDown;
        public static SupportSkillType DaUpVoViDown;
        public static SupportSkillType ViUpVoDaDown;
        public static SupportSkillType AvoidAppealRate;
        public static SupportSkillType IdolSkillVoApeealUp;
        public static SupportSkillType IdolSkillDaApeealUp;
        public static SupportSkillType IdolSkillViApeealUp;
        public static SupportSkillType MentalRecoverUp;
        public static SupportSkillType PPRecoverUp;
        public static SupportSkillType MinusMentalBreakTime;
        public static SupportSkillType MentalRecoverUpWhenRecoverMentalBreak;
        public static SupportSkillType ApeealRateOnceWhenRecoverMentalBreak;
        public static SupportSkillType GetPPWhenRecoverMentalBreak;
        public static SupportSkillType StartDashAppealRate;
        public static SupportSkillType StartDashAppealVoRate;
        public static SupportSkillType StartDashAppealDaRate;
        public static SupportSkillType StartDashAppealViRate;
        public static SupportSkillType GetAvoidRate;
        public static SupportSkillType AppealRateWhenRecoverMental;
        public static SupportSkillType AppealRateVoWhenRecoverMental;
        public static SupportSkillType AppealRateDaWhenRecoverMental;
        public static SupportSkillType AppealRateViWhenRecoverMental;
        public static SupportSkillType AppeelBonusOnceWhenSearch;
        public static SupportSkillType VoAppeelBonusOnceWhenSearch;
        public static SupportSkillType DaAppeelBonusOnceWhenSearch;
        public static SupportSkillType ViAppeelBonusOnceWhenSearch;
        public static SupportSkillType AppeelBonusOnceWhenMaxHandIncrease;
        public static SupportSkillType VoAppeelBonusOnceWhenMaxHandIncrease;
        public static SupportSkillType DaAppeelBonusOnceWhenMaxHandIncrease;
        public static SupportSkillType ViAppeelBonusOnceWhenMaxHandIncrease;
        public static SupportSkillType PPSpeedUpWhenMePercent;
        public static SupportSkillType AppealBonusWhenMaxHandNum;
        public static SupportSkillType MentalGuardRate;
        public static SupportSkillType AppealBonusWhenOpponentMentalBreak;
        public static SupportSkillType AppealBonusWhenCostDown;
        public static SupportSkillType MentalDamageUpFromOpponent;
        public static SupportSkillType AddMaxHandNumWhenRecoverMentalBreak;
        public static SupportSkillType StartDashMaxHandCount;
        public static SupportSkillType StartDashRandomCostDown;
        public static SupportSkillType RemoveCardWhenAfterTime;
        public static SupportSkillType ForcePinchWhenAfterTime;
        public static SupportSkillType LastRunPinch;
        public static SupportSkillType RecoverMentalWhenUseCostDownCard;
        public static SupportSkillType GetPPWhenRemoveCard;
        public static SupportSkillType DrawWhenRemoveCard;
        public static SupportSkillType RecoverMentalWhenSearch;
        public static SupportSkillType MentalGuardWhenSearch;
        public static SupportSkillType GetPPWhenMaxHandIncrease;
        public static SupportSkillType MaxHandNumUntilDamageCount;
        public static SupportSkillType MeDagameZeroUntilDamageCount;
        public static SupportSkillType OpponentPPSpeedRate;
        public static SupportSkillType OverHealToMentalGuard;
        public static SupportSkillType StartDashCostDownMaxCostCard;
        public static SupportSkillType RecoverMentalPer10Sec;
        public static SupportSkillType GetAppealWhenUseCardCount;
        public static SupportSkillType GetAppealBonusWhenUseCardCount;
        public static SupportSkillType GetPPWhenMentalDamage;
        public static SupportSkillType AppealBonusUntilCardUseCount;
        public static SupportSkillType AppealBonusVoUntilCardUseCount;
        public static SupportSkillType AppealBonusDaUntilCardUseCount;
        public static SupportSkillType AppealBonusViUntilCardUseCount;
        public static SupportSkillType IdolSkillCostDownUntilIdolSkillUseCount;
        public static SupportSkillType GetPPWhenAvoid;
    }
}

// Namespace: PRISM.Produce
public class TimingDictionaryOfIntervalSkill
{
    private System.Collections.Generic.Dictionary<int, float> timingDictionary;
    public bool UpdateAndCheckKeySecTiming(int keySec, float deltaTime);
    public void Reset();
    public void Copy(PRISM.Produce.TimingDictionaryOfIntervalSkill value);
}

// Namespace: PRISM.Produce
public class IngameUnitMemberModel
{
    private PRISM.Produce.IngamePlayerModel playerModel;
    private PRISM.Produce.ProduceInGameEffectManager effectManager;
    public PRISM.Produce.IngamePlayerStatusModel CurrentStatus;
    private int <UnitID>k__BackingField;
    private int <IconID>k__BackingField;
    private int <MemberID>k__BackingField;
    public PRISM.Produce.IngamePlayerStatusModel BaseStatus;
    private int <CutInVoiceCueSheetID>k__BackingField;
    private int <CutInVoiceCueID>k__BackingField;
    public int UnitID { get; set; }
    public int IconID { get; set; }
    public int MemberID { get; set; }
    public int CutInVoiceCueSheetID { get; set; }
    public int CutInVoiceCueID { get; set; }
    public void Copy(PRISM.Produce.IngameUnitMemberModel model);
    public void Initialize(PRISM.Produce.IngamePlayerModel playerModel);
    public void ChangePlayerModel(PRISM.Produce.IngamePlayerModel playerModel);
    public void ChangeEffectManager(PRISM.Produce.ProduceInGameEffectManager effectManager);
    public void UpdateStatusOnly();
    public void CheckStatusUpdate(PRISM.Produce.ProduceInGameEffect effect, bool& isNeedUpdate);
    private void _updateStatus();
    private System.ValueTuple<int, int, int> _addOtherParameterHalf(int vocal, int dance, int visual);
    private static int _multiplyStatusEffectValueFormula(PRISM.Produce.ProduceInGameEffect effect, System.ValueTuple<int, bool, bool, bool, int> state);
    private static int _addStatusEffectValueFormula(PRISM.Produce.ProduceInGameEffect effect, int memberId);

    private class <>O
    {
        public static System.Func<PRISM.Produce.ProduceInGameEffect, System.ValueTuple<int, bool, bool, bool, int>, int> <0>___multiplyStatusEffectValueFormula;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, int> <1>___addStatusEffectValueFormula;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, bool> <>9__36_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, System.ValueTuple<int, bool, bool, bool, int>, bool> <>9__36_1;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, bool> <>9__36_2;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, System.ValueTuple<int, bool, bool, bool, int>, bool> <>9__36_3;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, bool> <>9__36_4;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, System.ValueTuple<int, bool, bool, bool, int>, bool> <>9__36_5;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, bool> <>9__36_6;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, bool> <>9__37_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, System.ValueTuple<int, int, int>, System.ValueTuple<int, int, int>> <>9__37_1;
        private bool <_updateStatus>b__36_0(PRISM.Produce.ProduceInGameEffect t, int memberID);
        private bool <_updateStatus>b__36_1(PRISM.Produce.ProduceInGameEffect e, System.ValueTuple<int, bool, bool, bool, int> state);
        private bool <_updateStatus>b__36_2(PRISM.Produce.ProduceInGameEffect e, int state);
        private bool <_updateStatus>b__36_3(PRISM.Produce.ProduceInGameEffect e, System.ValueTuple<int, bool, bool, bool, int> state);
        private bool <_updateStatus>b__36_4(PRISM.Produce.ProduceInGameEffect e, int state);
        private bool <_updateStatus>b__36_5(PRISM.Produce.ProduceInGameEffect e, System.ValueTuple<int, bool, bool, bool, int> state);
        private bool <_updateStatus>b__36_6(PRISM.Produce.ProduceInGameEffect e, int state);
        private bool <_addOtherParameterHalf>b__37_0(PRISM.Produce.ProduceInGameEffect effect, int state);
        private System.ValueTuple<int, int, int> <_addOtherParameterHalf>b__37_1(PRISM.Produce.ProduceInGameEffect effect, int state, System.ValueTuple<int, int, int> input);
    }
}

// Namespace: PRISM.Produce
public class IngameUnitModel
{
    private PRISM.Produce.IngamePlayerStatusModel currentStatus;
    private PRISM.Produce.IngamePlayerStatusModel baseStatus;
    private PRISM.Produce.ProduceInGameEffectManager effectManager;
    private bool isNeedCorrect;
    private UniRx.CompositeDisposable disposable;
    private System.Collections.Generic.List<PRISM.Produce.IngameUnitMemberModel> unitMemberModels;
    private int <UnitID>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceCardStatus> <DeckCards>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameSkillModel> <SkillModels>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameSupportSkillModel> <SupportSkills>k__BackingField;
    public int UnitID { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameUnitMemberModel> UnitMemberModels { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceCardStatus> DeckCards { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameSkillModel> SkillModels { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameSupportSkillModel> SupportSkills { get; set; }
    public PRISM.Produce.IngamePlayerStatusModel BaseStatus { get; set; }
    public PRISM.Produce.IngamePlayerStatusModel CurrentStatus { get; set; }
    public void Initialize(PRISM.Produce.IngamePlayerModel playerModel);
    public void Copy(PRISM.Produce.IngameUnitModel unitModel, PRISM.Produce.ProduceInGameEffectManager effectManager);
    public void ChangePlayerModel(PRISM.Produce.IngamePlayerModel playerModel);
    public PRISM.Produce.IngameUnitMemberModel GetIngameUnitMemberModel(int memverId);
    public void ChangeMentallOrMentalGurad();
    public void ChangeHand();
    public void Terminate();
    private void _sumMemberStatus(PRISM.Produce.IngamePlayerStatusModel& status, bool isBase);
    private void _updateEffect(PRISM.Produce.ProduceInGameEffect effect);
    private void _updateCurrentStatus();
    private void _updateAllStatus();
    private PRISM.Produce.IngameUnitMemberModel <.ctor>b__24_0(PRISM.Module.Networking.IInProduceIdolStatus e);
    private PRISM.Produce.IngameUnitMemberModel <.ctor>b__26_0(PRISM.Module.Networking.IRivalStatus e);
    private PRISM.Produce.IngameUnitMemberModel <.ctor>b__27_1(PRISM.Module.Networking.IChallengeTourInGameIdolStatus e);
    private PRISM.Produce.IngameUnitMemberModel <.ctor>b__28_0(PRISM.Module.Networking.IChallengeTourRivalStatus e);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IInProduceIdolStatus, PRISM.Module.Networking.IInProduceIdolSkillStatus> <>9__24_1;
        public static System.Func<PRISM.Module.Networking.IInProduceIdolSkillStatus, PRISM.Produce.IngameUnitMemberModel, PRISM.Produce.IngameSkillModel> <>9__24_2;
        public static System.Func<PRISM.Module.Networking.IInProducePotentialSupportSkillStatus, PRISM.Produce.IngameSupportSkillModel> <>9__24_3;
        public static System.Func<PRISM.Module.Networking.IRivalStatus, PRISM.Module.Networking.IRivalSkillStatus> <>9__26_1;
        public static System.Func<PRISM.Module.Networking.IRivalSkillStatus, PRISM.Produce.IngameUnitMemberModel, PRISM.Produce.IngameSkillModel> <>9__26_2;
        public static System.Func<PRISM.Module.Networking.IChallengeTourInGameIdolStatus, int> <>9__27_0;
        public static System.Func<PRISM.Module.Networking.IChallengeTourInGameIdolStatus, PRISM.Module.Networking.IChallengeTourInGameIdolSkillStatus> <>9__27_2;
        public static System.Func<PRISM.Module.Networking.IChallengeTourInGameIdolSkillStatus, PRISM.Produce.IngameUnitMemberModel, PRISM.Produce.IngameSkillModel> <>9__27_3;
        public static System.Func<PRISM.Module.Networking.IChallengeTourInGameSupportSkillStatus, PRISM.Produce.IngameSupportSkillModel> <>9__27_4;
        public static System.Func<PRISM.Module.Networking.IChallengeTourRivalStatus, PRISM.Module.Networking.IRivalSkillStatus> <>9__28_1;
        public static System.Func<PRISM.Module.Networking.IRivalSkillStatus, PRISM.Produce.IngameUnitMemberModel, PRISM.Produce.IngameSkillModel> <>9__28_2;
        public static System.Action<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngameUnitModel> <>9__30_0;
        public static System.Action<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.IngameUnitModel> <>9__30_1;
        private PRISM.Module.Networking.IInProduceIdolSkillStatus <.ctor>b__24_1(PRISM.Module.Networking.IInProduceIdolStatus e);
        private PRISM.Produce.IngameSkillModel <.ctor>b__24_2(PRISM.Module.Networking.IInProduceIdolSkillStatus skill, PRISM.Produce.IngameUnitMemberModel idol);
        private PRISM.Produce.IngameSupportSkillModel <.ctor>b__24_3(PRISM.Module.Networking.IInProducePotentialSupportSkillStatus e);
        private PRISM.Module.Networking.IRivalSkillStatus <.ctor>b__26_1(PRISM.Module.Networking.IRivalStatus e);
        private PRISM.Produce.IngameSkillModel <.ctor>b__26_2(PRISM.Module.Networking.IRivalSkillStatus skill, PRISM.Produce.IngameUnitMemberModel rival);
        private int <.ctor>b__27_0(PRISM.Module.Networking.IChallengeTourInGameIdolStatus e);
        private PRISM.Module.Networking.IChallengeTourInGameIdolSkillStatus <.ctor>b__27_2(PRISM.Module.Networking.IChallengeTourInGameIdolStatus e);
        private PRISM.Produce.IngameSkillModel <.ctor>b__27_3(PRISM.Module.Networking.IChallengeTourInGameIdolSkillStatus skill, PRISM.Produce.IngameUnitMemberModel idol);
        private PRISM.Produce.IngameSupportSkillModel <.ctor>b__27_4(PRISM.Module.Networking.IChallengeTourInGameSupportSkillStatus e);
        private PRISM.Module.Networking.IRivalSkillStatus <.ctor>b__28_1(PRISM.Module.Networking.IChallengeTourRivalStatus e);
        private PRISM.Produce.IngameSkillModel <.ctor>b__28_2(PRISM.Module.Networking.IRivalSkillStatus skill, PRISM.Produce.IngameUnitMemberModel rival);
        private void <Initialize>b__30_0(PRISM.Produce.ProduceInGameEffect effect, PRISM.Produce.IngameUnitModel state);
        private void <Initialize>b__30_1(PRISM.Produce.ProduceInGameEffect effect, PRISM.Produce.IngameUnitModel state);
    }
}

// Namespace: PRISM.Produce
public class MentalGuardContent : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject parentObject;
    private ENTERPRISE.UI.UITextMeshProUGUI guardValueText;
    public void ChangeValue(int value, bool isPlaySE);
    private void _updateDisplay(int value);
}

// Namespace: PRISM.Produce
public class ProduceInGamePauseContent : UnityEngine.MonoBehaviour
{
    private InGameType inGameType;
    private UniRx.Subject<UniRx.Unit> onPause;
    private UniRx.Subject<UniRx.Unit> onUnPause;
    private UniRx.Subject<PRISM.Produce.ProduceOptionSaveData> onApplyProduceOption;
    private ENTERPRISE.UI.UIButton pauseButton;
    private UnityEngine.GameObject blackBG;
    private PRISM.Produce.ProduceInGamePausePopupCaller popupCaller;
    private PRISM.Legacy.ChallengeTourInGamePausePopupCaller challengeTourPopupCaller;
    private ENTERPRISE.UI.UIButton suspendUnPauseButton;
    public System.IObservable<UniRx.Unit> OnPause { get; set; }
    public System.IObservable<UniRx.Unit> OnUnPause { get; set; }
    public System.IObservable<PRISM.Produce.ProduceOptionSaveData> OnApplyProduceOption { get; set; }
    public void Setup(System.Collections.Generic.IReadOnlyList<PRISM.Produce.EnemySkillContentViewModel> enemySkillViewModels, InGameType inGameType, PRISM.Produce.ChallengeMissionViewModel challengeMissionViewModel, System.Func<Cysharp.Threading.Tasks.UniTask> onPreCloseByRetryButtonFunc, System.Func<Cysharp.Threading.Tasks.UniTask> onPreCloseByGiveUpButtonFunc);
    public void SetupForChallengeTour(System.Collections.Generic.IReadOnlyList<PRISM.Produce.EnemySkillContentViewModel> enemySkillModelList, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IChallengeTourStageRewardStatus> missionList, PRISM.Produce.ChallengeTourMissionProgressCalcModel calcModel, System.Func<Cysharp.Threading.Tasks.UniTask> onPreCloseByRetryButtonFunc, System.Func<Cysharp.Threading.Tasks.UniTask> onPreCloseByGiveUpButtonFunc);
    public void HidePauseButton();
    public void ShowSuspendUnPauseButton();
    public void SetPauseButtonEnable(bool isEnable);
    public Cysharp.Threading.Tasks.UniTask TerminateAsync();
    private void _setupCommon();

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<PRISM.Produce.ProduceOptionSaveData, PRISM.Produce.ProduceInGamePauseContent> <>9__15_0;
        public static System.Action<PRISM.Produce.ProduceOptionSaveData, PRISM.Produce.ProduceInGamePauseContent> <>9__16_0;
        public static System.Action<UniRx.Unit, System.Func<Cysharp.Threading.Tasks.UniTask>> <>9__16_1;
        public static System.Action<UniRx.Unit, System.Func<Cysharp.Threading.Tasks.UniTask>> <>9__16_2;
        public static System.Action<UniRx.Unit, PRISM.Produce.ProduceInGamePauseContent> <>9__21_0;
        public static System.Action<UniRx.Unit, PRISM.Produce.ProduceInGamePauseContent> <>9__21_1;
        public static System.Action<UniRx.Unit, PRISM.Produce.ProduceInGamePauseContent> <>9__21_2;
        public static System.Action<UniRx.Unit, PRISM.Produce.ProduceInGamePauseContent> <>9__21_3;
        public static System.Action<UniRx.Unit, PRISM.Produce.ProduceInGamePauseContent> <>9__21_4;
        private void <Setup>b__15_0(PRISM.Produce.ProduceOptionSaveData saveData, PRISM.Produce.ProduceInGamePauseContent state);
        private void <SetupForChallengeTour>b__16_0(PRISM.Produce.ProduceOptionSaveData saveData, PRISM.Produce.ProduceInGamePauseContent state);
        private void <SetupForChallengeTour>b__16_1(UniRx.Unit _, System.Func<Cysharp.Threading.Tasks.UniTask> state);
        private void <SetupForChallengeTour>b__16_2(UniRx.Unit _, System.Func<Cysharp.Threading.Tasks.UniTask> state);
        private void <_setupCommon>b__21_0(UniRx.Unit _, PRISM.Produce.ProduceInGamePauseContent state);
        private void <_setupCommon>b__21_1(UniRx.Unit _, PRISM.Produce.ProduceInGamePauseContent state);
        private void <_setupCommon>b__21_2(UniRx.Unit _, PRISM.Produce.ProduceInGamePauseContent state);
        private void <_setupCommon>b__21_3(UniRx.Unit _, PRISM.Produce.ProduceInGamePauseContent state);
        private void <_setupCommon>b__21_4(UniRx.Unit _, PRISM.Produce.ProduceInGamePauseContent state);
    }

    private struct <TerminateAsync>d__20 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ProduceInGamePauseContent <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ProduceInGamePausePopupCaller : UnityEngine.MonoBehaviour
{
    public System.IObservable<PRISM.Produce.ProduceOptionSaveData> OnApplyProduceOption { get; set; }
    public System.IObservable<UniRx.Unit> OnHidePopup { get; set; }
    public void Setup(System.Collections.Generic.IReadOnlyList<PRISM.Produce.EnemySkillContentViewModel> enemySkillViewModels, InGameType inGameType, PRISM.Produce.ChallengeMissionViewModel challengeMissionViewModel, System.Func<Cysharp.Threading.Tasks.UniTask> onPreCloseByRetryButtonFunc, System.Func<Cysharp.Threading.Tasks.UniTask> onPreCloseByGiveUpButtonFunc);
    public Cysharp.Threading.Tasks.UniTask ShowAsync(System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask TerminateAsync();
}

// Namespace: PRISM.Produce
public class InGamePCardContent : UnityEngine.MonoBehaviour
{
    private PRISM.Produce.ProduceCardContent produceCardContent;
    private UnityEngine.GameObject normalCostUIArea;
    private CostUI buffCostUI;
    private CostUI deBuffCostUI;
    private UnityEngine.GameObject[] cardRankUpIcons;
    private UnityEngine.GameObject notAvailableUI;
    private int prevBaseCost;
    private int prevCalcCost;
    public System.IObservable<UniRx.Unit> OnClick { get; set; }
    public Cysharp.Threading.Tasks.UniTask SetupAsync(PRISM.Produce.IngamePCardModel inGamePCard, PRISM.Produce.ProduceIngameLoader resourceLoader, System.Threading.CancellationToken ct);
    public void SetAvailableState(PCardAvailableState state);
    public void SetClickEnable(bool isEnable);
    public void ResetDragging();
    public void SetCostBuffDeBuff(int baseCost, int calcCost);
    public void UpdateAppealType(System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypes);

    private class CostUI
    {
        public UnityEngine.GameObject UIArea;
        public ENTERPRISE.UI.UITextMeshProUGUI CostText;
    }
}

// Namespace: PRISM.Produce
public class PlayerUsePCardContent : UnityEngine.MonoBehaviour
{
    private PRISM.Produce.InGamePCardContent inGamePCardContent;
    private UniRx.Triggers.ObservableBeginDragTrigger beginDragTrigger;
    private UniRx.Triggers.ObservableDragTrigger dragTrigger;
    private UniRx.Triggers.ObservableUpdateSelectedTrigger updateSelectedTrigger;
    private UniRx.Triggers.ObservableEndDragTrigger endDragTrigger;
    private UnityEngine.Animator buffEffect;
    private UnityEngine.Animator deBuffEffect;
    private UnityEngine.Animator availableEffect;
    private UnityEngine.Animator specialAvailableChangeEffect;
    private UnityEngine.Animator specialAvailableEffect;
    private UnityEngine.Animator cardAnimator;
    private UnityEngine.Transform centerPoint;
    private UniRx.Subject<DragState> onDrag;
    private UniRx.CompositeDisposable disposable;
    public UnityEngine.Vector3 CenterPos { get; set; }
    public System.IObservable<UniRx.Unit> OnClick { get; set; }
    public Cysharp.Threading.Tasks.UniTask SetupAsync(PRISM.Produce.IngamePCardModel inGamePCard, PRISM.Produce.ProduceIngameLoader resourceLoader, System.Threading.CancellationToken ct);
    public void SetAvailableState(PCardAvailableState state);
    public void SetCostBuffDeBuff(int baseCost, int calcCost);
    public void UpdateAppealType(System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypes);
    public void ResetDragging();
    public System.IDisposable SubscribeOnDrag<TState>(TState state, System.Action<DragState, TState> onNext);
    public void SetDragEnable(bool isEnable);
    public Cysharp.Threading.Tasks.UniTask CardReleaseAsync(System.Threading.CancellationToken cancellationToken);
    public void UpdateBuffDeBuff(BuffStatus buffStatus, bool isAnimation);
    public void UpdateAvailable(bool isPlayAnim);
    public void ResetTransform(float defaultSizeX);
    public Cysharp.Threading.Tasks.UniTask PlayDrawAnimationAsync(System.Threading.CancellationToken ct);
    public float GetAnimationNormalizedTime();
    public void SetAnimationSpeed(float speed);
    public void Terminate();

    public enum DragState : System.Enum
    {
        public int value__;
        public static DragState Begin;
        public static DragState Drag;
        public static DragState Update;
        public static DragState End;
    }

    private class <>c__24`1<TState>
    {
        public static <>c__24<TState> <>9;
        public static System.Action<UnityEngine.EventSystems.PointerEventData, UniRx.Subject<DragState>> <>9__24_0;
        public static System.Action<UnityEngine.EventSystems.PointerEventData, UniRx.Subject<DragState>> <>9__24_1;
        public static System.Action<UnityEngine.EventSystems.BaseEventData, UniRx.Subject<DragState>> <>9__24_2;
        public static System.Action<UnityEngine.EventSystems.PointerEventData, UniRx.Subject<DragState>> <>9__24_3;
        public static System.Action<DragState, System.ValueTuple<TState, System.Action<DragState, TState>>> <>9__24_4;
        private void <SubscribeOnDrag>b__24_0(UnityEngine.EventSystems.PointerEventData _, UniRx.Subject<DragState> subject);
        private void <SubscribeOnDrag>b__24_1(UnityEngine.EventSystems.PointerEventData _, UniRx.Subject<DragState> subject);
        private void <SubscribeOnDrag>b__24_2(UnityEngine.EventSystems.BaseEventData _, UniRx.Subject<DragState> subject);
        private void <SubscribeOnDrag>b__24_3(UnityEngine.EventSystems.PointerEventData _, UniRx.Subject<DragState> subject);
        private void <SubscribeOnDrag>b__24_4(DragState dragState, System.ValueTuple<TState, System.Action<DragState, TState>> tuple);
    }

    private struct <CardReleaseAsync>d__26 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.PlayerUsePCardContent <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ProduceIngameLoader
{
    private PRISM.ResourceManagement.IResourceLoader resourceLoader;
    public Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadProduceCardEffectIconAsync(int iconId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadProduceCardTextureAsync(int id, DoubleCardUseType phase, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadPIdolIconSquareAsync(int id, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadEnemyRivalIconAsync(int iconId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadEnemyTrainerIconAsync(int iconId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadSkillCutInImageAsync(int id, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadIdolSkillIconAsync(int iconId, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask PreloadInGameAssetAsync(System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IInProduceIdolStatus> playerProduceIdols, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IProduceCardStatus> playerProduceCards, PRISM.Module.Networking.ITrainerStatus trainerStatus, System.Threading.CancellationToken cancellationToken);
    public static Cysharp.Threading.Tasks.UniTask PreloadInGameAssetAsync(System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IInProduceIdolStatus> playerProduceIdols, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IProduceCardStatus> playerProduceCards, PRISM.Module.Networking.IRivalUnitStatus rivalUnitStatus, System.Threading.CancellationToken cancellationToken);
    public static Cysharp.Threading.Tasks.UniTask PreloadInGameAssetAsync(PRISM.Module.Networking.IChallengeTourInGameUnitStatus playerUnitStatus, PRISM.Module.Networking.IChallengeTourRivalUnitStatus rivalUnitStatus, System.Threading.CancellationToken cancellationToken);
    private static Cysharp.Threading.Tasks.UniTask _preloadIngameAssetAsync(System.Collections.Generic.IEnumerable<int> playerMstProduceIdolIds, System.Collections.Generic.IEnumerable<string> opponentIconKeys, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IInGameSkillStatus> playerIdolSkills, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IRivalSkillStatus> oppenentSkills, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IProduceCardStatus> playerProduceCards, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IProduceCardStatus> opponentProduceCards, System.Threading.CancellationToken cancellationToken);
    private static void _addProduceCardAssetKeys(System.Collections.Generic.HashSet<string>& keys, PRISM.Module.Networking.IProduceCardStatus produceCard);
    private static string _getProduceCardTextureKey(int id, DoubleCardUseType phase);
    private static string _getProduceCardEffectIconKey(int iconId);
    private static string _getProduceCardDetailPopupViewKey();
    private static string _getIdolSkillIconKey(int iconId);
    private static string _getPIdolIconSquareKey(int id);
    private static string _getSkillCutInImageKey(int id);
    private static string _getEnemyTrainerIconKey(int iconId);
    private static string _getEnemyRivalIconKey(int iconId);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IInProduceIdolStatus, int> <>9__9_0;
        public static System.Func<PRISM.Module.Networking.IInProduceIdolStatus, PRISM.Module.Networking.IInGameSkillStatus> <>9__9_1;
        public static System.Func<PRISM.Module.Networking.IInProduceIdolStatus, int> <>9__10_0;
        public static System.Func<PRISM.Module.Networking.IRivalStatus, string> <>9__10_1;
        public static System.Func<PRISM.Module.Networking.IInProduceIdolStatus, PRISM.Module.Networking.IInGameSkillStatus> <>9__10_2;
        public static System.Func<PRISM.Module.Networking.IRivalStatus, PRISM.Module.Networking.IRivalSkillStatus> <>9__10_3;
        public static System.Func<PRISM.Module.Networking.IChallengeTourInGameIdolStatus, int> <>9__11_0;
        public static System.Func<PRISM.Module.Networking.IChallengeTourRivalStatus, string> <>9__11_1;
        public static System.Func<PRISM.Module.Networking.IChallengeTourInGameIdolStatus, PRISM.Module.Networking.IInGameSkillStatus> <>9__11_2;
        public static System.Func<PRISM.Module.Networking.IChallengeTourRivalStatus, PRISM.Module.Networking.IRivalSkillStatus> <>9__11_3;
        private int <PreloadInGameAssetAsync>b__9_0(PRISM.Module.Networking.IInProduceIdolStatus x);
        private PRISM.Module.Networking.IInGameSkillStatus <PreloadInGameAssetAsync>b__9_1(PRISM.Module.Networking.IInProduceIdolStatus x);
        private int <PreloadInGameAssetAsync>b__10_0(PRISM.Module.Networking.IInProduceIdolStatus x);
        private string <PreloadInGameAssetAsync>b__10_1(PRISM.Module.Networking.IRivalStatus x);
        private PRISM.Module.Networking.IInGameSkillStatus <PreloadInGameAssetAsync>b__10_2(PRISM.Module.Networking.IInProduceIdolStatus x);
        private PRISM.Module.Networking.IRivalSkillStatus <PreloadInGameAssetAsync>b__10_3(PRISM.Module.Networking.IRivalStatus x);
        private int <PreloadInGameAssetAsync>b__11_0(PRISM.Module.Networking.IChallengeTourInGameIdolStatus x);
        private string <PreloadInGameAssetAsync>b__11_1(PRISM.Module.Networking.IChallengeTourRivalStatus x);
        private PRISM.Module.Networking.IInGameSkillStatus <PreloadInGameAssetAsync>b__11_2(PRISM.Module.Networking.IChallengeTourInGameIdolStatus x);
        private PRISM.Module.Networking.IRivalSkillStatus <PreloadInGameAssetAsync>b__11_3(PRISM.Module.Networking.IChallengeTourRivalStatus x);
    }

    private struct <_preloadIngameAssetAsync>d__12 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IProduceCardStatus> playerProduceCards;
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IProduceCardStatus> opponentProduceCards;
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IInGameSkillStatus> playerIdolSkills;
        public System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IRivalSkillStatus> oppenentSkills;
        public System.Collections.Generic.IEnumerable<int> playerMstProduceIdolIds;
        public System.Collections.Generic.IEnumerable<string> opponentIconKeys;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ProduceIngameViewModel
{
    private bool <IsSkipIdolSkillCutIn>k__BackingField;
    public bool IsSkipIdolSkillCutIn { get; set; }
}

// Namespace: PRISM.Produce
public class ShakeUIController : UnityEngine.MonoBehaviour
{
    private UnityEngine.Vector2 firstPosition;
    private System.Threading.CancellationTokenSource cts;
    public void ShakeUI();
    public void Cancel();
    private void Awake();
    private Cysharp.Threading.Tasks.UniTask _shakeUIAsync(System.Threading.CancellationToken ct);
    private void OnDestroy();

    private struct <_shakeUIAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ShakeUIController <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class SkillContentListViewBase`1<T> : UnityEngine.MonoBehaviour
{
    private T contentPrefab;
    private UniRx.Subject<int> onClick;
    protected T[] skillContents;
    public System.IObservable<int> OnClick { get; set; }
    public void SetAvailableState(int index, SkillAvailableState availableState);
    public void SetSkillUsableCount(int index, int usableCount, int usableMax);
    public UnityEngine.Vector3 EffectPoint(int index);
    public void SetAnimationSpeed(float speed);
    public void Terminate();
    protected Cysharp.Threading.Tasks.UniTask _createSkillContentAsync(int createCount, PRISM.Produce.ProduceIngameLoader resourceLoader, System.Func<int, T, PRISM.Produce.ProduceIngameLoader, Cysharp.Threading.Tasks.UniTask> onSetupTask);
    protected UnityEngine.RectTransform _getContentParent(int index);

    private class <>c<T>
    {
        public static <>c<T> <>9;
        public static System.Action<UniRx.Unit, System.ValueTuple<UniRx.Subject<int>, int>> <>9__10_0;
        private void <_createSkillContentAsync>b__10_0(UniRx.Unit _, System.ValueTuple<UniRx.Subject<int>, int> state);
    }

    private struct <_createSkillContentAsync>d__10<T> : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.SkillContentListViewBase<T> <>4__this;
        public int createCount;
        public System.Func<int, T, PRISM.Produce.ProduceIngameLoader, Cysharp.Threading.Tasks.UniTask> onSetupTask;
        public PRISM.Produce.ProduceIngameLoader resourceLoader;
        private int <i>5__2;
        private T <content>5__3;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class TypeCounterContent : UnityEngine.MonoBehaviour
{
    private ParameterUI[] parameterUIs;
    public void SetParameter(ProduceParameterType parameterType, int value);
    public void ShowReleaseEffect(ProduceParameterType parameterType);
    private ParameterUI _getParameterUI(ProduceParameterType parameterType);

    private class ParameterUI
    {
        private ENTERPRISE.UI.UITextMeshProUGUI text;
        private UnityEngine.Animator releaseEffectAnimator;
        public void SetParameter(int value);
        public void ShowReleaseEffect();
    }
}

// Namespace: PRISM.Produce
public class ActionLogContent : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UITextMeshProUGUI titleText;
    private ENTERPRISE.UI.UITextMeshProUGUI timeText;
    private UnityEngine.UI.Image lineImage;
    private UnityEngine.UI.Image skillImage;
    private UnityEngine.UI.RawImage loadCardImage;
    private UnityEngine.UI.RawImage loadSkillImage;
    private ENTERPRISE.UI.UIButton button;
    private UnityEngine.Sprite[] lineSprite;
    private UnityEngine.RectTransform contentRoot;
    private UnityEngine.Sprite[] imageSprite;
    private UnityEngine.Color32 selectColor;
    private float selectOffsetX;
    private float selectAnimationDuration;
    private float miniMoveAnimationDuration;
    private float miniMoveXInStart;
    private float miniMoveXInEnd;
    private float miniOffsetY;
    private InGameType inGameType;
    private PRISM.Produce.ProduceIngameLoader resourceLoader;
    private DG.Tweening.Tweener tweener;
    private System.Threading.CancellationTokenSource tokenSource;
    private UnityEngine.Vector2 moveVector;
    public System.IObservable<UniRx.Unit> OnClickContent { get; set; }
    public void Setup(InGameType inGameType);
    public void SetResourceLoader(PRISM.Produce.ProduceIngameLoader resourceLoader);
    private void OnDestroy();
    public void Hide();
    public void Show();
    public void SetStartPos();
    public void SetSize(UnityEngine.Vector2 size);
    public void SetData(string title, bool isPlayer, int time, ImageType imageType);
    public void SetSkillIconImage(bool isEnemy, int id, int phase);
    public void SetActiveSelect(bool isSelect);
    public void MiniMoveStart(int index);
    private void _cancelVariationTask();
    private Cysharp.Threading.Tasks.UniTask _miniMoveAsync(int index, System.Threading.CancellationToken cancellationToken);
    private System.Threading.CancellationToken _getNewVariationTaskCT();
    private Cysharp.Threading.Tasks.UniTask _moveAnimationAsync(float duration, float moveOffsetX, System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> _loadPIIconSquareAsync(int id, System.Threading.CancellationToken ct);
    private Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> _loadEnemyIconAsync(int iconID, InGameType inGameType, System.Threading.CancellationToken ct);

    public enum ImageType : System.Enum
    {
        public int value__;
        public static ImageType None;
        public static ImageType Card;
        public static ImageType IdolSkill;
    }

    private struct <_miniMoveAsync>d__37 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ActionLogContent <>4__this;
        public int index;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_moveAnimationAsync>d__39 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ActionLogContent <>4__this;
        public float moveOffsetX;
        public float duration;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ActionLogView : UnityEngine.MonoBehaviour
{
    private PRISM.Produce.ActionLogContent actionLogContentPrefab;
    private UnityEngine.UI.ScrollRect scrollRect;
    private UniRx.Subject<int> onClickActionLog;
    private PRISM.Produce.ProduceIngameLoader resourceLoader;
    private InGameType inGameType;
    private bool isBigActionLog;
    public static int MiniContentNum;
    private System.Collections.Generic.List<PRISM.Produce.ActionLogContent> actionLogContentList;
    public System.IObservable<int> OnClickActionLog { get; set; }
    public void Setup(PRISM.Produce.ProduceIngameLoader resourceLoader, InGameType inGameType, bool isBigActionLog);
    public void Awake();
    public void Reset();
    public void Terminate();
    public void Show();
    public void Hide();
    public void ResetScroll();
    public void SetSelectIndex(int index);
    public void SetSkillIconImage(int index, bool isEnemy, int id, int phase);
    public void UpdateContent(int index, string title, bool isPlayer, int time, ImageType imageType);
    public void AddMiniContent(int index, string title, bool isPlayer, int time, ImageType imageType);
    public int GetSelectIndex(int index, int size);
    private PRISM.Produce.ActionLogContent _getActionLogContent(int index);
    private PRISM.Produce.ActionLogContent _createActionLogContent(int index);

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<UniRx.Unit, System.ValueTuple<int, UniRx.Subject<int>>> <>9__23_0;
        private void <_createActionLogContent>b__23_0(UniRx.Unit unit, System.ValueTuple<int, UniRx.Subject<int>> state);
    }
}

// Namespace: PRISM.Produce
public class InGameEnemyView : UnityEngine.MonoBehaviour, PRISM.Produce.IInGamePlayerView
{
    private PRISM.Produce.InGamePlayerCommonView commonView;
    private PRISM.Produce.EnemyHandContent handContent;
    private PRISM.Produce.EnemySkillContentListView enemySkillContentListView;
    private PRISM.Produce.ProduceIngameLoader resourceLoader;
    public System.IObservable<int> OnClickBuffIcon { get; set; }
    public System.IObservable<int> OnClickSkillIcon { get; set; }
    public void ShowExecuteCard<TState>(PRISM.Produce.IngamePCardModel cardModel, int handCount, int drawCount, System.Collections.Generic.IReadOnlyList<int> releaseHandIndexes, TState state, System.Action<AnimationState, TState> onChangeAnimationState);
    public void UpdateDisplayHand(int handCount, int drawCount, System.Collections.Generic.IReadOnlyList<int> releaseHandIndexes);
    public void UpdateCardBuffDeBuff(int baseCost, int calcCost);
    public Cysharp.Threading.Tasks.UniTask SetupSkillContentAsync(System.Collections.Generic.IReadOnlyList<PRISM.Produce.EnemySkillContentViewModel> viewModels, System.Threading.CancellationToken ct);
    public void ShowSkillBalloon(int index);
    public void SetResourceLoader(PRISM.Produce.ProduceIngameLoader resourceLoader);
    public void ResetView();
    public void SetAnimationSpeed(float speed);
    public void Terminate();
    private void _playAppealEffect(int appealPoint, UnityEngine.Vector3 fromPoint);
    private void _playOtherEffect(OtherEffectType effectType, UnityEngine.Vector3 fromPoint);
    public void SetUpAppealGaugeForSpecialLesson(int currentAppeal, int maxAppeal, System.Collections.Generic.IEnumerable<int> milestones);
    public void UpdateAppealGauge(int appealPoint, int maxAppealPoint, bool isDisplayValue, ProduceParameterType parameterType, int cacheAppealPoint, int getAppealPointCount);
    public void ShowAppealGaugePrediction(int currentAppealPoint, int getAppealPoint, int maxAppealPoint);
    public void HideAppealGaugePrediction(int appealPoint, int maxAppealPoint);
    public void InitializeMentalGauge(int currentMental, int maxMental, bool isPinch, bool isSafe, int pinchRate);
    public void UpdateMentalPinchIcon(bool isShowPinchIcon);
    public void UpdateMentalPinchLine(int maxMental, int pinchRate);
    public void UpdateMentalGauge(MentalState state, int mental, int max, int safeValue, bool isDisplayValue, int changeValue);
    public void ShowMentalGaugePrediction(MentalState state, int currentMe, int damageMe, int recoveryMe, int maxMe);
    public void HideMentalGaugePrediction(MentalState state, int currentMe, int maxMe);
    public void UpdateMentalGuard(int mentalGuard, bool isPlaySE);
    public void UpdateAvoidRate(int avoidRate);
    public void PlayAvoidEffect();
    public void PlayAvoidBuffEffect();
    public void UpdateBuffDeBuffIcon(System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffectGroup> effectGroups);
    public void UpdateBuffDeBuffIconBlink(System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffectGroup> effectGroups);
    public void UpdateProducePoint(int producePointValue, int producePointMax);
    public void UpdateProducePointRecoveryGauge(float currentRecoveryTime, float recoveryTime);
    public void PlayProducePointUpAnimation();
    public void UpdateMentalBreakProducePointView(bool isMentalBreak);
    public void UpdateMentalBreakTimeView(float mentalBreakTime);
    public void PlayCardEffect(System.Collections.Generic.IReadOnlyList<int> effectIDs, int appealPoint);
    public void PlaySkillEffect(int index, System.Collections.Generic.IReadOnlyList<int> effectIDs, int appealPoint);
    public void SetSkillAvailableState(int targetIndex, SkillAvailableState availableState);
    public void SetSkillUsableCount(int index, int usableCount, int usableMax);

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<int, PRISM.Produce.InGameEnemyView> <>9__40_0;
        public static System.Action<OtherEffectType, PRISM.Produce.InGameEnemyView> <>9__40_1;
        public static System.Action<int, System.ValueTuple<PRISM.Produce.InGameEnemyView, int>> <>9__41_0;
        public static System.Action<OtherEffectType, System.ValueTuple<PRISM.Produce.InGameEnemyView, int>> <>9__41_1;
        private void <PlayCardEffect>b__40_0(int appeal, PRISM.Produce.InGameEnemyView state);
        private void <PlayCardEffect>b__40_1(OtherEffectType effectType, PRISM.Produce.InGameEnemyView state);
        private void <PlaySkillEffect>b__41_0(int appeal, System.ValueTuple<PRISM.Produce.InGameEnemyView, int> state);
        private void <PlaySkillEffect>b__41_1(OtherEffectType effectType, System.ValueTuple<PRISM.Produce.InGameEnemyView, int> state);
    }
}

// Namespace: PRISM.Produce
public interface IInGamePlayerView
{
    public System.IObservable<int> OnClickBuffIcon { get; set; }
    public System.IObservable<int> OnClickSkillIcon { get; set; }
    public void SetUpAppealGaugeForSpecialLesson(int currentAppeal, int maxAppeal, System.Collections.Generic.IEnumerable<int> milestones);
    public void UpdateAppealGauge(int appealPoint, int maxAppealPoint, bool isDisplayValue, ProduceParameterType parameterType, int cacheAppealPoint, int getAppealPointCount);
    public void ShowAppealGaugePrediction(int currentAppealPoint, int getAppealPoint, int maxAppealPoint);
    public void HideAppealGaugePrediction(int appealPoint, int maxAppealPoint);
    public void InitializeMentalGauge(int currentMental, int maxMental, bool isPinch, bool isSafe, int pinchRate);
    public void UpdateMentalPinchIcon(bool isShowPinchIcon);
    public void UpdateMentalPinchLine(int maxMental, int pinchRate);
    public void UpdateMentalGauge(MentalState state, int mental, int max, int safeValue, bool isDisplayValue, int changeValue);
    public void ShowMentalGaugePrediction(MentalState state, int currentMe, int damageMe, int recoveryMe, int maxMe);
    public void HideMentalGaugePrediction(MentalState state, int currentMe, int maxMe);
    public void UpdateMentalGuard(int mentalGuard, bool isPlaySE);
    public void UpdateAvoidRate(int avoidRate);
    public void PlayAvoidEffect();
    public void PlayAvoidBuffEffect();
    public void UpdateBuffDeBuffIcon(System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffectGroup> effectGroups);
    public void UpdateBuffDeBuffIconBlink(System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffectGroup> effectGroups);
    public void UpdateProducePoint(int producePointValue, int producePointMax);
    public void UpdateProducePointRecoveryGauge(float currentRecoveryTime, float recoveryTime);
    public void PlayProducePointUpAnimation();
    public void UpdateMentalBreakProducePointView(bool isMentalBreak);
    public void UpdateMentalBreakTimeView(float mentalBreakTime);
    public void PlayCardEffect(System.Collections.Generic.IReadOnlyList<int> effectIDs, int appealPoint);
    public void PlaySkillEffect(int index, System.Collections.Generic.IReadOnlyList<int> effectIDs, int appealPoint);
    public void SetSkillAvailableState(int targetIndex, SkillAvailableState availableState);
    public void SetSkillUsableCount(int index, int usableCount, int usableMax);
}

// Namespace: PRISM.Produce
public class InGamePlayerCommonView : UnityEngine.MonoBehaviour
{
    private float gaugeAnimationTime;
    private PRISM.Produce.AppealPointGaugeContent appealGauge;
    private PRISM.Produce.MentalGaugeContent mentalGauge;
    private PRISM.Produce.MentalGuardContent mentalGuard;
    private PRISM.Produce.EvasionRateContent avoidRate;
    private PRISM.Produce.AvoidEffectContent avoidEffectContent;
    private PRISM.Produce.BuffDebuffContent buffDebuffContent;
    private PRISM.Produce.ProducePointContent producePoint;
    private PRISM.Produce.UsePCardAndSkillEffectController cardAndSkillEffectController;
    public System.IObservable<int> OnClickBuffIcon { get; set; }
    public PRISM.Produce.UsePCardAndSkillEffectController CardAndSkillEffectController { get; set; }
    public void ResetView();
    public void SetUpAppealGaugeForSpecialLesson(int currentAppeal, int maxAppeal, System.Collections.Generic.IEnumerable<int> milestones);
    public void UpdateAppealGauge(int appealPoint, int maxAppealPoint, bool isDisplayValue, ProduceParameterType parameterType, int cacheAppealPoint, int getAppealPointCount);
    public void ShowAppealGaugePrediction(int currentAppealPoint, int getAppealPoint, int maxAppealPoint);
    public void HideAppealGaugePrediction(int appealPoint, int maxAppealPoint);
    public void InitializeMentalGauge(int currentMental, int maxMental, bool isPinch, bool isSafe, int pinchRate);
    public void UpdateMentalPinchIcon(bool isShowPinchIcon);
    public void UpdateMentalPinchLine(int maxMental, int pinchRate);
    public void UpdateMentalGauge(MentalState state, int mental, int max, int safeValue, bool isDisplayValue, int changeValue);
    public void ShowMentalGaugePrediction(MentalState state, int currentMe, int damageMe, int recoveryMe, int maxMe);
    public void HideMentalGaugePrediction(MentalState state, int currentMe, int maxMe);
    public void UpdateMentalGuard(int mentalGuard, bool isPlaySE);
    public void UpdateAvoidRate(int avoidRate);
    public void PlayAvoidEffect();
    public void UpdateBuffDeBuffIcon(System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffectGroup> effectGroups);
    public void UpdateBuffDeBuffIconBlink(System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffectGroup> effectGroups);
    public void UpdateProducePoint(int producePointValue, int producePointMax);
    public void UpdateProducePointRecoveryGauge(float currentRecoveryTime, float recoveryTime);
    public void PlayProducePointUpAnimation();
    public void UpdateMentalBreakProducePointView(bool isMentalBreak);
    public void UpdateMentalBreakTimeView(float mentalBreakTime);
    public void PlayCardAndSkillUIEffect<TState>(TState state, System.Collections.Generic.IReadOnlyList<int> effectIDs, int appealPoint, System.Action<int, TState> playAppealEffect, System.Action<OtherEffectType, TState> playOtherEffect);
    public UnityEngine.RectTransform GetAvoidRateTransform();
    public UnityEngine.RectTransform GetStatusIconRectTransform(int index);
    public UnityEngine.RectTransform GetStatusContentRectTransform();
    public UnityEngine.RectTransform GetAppealContentRectTransform();
    public void SetAnimationSpeed(float speed);
    public void Terminate();
    private void _playCardAndSkillUIEffect<TState>(TState state, int effectID, int appealPoint, System.Action<int, TState> playAppealEffect, System.Action<OtherEffectType, TState> playOtherEffect);
}

// Namespace: PRISM.Produce
public class InGamePlayerView : UnityEngine.MonoBehaviour, PRISM.Produce.IInGamePlayerView
{
    private PRISM.Produce.InGamePlayerCommonView commonView;
    private PRISM.Produce.HandContent handContent;
    private PRISM.Produce.IdolSkillContentListView idolSkillContentListView;
    private PRISM.Produce.SkillCutIn skillCutIn;
    private PRISM.Produce.TypeCounterContent typeCounterContent;
    private PRISM.Produce.PhaseContent phaseContent;
    private PRISM.Produce.ExclusionCardCountContent exclusionCardCountContent;
    private PRISM.Produce.BuffDebuffSimpleDisplay buffDebuffSimpleDisplay;
    private PRISM.Produce.ProduceIngameLoader resourceLoader;
    public System.IObservable<int> OnClickCard { get; set; }
    public System.IObservable<System.ValueTuple<int, DragState>> OnDragCard { get; set; }
    public System.IObservable<System.ValueTuple<int, SwipeState>> OnSwipeSkillIcon { get; set; }
    public PRISM.Produce.InGamePlayerCommonView CommonView { get; set; }
    public System.Func<int, bool> IsAvailableCard { get; set; }
    public System.IObservable<int> OnClickBuffIcon { get; set; }
    public System.IObservable<int> OnClickSkillIcon { get; set; }
    public void UpdateDisplayHand(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngamePCardModel> selectedDeckList, int drawCount, System.Collections.Generic.IReadOnlyList<int> removeHandIndexes, bool isScaleReset);
    public Cysharp.Threading.Tasks.UniTask UpdateDisplayHandAsync(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngamePCardModel> selectedDeckList, int drawCount, System.Collections.Generic.IReadOnlyList<int> removeHandIndexes, System.Threading.CancellationToken cancellationToken);
    public void UpdateCardScale(int index, float scale);
    public void UpdateCardEnabled(int targetIndex, bool isEnable);
    public void UpdateCardAppealType(int index, System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypes);
    public void UpdateCardCostBuffDeBuff(int targetIndex, int baseCost, int calcCost);
    public void PlayCardExecuteAnimation<TState>(PRISM.Produce.IngamePCardModel deckData, TState state, System.Action<PRISM.Produce.IngamePCardModel, TState> onAnimationEnd);
    public void PlayCardExclusionAnimation(System.Collections.Generic.IReadOnlyList<System.ValueTuple<int, PRISM.Produce.IngamePCardModel>> exclusionCardModels);
    public void ForceReleaseDragCard();
    public void ResetCardScale();
    public void SetCardAvailableState(int targetIndex, PCardAvailableState state);
    public void UpdateCardBuffDeBuff(int targetIndex, BuffStatus buffStatus, bool isPlayAnim);
    public void UpdateCardAvailable(int targetIndex, bool isPlayAnim);
    public void UpdateIdolSkillBuffDeBuff(int targetIndex, BuffStatus buffStatus, bool isSuccessCondition);
    public Cysharp.Threading.Tasks.UniTask SetupSkillContentAsync(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IdolSkillContentViewModel> viewModels, System.Threading.CancellationToken ct);
    public void SelectSkill(int index);
    public void SetSkillCost(int index, int cost);
    public void SetSkillCostBuffDeBuff(int index, int baseCost, int calcCost);
    public void ReleaseSkillIconPickUp();
    public void PlayExecuteSkillAnimation(int index);
    public Cysharp.Threading.Tasks.UniTask InitializeIdolCutInAsync(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameUnitMemberModel> unitMemberModels, System.Threading.CancellationToken ct);
    public void StartSkillCutIn(int skillIndex);
    public void SetTypeCounterContentEnable(bool isEnable);
    public void UpdateTypeCounterContent(ProduceParameterType parameterType, int value);
    public void ShowTypeCounterReleaseEffect(ProduceParameterType parameterType);
    public void SetPhaseViewEnable(bool isEnable);
    public void SetActivePhaseViewIndex(PhaseType originPhase);
    public void SetExclusionCardCountContentEnable(bool isEnable);
    public void SetExclusionCardCount(int count);
    public UnityEngine.RectTransform GetCardRectTransform(int index);
    public UnityEngine.RectTransform GetIdolSkillTransform(int index);
    public UnityEngine.RectTransform GetAvoidRateTransform();
    public UnityEngine.RectTransform GetStatusIconRectTransform(int index);
    public UnityEngine.RectTransform GetStatusContentRectTransform();
    public UnityEngine.RectTransform GetAppealContentRectTransform();
    public UnityEngine.RectTransform GetExclusionCardCountRectTransform();
    public void SetResourceLoader(PRISM.Produce.ProduceIngameLoader resourceLoader);
    public void ResetView();
    public void SetAnimationSpeed(float speed);
    public void Terminate();
    private void _playAppealEffect(int appealPoint, UnityEngine.Vector3 fromPoint);
    private void _playOtherEffect(OtherEffectType effectType, UnityEngine.Vector3 fromPoint);
    public void SetUpAppealGaugeForSpecialLesson(int currentAppeal, int maxAppeal, System.Collections.Generic.IEnumerable<int> milestones);
    public void UpdateAppealGauge(int appealPoint, int maxAppealPoint, bool isDisplayValue, ProduceParameterType parameterType, int cacheAppealPoint, int getAppealPointCount);
    public void ShowAppealGaugePrediction(int currentAppealPoint, int getAppealPoint, int maxAppealPoint);
    public void HideAppealGaugePrediction(int appealPoint, int maxAppealPoint);
    public void InitializeMentalGauge(int currentMental, int maxMental, bool isPinch, bool isSafe, int pinchRate);
    public void UpdateMentalPinchIcon(bool isShowPinchIcon);
    public void UpdateMentalPinchLine(int maxMental, int pinchRate);
    public void UpdateMentalGauge(MentalState state, int mental, int max, int safeValue, bool isDisplayValue, int changeValue);
    public void ShowMentalGaugePrediction(MentalState state, int currentMe, int damageMe, int recoveryMe, int maxMe);
    public void HideMentalGaugePrediction(MentalState state, int currentMe, int maxMe);
    public void UpdateMentalGuard(int mentalGuard, bool isPlaySE);
    public void UpdateAvoidRate(int avoidRate);
    public void PlayAvoidEffect();
    public void PlayAvoidBuffEffect();
    public void UpdateBuffDeBuffIcon(System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffectGroup> effectGroups);
    public void UpdateBuffDebuffSimpleDisplay(PRISM.Produce.ProduceInGameEffect effect, bool isSelfEffect);
    public void UpdateBuffDeBuffIconBlink(System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffectGroup> effectGroups);
    public void UpdateProducePoint(int producePointValue, int producePointMax);
    public void UpdateProducePointRecoveryGauge(float currentRecoveryTime, float recoveryTime);
    public void PlayProducePointUpAnimation();
    public void UpdateMentalBreakProducePointView(bool isMentalBreak);
    public void UpdateMentalBreakTimeView(float mentalBreakTime);
    public void PlayCardEffect(System.Collections.Generic.IReadOnlyList<int> effectIDs, int appealPoint);
    public void PlaySkillEffect(int index, System.Collections.Generic.IReadOnlyList<int> effectIDs, int appealPoint);
    public void SetSkillAvailableState(int targetIndex, SkillAvailableState availableState);
    public void SetSkillUsableCount(int index, int usableCount, int usableMax);

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<int, PRISM.Produce.InGamePlayerView> <>9__87_0;
        public static System.Action<OtherEffectType, PRISM.Produce.InGamePlayerView> <>9__87_1;
        public static System.Action<int, System.ValueTuple<PRISM.Produce.InGamePlayerView, int>> <>9__88_0;
        public static System.Action<OtherEffectType, System.ValueTuple<PRISM.Produce.InGamePlayerView, int>> <>9__88_1;
        private void <PlayCardEffect>b__87_0(int appeal, PRISM.Produce.InGamePlayerView state);
        private void <PlayCardEffect>b__87_1(OtherEffectType effectType, PRISM.Produce.InGamePlayerView state);
        private void <PlaySkillEffect>b__88_0(int appeal, System.ValueTuple<PRISM.Produce.InGamePlayerView, int> state);
        private void <PlaySkillEffect>b__88_1(OtherEffectType effectType, System.ValueTuple<PRISM.Produce.InGamePlayerView, int> state);
    }
}

// Namespace: PRISM.Produce
public class AppealAnimationData
{
    private int <Current>k__BackingField;
    private int <Max>k__BackingField;
    private bool <IsCrease>k__BackingField;
    private int <TargetValue>k__BackingField;
    private ProduceParameterType <ParameterType>k__BackingField;
    public int Current { get; set; }
    public int Max { get; set; }
    public bool IsCrease { get; set; }
    public int TargetValue { get; set; }
    public ProduceParameterType ParameterType { get; set; }
    public void SetData(ProduceParameterType parameterType, int current, int max, bool isCrease, int targetValue);
}

// Namespace: PRISM.Produce
public class ChallengeMissionViewModel
{
    private System.Func<int, int> getChallengeMissionProgress;
    public PRISM.Module.Networking.IChallengeMissionStatus ChallengeMission;
    public PRISM.Module.Networking.IInProduceIdolStatus MissionTargetPIdol;
    public PRISM.Module.Networking.IBuildUpParameterValueStatus MissionUpParameter;
    public int ChallengeMissionTypeID { get; set; }
    public bool IsShowProgress { get; set; }
    public int Progress { get; set; }
}

// Namespace: PRISM.Produce
public class ExclusionCardCountContent : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UITextMeshProUGUI exclusionCountText;
    public void Hide();
    public void Show();
    public void SetText(int count);
}

// Namespace: PRISM.Produce
public class LessonViewModel : PRISM.Produce.ProduceIngameViewModel
{
    public int ScheduleLevel;
    public PRISM.Produce.ChallengeMissionViewModel ChallengeMissionViewModel;
}

// Namespace: PRISM.Produce
public class MentalAnimationData
{
    private MentalState <State>k__BackingField;
    private int <Current>k__BackingField;
    private int <Max>k__BackingField;
    private bool <IsCrease>k__BackingField;
    private int <ChangeValue>k__BackingField;
    public MentalState State { get; set; }
    public int Current { get; set; }
    public int Max { get; set; }
    public bool IsCrease { get; set; }
    public int ChangeValue { get; set; }
    public void SetData(MentalState state, int current, int max, bool isCrease, int changeValue);
}

// Namespace: PRISM.Produce
public class PhaseContent : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject[] gameObjects;
    public void Hide();
    public void Show(PhaseType originPhase);
}

// Namespace: PRISM.Produce
public class WaitDurationTask
{
    private float <TimeScale>k__BackingField;
    public float TimeScale { get; set; }
    public Cysharp.Threading.Tasks.UniTask WaitAsync(float duration, System.Threading.CancellationToken ct);

    private struct <WaitAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.WaitDurationTask <>4__this;
        public System.Threading.CancellationToken ct;
        public float duration;
        private float <elapsedTime>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public interface IAuditionSuccessResultConnector
{
}

// Namespace: PRISM.Produce
public class LegacyAuditionSuccessResultParameter : ENTERPRISE.IViewParameter
{
    public PRISM.Module.Networking.IFinishAuditionReply Reply;
    public System.Collections.Generic.IReadOnlyList<PRISM.ProduceIdolModel> ProduceIdolModels;
}

// Namespace: PRISM.Produce
public interface ILessonSuccessResultConnector
{
}

// Namespace: PRISM.Produce
public class LegacyLessonSuccessResultParameter : ENTERPRISE.IViewParameter
{
    public PRISM.Module.Networking.IFinishLessonReply Reply;
    public System.Collections.Generic.IReadOnlyList<PRISM.ProduceIdolModel> ProduceIdolModels;
}

// Namespace: PRISM.Produce
public class ParameterUpAnimationPlayer
{
    private static UnityEngine.GameObject ContentObject;
    public static Cysharp.Threading.Tasks.UniTask PlayAsync(PRISM.Module.Networking.IStartProduceAdvReply startProduceAdvReply, UnityEngine.Transform parent, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask PlayAsync(PRISM.Module.Networking.ISelectProduceAdvOptionReply selectProduceAdvOptionReply, UnityEngine.Transform parent, System.Threading.CancellationToken ct);
    public static void DestoryContent();
    private static Cysharp.Threading.Tasks.UniTask _playAsync(int unitId, PRISM.Module.Networking.IParameterVariationStatus produceIdolParameterVariation, int unitIdolNum, UnityEngine.Transform parent, System.Threading.CancellationToken ct);

    private struct <_playAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public UnityEngine.Transform parent;
        public System.Threading.CancellationToken ct;
        public int unitId;
        public PRISM.Module.Networking.IParameterVariationStatus produceIdolParameterVariation;
        public int unitIdolNum;
        private PRISM.Produce.ParameterVariationContent <content>5__2;
        private Awaiter<PRISM.Produce.ParameterVariationContent> <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ParameterVariationContent : UnityEngine.MonoBehaviour
{
    private static string _assetPath;
    private ENTERPRISE.UI.AnimatorWithEvent parameterDisplayAnimator;
    private PRISM.Produce.ParameterContent parameterContent;
    private ENTERPRISE.UI.UITextMeshProUGUI fanCountTextMeshPro;
    private UnityEngine.CanvasGroup canvasGroup;
    private UnityEngine.Animator statusSlideAnimator;
    private UnityEngine.UI.Image unitIcon;
    private PRISM.UI.PFIdolIconRectView idolIcon;
    public PRISM.Produce.ParameterContent ParameterContent { get; set; }
    public static Cysharp.Threading.Tasks.UniTask<PRISM.Produce.ParameterVariationContent> CreateAsync(UnityEngine.Transform contentParent, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask PlayParameterAnimationAsync(PRISM.Produce.ParameterVariationContent content, int unitID, PRISM.Module.Networking.IParameterVariationStatus parameterVariation, int unitIdolNum, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask PlayUnitParameterAnimationAsync(int unitID, int idolCount, PRISM.Module.Networking.IParameterVariationStatus parameterVariation, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask PlayIdolParameterAnimationAsync(PRISM.Module.Networking.IParameterVariationStatus parameterVariation, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask PlayFanAreaAnimationAsync(int fanCount, System.Threading.CancellationToken ct);
    public void SetDisplay(bool isDisplay);
    private static Cysharp.Threading.Tasks.UniTask<PRISM.Produce.ParameterVariationContent> _createContent(UnityEngine.Transform contentParent, System.Threading.CancellationToken ct);
    private Cysharp.Threading.Tasks.UniTask _playParameterAnimationAsync(PRISM.Module.Networking.IParameterVariationStatus parameterVariation, System.Threading.CancellationToken cancellationToken);
    private void Awake();

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<string> <>9__18_0;
        private void <Awake>b__18_0(string tag);
    }

    private struct <CreateAsync>d__10 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Produce.ParameterVariationContent> <>t__builder;
        public UnityEngine.Transform contentParent;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Produce.ParameterVariationContent> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <PlayIdolParameterAnimationAsync>d__13 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ParameterVariationContent <>4__this;
        public PRISM.Module.Networking.IParameterVariationStatus parameterVariation;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <PlayUnitParameterAnimationAsync>d__12 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ParameterVariationContent <>4__this;
        public int unitID;
        public System.Threading.CancellationToken cancellationToken;
        public int idolCount;
        public PRISM.Module.Networking.IParameterVariationStatus parameterVariation;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_createContent>d__16 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Produce.ParameterVariationContent> <>t__builder;
        public System.Threading.CancellationToken ct;
        public UnityEngine.Transform contentParent;
        private Awaiter<UnityEngine.GameObject> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_playParameterAnimationAsync>d__17 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ParameterVariationContent <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        public PRISM.Module.Networking.IParameterVariationStatus parameterVariation;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public interface IProduceFailureResultConnector
{
}

// Namespace: PRISM.Produce
public class LegacyProduceFailureResultParameter : ENTERPRISE.IViewParameter
{
    private PRISM.Module.Networking.IProduceFailureResultReply <Reply>k__BackingField;
    private ProduceNextOrderType <NextOrder>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.ProduceIdolModel> <ProduceIdolModels>k__BackingField;
    public PRISM.Module.Networking.IProduceFailureResultReply Reply { get; set; }
    public ProduceNextOrderType NextOrder { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.ProduceIdolModel> ProduceIdolModels { get; set; }
    public static PRISM.Produce.LegacyProduceFailureResultParameter FromFailureResultReply(PRISM.Module.Networking.IProduceFailureResultReply reply, System.Collections.Generic.IReadOnlyList<PRISM.ProduceIdolModel> produceIdolModels);
    public static PRISM.Produce.LegacyProduceFailureResultParameter FromFinishLesson(PRISM.Module.Networking.IFinishLessonReply reply);
    public static PRISM.Produce.LegacyProduceFailureResultParameter FromFinishSpecialLesson(PRISM.Module.Networking.IFinishSpecialLessonReply reply);
}

// Namespace: PRISM.Produce
public class ProduceMVPreloader
{
    public static Cysharp.Threading.Tasks.UniTask PreloadMVAsync(string sceneName, System.Func<bool> isPlayableIEF, System.Func<string, bool> isAddCSFromSceneName, ProduceParameterRank rank, PRISM.UnitIdol[] dressList, System.Func<string, bool> isAddCSFromID, int removingCSCount, System.Collections.Generic.IEnumerable<string> apiCsList, System.Threading.CancellationToken ct);
    public static System.Collections.Generic.Dictionary<string, string> CreateCutSceneList(CutSceneData[] mvCutSceneDataArray, System.Func<string, bool> isAddCSFromSceneName, System.Func<bool> isPlayableIEF, ProduceParameterRank rank, System.Collections.Generic.IEnumerable<string> apiCsList);
    private static string _selectCutScene(string category, System.Collections.Generic.IEnumerable<string> cutScenes, System.Collections.Generic.IEnumerable<string> exceptList, ProduceParameterRank rank, System.Collections.Generic.IEnumerable<string> apiCsList);
    private static void _setCutSceneListByApi(System.Collections.Generic.IEnumerable<string> apiCsList, string sceneName);
    private static int <_setCutSceneListByApi>g__IndexOf|3_2(System.Collections.Generic.IReadOnlyList<int> list, int value);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<System.Collections.Generic.KeyValuePair<string, string>, bool> <>9__0_0;
        public static System.Func<System.ValueTuple<string, string, int>, string> <>9__1_1;
        public static System.Func<string, PRISM.Produce.MvCutSceneID> <>9__2_1;
        public static System.Func<PRISM.Produce.MvCutSceneID, bool> <>9__2_2;
        public static System.Func<PRISM.Produce.MvCutSceneID, string> <>9__2_3;
        public static System.Func<PRISM.Produce.MvCutSceneID, int> <>9__2_4;
        public static System.Func<PRISM.Produce.MvCutSceneID, System.Guid> <>9__2_5;
        public static System.Predicate<PRISM.Produce.MvCutSceneID> <>9__2_6;
        public static System.Func<PRISM.Produce.MvCutSceneID, bool> <>9__2_7;
        public static System.Func<string, PRISM.Produce.MvCutSceneID> <>9__2_9;
        public static System.Func<string, PRISM.Produce.MvCutSceneID> <>9__2_14;
        public static System.Func<PRISM.Produce.MvCutSceneID, int> <>9__2_16;
        public static System.Func<string, PRISM.Produce.MvCutSceneID> <>9__2_11;
        public static System.Func<string, PRISM.Produce.MvCutSceneID> <>9__2_20;
        public static System.Func<PRISM.Produce.MvCutSceneID, int> <>9__2_22;
        public static System.Func<PRISM.Produce.MvCutSceneID, System.Guid> <>9__2_13;
        public static System.Func<PRISM.Definitions.MstProduceUniqueCutScene, string> <>9__3_0;
        public static System.Func<string, bool> <>9__3_3;
        public static System.Func<string, bool> <>9__3_4;
        public static System.Func<int, int, bool> <>9__3_5;
        private bool <PreloadMVAsync>b__0_0(System.Collections.Generic.KeyValuePair<string, string> x);
        private string <CreateCutSceneList>b__1_1(System.ValueTuple<string, string, int> x);
        private PRISM.Produce.MvCutSceneID <_selectCutScene>b__2_1(string x);
        private bool <_selectCutScene>b__2_2(PRISM.Produce.MvCutSceneID x);
        private string <_selectCutScene>b__2_3(PRISM.Produce.MvCutSceneID x);
        private int <_selectCutScene>b__2_4(PRISM.Produce.MvCutSceneID x);
        private System.Guid <_selectCutScene>b__2_5(PRISM.Produce.MvCutSceneID x);
        private bool <_selectCutScene>b__2_6(PRISM.Produce.MvCutSceneID x);
        private bool <_selectCutScene>b__2_7(PRISM.Produce.MvCutSceneID x);
        private PRISM.Produce.MvCutSceneID <_selectCutScene>b__2_9(string x);
        private PRISM.Produce.MvCutSceneID <_selectCutScene>b__2_14(string x);
        private int <_selectCutScene>b__2_16(PRISM.Produce.MvCutSceneID x);
        private PRISM.Produce.MvCutSceneID <_selectCutScene>b__2_11(string x);
        private PRISM.Produce.MvCutSceneID <_selectCutScene>b__2_20(string x);
        private int <_selectCutScene>b__2_22(PRISM.Produce.MvCutSceneID x);
        private System.Guid <_selectCutScene>b__2_13(PRISM.Produce.MvCutSceneID x);
        private string <_setCutSceneListByApi>b__3_0(PRISM.Definitions.MstProduceUniqueCutScene x);
        private bool <_setCutSceneListByApi>b__3_3(string x);
        private bool <_setCutSceneListByApi>b__3_4(string x);
        private bool <_setCutSceneListByApi>b__3_5(int a, int b);
    }

    private class <>c__DisplayClass1_0
    {
        public System.Func<string, bool> isAddCSFromSceneName;
        public System.Func<string, bool> <>9__0;
        private bool <CreateCutSceneList>b__0(string x);
    }

    private class <>c__DisplayClass2_0
    {
        public System.Collections.Generic.IEnumerable<string> exceptList;
        public PRISM.Produce.MvCutSceneID result;
        private bool <_selectCutScene>b__0(string x);
        private bool <_selectCutScene>b__8(PRISM.Produce.MvCutSceneID x);
        private bool <_selectCutScene>b__10(PRISM.Produce.MvCutSceneID x);
        private bool <_selectCutScene>b__15(PRISM.Produce.MvCutSceneID x);
        private bool <_selectCutScene>b__12(PRISM.Produce.MvCutSceneID x);
        private bool <_selectCutScene>b__21(PRISM.Produce.MvCutSceneID x);
    }

    private class <>c__DisplayClass2_1
    {
        public int maxTiming;
        private bool <_selectCutScene>b__17(PRISM.Produce.MvCutSceneID x);
        private bool <_selectCutScene>b__18(PRISM.Produce.MvCutSceneID x);
        private bool <_selectCutScene>b__19(PRISM.Produce.MvCutSceneID x);
    }

    private class <>c__DisplayClass2_2
    {
        public int minTiming;
        private bool <_selectCutScene>b__23(PRISM.Produce.MvCutSceneID x);
    }

    private class <>c__DisplayClass3_0
    {
        public string sceneName;
        private bool <_setCutSceneListByApi>b__1(string x);
    }

    private struct <PreloadMVAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Threading.CancellationToken ct;
        public string sceneName;
        public System.Collections.Generic.IEnumerable<string> apiCsList;
        public System.Func<string, bool> isAddCSFromSceneName;
        public System.Func<bool> isPlayableIEF;
        public ProduceParameterRank rank;
        public int removingCSCount;
        public PRISM.UnitIdol[] dressList;
        private Awaiter <>u__1;
        private AsyncOperationAwaiter <>u__2;
        private Awaiter<SequenceData> <>u__3;
        private Awaiter<PRISM.UnitIdol[]> <>u__4;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class MvCutSceneID
{
    public string Id;
    public int Timing;
    public string CsType;
    public int CharaId;
    private string baseString;
    public static PRISM.Produce.MvCutSceneID Create(string mvCutSceneName);
    public string ToString();
}

// Namespace: PRISM.Produce
public class ViewProduceMvDebug : ENTERPRISE.ViewBase
{
    private static string MvNameFormat;
    private PRISM.SceneLoader sceneLoader;
    private PRISM.MvSequencer mvSequencer;
    private System.Threading.CancellationTokenSource cs;
    private string[] csNameList;
    private int episodeId;
    private PRISM.GameMode lastGameMode;
    private System.IDisposable backgroundSuppressDisposable;
    private bool isExitSequence;
    private string mvSequencerScene;
    private UnityEngine.UI.RawImage image;
    private ENTERPRISE.UI.UIButton skipButton;
    private int imageSwappingMillisec;
    private PRISM.ITutorialSequence tutorialSequence;
    private Parameter prm;
    protected Cysharp.Threading.Tasks.UniTask _beginViewAsync();
    protected Cysharp.Threading.Tasks.UniTask _initializeAsync();
    protected Cysharp.Threading.Tasks.UniTask _terminateAsync();
    private void Update();
    public Cysharp.Threading.Tasks.UniTask ReleaseMvAsync();
    private Cysharp.Threading.Tasks.UniTask _beginShowingStageImages(System.Threading.CancellationToken token);
    private Cysharp.Threading.Tasks.UniTask _showStageImages(UnityEngine.Texture[] images, System.Threading.CancellationToken token);
    private Cysharp.Threading.Tasks.UniTask _loadScene(System.Threading.CancellationToken token);
    private void <_initializeAsync>b__17_0();
    private void <_initializeAsync>b__17_1(bool result);
    private bool <_loadScene>b__23_1();

    public class Parameter : ENTERPRISE.IViewParameter
    {
        public bool IsAREffect;
        public bool IsSkipConfirm;
        public bool IsDebug;
        public bool debugNoImage;
        public int UnitId;
        public int EpisodeID;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<bool> <>9__23_0;
        private bool <_loadScene>b__23_0();
    }

    private struct <ReleaseMvAsync>d__20 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewProduceMvDebug <>4__this;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_beginShowingStageImages>d__21 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewProduceMvDebug <>4__this;
        public System.Threading.CancellationToken token;
        private System.Collections.Generic.List<UnityEngine.Texture> <textures>5__2;
        private PRISM.ResourceManagement.IResourceLoader <resourceLoader>5__3;
        private string[] <>7__wrap3;
        private int <>7__wrap4;
        private System.Collections.Generic.List<UnityEngine.Texture> <>7__wrap5;
        private Awaiter<UnityEngine.Texture> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_initializeAsync>d__17 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewProduceMvDebug <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_loadScene>d__23 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Threading.CancellationToken token;
        public PRISM.Produce.ViewProduceMvDebug <>4__this;
        private Awaiter <>u__1;
        private AsyncOperationAwaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_showStageImages>d__22 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public UnityEngine.Texture[] images;
        public PRISM.Produce.ViewProduceMvDebug <>4__this;
        public System.Threading.CancellationToken token;
        private int <current>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_terminateAsync>d__18 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewProduceMvDebug <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public interface IProduceResultConnector
{
}

// Namespace: PRISM.Produce
public interface ISpecialLessonResultConnector
{
}

// Namespace: PRISM.Produce
public class LegacySpecialLessonResultParameter : ENTERPRISE.IViewParameter
{
    public PRISM.Module.Networking.IFinishSpecialLessonReply Reply;
    public System.Collections.Generic.IReadOnlyList<PRISM.ProduceIdolModel> ProduceIdolModels;
}

// Namespace: PRISM.Produce
public class AppealEffectConditionParam
{
    private System.Collections.Generic.List<ProduceParameterType> parameterTypes;
    private PRISM.Produce.IngamePlayerModel executor;
    private PRISM.Produce.IngamePlayerModel opponent;
    private CostType <CardCostType>k__BackingField;
    private bool <IsDoubleCard>k__BackingField;
    private int <CardRank>k__BackingField;
    private bool <IsExclusion>k__BackingField;
    private bool <IsIdolSkill>k__BackingField;
    private bool <IsUseParameterType>k__BackingField;
    public System.Collections.Generic.IReadOnlyList<ProduceParameterType> ParameterTypes { get; set; }
    public float MentalPercent { get; set; }
    public int AvoidRate { get; set; }
    public int HandCount { get; set; }
    public int MaxHandCount { get; set; }
    public bool IsMentalBreakOpponent { get; set; }
    public int TotalUseCardCount { get; set; }
    public int TotalUseAppealCardCount { get; set; }
    public System.Collections.Generic.IReadOnlyDictionary<ProduceParameterType, int> ParameterTypeUseCardCount { get; set; }
    public System.Collections.Generic.IReadOnlyDictionary<ProduceParameterType, int> ParameterTypeUseAppelCardCount { get; set; }
    public int MyMental { get; set; }
    public int OpponentMental { get; set; }
    public CostType CardCostType { get; set; }
    public int InitialDeckCount { get; set; }
    public int DeckDataListNum { get; set; }
    public System.Func<int, bool> IsPhaseMatch { get; set; }
    public int ExclusionCardNum { get; set; }
    public bool IsDoubleCard { get; set; }
    public int CardRank { get; set; }
    public bool IsExclusion { get; set; }
    public bool IsIdolSkill { get; set; }
    public bool IsUseParameterType { get; set; }
    public void SetParameter(System.Collections.Generic.IReadOnlyList<ProduceParameterType> parameterTypes, PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngamePlayerModel opponent, CostType cardCostType, bool isDoubleCard, int cardRank, bool isExclusion, bool isIdolSkill, bool isUseParameterType);
    public void SetParameter(ProduceParameterType parameterType, PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngamePlayerModel opponent, CostType cardCostType, bool isDoubleCard, int cardRank, bool isExclusion, bool isIdolSkill, bool isUseParameterType);
    private void _setParameter(PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngamePlayerModel opponent, CostType cardCostType, bool isDoubleCard, int cardRank, bool isExclusion, bool isIdolSkill, bool isUseParameterType);
}

// Namespace: PRISM.Produce
public class EffectComparer : System.Collections.Generic.IComparer<PRISM.Produce.ProduceInGameEffectType>
{
    public static PRISM.Produce.EffectComparer Instance;
    public int Compare(PRISM.Produce.ProduceInGameEffectType x, PRISM.Produce.ProduceInGameEffectType y);
}

// Namespace: PRISM.Produce
public class LessonPresenter : PRISM.Produce.BasePresenter
{
    private PRISM.Produce.LessonPanel lessonPanel;
    private PRISM.Produce.LessonModel lessonModel;
    private PRISM.Produce.LessonViewModel lessonViewModel;
    private PRISM.LiveScene liveScene;
    protected PRISM.Produce.ChallengeMissionViewModel ChallengeMissionViewModel { get; set; }
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(System.Threading.CancellationToken ct);
    public System.ValueTuple<string, string> GetLessonBGMCueInfo(InGameType inGameType);
    private void _initializeAppealPointMilestone();
    private void _resetLiveScene();
    private bool <InitializeAsync>b__7_2(float sec);

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<GameEndStatus, PRISM.Produce.LessonPresenter> <>9__7_0;
        public static System.Action<UniRx.Unit, System.ValueTuple<PRISM.Produce.LessonPresenter, string, string>> <>9__7_1;
        public static System.Action<int, PRISM.Produce.LessonPresenter> <>9__7_3;
        private void <InitializeAsync>b__7_0(GameEndStatus status, PRISM.Produce.LessonPresenter state);
        private void <InitializeAsync>b__7_1(UniRx.Unit _, System.ValueTuple<PRISM.Produce.LessonPresenter, string, string> state);
        private void <InitializeAsync>b__7_3(int flag, PRISM.Produce.LessonPresenter state);
    }

    private struct <InitializeAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.LessonPresenter <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ListWithKey`2<TKey, TValue>
{
    private System.Collections.Generic.List<TValue> values;
    private System.Func<TValue, TKey> keyFinder;
    private System.Collections.Generic.IComparer<TKey> comparer;
    public System.Collections.Generic.IReadOnlyList<TValue> Values { get; set; }
    public int Count { get; set; }
    public TValue Item { get; set; }
    public void Add(TValue value);
    public bool Remove(TValue value);
    public void RemoveAt(int index);
    public int RemoveRange(System.Collections.Generic.IReadOnlyList<TValue> targets);
    public int FindIndex(TValue value);
    public bool FindWithKey(System.Collections.Generic.List<TValue> result, TKey key);
    public void Clear();
    public int FindEstimateIndexWithKey(TKey key);
    public TKey KeyFromValue(TValue value);
}

// Namespace: PRISM.Produce
public class ListWithKey2`2<TKey, TValue>
{
    private System.Collections.Generic.List<TValue> values;
    private System.Collections.Generic.Dictionary<TKey, System.Collections.Generic.List<TValue>> keyValues;
    private System.Func<TValue, TKey> keyFinder;
    private UnityEngine.Pool.IObjectPool<System.Collections.Generic.List<TValue>> valueListPool;
    public System.Collections.Generic.IReadOnlyList<TValue> Values { get; set; }
    public int Count { get; set; }
    public TValue Item { get; set; }
    public void Add(TValue value);
    public bool Remove(TValue value);
    public int RemoveRange(System.Collections.Generic.IReadOnlyList<TValue> targets);
    public void Clear();
    public System.Collections.Generic.IReadOnlyList<TValue> ItemsWithKey(TKey key);
}

// Namespace: PRISM.Produce
public class ListWithKeyExtension
{
    public static KeyRange<TKey, TValue> GetKeyRange<TKey, TValue>(PRISM.Produce.ListWithKey<TKey, TValue> list, TKey key);
    public static bool AnyFromKey<TKey, TValue, TState>(PRISM.Produce.ListWithKey<TKey, TValue> list, TKey key, TState state, System.Func<TValue, TState, bool> predicate);

    public struct KeyRange`2<TKey, TValue> : System.ValueType, System.Collections.Generic.IReadOnlyList<TValue>, System.Collections.Generic.IEnumerable<TValue>, System.Collections.IEnumerable, System.Collections.Generic.IReadOnlyCollection<TValue>
    {
        private PRISM.Produce.ListWithKey<TKey, TValue> list;
        private int from;
        private int to;
        public int Count { get; set; }
        public TValue Item { get; set; }
        public System.Collections.Generic.IEnumerator<TValue> GetEnumerator();
        private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
    }
}

// Namespace: PRISM.Produce
public class ProduceInGameEffect
{
    private static int NotTimeLimitDuration;
    private float duration;
    private EffectDeleteType deleteType;
    private float elapsedTime;
    private int notDividedEffectValue;
    private string descriptionText;
    private bool hasDescriptionText;
    private System.Collections.Generic.List<System.IDisposable> terminateDisposer;
    private PRISM.Produce.ProduceInGameEffectType <Type>k__BackingField;
    private int <EffectJudgeValue>k__BackingField;
    private int <EffectSubJudgeValue>k__BackingField;
    private int <CardRank>k__BackingField;
    private int <BuffDebuffId>k__BackingField;
    private int <IconID>k__BackingField;
    private int <DisplayGroupID>k__BackingField;
    private int <TemporaryValue>k__BackingField;
    private PRISM.Module.Networking.ISkillBufferDisplayStatus <GrantSkillBufferDisplay>k__BackingField;
    private bool <IsExistTimeLimit>k__BackingField;
    private PRISM.Produce.IngameEffectCauseModel <Cause>k__BackingField;
    public PRISM.Produce.ProduceInGameEffectType Type { get; set; }
    public float Duration { get; set; }
    public float DurationForExplanation { get; set; }
    public int NotDividedDuration { get; set; }
    public int NotDividedEffectValue { get; set; }
    public int DividedEffectValue { get; set; }
    public float DividedEffectValueFloat { get; set; }
    public int EffectJudgeValue { get; set; }
    public int EffectSubJudgeValue { get; set; }
    public int CardRank { get; set; }
    public int BuffDebuffId { get; set; }
    public int IconID { get; set; }
    public int DisplayGroupID { get; set; }
    public int TemporaryValue { get; set; }
    public PRISM.Module.Networking.ISkillBufferDisplayStatus GrantSkillBufferDisplay { get; set; }
    public bool IsExistTimeLimit { get; set; }
    public PRISM.Produce.IngameEffectCauseModel Cause { get; set; }
    public EffectDeleteType DeleteType { get; set; }
    public string Name { get; set; }
    public string DescriptionBaseText { get; set; }
    public bool IsCostDownEffect { get; set; }
    public static PRISM.Produce.ProduceInGameEffect Construct(PRISM.Produce.ProduceInGameEffectType type, int duration, int effectValue, PRISM.Module.Networking.ISkillBufferDisplayStatus skillBufferDisplay, PRISM.Produce.IngameEffectCauseModel cause, int effectJudgeValue, EffectDeleteType deleteType, int tempoararyDisplayValue, PRISM.Module.Networking.ISkillBufferDisplayStatus grantSkillBufferDisplay, int cardRank, int effectSubJudgeValue);
    public static PRISM.Produce.ProduceInGameEffect Construct(PRISM.Produce.ProduceInGameEffectType type, int effectValue, PRISM.Module.Networking.ISkillBufferDisplayStatus skillBufferDisplay, PRISM.Produce.IngameEffectCauseModel cause, int effectJudgeValue, EffectDeleteType deleteType, int tempoararyDisplayValue, PRISM.Module.Networking.ISkillBufferDisplayStatus grantSkillBufferDisplay, int cardRank, int effectSubJudgeValue);
    public static PRISM.Produce.ProduceInGameEffect Construct(PRISM.Produce.ProduceInGameEffectType type, PRISM.Module.Networking.ISkillBufferDisplayStatus skillBufferDisplay, PRISM.Produce.IngameEffectCauseModel cause, int effectJudgeValue, int tempoararyDisplayValue, PRISM.Module.Networking.ISkillBufferDisplayStatus grantSkillBufferDisplay, int cardRank, int effectSubJudgeValue);
    public static PRISM.Produce.ProduceInGameEffect Construct(PRISM.Produce.ProduceInGameEffect effect);
    public void ResetElapsedTime();
    public void UpdateDuration(float sec);
    public void AddPowerRate(int rate);
    public bool IsAvoidTriggerEffect();
    public bool IsAvoidTrggerNotDeleteByAvoidEffect();
    public bool IsDebuffAppeal();
    public bool IsDebuffEffect();
    public bool IsAppealConditionMatch(PRISM.Produce.AppealEffectConditionParam conditionParam);
    public bool IsIncreaseCostConditionMatch();
    public bool IsMentalDamegeConditionMatch(bool isPinch, bool isSelf);
    public bool IsDecreaseCostConditionMatch(ProduceParameterType parameterType);
    public bool IsPPSpeedRateConditionMatch(float mentalPercent, int currentMental, int opponentCurrentMental, PRISM.Produce.IngamePhaseModel phaseModel);
    public bool IsOverwriteCost0ConditionMatch(ProduceParameterType parameterType);
    public bool IsDecreaseIdolSkillCostConditionMatch(int useSkillCount);
    public bool IsUseSkillCardEveryCountConditionMatch(int useCardCount);
    public bool IsIgnoreMentalDamageMatch(bool isSelfDamage);
    public bool IsElapsedTimeConfitionMatch(float elapsedTime);
    public bool IsDeleteDamageCountConfitionMatch(int damageCount);
    public bool IsDeleteOpponentDamageCountConfitionMatch(int damageCount);
    public void Terminate();
    public void AddDisposableForTermination(System.IDisposable disposable);
    public static PRISM.Produce.ProduceInGameEffect Instantiate();
    public static int AppealNotDividedEffectValueFormula(PRISM.Produce.ProduceInGameEffect effect, PRISM.Produce.AppealEffectConditionParam conditionParam);
    private void _constructMembers();
    private bool _isAppealConditionMatch(ProduceParameterType parameterType, PRISM.Produce.AppealEffectConditionParam conditionParam);
}

// Namespace: PRISM.Produce
public class ProduceInGameEffectGroup
{
    private PRISM.Produce.ListWithKey<PRISM.Produce.ProduceInGameEffectType, PRISM.Produce.ProduceInGameEffect> effects;
    private PRISM.Produce.ProduceInGameEffect displayEffect;
    private int <GroupID>k__BackingField;
    public System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffect> Effects { get; set; }
    public int IconID { get; set; }
    public string Name { get; set; }
    public string Description { get; set; }
    public PRISM.Module.Networking.ISkillBufferDisplayStatus GrantSkillBufferDisplay { get; set; }
    public float Duaration { get; set; }
    public int GroupID { get; set; }
    public static PRISM.Produce.ProduceInGameEffectGroup Instantiate();
    public static PRISM.Produce.ProduceInGameEffectGroup Construct(int groupID);
    public void GetEffectsOfType(System.Collections.Generic.List<PRISM.Produce.ProduceInGameEffect> result, PRISM.Produce.ProduceInGameEffectType type);
    public bool HasEffectOfType(PRISM.Produce.ProduceInGameEffectType type);
    public void AddEffect(PRISM.Produce.ProduceInGameEffect effect);
    public int ClearAllEffects(System.Collections.Generic.List<PRISM.Produce.ProduceInGameEffect> clearedEffects);
    public int ClearEffectWithState<TState>(TState state, System.Func<PRISM.Produce.ProduceInGameEffect, TState, bool> isMatch, System.Collections.Generic.List<PRISM.Produce.ProduceInGameEffect> clearedEffects);
    private void _clearEffectsInRange(System.Span<int>& targetIndices, int count, bool sortBeforeRemove);
    public int UpdateEffectState(float sec, System.Collections.Generic.List<PRISM.Produce.ProduceInGameEffect> clearedEffects);
    private void _updateDisplayEffect();
    private string _getDescription();
    private static int _descriptionEffectValueFormula(PRISM.Produce.ProduceInGameEffect effect, int _);

    private class <>O
    {
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, int> <0>___descriptionEffectValueFormula;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.ProduceInGameEffectType> <>9__27_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.ProduceInGameEffectType, bool> <>9__29_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.ProduceInGameEffectType, bool> <>9__29_1;
        private PRISM.Produce.ProduceInGameEffectType <.ctor>b__27_0(PRISM.Produce.ProduceInGameEffect effect);
        private bool <_getDescription>b__29_0(PRISM.Produce.ProduceInGameEffect e, PRISM.Produce.ProduceInGameEffectType type);
        private bool <_getDescription>b__29_1(PRISM.Produce.ProduceInGameEffect e, PRISM.Produce.ProduceInGameEffectType type);
    }
}

// Namespace: PRISM.Produce
public class ProduceInGameEffectListExtension
{
    public static int GetNotDividedEffectValueSum<TList>(TList list);
    public static int GetNotDividedEffectValueSumWithState<TList, TState>(TList list, TState state, System.Func<PRISM.Produce.ProduceInGameEffect, TState, bool> isMatch, System.Func<PRISM.Produce.ProduceInGameEffect, TState, int> notDividedEffectValueFormula);
    public static int GetNotDividedTemporaryValueSum<TList>(TList list);
    public static int GetNotDividedTemporaryValueSumWithState<TList, TState>(TList list, TState state, System.Func<PRISM.Produce.ProduceInGameEffect, TState, bool> isMatch);
    public static int GetEffectValueSumWithState<TList, TState>(TList list, TState state, System.Func<PRISM.Produce.ProduceInGameEffect, TState, bool> isMatch, System.Func<PRISM.Produce.ProduceInGameEffect, TState, int> notDividedEffectValueFormula);
    public static int GetDividedEffectValueSumWithState<TList, TState>(TList list, TState state, System.Func<PRISM.Produce.ProduceInGameEffect, TState, bool> isMatch, System.Func<PRISM.Produce.ProduceInGameEffect, TState, int> notDividedEffectValueFormula);
    public static float GetDividedEffectValueSumFloatWithState<TList, TState>(TList list, TState state, System.Func<PRISM.Produce.ProduceInGameEffect, TState, bool> isMatch, System.Func<PRISM.Produce.ProduceInGameEffect, TState, int> notDividedEffectValueFormula);
    public static float GetDividedTemporaryValueSumFloatWithState<TList, TState>(TList list, TState state, System.Func<PRISM.Produce.ProduceInGameEffect, TState, bool> isMatch);
    public static TResult GetEffectCalculateResult<TList, TResult, TState>(TList list, TState state, TResult input, System.Func<PRISM.Produce.ProduceInGameEffect, TState, bool> isMatch, System.Func<PRISM.Produce.ProduceInGameEffect, TState, TResult, TResult> formula);
}

// Namespace: PRISM.Produce
public class ProduceInGameEffectManager
{
    private System.Collections.Generic.List<PRISM.Produce.ProduceInGameEffectGroup> effectGroups;
    private PRISM.Produce.ListWithKey<PRISM.Produce.ProduceInGameEffectType, PRISM.Produce.ProduceInGameEffect> effectsFromType;
    private UniRx.Subject<PRISM.Produce.ProduceInGameEffect> onAddEffect;
    private UniRx.Subject<PRISM.Produce.ProduceInGameEffect> onRemoveEffect;
    private UniRx.CompositeDisposable disposable;
    private UniRx.Subject<UniRx.Unit> onTimeUpdateRemoveEffect;
    private UniRx.Subject<System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffectGroup>> onUpdateEffectGroup;
    private UniRx.Subject<System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffectGroup>> onUpdateEffectGroupDuration;
    public System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffectGroup> EffectGroups { get; set; }
    public System.IObservable<PRISM.Produce.ProduceInGameEffect> OnAddEffect { get; set; }
    public System.IObservable<PRISM.Produce.ProduceInGameEffect> OnRemoveEffect { get; set; }
    public System.IObservable<UniRx.Unit> OnTimeUpdateRemoveEffect { get; set; }
    public System.IObservable<System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffectGroup>> OnUpdateEffectGroup { get; set; }
    public System.IObservable<System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffectGroup>> OnUpdateEffectGroupDuration { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffect> AllEffects { get; set; }
    public void Reset();
    public void Copy(PRISM.Produce.ProduceInGameEffectManager effManager);
    public void Terminate();
    public void AddEffect(PRISM.Produce.ProduceInGameEffect effect);
    public PRISM.Produce.ProduceInGameEffectGroup GetEffectGroup(PRISM.Produce.ProduceInGameEffectType effectType);
    public PRISM.Produce.ProduceInGameEffectGroup GetEffectGroup(System.Func<PRISM.Produce.ProduceInGameEffect, bool> isMatch);
    public void GetEffectsOfType(System.Collections.Generic.List<PRISM.Produce.ProduceInGameEffect> result, PRISM.Produce.ProduceInGameEffectType type);
    public bool EffectsAny<TState>(PRISM.Produce.ProduceInGameEffectType type, TState state, System.Func<PRISM.Produce.ProduceInGameEffect, TState, bool> predicate);
    public int GetAppealEffectValue(int baseAppeal, ProduceParameterType parameterType, PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngamePlayerModel opponent, CostType cardCostType, bool isDoubleCard, int cardRank, bool isExclusion, bool isIdolSkill, bool isUseParameterType);
    public int GetAppealEffectValue(int baseAppeal, System.Collections.Generic.IReadOnlyList<ProduceParameterType> parameterTypes, PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngamePlayerModel opponent, CostType cardCostType, bool isDoubleCard, int cardRank, bool isExclusion, bool isIdolSkill, bool isUseParameterType);
    public int GetEffectMultiplyValue<TState>(int baseValue, TState state, System.Func<PRISM.Produce.ProduceInGameEffect, TState, bool> isMatch, System.Func<PRISM.Produce.ProduceInGameEffect, TState, int> notDividedEffectValueFormula);
    public int GetEffectMultiplyValueWithState<TState>(int baseValue, TState state, System.Func<PRISM.Produce.ProduceInGameEffect, TState, bool> isMatch, System.Func<PRISM.Produce.ProduceInGameEffect, TState, int> notDividedEffectValueFormula);
    public int GetEffectMultiplyValue(int baseValue, PRISM.Produce.ProduceInGameEffectType effectType);
    public int GetEffectMultiplyNotAddBaseValue(int baseValue, PRISM.Produce.ProduceInGameEffectType effectType);
    public float GetEffectMultiplyValueFloat<TState>(float baseValue, TState state, System.Func<PRISM.Produce.ProduceInGameEffect, TState, bool> isMatch, System.Func<PRISM.Produce.ProduceInGameEffect, TState, int> notDividedEffectValueFormula);
    public float GetEffectMultiplyValueFloatWithState<TState>(float baseValue, TState state, System.Func<PRISM.Produce.ProduceInGameEffect, TState, bool> isMatch, System.Func<PRISM.Produce.ProduceInGameEffect, TState, int> notDividedEffectValueFormula);
    public float GetEffectMultiplyValueFloat(float baseValue, PRISM.Produce.ProduceInGameEffectType effectType);
    public int GetEffectValueSum(System.Func<PRISM.Produce.ProduceInGameEffect, bool> isMatch);
    public float GetEffectValueSumFloat(System.Func<PRISM.Produce.ProduceInGameEffect, bool> isMatch);
    public int GetEffectValueSum(PRISM.Produce.ProduceInGameEffectType effectType);
    public int GetEffectValueSumWithState<TState>(TState state, System.Func<PRISM.Produce.ProduceInGameEffect, TState, bool> isMatch, System.Func<PRISM.Produce.ProduceInGameEffect, TState, int> notDividedEffectValueFormula);
    public int GetNotDividedEffectValueSum<TState>(TState state, System.Func<PRISM.Produce.ProduceInGameEffect, TState, bool> isMatch, System.Func<PRISM.Produce.ProduceInGameEffect, TState, int> notDividedEffectValueFormula);
    public int GetNotDividedEffectValueSum(PRISM.Produce.ProduceInGameEffectType effectType);
    public int GetNotDividedEffectValueSumWithState<TState>(TState state, System.Func<PRISM.Produce.ProduceInGameEffect, TState, bool> isMatch, System.Func<PRISM.Produce.ProduceInGameEffect, TState, int> notDividedEffectValueFormula);
    public TResult GetEffectCalculateResult<TResult>(TResult input, System.Func<PRISM.Produce.ProduceInGameEffect, int, bool> isMatch, System.Func<PRISM.Produce.ProduceInGameEffect, int, TResult, TResult> formula);
    public TResult GetEffectCalculateResult<TResult, TState>(TState state, TResult input, System.Func<PRISM.Produce.ProduceInGameEffect, TState, bool> isMatch, System.Func<PRISM.Produce.ProduceInGameEffect, TState, TResult, TResult> formula);
    public bool IsExistEffect(PRISM.Produce.ProduceInGameEffectType type);
    public bool IsExistEffect(System.Func<PRISM.Produce.ProduceInGameEffect, bool> isMatch);
    public bool IsExistEffectWithState<TState>(TState state, System.Func<PRISM.Produce.ProduceInGameEffect, TState, bool> isMatch);
    public int GetEffectCount(System.Func<PRISM.Produce.ProduceInGameEffect, bool> isMatch);
    public void ClearAllEffects();
    public void ClearEffect(PRISM.Produce.ProduceInGameEffectType type);
    public void ClearEffect(System.Func<PRISM.Produce.ProduceInGameEffect, bool> isMatch);
    public void ClearEffectWithState<TState>(TState state, System.Func<PRISM.Produce.ProduceInGameEffect, TState, bool> isMatch);
    public void UpdateEffectState(float sec);
    private static int _getEffectMultiplyValue(int baseValue, int factor);
    private static int _getEffectMultiplyNotAddBaseValue(int baseValue, int factor);
    private static float _getEffectMultiplyValueFloat(float baseValue, float factor);
    private int _releaseEmptyEffectGroup();
    private PRISM.Produce.ProduceInGameEffectGroup _getGroup(int groupID);
    private int _releaseGroup(PRISM.Produce.ProduceInGameEffectGroup group);
    private int _removeAllEffectCache();
    private int _removeEffectCache(System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffect> removeList);
    private void _releaseEffects(System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffect> effects);
    public static int DefaultNotDividedEffectValueFormula<TState>(PRISM.Produce.ProduceInGameEffect effect, TState _);

    private class <>O
    {
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.AppealEffectConditionParam, int> <0>__AppealNotDividedEffectValueFormula;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, System.Func<PRISM.Produce.ProduceInGameEffect, bool>, int> <1>__DefaultNotDividedEffectValueFormula;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, int, int> <2>__DefaultNotDividedEffectValueFormula;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Produce.ProduceInGameEffectGroup, PRISM.Produce.ProduceInGameEffectType, bool> <>9__26_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, System.Func<PRISM.Produce.ProduceInGameEffect, bool>, bool> <>9__27_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.AppealEffectConditionParam, bool> <>9__30_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.AppealEffectConditionParam, bool> <>9__31_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, System.Func<PRISM.Produce.ProduceInGameEffect, bool>, bool> <>9__39_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, System.Func<PRISM.Produce.ProduceInGameEffect, bool>, bool> <>9__40_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, System.Func<PRISM.Produce.ProduceInGameEffect, bool>, bool> <>9__49_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, System.Func<PRISM.Produce.ProduceInGameEffect, bool>, bool> <>9__51_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.ProduceInGameEffectType, bool> <>9__53_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, System.Func<PRISM.Produce.ProduceInGameEffect, bool>, bool> <>9__54_0;
        public static System.Func<PRISM.Produce.ProduceInGameEffect, PRISM.Produce.ProduceInGameEffectType> <>9__67_0;
        private bool <GetEffectGroup>b__26_0(PRISM.Produce.ProduceInGameEffectGroup group, PRISM.Produce.ProduceInGameEffectType type);
        private bool <GetEffectGroup>b__27_0(PRISM.Produce.ProduceInGameEffect effect, System.Func<PRISM.Produce.ProduceInGameEffect, bool> predicate);
        private bool <GetAppealEffectValue>b__30_0(PRISM.Produce.ProduceInGameEffect e, PRISM.Produce.AppealEffectConditionParam state);
        private bool <GetAppealEffectValue>b__31_0(PRISM.Produce.ProduceInGameEffect e, PRISM.Produce.AppealEffectConditionParam state);
        private bool <GetEffectValueSum>b__39_0(PRISM.Produce.ProduceInGameEffect effect, System.Func<PRISM.Produce.ProduceInGameEffect, bool> predicate);
        private bool <GetEffectValueSumFloat>b__40_0(PRISM.Produce.ProduceInGameEffect effect, System.Func<PRISM.Produce.ProduceInGameEffect, bool> predicate);
        private bool <IsExistEffect>b__49_0(PRISM.Produce.ProduceInGameEffect effect, System.Func<PRISM.Produce.ProduceInGameEffect, bool> match);
        private bool <GetEffectCount>b__51_0(PRISM.Produce.ProduceInGameEffect effect, System.Func<PRISM.Produce.ProduceInGameEffect, bool> match);
        private bool <ClearEffect>b__53_0(PRISM.Produce.ProduceInGameEffect e, PRISM.Produce.ProduceInGameEffectType state);
        private bool <ClearEffect>b__54_0(PRISM.Produce.ProduceInGameEffect effect, System.Func<PRISM.Produce.ProduceInGameEffect, bool> predicate);
        private PRISM.Produce.ProduceInGameEffectType <.ctor>b__67_0(PRISM.Produce.ProduceInGameEffect effect);
    }
}

// Namespace: PRISM.Produce
public enum ProduceInGameEffectType : System.Enum
{
    public int value__;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointRate;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointRateWhenMatchParameterType;
    public static PRISM.Produce.ProduceInGameEffectType AvoidGetAppealPointRate;
    public static PRISM.Produce.ProduceInGameEffectType AvoidGetMentalRecovery;
    public static PRISM.Produce.ProduceInGameEffectType AvoidGetMentalRecoveryRate;
    public static PRISM.Produce.ProduceInGameEffectType SkillPowerUpWhenAvoid;
    public static PRISM.Produce.ProduceInGameEffectType SwapPPCard;
    public static PRISM.Produce.ProduceInGameEffectType AvoidGetMentalGuard;
    public static PRISM.Produce.ProduceInGameEffectType VocalGetAppealPointRate;
    public static PRISM.Produce.ProduceInGameEffectType DanceGetAppealPointRate;
    public static PRISM.Produce.ProduceInGameEffectType VisualGetAppealPointRate;
    public static PRISM.Produce.ProduceInGameEffectType MeDamageRate;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointRateOnce;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointVoRateOnce;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointDaRateOnce;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointViRateOnce;
    public static PRISM.Produce.ProduceInGameEffectType AppealAddPPOnce;
    public static PRISM.Produce.ProduceInGameEffectType IsPinchEffect;
    public static PRISM.Produce.ProduceInGameEffectType IncreaseCost;
    public static PRISM.Produce.ProduceInGameEffectType DecreaseCostVoOnce;
    public static PRISM.Produce.ProduceInGameEffectType DecreaseCostDaOnce;
    public static PRISM.Produce.ProduceInGameEffectType DecreaseCostViOnce;
    public static PRISM.Produce.ProduceInGameEffectType DecreaseCost;
    public static PRISM.Produce.ProduceInGameEffectType DecreaseCostSefeOne;
    public static PRISM.Produce.ProduceInGameEffectType DecreaseCostVo;
    public static PRISM.Produce.ProduceInGameEffectType DecreaseCostDa;
    public static PRISM.Produce.ProduceInGameEffectType DecreaseCostVi;
    public static PRISM.Produce.ProduceInGameEffectType OverwriteCost0VoOnce;
    public static PRISM.Produce.ProduceInGameEffectType OverwriteCost0ViOnce;
    public static PRISM.Produce.ProduceInGameEffectType OverwriteCost0DaOnce;
    public static PRISM.Produce.ProduceInGameEffectType OverwriteCardCostVoWhenCostMin;
    public static PRISM.Produce.ProduceInGameEffectType OverwriteCardCostDaWhenCostMin;
    public static PRISM.Produce.ProduceInGameEffectType OverwriteCardCostViWhenCostMin;
    public static PRISM.Produce.ProduceInGameEffectType SubCardCostWhenCostOver;
    public static PRISM.Produce.ProduceInGameEffectType UnUseCostUnder;
    public static PRISM.Produce.ProduceInGameEffectType UnUseCostOver;
    public static PRISM.Produce.ProduceInGameEffectType NextCardAndSkillCostAddOnce;
    public static PRISM.Produce.ProduceInGameEffectType IdolSkillCostDown;
    public static PRISM.Produce.ProduceInGameEffectType CardVoCostOffset;
    public static PRISM.Produce.ProduceInGameEffectType CardDaCostOffset;
    public static PRISM.Produce.ProduceInGameEffectType CardViCostOffset;
    public static PRISM.Produce.ProduceInGameEffectType NotDamgeAndDecrementAppealWhenMentalBreakDamage;
    public static PRISM.Produce.ProduceInGameEffectType UnUseIdolSkill;
    public static PRISM.Produce.ProduceInGameEffectType AddDanceAndVisualHalfToVocal;
    public static PRISM.Produce.ProduceInGameEffectType AddVocalAndVisualHalfToDance;
    public static PRISM.Produce.ProduceInGameEffectType AddVocalAndDanceHalfToVisual;
    public static PRISM.Produce.ProduceInGameEffectType IdolStatusZero;
    public static PRISM.Produce.ProduceInGameEffectType GetPPWhenDamage;
    public static PRISM.Produce.ProduceInGameEffectType GetPPWhenAttackedDamage;
    public static PRISM.Produce.ProduceInGameEffectType GetPPWhenSelfDamage;
    public static PRISM.Produce.ProduceInGameEffectType DamageWhenGetPP;
    public static PRISM.Produce.ProduceInGameEffectType DamageRateWhenGetPP;
    public static PRISM.Produce.ProduceInGameEffectType PPRecoverySpeedRate;
    public static PRISM.Produce.ProduceInGameEffectType PPRecoverySpeedRateWhenNichikaPhase;
    public static PRISM.Produce.ProduceInGameEffectType PPRecoverySpeedRateWhenMikotoPhase;
    public static PRISM.Produce.ProduceInGameEffectType UnitVocalRate;
    public static PRISM.Produce.ProduceInGameEffectType UnitDanceRate;
    public static PRISM.Produce.ProduceInGameEffectType UnitVisualRate;
    public static PRISM.Produce.ProduceInGameEffectType UnitMemberVocalRate;
    public static PRISM.Produce.ProduceInGameEffectType UnitMemberDanceRate;
    public static PRISM.Produce.ProduceInGameEffectType UnitMemberVisualRate;
    public static PRISM.Produce.ProduceInGameEffectType UnitMemberVocalRateWhenMentalHighOpponent;
    public static PRISM.Produce.ProduceInGameEffectType UnitMemberDanceRateWhenMentalHighOpponent;
    public static PRISM.Produce.ProduceInGameEffectType UnitMemberVisualRateWhenMentalHighOpponent;
    public static PRISM.Produce.ProduceInGameEffectType UnitMemberVocalRateWhenMentalGuardHighOpponent;
    public static PRISM.Produce.ProduceInGameEffectType UnitMemberDanceRateWhenMentalGuardHighOpponent;
    public static PRISM.Produce.ProduceInGameEffectType UnitMemberVisualRateWhenMentalGuardHighOpponent;
    public static PRISM.Produce.ProduceInGameEffectType UnitMemberVocalRateWhenMentalLowOpponent;
    public static PRISM.Produce.ProduceInGameEffectType UnitMemberDanceRateWhenMentalLowOpponent;
    public static PRISM.Produce.ProduceInGameEffectType UnitMemberVisualRateWhenMentalLowOpponent;
    public static PRISM.Produce.ProduceInGameEffectType UnitMemberVocalRateWithCardNum;
    public static PRISM.Produce.ProduceInGameEffectType UnitMemberDanceRateWithCardNum;
    public static PRISM.Produce.ProduceInGameEffectType UnitMemberVisualRateWithCardNum;
    public static PRISM.Produce.ProduceInGameEffectType UnitMemberVocalAdd;
    public static PRISM.Produce.ProduceInGameEffectType UnitMemberDanceAdd;
    public static PRISM.Produce.ProduceInGameEffectType UnitMemberVisualAdd;
    public static PRISM.Produce.ProduceInGameEffectType DecrementMaxPP;
    public static PRISM.Produce.ProduceInGameEffectType IncrementMaxPP;
    public static PRISM.Produce.ProduceInGameEffectType AvoidGetAppealPointRateVo;
    public static PRISM.Produce.ProduceInGameEffectType AvoidGetAppealPointRateDa;
    public static PRISM.Produce.ProduceInGameEffectType AvoidGetAppealPointRateVi;
    public static PRISM.Produce.ProduceInGameEffectType AvoidDraw;
    public static PRISM.Produce.ProduceInGameEffectType AddApealUpBuffWhenAvoid;
    public static PRISM.Produce.ProduceInGameEffectType PPRecoverWhenUseVoCost0;
    public static PRISM.Produce.ProduceInGameEffectType PPRecoverWhenUseDaCost0;
    public static PRISM.Produce.ProduceInGameEffectType PPRecoverWhenUseViCost0;
    public static PRISM.Produce.ProduceInGameEffectType OpponentMentalDamageWhenSafeSelfDamage;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointVoRateWhenMentalUnderPercent;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointDaRateWhenMentalUnderPercent;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointViRateWhenMentalUnderPercent;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointRateWhenUseDoubleCard;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointVoRateWhenMentalLowOpponent;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointDaRateWhenMentalLowOpponent;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointViRateWhenMentalLowOpponent;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointVoRateWhenMentalHighOpponent;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointDaRateWhenMentalHighOpponent;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointViRateWhenMentalHighOpponent;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointVoRateWhenMentalBreakOpponent;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointDaRateWhenMentalBreakOpponent;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointViRateWhenMentalBreakOpponent;
    public static PRISM.Produce.ProduceInGameEffectType RecoverMentalBreakRate;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointRateWhenAvoidOverPercent;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointVoRateWhenAvoidOverPercent;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointDaRateWhenAvoidOverPercent;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointViRateWhenAvoidOverPercent;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointWhenDeckNumHigh;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointWhenDeckNumLow;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointWhenDeckDataNumHigh;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointWhenDeckDataNumLow;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointWhenMentalHigh;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointWhenMentalLow;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointWhenUseDownCostCard;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointWhenUseNotChangeCostCard;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointWhenHandCardLow;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointWhenHandCardHigh;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointWhenAvoidLow;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointWhenAvoidHigh;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointWhenPhaseOne;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointWhenPhaseTwo;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointWhenExclusionCardHigh;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointWhenExclusionCardLow;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointVoWhenMeLow;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointDaWhenMeLow;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointViWhenMeLow;
    public static PRISM.Produce.ProduceInGameEffectType IncreaseHandCardMax;
    public static PRISM.Produce.ProduceInGameEffectType IncreaseHandCardMaxByUseCardOrSkill;
    public static PRISM.Produce.ProduceInGameEffectType AvoidGetVoAppealPoint;
    public static PRISM.Produce.ProduceInGameEffectType AvoidGetDaAppealPoint;
    public static PRISM.Produce.ProduceInGameEffectType AvoidGetViAppealPoint;
    public static PRISM.Produce.ProduceInGameEffectType AvoidGetIdolAppealPoint;
    public static PRISM.Produce.ProduceInGameEffectType AvoidGetVoIdolAppealPoint;
    public static PRISM.Produce.ProduceInGameEffectType AvoidGetDaIdolAppealPoint;
    public static PRISM.Produce.ProduceInGameEffectType AvoidGetViIdolAppealPoint;
    public static PRISM.Produce.ProduceInGameEffectType AvoidGetIdolAppealPointWhenActiveAvoidEffectCount;
    public static PRISM.Produce.ProduceInGameEffectType GuardFirstMentalBreakOnce;
    public static PRISM.Produce.ProduceInGameEffectType IgnoreMentalRecovery;
    public static PRISM.Produce.ProduceInGameEffectType GetMentalWhenPPRate;
    public static PRISM.Produce.ProduceInGameEffectType GetMentalWhenPP;
    public static PRISM.Produce.ProduceInGameEffectType GetMentalRateWhenUseCostDownVoCard;
    public static PRISM.Produce.ProduceInGameEffectType GetMentalRateWhenUseCostDownDaCard;
    public static PRISM.Produce.ProduceInGameEffectType GetMentalRateWhenUseCostDownViCard;
    public static PRISM.Produce.ProduceInGameEffectType GetMentalRateWhenUseCostDownCard;
    public static PRISM.Produce.ProduceInGameEffectType GetAvoidWhenOpponenVoAppeal;
    public static PRISM.Produce.ProduceInGameEffectType GetAvoidWhenOpponenDaAppeal;
    public static PRISM.Produce.ProduceInGameEffectType GetAvoidWhenOpponenViAppeal;
    public static PRISM.Produce.ProduceInGameEffectType DiscountConditionHandVo;
    public static PRISM.Produce.ProduceInGameEffectType DiscountConditionHandDa;
    public static PRISM.Produce.ProduceInGameEffectType DiscountConditionHandVi;
    public static PRISM.Produce.ProduceInGameEffectType OppnentMentalDamageWhenGetMental;
    public static PRISM.Produce.ProduceInGameEffectType GetPPWhenMental;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealWhenMental;
    public static PRISM.Produce.ProduceInGameEffectType GetPPMentalDamage;
    public static PRISM.Produce.ProduceInGameEffectType GetAvoidMentalDamage;
    public static PRISM.Produce.ProduceInGameEffectType GetPPWhenRecoverMentalBreak;
    public static PRISM.Produce.ProduceInGameEffectType MentalLimitRate;
    public static PRISM.Produce.ProduceInGameEffectType SafeEffectPointRate;
    public static PRISM.Produce.ProduceInGameEffectType SafeEffectSubMentalRate;
    public static PRISM.Produce.ProduceInGameEffectType IgnoreAppealDownEffect;
    public static PRISM.Produce.ProduceInGameEffectType IgnoreDebuffEffect;
    public static PRISM.Produce.ProduceInGameEffectType RecoveryMentalWhenSec;
    public static PRISM.Produce.ProduceInGameEffectType RecoveryMentalRateWhenSec;
    public static PRISM.Produce.ProduceInGameEffectType RecoveryMentalWhenSecAndHighAvoid;
    public static PRISM.Produce.ProduceInGameEffectType AvoidGetWhenSec;
    public static PRISM.Produce.ProduceInGameEffectType DamageMentalWhenSec;
    public static PRISM.Produce.ProduceInGameEffectType OpponentDamageMentalWhenOpponentMentalRecovery;
    public static PRISM.Produce.ProduceInGameEffectType DamageMentalWhenOpponentMentalDamage;
    public static PRISM.Produce.ProduceInGameEffectType SwapMentalDamageAndMentalRecovery;
    public static PRISM.Produce.ProduceInGameEffectType IgnoreMentalDamage;
    public static PRISM.Produce.ProduceInGameEffectType IgnoreMentalDamageFromOpponent;
    public static PRISM.Produce.ProduceInGameEffectType RecoveryMentalGetVoAppealPoint;
    public static PRISM.Produce.ProduceInGameEffectType RecoveryMentalGetDaAppealPoint;
    public static PRISM.Produce.ProduceInGameEffectType RecoveryMentalGetViAppealPoint;
    public static PRISM.Produce.ProduceInGameEffectType AddAppealTypeVo;
    public static PRISM.Produce.ProduceInGameEffectType AddAppealTypeDa;
    public static PRISM.Produce.ProduceInGameEffectType AddAppealTypeVi;
    public static PRISM.Produce.ProduceInGameEffectType AddDrowNum;
    public static PRISM.Produce.ProduceInGameEffectType DrawCardTypeVo;
    public static PRISM.Produce.ProduceInGameEffectType DrawCardTypeDa;
    public static PRISM.Produce.ProduceInGameEffectType DrawCardTypeVi;
    public static PRISM.Produce.ProduceInGameEffectType AddIdolVoAppealWhenDrawCard;
    public static PRISM.Produce.ProduceInGameEffectType AddIdolDaAppealWhenDrawCard;
    public static PRISM.Produce.ProduceInGameEffectType AddIdolViAppealWhenDrawCard;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointRateOnceWhenSearch;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointVoRateOnceWhenSearch;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointDaRateOnceWhenSearch;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointViRateOnceWhenSearch;
    public static PRISM.Produce.ProduceInGameEffectType AddAppealTypeeVoHandCardByNomalDrowAfterOnce;
    public static PRISM.Produce.ProduceInGameEffectType AddAppealTypeeDaHandCardByNomalDrowAfterOnce;
    public static PRISM.Produce.ProduceInGameEffectType AddAppealTypeeViHandCardByNomalDrowAfterOnce;
    public static PRISM.Produce.ProduceInGameEffectType GetPPWhenAvoid;
    public static PRISM.Produce.ProduceInGameEffectType GetPPWhenEnemyUseCard;
    public static PRISM.Produce.ProduceInGameEffectType CardCostDownWhenPhaseChange;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealAndEnemyAppealZeroOnce;
    public static PRISM.Produce.ProduceInGameEffectType AppealZero;
    public static PRISM.Produce.ProduceInGameEffectType AppealZeroVo;
    public static PRISM.Produce.ProduceInGameEffectType AppealZeroDa;
    public static PRISM.Produce.ProduceInGameEffectType AppealZeroVi;
    public static PRISM.Produce.ProduceInGameEffectType DisableAvoid;
    public static PRISM.Produce.ProduceInGameEffectType DoubleCardCostDown;
    public static PRISM.Produce.ProduceInGameEffectType RecoveryMentalRateWhenUseDoubleCard;
    public static PRISM.Produce.ProduceInGameEffectType GetPPWhenPhaseChange;
    public static PRISM.Produce.ProduceInGameEffectType DoubleMikotoCardCostDown;
    public static PRISM.Produce.ProduceInGameEffectType MikotoPhaseCardCostDown;
    public static PRISM.Produce.ProduceInGameEffectType NichikaPhaseCardCostDown;
    public static PRISM.Produce.ProduceInGameEffectType EnemyDamageWhenDamageOnce;
    public static PRISM.Produce.ProduceInGameEffectType CardCostDownWhenAvoidOverPercent;
    public static PRISM.Produce.ProduceInGameEffectType DoubleNichikaCardCostDown;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointIdolVoWhenUseRank3Card;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointIdolDaWhenUseRank3Card;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointIdolViWhenUseRank3Card;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointRateWhenUseRankNCard;
    public static PRISM.Produce.ProduceInGameEffectType GetMentalGuradWhenPhaseChange;
    public static PRISM.Produce.ProduceInGameEffectType DisablePhaseChange;
    public static PRISM.Produce.ProduceInGameEffectType ExclusionHighCostCardWhenCardUse;
    public static PRISM.Produce.ProduceInGameEffectType ExclusionLowCostCardWhenCardUse;
    public static PRISM.Produce.ProduceInGameEffectType ExclusionUnderCostCardWhenCardUse;
    public static PRISM.Produce.ProduceInGameEffectType ExclusionNextUseCard;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointVoWhenExclusionCard;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointDaWhenExclusionCard;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointViWhenExclusionCard;
    public static PRISM.Produce.ProduceInGameEffectType AddExclusionCardNum;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealUpExclusionWhenExclusionCard;
    public static PRISM.Produce.ProduceInGameEffectType EnemyMeDamageWhenExclusionCard;
    public static PRISM.Produce.ProduceInGameEffectType EnemyPPDownWhenExclusionCard;
    public static PRISM.Produce.ProduceInGameEffectType CardRankUpWhenPhaseChangeOnce;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointVoWhenPhaseChange;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointDaWhenPhaseChange;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointViWhenPhaseChange;
    public static PRISM.Produce.ProduceInGameEffectType GetMentalWhenPhaseChange;
    public static PRISM.Produce.ProduceInGameEffectType GetSkillDouble;
    public static PRISM.Produce.ProduceInGameEffectType DoublePhase;
    public static PRISM.Produce.ProduceInGameEffectType MentalValueRate;
    public static PRISM.Produce.ProduceInGameEffectType MinusMentalBreakTime;
    public static PRISM.Produce.ProduceInGameEffectType MentalValueRateRecoverMentalBreak;
    public static PRISM.Produce.ProduceInGameEffectType AppealRateOnceWhenRecoverMentalBreak;
    public static PRISM.Produce.ProduceInGameEffectType AppealRateOnceWhenRecoverMental;
    public static PRISM.Produce.ProduceInGameEffectType AppealRateVoOnceWhenRecoverMental;
    public static PRISM.Produce.ProduceInGameEffectType AppealRateDaOnceWhenRecoverMental;
    public static PRISM.Produce.ProduceInGameEffectType AppealRateViOnceWhenRecoverMental;
    public static PRISM.Produce.ProduceInGameEffectType AppealRateOnceWhenMaxHandIncrease;
    public static PRISM.Produce.ProduceInGameEffectType AppealRateVoOnceWhenMaxHandIncrease;
    public static PRISM.Produce.ProduceInGameEffectType AppealRateDaOnceWhenMaxHandIncrease;
    public static PRISM.Produce.ProduceInGameEffectType AppealRateViOnceWhenMaxHandIncrease;
    public static PRISM.Produce.ProduceInGameEffectType PPRecoverySpeedRateUnderMentalPercent;
    public static PRISM.Produce.ProduceInGameEffectType PPRecoverySpeedRateMentalHighThanOpponent;
    public static PRISM.Produce.ProduceInGameEffectType PPRecoverySpeedRateMentalLowThanOpponent;
    public static PRISM.Produce.ProduceInGameEffectType AppealRateWhenMaxHandCount;
    public static PRISM.Produce.ProduceInGameEffectType MentalGuardRate;
    public static PRISM.Produce.ProduceInGameEffectType AppealRateWhenOpponentMentalBreak;
    public static PRISM.Produce.ProduceInGameEffectType AppealRateWhenUseCostDownCard;
    public static PRISM.Produce.ProduceInGameEffectType SelfDamageRate;
    public static PRISM.Produce.ProduceInGameEffectType AddMaxHandNumWhenRecoverMentalBreak;
    public static PRISM.Produce.ProduceInGameEffectType RecoverMentalWhenUseCostDownCard;
    public static PRISM.Produce.ProduceInGameEffectType GetPPWhenRemoveCard;
    public static PRISM.Produce.ProduceInGameEffectType AddCardCostByCostHigh;
    public static PRISM.Produce.ProduceInGameEffectType AddCardCostByCostLow;
    public static PRISM.Produce.ProduceInGameEffectType DrawWhenRemoveCard;
    public static PRISM.Produce.ProduceInGameEffectType RemoveCarWhenUseCard;
    public static PRISM.Produce.ProduceInGameEffectType RecoverMentalWhenSearch;
    public static PRISM.Produce.ProduceInGameEffectType MentalGuardWhenSearch;
    public static PRISM.Produce.ProduceInGameEffectType OverHealMentalGuard;
    public static PRISM.Produce.ProduceInGameEffectType RecoveryMentalWhen10Sec;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealWhenUseCardEveryCount;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealWhenMentalVoDamage;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealWhenMentalDaDamage;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealWhenMentalViDamage;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealVoWhenUseCostDownCard;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealDaWhenUseCostDownCard;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealViWhenUseCostDownCard;
    public static PRISM.Produce.ProduceInGameEffectType GetPPWhenUseCostDownCard;
    public static PRISM.Produce.ProduceInGameEffectType DrawCardIsPreUseAttribute;
    public static PRISM.Produce.ProduceInGameEffectType GetPPWhenUseCardOnce;
    public static PRISM.Produce.ProduceInGameEffectType DamageMentalRateWhenUseCard;
    public static PRISM.Produce.ProduceInGameEffectType RecoveryMentalRateWhenUseCard;
    public static PRISM.Produce.ProduceInGameEffectType RecoveryMentalRateWhenUseIdolSkill;
    public static PRISM.Produce.ProduceInGameEffectType DamegeEnemyWhenUseCard;
    public static PRISM.Produce.ProduceInGameEffectType GuardFirstMentalBreakAndMeOnce;
    public static PRISM.Produce.ProduceInGameEffectType GuardFirstMentalBreakAndMeReteOnce;
    public static PRISM.Produce.ProduceInGameEffectType CardCostDonwWhenPinchAndLowTime;
    public static PRISM.Produce.ProduceInGameEffectType GetAvoidWhenAvoidRateUnder;
    public static PRISM.Produce.ProduceInGameEffectType GetAvoidWhenAvoidRateUnderNotDeletedByAvoid;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealBonusWhenUseCardEveryCount;
    public static PRISM.Produce.ProduceInGameEffectType CardCostDownWhenDrawVoCard;
    public static PRISM.Produce.ProduceInGameEffectType CardCostDownWhenDrawDaCard;
    public static PRISM.Produce.ProduceInGameEffectType CardCostDownWhenDrawViCard;
    public static PRISM.Produce.ProduceInGameEffectType RecoveryPPWhenCardDrow;
    public static PRISM.Produce.ProduceInGameEffectType RecoveryMentalRateWhenCardDrow;
    public static PRISM.Produce.ProduceInGameEffectType GetMentalGuardWhenCardDrow;
    public static PRISM.Produce.ProduceInGameEffectType GetAvoidWhenUseCard;
    public static PRISM.Produce.ProduceInGameEffectType MeAttackedDamageDownWhenPinch;
    public static PRISM.Produce.ProduceInGameEffectType NextMentalBreakTime;
    public static PRISM.Produce.ProduceInGameEffectType NextMentalBreakAddTime;
    public static PRISM.Produce.ProduceInGameEffectType NextMentalBreakTimeDouble;
    public static PRISM.Produce.ProduceInGameEffectType ComeBackCardWhenUseVoCard;
    public static PRISM.Produce.ProduceInGameEffectType ComeBackCardWhenUseDaCard;
    public static PRISM.Produce.ProduceInGameEffectType ComeBackCardWhenUseViCard;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealBonusUntilUseCardCount;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealBonusVoUntilUseCardCount;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealBonusDaUntilUseCardCount;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealBonusViUntilUseCardCount;
    public static PRISM.Produce.ProduceInGameEffectType IdolSkillCostDownUntilIdolSkillUseCount;
    public static PRISM.Produce.ProduceInGameEffectType IsPinchEffectByElapsedTime;
    public static PRISM.Produce.ProduceInGameEffectType RemoveCardByElapsedTime;
    public static PRISM.Produce.ProduceInGameEffectType GetPPWhenHandMaxIncrease;
    public static PRISM.Produce.ProduceInGameEffectType AddPinchRate;
    public static PRISM.Produce.ProduceInGameEffectType CardPowerUpWhenPhase;
    public static PRISM.Produce.ProduceInGameEffectType MentalDamageRateFromOpponent;
    public static PRISM.Produce.ProduceInGameEffectType IdolSkillVocalGetAppealPointRate;
    public static PRISM.Produce.ProduceInGameEffectType IdolSkillDanceGetAppealPointRate;
    public static PRISM.Produce.ProduceInGameEffectType IdolSkillVisualGetAppealPointRate;
    public static PRISM.Produce.ProduceInGameEffectType DrawCardWhenSelfDamage;
    public static PRISM.Produce.ProduceInGameEffectType GetMentalRateWhenOpponentDamage;
    public static PRISM.Produce.ProduceInGameEffectType OpponentGetMentalRateWhenOpponentDamage;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealVoWhenOpponentGetMental;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealDaWhenOpponentGetMental;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealViWhenOpponentGetMental;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealVoWhenGetCounter;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealDaWhenGetCounter;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealViWhenGetCounter;
    public static PRISM.Produce.ProduceInGameEffectType OpponentMentalDamageWhenGetVoCounter;
    public static PRISM.Produce.ProduceInGameEffectType OpponentMentalDamageWhenGetDaCounter;
    public static PRISM.Produce.ProduceInGameEffectType OpponentMentalDamageWhenGetViCounter;
    public static PRISM.Produce.ProduceInGameEffectType AvoidGetUnitMemberVocalRate;
    public static PRISM.Produce.ProduceInGameEffectType AvoidGetUnitMemberDanceRate;
    public static PRISM.Produce.ProduceInGameEffectType AvoidGetUnitMemberVisualRate;
    public static PRISM.Produce.ProduceInGameEffectType CostDownCardWhenAvoid;
    public static PRISM.Produce.ProduceInGameEffectType AddAvoidCountWhenAvoid;
    public static PRISM.Produce.ProduceInGameEffectType ResetIdolSkillWhenAvoid;
    public static PRISM.Produce.ProduceInGameEffectType GetAvoidWhenUseIdolSkill;
    public static PRISM.Produce.ProduceInGameEffectType GetAvoidWhenMentalDamage;
    public static PRISM.Produce.ProduceInGameEffectType OpponentMentalDamageWhenGetAvoid;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealVoWhenJustAvoidMax;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealDaWhenJustAvoidMax;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealViWhenJustAvoidMax;
    public static PRISM.Produce.ProduceInGameEffectType GetAppealPointRateEqualsAvoidRate;
    public static PRISM.Produce.ProduceInGameEffectType GetVoAppealPerSecondWhenSpecificPhase;
    public static PRISM.Produce.ProduceInGameEffectType GetDaAppealPerSecondWhenSpecificPhase;
    public static PRISM.Produce.ProduceInGameEffectType GetViAppealPerSecondWhenSpecificPhase;
}

// Namespace: PRISM.Produce
public class ProduceInGameEffectTypePredicates
{
    public static bool IsExecuteDoubleActionModeType(PRISM.Produce.ProduceInGameEffectType type);
}

// Namespace: PRISM.Produce
public class ProduceInGamePool
{
    private static PRISM.Produce.ProduceInGamePool <Instance>k__BackingField;
    private UnityEngine.Pool.ObjectPool<PRISM.Produce.ProduceInGameEffectGroup> <EffectGroupPool>k__BackingField;
    private UnityEngine.Pool.ObjectPool<PRISM.Produce.ProduceInGameEffect> <EffectPool>k__BackingField;
    private UnityEngine.Pool.ObjectPool<SkillData> <SkillPool>k__BackingField;
    private UnityEngine.Pool.ObjectPool<System.Collections.Generic.List<PRISM.Produce.ProduceInGameEffect>> <TemporaryEffectListPool>k__BackingField;
    private UnityEngine.Pool.ObjectPool<PRISM.Produce.IngameEffectCauseModel> <EffectCausePool>k__BackingField;
    private UnityEngine.Pool.ObjectPool<PRISM.Produce.InGameActionResult> <InGameActionResultPool>k__BackingField;
    private UnityEngine.Pool.ObjectPool<PRISM.Produce.InGamePlayerActionResult> <InGamePlayerActionResultPool>k__BackingField;
    private UnityEngine.Pool.ObjectPool<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> <TemporaryCardListPool>k__BackingField;
    private UnityEngine.Pool.ObjectPool<PRISM.Produce.AppealEffectConditionParam> <AppealEffectConditionParamPool>k__BackingField;
    private UnityEngine.Pool.ObjectPool<PRISM.Produce.ShowProduceCardDetailParam> <ShowProduceCardDetailParamPool>k__BackingField;
    private UnityEngine.Pool.ObjectPool<System.Collections.Generic.List<int>> <EffectDisplayIdListPool>k__BackingField;
    private UnityEngine.Pool.ObjectPool<PRISM.Produce.MentalAnimationData> <MentalAnimDataPool>k__BackingField;
    private UnityEngine.Pool.ObjectPool<PRISM.Produce.AppealAnimationData> <AppealAnimationDataPool>k__BackingField;
    private UnityEngine.Pool.ObjectPool<LogData> <ActionLogDataPool>k__BackingField;
    private UnityEngine.Pool.ObjectPool<PRISM.Produce.IngameSkillModel> <SkillModelPool>k__BackingField;
    private UnityEngine.Pool.ObjectPool<PRISM.Produce.IngamePlayerModel> <PlayerModelPool>k__BackingField;
    private PRISM.Produce.ProduceInGameQueueObjectPool<PRISM.Produce.IngameUpdateMentalArg> <TemporaryUpdateMentalArgQueueObjectPool>k__BackingField;
    public PRISM.Produce.ProduceInGamePool Instance { get; set; }
    public UnityEngine.Pool.ObjectPool<PRISM.Produce.ProduceInGameEffectGroup> EffectGroupPool { get; set; }
    public UnityEngine.Pool.ObjectPool<PRISM.Produce.ProduceInGameEffect> EffectPool { get; set; }
    public UnityEngine.Pool.ObjectPool<SkillData> SkillPool { get; set; }
    public UnityEngine.Pool.ObjectPool<System.Collections.Generic.List<PRISM.Produce.ProduceInGameEffect>> TemporaryEffectListPool { get; set; }
    public UnityEngine.Pool.ObjectPool<PRISM.Produce.IngameEffectCauseModel> EffectCausePool { get; set; }
    public UnityEngine.Pool.ObjectPool<PRISM.Produce.InGameActionResult> InGameActionResultPool { get; set; }
    public UnityEngine.Pool.ObjectPool<PRISM.Produce.InGamePlayerActionResult> InGamePlayerActionResultPool { get; set; }
    public UnityEngine.Pool.ObjectPool<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> TemporaryCardListPool { get; set; }
    public UnityEngine.Pool.ObjectPool<PRISM.Produce.AppealEffectConditionParam> AppealEffectConditionParamPool { get; set; }
    public UnityEngine.Pool.ObjectPool<PRISM.Produce.ShowProduceCardDetailParam> ShowProduceCardDetailParamPool { get; set; }
    public UnityEngine.Pool.ObjectPool<System.Collections.Generic.List<int>> EffectDisplayIdListPool { get; set; }
    public UnityEngine.Pool.ObjectPool<PRISM.Produce.MentalAnimationData> MentalAnimDataPool { get; set; }
    public UnityEngine.Pool.ObjectPool<PRISM.Produce.AppealAnimationData> AppealAnimationDataPool { get; set; }
    public UnityEngine.Pool.ObjectPool<LogData> ActionLogDataPool { get; set; }
    public UnityEngine.Pool.ObjectPool<PRISM.Produce.IngameSkillModel> SkillModelPool { get; set; }
    public UnityEngine.Pool.ObjectPool<PRISM.Produce.IngamePlayerModel> PlayerModelPool { get; set; }
    public PRISM.Produce.ProduceInGameQueueObjectPool<PRISM.Produce.IngameUpdateMentalArg> TemporaryUpdateMentalArgQueueObjectPool { get; set; }
    public static void Construct();
    public static void Terminate();

    private class <>O
    {
        public static System.Func<PRISM.Produce.ProduceInGameEffectGroup> <0>__Instantiate;
        public static System.Func<PRISM.Produce.ProduceInGameEffect> <1>__Instantiate;
        public static System.Func<SkillData> <2>__Instantiate;
        public static System.Func<PRISM.Produce.IngameEffectCauseModel> <3>__Instantiate;
        public static System.Func<PRISM.Produce.InGameActionResult> <4>__Construct;
        public static System.Func<PRISM.Produce.IngameUpdateMentalArg> <5>__Instantiate;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<System.Collections.Generic.List<PRISM.Produce.ProduceInGameEffect>> <>9__57_0;
        public static System.Action<System.Collections.Generic.List<PRISM.Produce.ProduceInGameEffect>> <>9__57_1;
        public static System.Action<PRISM.Produce.InGameActionResult> <>9__57_2;
        public static System.Func<PRISM.Produce.InGamePlayerActionResult> <>9__57_3;
        public static System.Action<PRISM.Produce.InGamePlayerActionResult> <>9__57_4;
        public static System.Func<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> <>9__57_5;
        public static System.Action<System.Collections.Generic.List<PRISM.Produce.IngamePCardModel>> <>9__57_6;
        public static System.Func<PRISM.Produce.AppealEffectConditionParam> <>9__57_7;
        public static System.Func<PRISM.Produce.ShowProduceCardDetailParam> <>9__57_8;
        public static System.Func<System.Collections.Generic.List<int>> <>9__57_9;
        public static System.Action<System.Collections.Generic.List<int>> <>9__57_10;
        public static System.Func<PRISM.Produce.MentalAnimationData> <>9__57_11;
        public static System.Func<PRISM.Produce.AppealAnimationData> <>9__57_12;
        public static System.Func<LogData> <>9__57_13;
        public static System.Func<PRISM.Produce.IngameSkillModel> <>9__57_14;
        public static System.Func<PRISM.Produce.IngamePlayerModel> <>9__57_15;
        private System.Collections.Generic.List<PRISM.Produce.ProduceInGameEffect> <.ctor>b__57_0();
        private void <.ctor>b__57_1(System.Collections.Generic.List<PRISM.Produce.ProduceInGameEffect> list);
        private void <.ctor>b__57_2(PRISM.Produce.InGameActionResult result);
        private PRISM.Produce.InGamePlayerActionResult <.ctor>b__57_3();
        private void <.ctor>b__57_4(PRISM.Produce.InGamePlayerActionResult result);
        private System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> <.ctor>b__57_5();
        private void <.ctor>b__57_6(System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> list);
        private PRISM.Produce.AppealEffectConditionParam <.ctor>b__57_7();
        private PRISM.Produce.ShowProduceCardDetailParam <.ctor>b__57_8();
        private System.Collections.Generic.List<int> <.ctor>b__57_9();
        private void <.ctor>b__57_10(System.Collections.Generic.List<int> list);
        private PRISM.Produce.MentalAnimationData <.ctor>b__57_11();
        private PRISM.Produce.AppealAnimationData <.ctor>b__57_12();
        private LogData <.ctor>b__57_13();
        private PRISM.Produce.IngameSkillModel <.ctor>b__57_14();
        private PRISM.Produce.IngamePlayerModel <.ctor>b__57_15();
    }
}

// Namespace: PRISM.Produce
public class ProduceInGameQueueObjectPool`1<T>
{
    private UnityEngine.Pool.ObjectPool<QueueObject<T>> <QueuePool>k__BackingField;
    private UnityEngine.Pool.ObjectPool<T> <ContentPool>k__BackingField;
    public UnityEngine.Pool.ObjectPool<QueueObject<T>> QueuePool { get; set; }
    public UnityEngine.Pool.ObjectPool<T> ContentPool { get; set; }
    public void Clear();

    public class QueueObject<T> : System.IDisposable
    {
        private PRISM.Produce.ProduceInGameQueueObjectPool<T> parent;
        private System.Collections.Generic.Queue<T> queue;
        public void Enqueue(T queuedObject);
        public bool TryDequeueWithCallback<TState>(TState state, System.Action<T, TState> onDequeueActionBeforeDispose);
        public void Dispose();
        public static QueueObject<T> Instantiate(int capacity, PRISM.Produce.ProduceInGameQueueObjectPool<T> parentObject);
    }

    private class <>c__DisplayClass7_0<T>
    {
        public int capacity;
        public PRISM.Produce.ProduceInGameQueueObjectPool<T> <>4__this;
        private QueueObject<T> <.ctor>b__0();
    }
}

// Namespace: PRISM.Produce
public class ShowProduceCardDetailParam
{
    private PRISM.Produce.IngamePCardModel <ProduceCard>k__BackingField;
    private PRISM.Produce.IngameActionEffectModel <CardEffect>k__BackingField;
    private PRISM.Produce.IngamePlayerModel <UsePlayer>k__BackingField;
    private CardUseTiming <UseTiming>k__BackingField;
    public PRISM.Produce.IngamePCardModel ProduceCard { get; set; }
    public PRISM.Produce.IngameActionEffectModel CardEffect { get; set; }
    public PRISM.Produce.IngamePlayerModel UsePlayer { get; set; }
    public CardUseTiming UseTiming { get; set; }
    public void SetParameter(PRISM.Produce.IngamePCardModel produceCard, PRISM.Produce.IngameActionEffectModel cardEffect, PRISM.Produce.IngamePlayerModel usePlayer, CardUseTiming useTiming);
}

// Namespace: PRISM.Produce
public class LessonModel : PRISM.Produce.ProduceBaseModel
{
    private static int enemySkillExecutePlayerMental;
    private static float lessonUnitSkillExecuteTime;
    public PRISM.Produce.IngameChallengeMissionProgressCalcModel ChallengeMissionProgressCalcModel;
    public PRISM.Module.Networking.IOpponentStatus OpponentData;
    private InGameType <InGameType>k__BackingField;
    public InGameType InGameType { get; set; }
    public bool IsSpecialLesson { get; set; }
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(System.Threading.CancellationToken token);
    protected float _getStartTimeSecond();
    protected void _enemyAttackReadyAction();
    protected float _getSkillExecuteTime();
    protected void _onPostExecuteEnemySkill();
    protected bool _isInGameEnd(ResultStatus& resultStatus, GameEndStatus& gameEndStatus);
    protected bool IsWinEnemy();
    private Cysharp.Threading.Tasks.UniTask <>n__0(System.Threading.CancellationToken token);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Produce.IngameActionEffectModel, PRISM.Produce.LessonModel, bool> <>9__12_0;
        private bool <_enemyAttackReadyAction>b__12_0(PRISM.Produce.IngameActionEffectModel x, PRISM.Produce.LessonModel _);
    }

    private struct <InitializeAsync>d__10 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.LessonModel <>4__this;
        public System.Threading.CancellationToken token;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class BuffDebuffContent : UnityEngine.MonoBehaviour
{
    private static float BlinkStartTime;
    private PRISM.Produce.BuffIcon buffIconOrijin;
    private UnityEngine.UI.HorizontalLayoutGroup buffLayoutGroup;
    private UnityEngine.U2D.SpriteAtlas buffIconAtlas;
    private System.Collections.Generic.List<PRISM.Produce.BuffIcon> buffIcons;
    private static float BlinkDuaration;
    private float fadeValue;
    private DG.Tweening.Tweener tweener;
    private float blinkAlpha;
    private UniRx.Subject<int> onClickIcon;
    public System.IObservable<int> OnClickIcon { get; set; }
    private void Start();
    public void UpdateIcon(System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffectGroup> effectGroups);
    public void UpdateBlink(System.Collections.Generic.IReadOnlyList<PRISM.Produce.ProduceInGameEffectGroup> effectGroups);
    public void SetBlinkSpeed(float speed);
    public void ResetBuffObject();
    private void OnDestroy();
    private float <Start>b__12_0();
    private void <Start>b__12_1(float value);

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<UniRx.Unit, System.ValueTuple<UniRx.Subject<int>, int>> <>9__13_0;
        private void <UpdateIcon>b__13_0(UniRx.Unit _, System.ValueTuple<UniRx.Subject<int>, int> state);
    }
}

// Namespace: PRISM.Produce
public class BuffDebuffSimpleBar : UnityEngine.MonoBehaviour
{
    private UnityEngine.RectTransform buffBar;
    private UnityEngine.RectTransform debuffBar;
    private UnityEngine.RectTransform effectBar;
    private UnityEngine.GameObject debuffIcon;
    private ENTERPRISE.UI.UITextMeshProUGUI buffText;
    private ENTERPRISE.UI.UITextMeshProUGUI debuffText;
    private ENTERPRISE.UI.UITextMeshProUGUI effectText;
    private ENTERPRISE.UI.AnimatorWithEvent alphaAnimator;
    private UnityEngine.Animator positionAnimator;
    private BarType type;
    public void ResetBars();
    public bool Display(PRISM.Produce.ProduceInGameEffect effect, bool isSelfEffect);
    public void Fadeout();
    private void Awake();
    private void _displayBuffBar(string text);
    private void _displayDebuffBar(string text, bool isDisplayIcon);
    private void _displayEffectBar(string text);
    private void _onRunEvent(string eventTag);
    private void _vanishBars();

    private enum BarType : System.Enum
    {
        public int value__;
        public static BarType Buff;
        public static BarType Debuff;
        public static BarType Effect;
    }
}

// Namespace: PRISM.Produce
public class BuffDebuffSimpleDisplay : UnityEngine.MonoBehaviour
{
    private System.Collections.Generic.List<PRISM.Produce.BuffDebuffSimpleBar> barList;
    private int usingBarIndex;
    public void ResetView();
    public void UpdateView(PRISM.Produce.ProduceInGameEffect effect, bool isSelfEffect);
}

// Namespace: PRISM.Produce
public class BuffIcon : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.Image buffIcon;
    private ENTERPRISE.UI.UIButton iconButton;
    private UnityEngine.CanvasGroup canvasGroup;
    public System.IObservable<UniRx.Unit> OnClick { get; set; }
    public void SetUpBuffDebuffIcon(UnityEngine.U2D.SpriteAtlas spriteAtlas, PRISM.Produce.ProduceInGameEffectGroup effectGroup);
    public void SetBlink(float value);
    public void StopBlink();
}

// Namespace: PRISM.Produce
public class BuffDebuffDetail : PRISM.Produce.DetailDisplayBase
{
    private UnityEngine.UI.Image buffIcon;
    private PRISM.Produce.ProduceInGameEffectGroup effectGroup;
    private UnityEngine.U2D.SpriteAtlas buffIconAtlas;
    public void UpdateBuffDebuffDetail(PRISM.Produce.ProduceInGameEffectGroup effectGroup, PRISM.Produce.BaseIngameSkillDetailKeywordContent baseIngameSkillDetailKeywordContent);
    public void UpdateDetailDisplay();
    private void _updateDetailDisplay();
}

// Namespace: PRISM.Produce
public class DetailDisplayBase : UnityEngine.MonoBehaviour, UnityEngine.EventSystems.IPointerClickHandler, UnityEngine.EventSystems.IEventSystemHandler
{
    protected ENTERPRISE.UI.UITextMeshProUGUI nameText;
    protected ENTERPRISE.UI.UITextMeshProUGUI descriptionText;
    protected PRISM.Produce.BaseIngameSkillDetailKeywordContent cacheBaseIngameSkillDetailKeywordContent;
    private System.Collections.Generic.List<TMPro.TMP_LinkInfo> tempLinkInfos;
    private System.Collections.Generic.List<string> tempLinkIDs;
    public void Hide();
    public void OnPointerClick(UnityEngine.EventSystems.PointerEventData eventData);
    private System.Collections.Generic.IReadOnlyList<TMPro.TMP_LinkInfo> _makeTmpInfoList(int selectIndex);
    protected void _setUpKeyWard(PRISM.Produce.BaseIngameSkillDetailKeywordContent baseIngameSkillDetailKeywordContent);
    protected void _updateDescription(string text);
}

// Namespace: PRISM.Produce
public class BaseIngameSkillDetailKeywordContent : UnityEngine.MonoBehaviour
{
    private System.Collections.Generic.List<PRISM.Produce.IngameSkillDetailKeywordContent> ingameSkillDetailKeywordContentList;
    private PRISM.Produce.IngameSkillDetailKeywordContent keywordContentPrefab;
    private UnityEngine.Transform keywordContentParent;
    public void Setup(System.Collections.Generic.IReadOnlyList<TMPro.TMP_LinkInfo> tMP_LinkInfoList);
}

// Namespace: PRISM.Produce
public class IngameSkillDetailKeywordContent : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UITextMeshProUGUI titleNameText;
    private ENTERPRISE.UI.UITextMeshProUGUI detailText;
    public void Setup(string title, string detail);
}

// Namespace: PRISM.Produce
public class ProduceCardAndCharaSkillDetailPanel : PRISM.Produce.DetailDisplayBase
{
    private static string DescriptionSeparateStr;
    private PRISM.VoDaViMeMultiView voDaViMeMultiView;
    private PRISM.Produce.InGamePCardContent produceCard;
    private UnityEngine.GameObject skillArea;
    private PRISM.UI.IdolSkillIconView idolSkillIcon;
    private PRISM.Produce.TrainerSkillIconView trainerSkillIcon;
    private PRISM.Produce.SkillLimitPanel skillLimitPanel;
    private UnityEngine.GameObject skillUsableCountUI;
    private UnityEngine.Color notPhaseDescriptionBlendColor;
    private ShowDetailType showDetailType;
    private PRISM.Produce.IngamePCardModel produceCardModel;
    private PRISM.Produce.IngamePlayerModel usePlayerModel;
    private System.Func<PRISM.Produce.ShowProduceCardDetailParam, PRISM.Produce.CardAndSkillPredictionModel> getCardPredictionFunc;
    private PRISM.Produce.IngameSkillModel idolSkillModel;
    private System.Func<PRISM.Produce.IngameSkillModel, PRISM.Produce.IngameActionEffectModel, PRISM.Produce.CardAndSkillPredictionModel> getSkillPredictionFunc;
    private PRISM.Produce.IngameSkillModel trainerSkillModel;
    public void ShowProduceCardDetail(PRISM.Produce.IngamePlayerModel usePlayer, PRISM.Produce.IngamePCardModel model, PRISM.Produce.ProduceIngameLoader resourceLoader, PRISM.Produce.BaseIngameSkillDetailKeywordContent baseIngameSkillDetailKeywordContent, System.Func<PRISM.Produce.ShowProduceCardDetailParam, PRISM.Produce.CardAndSkillPredictionModel> getPredictionFunc);
    public void ShowIdolSkillDetail(PRISM.Produce.IngameSkillModel idolSkill, PRISM.Produce.BaseIngameSkillDetailKeywordContent baseIngameSkillDetailKeywordContent, PRISM.Produce.ProduceIngameLoader resourceLoader, System.Func<PRISM.Produce.IngameSkillModel, PRISM.Produce.IngameActionEffectModel, PRISM.Produce.CardAndSkillPredictionModel> getPredictionFunc);
    public void ShowTrainerSkillDetail(PRISM.Produce.IngameSkillModel trainerSkill, PRISM.Produce.BaseIngameSkillDetailKeywordContent baseIngameSkillDetailKeywordContent, PRISM.Produce.ProduceIngameLoader resourceLoader);
    public void UpdateDetail();
    public void Hide();
    private void _switchDisplayIcon(ShowDetailType detailType);
    private void _updateVoDaViMeLabel(System.Collections.Generic.IReadOnlyList<ProduceParameterType> parameterTypes);
    private string _getProduceCardDescription(PRISM.Produce.IngamePlayerModel usePlayer, PRISM.Produce.IngamePCardModel cardModel, int conditionTypeId, int conditionValue);

    private enum ShowDetailType : System.Enum
    {
        public int value__;
        public static ShowDetailType None;
        public static ShowDetailType ProduceCard;
        public static ShowDetailType IdolSkill;
        public static ShowDetailType TrainerSkill;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Produce.ProduceIngameLoader, int, System.Threading.CancellationToken, Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D>> <>9__18_0;
        private Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> <ShowIdolSkillDetail>b__18_0(PRISM.Produce.ProduceIngameLoader loader, int iconId, System.Threading.CancellationToken ct);
    }
}

// Namespace: PRISM.Produce
public class IdolSkillContent : PRISM.Produce.SkillContentBase
{
    private UnityEngine.UI.RawImage idolIcon;
    private float pickUpMoveValue;
    private UnityEngine.Vector2 swipeStartPos;
    private UnityEngine.GameObject swipeArrow;
    private float swipeRange;
    private UnityEngine.RectTransform swipeMoveUI;
    private UniRx.Triggers.ObservableBeginDragTrigger beginDragTrigger;
    private UniRx.Triggers.ObservableDragTrigger dragTrigger;
    private UniRx.Triggers.ObservableEndDragTrigger endDragTrigger;
    private bool isSwipeSetUped;
    private float swipeValue;
    private bool isSwipe;
    private UnityEngine.Vector2 swipeBasePos;
    private PRISM.UI.IdolSkillIconView skillIconView;
    private UnityEngine.GameObject deBuffFrame;
    private UnityEngine.GameObject buffEffect;
    private UnityEngine.GameObject debuffEffect;
    private UnityEngine.GameObject specialEffect;
    private UnityEngine.GameObject specialChangeEffect;
    protected UnityEngine.UI.RawImage producePointBgImage;
    protected UnityEngine.Texture normalProducePointTexture;
    protected UnityEngine.Texture buffProducePointTexture;
    protected UnityEngine.Texture debuffProducePointTexture;
    private ENTERPRISE.UI.AnimatorWithEvent animatorWithEvent;
    private UnityEngine.ParticleSystem uiParticle;
    private bool isPlayngAnimation;
    private UnityEngine.CanvasGroup canvasGroup;
    private UniRx.Subject<SwipeState> onSwipe;
    private bool IsSwipe { get; set; }
    public System.IObservable<SwipeState> OnSwipe { get; set; }
    public Cysharp.Threading.Tasks.UniTask SetupAsync(PRISM.Produce.IdolSkillContentViewModel viewModel, PRISM.Produce.ProduceIngameLoader resourceLoader, System.Threading.CancellationToken ct);
    public void SetCost(int cost);
    public void SetCostBuffDeBuff(int baseCost, int calcCost);
    public void SetAvailableState(SkillAvailableState state);
    public void SetSkillPickUp(bool isPickUp);
    public void PlayExecuteSkillAnimation();
    public void SetAnimationSpeed(float speed);
    public void Terminate();
    private Cysharp.Threading.Tasks.UniTask _loadIdolIconAsync(int iconID, PRISM.Produce.ProduceIngameLoader resourceLoader, System.Threading.CancellationToken ct);
    private void _setUpSwipe();
    public void UpdateBuffDeBuff(BuffStatus buffStatus, bool isSuccessCondition);

    public enum SwipeState : System.Enum
    {
        public int value__;
        public static SwipeState BeginSwipe;
        public static SwipeState Swipe;
        public static SwipeState CancelSwipe;
        public static SwipeState EndSwipe;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Produce.ProduceIngameLoader, int, System.Threading.CancellationToken, Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D>> <>9__34_0;
        public static System.Action<string, PRISM.Produce.IdolSkillContent> <>9__43_0;
        public static System.Action<UnityEngine.EventSystems.PointerEventData, PRISM.Produce.IdolSkillContent> <>9__43_1;
        public static System.Action<UnityEngine.EventSystems.PointerEventData, PRISM.Produce.IdolSkillContent> <>9__43_2;
        public static System.Action<UnityEngine.EventSystems.PointerEventData, PRISM.Produce.IdolSkillContent> <>9__43_3;
        private Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> <SetupAsync>b__34_0(PRISM.Produce.ProduceIngameLoader loader, int iconId, System.Threading.CancellationToken ct);
        private void <_setUpSwipe>b__43_0(string eventTag, PRISM.Produce.IdolSkillContent state);
        private void <_setUpSwipe>b__43_1(UnityEngine.EventSystems.PointerEventData pointerEventData, PRISM.Produce.IdolSkillContent state);
        private void <_setUpSwipe>b__43_2(UnityEngine.EventSystems.PointerEventData pointerEventData, PRISM.Produce.IdolSkillContent state);
        private void <_setUpSwipe>b__43_3(UnityEngine.EventSystems.PointerEventData _, PRISM.Produce.IdolSkillContent state);
    }

    private struct <SetupAsync>d__34 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.IdolSkillContent <>4__this;
        public PRISM.Produce.IdolSkillContentViewModel viewModel;
        public PRISM.Produce.ProduceIngameLoader resourceLoader;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_loadIdolIconAsync>d__42 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.IdolSkillContent <>4__this;
        public PRISM.Produce.ProduceIngameLoader resourceLoader;
        public int iconID;
        public System.Threading.CancellationToken ct;
        private UnityEngine.UI.RawImage <>7__wrap1;
        private Awaiter<UnityEngine.Texture2D> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class IdolSkillContentListView : PRISM.Produce.SkillContentListViewBase<PRISM.Produce.IdolSkillContent>
{
    private UnityEngine.RectTransform contentArea;
    private UniRx.Subject<System.ValueTuple<int, SwipeState>> onSwipe;
    public System.IObservable<System.ValueTuple<int, SwipeState>> OnSwipe { get; set; }
    public Cysharp.Threading.Tasks.UniTask SetupAsync(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IdolSkillContentViewModel> viewModels, PRISM.Produce.ProduceIngameLoader resourceLoader, System.Threading.CancellationToken ct);
    public void SelectPickUpIcon(int index);
    public void ReleaseIconPickUp();
    public void SetCost(int index, int cost);
    public void SetCostBuffDeBuff(int index, int baseCost, int calcCost);
    public void PlayExecuteSkillAnimation(int index);
    public void Terminate();
    public void UpdateBuffDeBuff(int index, BuffStatus buffStatus, bool isSuccessCondition);
    protected UnityEngine.RectTransform _getContentParent(int index);

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<SwipeState, System.ValueTuple<UniRx.Subject<System.ValueTuple<int, SwipeState>>, int>> <>9__4_1;
        private void <SetupAsync>b__4_1(SwipeState swipeState, System.ValueTuple<UniRx.Subject<System.ValueTuple<int, SwipeState>>, int> state);
    }

    private class <>c__DisplayClass4_0
    {
        public PRISM.Produce.IdolSkillContentListView <>4__this;
        public System.Collections.Generic.IReadOnlyList<PRISM.Produce.IdolSkillContentViewModel> viewModels;
        public System.Threading.CancellationToken ct;
        private Cysharp.Threading.Tasks.UniTask <SetupAsync>b__0(int index, PRISM.Produce.IdolSkillContent content, PRISM.Produce.ProduceIngameLoader loader);
    }
}

// Namespace: PRISM.Produce
public class IdolSkillContentViewModel
{
    public int UnitID;
    public PRISM.Produce.IngameSkillModel IdolSkill;
    public int IconID;
}

// Namespace: PRISM.Produce
public class InGameFinishPanel : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UIButton[] buttons;
    private DisplayUIInfo[] displayUIInfos;
    private PanelType successPanelType;
    private PanelType failurePanelType;
    private UniRx.Subject<ButtonType> onClickButton;
    public System.IObservable<ButtonType> OnClickButton { get; set; }
    public void Initialize(InGameType inGameType);
    public void ShowSuccess();
    public void ShowFailure();
    public void HideUI();
    public void HideEndBtn();
    public void Terminate();
    private void _switchDisplayUI(PanelType panelType);

    private enum PanelType : System.Enum
    {
        public int value__;
        public static PanelType Success;
        public static PanelType Failure;
        public static PanelType Finished;
        public static PanelType Win;
        public static PanelType Lose;
    }

    public enum ButtonType : System.Enum
    {
        public int value__;
        public static ButtonType Retry;
        public static ButtonType End;
    }

    private class DisplayUIInfo
    {
        private UnityEngine.GameObject displayUI;
        private System.Collections.Generic.List<ButtonType> displayButtons;
        public UnityEngine.GameObject DisplayUI { get; set; }
        public System.Collections.Generic.IReadOnlyList<ButtonType> DisplayButtons { get; set; }
        public void AddDisplayButton(ButtonType buttonType);
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<UniRx.Unit, System.ValueTuple<UniRx.Subject<ButtonType>, ButtonType>> <>9__10_0;
        public static System.Func<ButtonType, ButtonType, bool> <>9__16_0;
        private void <Initialize>b__10_0(UniRx.Unit _, System.ValueTuple<UniRx.Subject<ButtonType>, ButtonType> state);
        private bool <_switchDisplayUI>b__16_0(ButtonType e, ButtonType state);
    }
}

// Namespace: PRISM.Produce
public class LessonPanel : PRISM.Produce.ProduceBaseView
{
    private PRISM.Produce.LessonTitleContent lessonTitle;
    public void SetTitleText(InGameType inGameType, int level);
    public void InitializeSpecialLesson(System.Collections.Generic.IEnumerable<int> milestoneList, int maxAppeal);
}

// Namespace: PRISM.Produce
public class InGameGaugeBase : UnityEngine.MonoBehaviour
{
    protected UnityEngine.UI.Image valueGauge;
    protected ENTERPRISE.UI.UITextMeshProUGUI valueText;
    protected UnityEngine.UI.Image valueUpGauge;
    protected UnityEngine.UI.Image valueDownGauge;
    protected UnityEngine.RectTransform valueUpDownTextArea;
    protected ENTERPRISE.UI.UITextMeshProUGUI valueUpText;
    protected ENTERPRISE.UI.UITextMeshProUGUI valueDownText;
    private System.Threading.CancellationTokenSource tokenSource;
    protected UnityEngine.RectTransform gaugeEffect;
    protected float gaugeEffectOffset;
    private float animationSpeed;
    private DG.Tweening.Tweener tweener;
    public void UpdateValueGauge(int current, int max);
    public void UpdateValueText(int current, int max);
    public void UpdateGaugeView(int current, int max);
    public void ShowVariation(int current, int changeValue, int max, bool isCrease);
    public Cysharp.Threading.Tasks.UniTask ShowVariationWithAnimationAcync(int current, int changeValue, int max, bool isCrease, float duration);
    public void HideVariation();
    public void SetAnimationSpeed(float speed);
    protected void _updateGaugeFillAmount(UnityEngine.UI.Image gauge, float fillAmount);
    private void _showVariation(int current, int changeValue, int max, bool isCrease);
    private void _updateValueGauge(float fillAmount);
    protected Cysharp.Threading.Tasks.UniTask _showVariationWithAnimationAsync(int current, int changeValue, int max, bool isCrease, float duration, System.Threading.CancellationToken cancellationToken);
    private void _hideVariationUI();
    protected void _cancelVariationTask();
    protected System.Threading.CancellationToken _getNewVariationTaskCT();
    protected float _getEffectAnchoredPos(float gaugeSize, float fillAmount, bool isMinus);
    protected void OnDestroy();
    private float <_showVariationWithAnimationAsync>b__22_0();
    private float <_showVariationWithAnimationAsync>b__22_1();
    private void <_showVariationWithAnimationAsync>b__22_2(float x);

    private struct <_showVariationWithAnimationAsync>d__22 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.InGameGaugeBase <>4__this;
        public int current;
        public int changeValue;
        public int max;
        public bool isCrease;
        public float duration;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class MentalGaugeContent : UnityEngine.MonoBehaviour
{
    private GaugeParts[] gaugeParts;
    private UnityEngine.GameObject pinchIcon;
    private UnityEngine.RectTransform pinchEffectArea;
    private UnityEngine.RectTransform pinchLine;
    private ENTERPRISE.UI.UITextMeshProUGUI pinchLineText;
    private UnityEngine.RectTransform safeLineArea;
    private UnityEngine.RectTransform safeIcon;
    private ENTERPRISE.UI.UITextMeshProUGUI safeText;
    private UnityEngine.Animator[] gaugeAnimators;
    private MentalState curState;
    private GaugeParts curGaugeParts;
    private bool isAnimationMental;
    private System.Collections.Generic.List<PRISM.Produce.MentalAnimationData> mentalAnimDataList;
    private PRISM.Produce.InGameGaugeBase CurDisplayGauge { get; set; }
    public void InitializePinchLine(bool isShowPinchLine, int max, int pinchRate);
    public void UpdatePinchIcon(bool isShowPinchIcon);
    public void UpdatePinchLine(int max, int pinchRate);
    public void InitializeSafe(bool isSafeLineSet);
    public void UpdateSafeText(int value);
    public void UpdateGaugeView(MentalState state, int current, int max);
    public void ShowVariation(MentalState state, int current, int changeValue, int max, bool isCrease);
    public Cysharp.Threading.Tasks.UniTask ShowVariationWithAnimationAsync(MentalState state, int current, int changeValue, int max, bool isCrease, float duration, System.Threading.CancellationToken cancellationToken);
    public void HideVariation();
    public void SetAnimationSpeed(float speed);
    private void _updateMentalState(MentalState state);

    private class GaugeParts
    {
        public PRISM.Produce.InGameGaugeBase Gauge;
        public ENTERPRISE.UI.UITextMeshProUGUI ValueText;
    }

    private struct <ShowVariationWithAnimationAsync>d__23 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public MentalState state;
        public int current;
        public int max;
        public bool isCrease;
        public int changeValue;
        public PRISM.Produce.MentalGaugeContent <>4__this;
        public float duration;
        private PRISM.Produce.MentalAnimationData <data>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ProducePointContent : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject normalUI;
    private UnityEngine.UI.Image gaugeImage;
    private ENTERPRISE.UI.UITextMeshProUGUI normalMoleculeText;
    private ENTERPRISE.UI.UITextMeshProUGUI normalDenominatorText;
    private UnityEngine.Animator normalUIAnimator;
    private bool lastNormalUIActive;
    private UnityEngine.GameObject maxUI;
    private ENTERPRISE.UI.UITextMeshProUGUI maxMoleculeText;
    private ENTERPRISE.UI.UITextMeshProUGUI maxDenominatorText;
    private bool lastMaxUIActive;
    private UnityEngine.GameObject mentalBreakUI;
    private ENTERPRISE.UI.UITextMeshProUGUI mentalBreakTimeText;
    public void UpdateProducePointView(int producePoint, int producePointMax);
    public void UpdateProducePointRecoveryGauge(float currentTime, float recoveryTime);
    public void UpdateMentalBreakProducePointView(bool isBreak);
    public void UpdateMentalBreakTimeText(float time);
    public void PlayPointUpAnimation();
    public void SetAnimationSpeed(float speed);
}

// Namespace: PRISM.Produce
public class SkillContentBase : UnityEngine.MonoBehaviour
{
    protected UnityEngine.UI.Graphic bgImage;
    protected ENTERPRISE.UI.UITextMeshProUGUI producePointText;
    protected PRISM.Produce.SkillLimitPanel skillLimitPanel;
    protected ENTERPRISE.UI.UIButton skillButton;
    private PRISM.UIGrayOutController grayOutController;
    private UnityEngine.Color notEnoughPPColor;
    private UnityEngine.Color notAvailableColor;
    protected bool isAvailable;
    private UnityEngine.Transform effectPoint;
    public UnityEngine.Vector3 EffectPoint { get; set; }
    public System.IObservable<UniRx.Unit> OnClick { get; set; }
    public void SetSkillUsableCount(int usableCount, int usableMax);
    public void SetAvailableState(SkillAvailableState state);
    public void SetAnimationSpeed(float speed);
    protected void _setProducePoint(int producePoint);
    protected void _setupOnClick();
    protected void _setButtonEnable(bool isEnable);
}

// Namespace: PRISM.Produce
public class SkillCutIn : UnityEngine.MonoBehaviour
{
    private CutInType cutInType;
    private UnityEngine.UI.Graphic bgImage;
    private UnityEngine.UI.RawImage cutInIdolImage;
    private ENTERPRISE.UI.AnimatorWithEvent cutInAnimatorEvent;
    private System.Collections.Generic.List<CutInModel> cutInModels;
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameUnitMemberModel> memberModels, PRISM.Produce.ProduceIngameLoader resourceLoader, System.Threading.CancellationToken ct);
    public void StartCutIn(int index);
    public void SetAnimationSpeed(float speed);
    private Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> _loadCutInImageAsync(int id, PRISM.Produce.ProduceIngameLoader resourceLoader, System.Threading.CancellationToken ct);
    private string _getVoiceCueSheetName(int pIdolID);
    private string _getVoiceCueName(int pIdolID, int charaID);

    private enum CutInType : System.Enum
    {
        public int value__;
        public static CutInType Left;
        public static CutInType Right;
    }

    private class CutInModel
    {
        public UnityEngine.Texture CutInImage;
        public string VoiceCueSheetName;
        public string VoiceCueName;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<string> <>9__7_0;
        private void <InitializeAsync>b__7_0(string tag);
    }

    private struct <InitializeAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.SkillCutIn <>4__this;
        public System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameUnitMemberModel> memberModels;
        public PRISM.Produce.ProduceIngameLoader resourceLoader;
        public System.Threading.CancellationToken ct;
        private int <i>5__2;
        private CutInModel <model>5__3;
        private CutInModel <>7__wrap3;
        private CutInModel <>7__wrap4;
        private Awaiter<UnityEngine.Texture2D> <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class SkillLimitPanel : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.ToggleButton limitIconPrefab;
    private UnityEngine.GameObject iconGroupPrefab;
    private UnityEngine.RectTransform iconArea;
    private int horizontalMax;
    private UnityEngine.GameObject noLimitIcon;
    private System.Collections.Generic.List<ENTERPRISE.UI.ToggleButton> icons;
    private System.Collections.Generic.List<UnityEngine.GameObject> iconGroups;
    public void UpdateUsableCount(int usableCount, int usableMax);
    public void SetNoLimit(bool isNoLimit);
    private static void _setIconStatus(ENTERPRISE.UI.ToggleButton icon, int index, int usableCount, int usableMax);
}

// Namespace: PRISM.Produce
public class TimePanelContent : UnityEngine.MonoBehaviour
{
    private TimeUI[] timeUIs;
    private TimeState currentState;
    private ENTERPRISE.UI.UITextMeshProUGUI animEffectText;
    private UnityEngine.Animator effectAnimator;
    private int lastCountDownTime;
    private UnityEngine.Animator lastCountDownAnimator;
    private bool isLesson;
    private int lastTime;
    private int pinchTimeCount { get; set; }
    public void InitializeTimePanel(InGameType inGameType);
    public void UpdateTimePanel(float time);
    public void SetAnimationSpeed(float speed);
    private void _updateTimeUI(float time);
    private void _updateTimeState(TimeState state);
    private TimeState _getTimeState(float time);

    private enum TimeState : System.Enum
    {
        public int value__;
        public static TimeState Normal;
        public static TimeState Pinch;
        public static TimeState TimeOut;
        public static TimeState None;
    }

    private class TimeUI
    {
        public UnityEngine.GameObject TimeUIArea;
        public ENTERPRISE.UI.UITextMeshProUGUI TimeText;
    }
}

// Namespace: PRISM.Produce
public class MvNameIdolOrderData : UnityEngine.ScriptableObject
{
    private System.Collections.Generic.List<MvNameIdolOrder> datas;
    public PRISM.UnitIdol[] GetIdolOrder(string mvName, PRISM.UnitIdol[] idols);

    public class MvNameIdolOrder
    {
        public string MvName;
        public int[] ids;
    }

    private class <>c__DisplayClass2_0
    {
        public string mvName;
        public MvNameIdolOrder order;
        private bool <GetIdolOrder>b__0(MvNameIdolOrder data);
        private int <GetIdolOrder>b__1(PRISM.UnitIdol a, PRISM.UnitIdol b);
    }
}

// Namespace: PRISM.Produce
public class ProduceBaseModel
{
    public System.Action OnResetBGM;
    public System.Func<float, bool> IsOverTimeMV;
    private System.Threading.CancellationTokenSource initializeCts;
    private LessonStatus _lessonStatus;
    private ResultStatus resultStatus;
    protected int _executeSkillCardIndex;
    private float elapsedTimeSecond;
    protected float _currentPlayerPPRecoveryTime;
    protected int _executeSkillIndex;
    private int stopFlag;
    private PRISM.Produce.IngameRandomModel randomModel;
    private PRISM.Produce.IngameSkillActionModel skillActionModel;
    private PRISM.Produce.IngamePlayerModel playerModel;
    private PRISM.Produce.IngamePlayerModel enemyModel;
    private PRISM.Produce.AiModel aiModel;
    protected PRISM.Produce.AiModel enemyAiModel;
    private PRISM.Produce.AiExternalAccess <aiExternalAccess>k__BackingField;
    private PRISM.Produce.AiExternalAccess <enemyAiExternalAccess>k__BackingField;
    protected bool isExecuteTrainerSkill;
    protected int _enemySkillTimeCount;
    private bool isAttackAction;
    private PRISM.Produce.IngamePCardModel selectCardCache;
    protected AttackReadyState isAttackReady;
    private PRISM.Produce.ActionLogModel actionLogModel;
    private bool <IsDisableInput>k__BackingField;
    private bool <IsDisableInputDrag>k__BackingField;
    private UniRx.Subject<System.ValueTuple<int, PRISM.Produce.IngameSkillModel, PRISM.Produce.CardAndSkillExecResult>> onExecuteIdolSkillSubject;
    private UniRx.Subject<System.ValueTuple<int, PRISM.Produce.IngameSkillModel, PRISM.Produce.CardAndSkillExecResult>> onExecuteTrainerSkillSubject;
    private UniRx.Subject<PRISM.Produce.IngamePCardModel> onPreExecutePlayerPCardSubject;
    private UniRx.Subject<System.ValueTuple<PRISM.Produce.IngamePCardModel, PRISM.Produce.CardAndSkillExecResult>> onExecutePlayerPCardSubject;
    private UniRx.Subject<PRISM.Produce.IngamePCardModel> onExecuteEnemyPCardSubject;
    private PRISM.Produce.InGameActionResultPool<PRISM.Produce.CardAndSkillExecResult> cardAndSkillExecResultPool;
    private UniRx.Subject<GameEndStatus> onGameEndSubject;
    private UniRx.Subject<int> onSetStopSubject;
    protected UniRx.CompositeDisposable disposables;
    private bool isFastForwardEnable;
    private FastForwardSpeedType fastForwardSpeedType;
    private UniRx.Subject<bool> onUpdateFastForwardSpeedEnable;
    private UniRx.Subject<FastForwardSpeedType> onUpdateFastForwardSpeed;
    private UniRx.Subject<System.ValueTuple<float, float>> onUpdateLeftTime;
    private UniRx.Subject<float> onSetLeftTime;
    private UniRx.Subject<UniRx.Unit> onPostPlayerAndAIUpdate;
    private UniRx.Subject<UniRx.Unit> onPreModelUpdate;
    private PRISM.Produce.IngameBgmModel bgmModel;
    private PRISM.Produce.IngameTallyModel <TallyModel>k__BackingField;
    private int <CurrentSelectCardIndex>k__BackingField;
    private System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> <EnemyAiNotUseCardList>k__BackingField;
    private bool <IsAutoMode>k__BackingField;
    private bool <IsReady>k__BackingField;
    private bool <IsDisableNPC>k__BackingField;
    private bool <IsLoopBGM>k__BackingField;
    private PRISM.Produce.CardAndSkillPredictionModel <PredictionModel>k__BackingField;
    public PRISM.Produce.AiExternalAccess aiExternalAccess { get; set; }
    public PRISM.Produce.AiExternalAccess enemyAiExternalAccess { get; set; }
    public bool IsDisableInput { get; set; }
    public bool IsDisableInputDrag { get; set; }
    protected float ElapsedTimeSecond { get; set; }
    protected PRISM.Produce.IngameTallyModel TallyModel { get; set; }
    public PRISM.Produce.ActionLogModel ActionLogModel { get; set; }
    public System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> Hand { get; set; }
    public int HandCount { get; set; }
    public int TrainerProducePoint { get; set; }
    public int CurrentSelectCardIndex { get; set; }
    public bool IsExecutionCurrentCard { get; set; }
    public PRISM.Produce.IngamePCardModel CurrentSelectEnemyCard { get; set; }
    public System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> EnemyAiNotUseCardList { get; set; }
    public float CurrentTimeSecond { get; set; }
    public LessonStatus GameStatus { get; set; }
    public ResultStatus ResultStatus { get; set; }
    public bool IsAutoMode { get; set; }
    public int PlayerProducePoint { get; set; }
    public bool IsMentalBreak { get; set; }
    public int AppealPoint { get; set; }
    public int MaxAppealPoint { get; set; }
    public bool IsReady { get; set; }
    public bool IsStop { get; set; }
    public bool IsDisableNPC { get; set; }
    public bool IsLoopBGM { get; set; }
    public PRISM.Produce.CardAndSkillPredictionModel PredictionModel { get; set; }
    public int EnemyCurrentHp { get; set; }
    public int EnemyCurrentMaxHp { get; set; }
    public int EnemyAppealPoint { get; set; }
    public int EnemyMaxAppealPoint { get; set; }
    public bool IsPinchEnemy { get; set; }
    public MentalState EnemyMentalState { get; set; }
    public System.IObservable<GameEndStatus> OnGameEnd { get; set; }
    public System.IObservable<System.ValueTuple<int, PRISM.Produce.IngameSkillModel, PRISM.Produce.CardAndSkillExecResult>> OnExecuteIdolSkill { get; set; }
    public System.IObservable<System.ValueTuple<int, PRISM.Produce.IngameSkillModel, PRISM.Produce.CardAndSkillExecResult>> OnExecuteTrainerSkill { get; set; }
    public System.IObservable<PRISM.Produce.IngamePCardModel> OnPreExecutePlayerPCard { get; set; }
    public System.IObservable<System.ValueTuple<PRISM.Produce.IngamePCardModel, PRISM.Produce.CardAndSkillExecResult>> OnExecutePlayerPCard { get; set; }
    public System.IObservable<PRISM.Produce.IngamePCardModel> OnExecuteEnemyPCard { get; set; }
    public System.IObservable<int> OnSetStop { get; set; }
    public InGameType InGameType { get; set; }
    public FastForwardSpeedType FastForwardSpeedType { get; set; }
    public float FastForwardSpeedValue { get; set; }
    public bool IsFastForwardEnable { get; set; }
    public System.IObservable<bool> OnUpdateFastForwardSpeedEnable { get; set; }
    public System.IObservable<FastForwardSpeedType> OnUpdateFastForwardSpeed { get; set; }
    public System.IObservable<float> OnSetLeftTime { get; set; }
    public System.IObservable<System.ValueTuple<float, float>> OnUpdateLeftTime { get; set; }
    public System.IObservable<UniRx.Unit> OnPostPlayerAndAIUpdate { get; set; }
    public System.IObservable<UniRx.Unit> OnPreModelUpdate { get; set; }
    public void ResetValue();
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(System.Threading.CancellationToken token);
    public void Terminate();
    public void Update(float deltaTime);
    public BuffStatus CalcAppealBuffDebuff(PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel, System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypes, PRISM.Produce.IngamePCardModel cardModel);
    public BuffStatus CalcAppealBuffDebuffSkillModel(PRISM.Produce.IngamePlayerModel executorModel, PRISM.Produce.IngamePlayerModel opponentModel, System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypes, PRISM.Produce.IngameSkillModel skillModel);
    public PRISM.Module.Networking.IInGameResultStatus CreateInGameResultStatus();
    protected bool IsWinEnemy();
    public void OnSwipeIdolSkillIcon(SwipeState swipeState, int index);
    public int GetCurrentHp();
    public int GetMaxHp();
    public float GetMentalPercent();
    public void SetMentalPercent(float rate);
    public int GetExecuteSkillIndex();
    public void UpdateExecuteSkillCardIndex(int setIndex);
    public int GetExecuteSkillCardIndex();
    public bool IsAttackableEnemy();
    public void SetSelectCardIndex();
    public void SetStop(StopType stopType, bool flag);
    public void PlayBGM(string cueSheet, string cueName, int startTime);
    public void UpdateGameStatus(LessonStatus status);
    public int GetEnemyCurrentSelectCardCost();
    public int GetEnemyCurrentCardCost(PRISM.Produce.IngamePCardModel produceCard);
    public void UpdateExecuteSkillIndex(int index);
    public bool IsProduceSkillCardCondition(int index);
    public bool IsIdolSillCondition(int index);
    public void ExecutePlayerProduceCard(PRISM.Produce.IngamePCardModel card);
    public PRISM.Produce.CardAndSkillExecResult ExecuteEnemyProduceCard(PRISM.Produce.IngamePCardModel card);
    public void SetEnemyAttackAction(bool flag);
    public PRISM.Produce.CardAndSkillPredictionModel GetPredictionByIdolSkill(PRISM.Produce.IngameSkillModel skill);
    public PRISM.Produce.CardAndSkillPredictionModel GetPredictionBySkillEffect(PRISM.Produce.IngameSkillModel skill, PRISM.Produce.IngameActionEffectModel cardEffect, PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngamePlayerModel opponent);
    public PRISM.Produce.CardAndSkillPredictionModel GetPredictionBySkillCard(PRISM.Produce.IngamePCardModel produceCard, float producePoint, bool isPlayer);
    public PRISM.Produce.CardAndSkillPredictionModel GetPredictionBySkillCard(PRISM.Produce.IngamePCardModel produceCard, float producePoint, PRISM.Produce.IngamePlayerModel myModel, PRISM.Produce.IngamePlayerModel targetModel, bool isExecute);
    public PRISM.Produce.CardAndSkillPredictionModel GetPredictionByCardEffect(PRISM.Produce.ShowProduceCardDetailParam showDetailParam);
    public PRISM.Produce.CardAndSkillPredictionModel GetPredictionByCardEffect(PRISM.Produce.IngamePCardModel produceCard, PRISM.Produce.IngameActionEffectModel cardEffect, PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngamePlayerModel opponent, CardUseTiming useTiming);
    public int OnIncreaseMaxHandNum(PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngameEffectCauseModel cause);
    public void SetFastForwardEnable(bool isFastForward);
    public void SwitchFastForwardSpeed();
    private PRISM.Produce.CardAndSkillExecResult _executeIdolSkill(int index);
    public PRISM.Produce.IngamePlayerModel GetPlayerModel();
    public PRISM.Produce.IngamePlayerModel GetEnemyModel();
    protected void _initializeTrainerDeck();
    private void _updateElapsedTime(float deltaTime);
    protected void _applySupportSkillBuff(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameSupportSkillModel> supportSkills, PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngamePlayerModel opponent);
    private bool _getProduceSkillCardCondition(PRISM.Produce.IngamePCardModel produceCard, PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngamePlayerModel opponent);
    private bool _getProduceIdolSkillCondition(PRISM.Produce.IngameSkillModel skillModel, PRISM.Produce.IngamePlayerModel executor, PRISM.Produce.IngamePlayerModel opponent);
    protected float _getStartTimeSecond();
    private void _resetEnemyValue();
    private void _updateTrainerMain(int playerHp);
    protected void _executeEnemyActiveSkill(int index);
    private Cysharp.Threading.Tasks.UniTask _initializeAiAsync(System.Threading.CancellationToken token);
    private PRISM.Produce.AiExternalAccess _createExternalAccess(PRISM.Produce.IngamePlayerModel ingamePlayerModel, PRISM.Produce.IngamePlayerModel opponentPlayerModel);
    protected void _enemyAttackReadyAction();
    protected float _getSkillExecuteTime();
    protected void _onPostExecuteEnemySkill();
    protected bool _isInGameEnd(ResultStatus& resultStatus, GameEndStatus& gameEndStatus);
    private float <.ctor>b__169_0();
    private float <.ctor>b__169_1();
    private float <.ctor>b__169_2();
    private float <.ctor>b__169_3();
    private float <InitializeAsync>b__171_0();
    private float <InitializeAsync>b__171_1();
    private PRISM.Produce.InGameActionResultPool<PRISM.Produce.CardAndSkillExecResult> <InitializeAsync>b__171_2();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Produce.IngameSupportSkillModel, bool> <>9__213_0;
        public static System.Func<PRISM.Produce.IngamePCardModel, System.Guid> <>9__213_3;
        public static System.Func<PRISM.Produce.IngameSupportSkillModel, bool> <>9__213_1;
        public static System.Func<PRISM.Produce.IngamePCardModel, int> <>9__213_4;
        public static System.Func<PRISM.Produce.IngameSupportSkillModel, bool> <>9__213_2;
        public static System.Func<PRISM.Produce.IngameSupportSkillModel, bool> <>9__213_5;
        public static System.Func<PRISM.Produce.IngameSupportSkillModel, int> <>9__213_6;
        public static System.Func<PRISM.Produce.IngameSupportSkillModel, bool> <>9__213_7;
        private bool <_applySupportSkillBuff>b__213_0(PRISM.Produce.IngameSupportSkillModel x);
        private System.Guid <_applySupportSkillBuff>b__213_3(PRISM.Produce.IngamePCardModel x);
        private bool <_applySupportSkillBuff>b__213_1(PRISM.Produce.IngameSupportSkillModel x);
        private int <_applySupportSkillBuff>b__213_4(PRISM.Produce.IngamePCardModel x);
        private bool <_applySupportSkillBuff>b__213_2(PRISM.Produce.IngameSupportSkillModel x);
        private bool <_applySupportSkillBuff>b__213_5(PRISM.Produce.IngameSupportSkillModel x);
        private int <_applySupportSkillBuff>b__213_6(PRISM.Produce.IngameSupportSkillModel x);
        private bool <_applySupportSkillBuff>b__213_7(PRISM.Produce.IngameSupportSkillModel x);
    }

    private class <>c__DisplayClass187_0
    {
        public PRISM.Produce.ProduceBaseModel <>4__this;
        public int maxCost;
        private bool <SetSelectCardIndex>b__0(PRISM.Produce.IngamePCardModel card);
        private bool <SetSelectCardIndex>b__1(PRISM.Produce.IngamePCardModel card);
        private bool <SetSelectCardIndex>b__2(PRISM.Produce.IngamePCardModel t);
    }

    private class <>c__DisplayClass221_0
    {
        public PRISM.Produce.ProduceBaseModel <>4__this;
        public PRISM.Produce.IngamePlayerModel ingamePlayerModel;
        public PRISM.Produce.IngamePlayerModel opponentPlayerModel;
        private float <_createExternalAccess>b__0();
        private float <_createExternalAccess>b__1();
        private float <_createExternalAccess>b__2();
        private int <_createExternalAccess>b__3();
        private int <_createExternalAccess>b__4();
        private int <_createExternalAccess>b__5();
        private int <_createExternalAccess>b__6();
        private int <_createExternalAccess>b__7();
        private int <_createExternalAccess>b__8(PRISM.Produce.ProduceInGameEffectType EffectType);
        private int <_createExternalAccess>b__9();
        private int <_createExternalAccess>b__10();
        private System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> <_createExternalAccess>b__11();
        private System.Collections.Generic.List<PRISM.Produce.IngamePCardModel> <_createExternalAccess>b__12();
        private bool <_createExternalAccess>b__13(PRISM.Produce.ProduceInGameEffectType type);
        private float <_createExternalAccess>b__14();
        private int <_createExternalAccess>b__15();
        private int <_createExternalAccess>b__16();
        private int <_createExternalAccess>b__17();
        private PRISM.AutoReleaseScope<PRISM.Produce.InGameActionResult> <_createExternalAccess>b__18(PRISM.Produce.IngamePCardModel deckData, float producePoint);
        private int <_createExternalAccess>b__19();
        private int <_createExternalAccess>b__20();
        private PRISM.Produce.IngamePlayerStatusModel <_createExternalAccess>b__21();
        private PRISM.Produce.IngamePlayerModel <_createExternalAccess>b__22();
        private PRISM.Produce.IngamePlayerModel <_createExternalAccess>b__23();
        private void <_createExternalAccess>b__24(int index);
        private void <_createExternalAccess>b__25(int index);
    }

    private struct <InitializeAsync>d__171 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ProduceBaseModel <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_initializeAiAsync>d__220 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ProduceBaseModel <>4__this;
        public System.Threading.CancellationToken token;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ProduceBaseView : UnityEngine.MonoBehaviour
{
    protected float gaugeAnimationTime;
    protected ENTERPRISE.UI.UIButton cancelBackGround;
    protected PRISM.Produce.BuffDebuffDetail buffDebuffDetailDetail;
    private PRISM.Produce.CountdownContent countdownContent;
    protected PRISM.Produce.TimePanelContent timePanelContent;
    protected PRISM.Produce.BaseIngameSkillDetailKeywordContent baseIngameSkillDetailKeywordContent;
    protected PRISM.Produce.ProduceCardAndCharaSkillDetailPanel produceCardAndCharaSkillDetailPanel;
    protected PRISM.Produce.InGameFinishPanel inGameFinishPanel;
    protected PRISM.Produce.ProduceCardAndCharaSkillDetailPanel[] produceCardAndCharaSkillDetailPanelList;
    protected PRISM.Produce.BaseIngameSkillDetailKeywordContent[] baseIngameSkillDetailKeywordContentList;
    private UniRx.Subject<bool> onChangeVisibleDetailUI;
    private UniRx.Subject<UniRx.Unit> onShowBuffDebuffDetailUI;
    protected System.Action onHidePrediction;
    private PRISM.Produce.ProduceIngameLoader resourceLoader;
    protected PRISM.Produce.ProduceInGamePauseContent pauseContent;
    private UniRx.Subject<bool> onChangeFocus;
    private bool isShowPrediction;
    private PRISM.Produce.FastForwardButton fastForwardButton;
    private ENTERPRISE.UI.UIButton closeActionLogButton;
    private UniRx.Subject<UniRx.Unit> onClickEndInGameButton;
    private PRISM.Produce.InGamePlayerView playerView;
    private PRISM.Produce.InGameEnemyView enemyView;
    private PRISM.Produce.ShakeUIController shakeTarget;
    private PRISM.Produce.ActionLogView actionLogView;
    private PRISM.Produce.ActionLogView miniActionLogView;
    public System.Func<System.Threading.CancellationToken, Cysharp.Threading.Tasks.UniTask> OnClickRestartButtonActionAsync;
    public System.Action OnClickCancelButtonAction;
    public PRISM.Produce.InGamePlayerView PlayerView { get; set; }
    public PRISM.Produce.InGameEnemyView EnemyView { get; set; }
    public PRISM.Produce.ActionLogView ActionLogView { get; set; }
    public PRISM.Produce.ActionLogView MiniActionLogView { get; set; }
    public System.IObservable<UniRx.Unit> OnClickEndInGameButton { get; set; }
    public System.IObservable<UniRx.Unit> OnPause { get; set; }
    public System.IObservable<UniRx.Unit> OnUnPause { get; set; }
    public System.IObservable<PRISM.Produce.ProduceOptionSaveData> OnApplyProduceOption { get; set; }
    public System.IObservable<bool> OnChangeVisibleDetailUI { get; set; }
    public System.IObservable<bool> OnChangeFocus { get; set; }
    public System.IObservable<UniRx.Unit> OnClickFastForwardButton { get; set; }
    public System.IObservable<UniRx.Unit> OnClickCloseActionLogButton { get; set; }
    public System.IObservable<UniRx.Unit> OnShowBuffDebuffDetailUI { get; set; }
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(System.Threading.CancellationToken cancellationToken);
    public void ResetView();
    public void SetupPauseContent(System.Collections.Generic.IReadOnlyList<PRISM.Produce.EnemySkillContentViewModel> enemySkillViewModels, InGameType inGameType, PRISM.Produce.ChallengeMissionViewModel challengeMissionViewModel, System.Func<Cysharp.Threading.Tasks.UniTask> onPreCloseByRetryButtonFunc, System.Func<Cysharp.Threading.Tasks.UniTask> onPreCloseByGiveUpButtonFunc);
    public void SetResourceLoader(PRISM.Produce.ProduceIngameLoader resourceLoader);
    public void SetupActionLog(InGameType inGameType);
    public UnityEngine.RectTransform GetCardAndCharaSkillDetailPanelRectTransform();
    private UnityEngine.RectTransform _getBaseIngameSkillDetailKeywordContent();
    public UnityEngine.RectTransform GetBaffDebaffDetailRectTransform();
    public void ShowProduceCardDetail(PRISM.Produce.IngamePlayerModel usePlayer, PRISM.Produce.IngamePCardModel produceCard, System.Func<PRISM.Produce.ShowProduceCardDetailParam, PRISM.Produce.CardAndSkillPredictionModel> getPredictionFunc, bool isActionLogPos);
    public void UpdateProduceCardAndCharaSkillDetail();
    public void ShowIdolSkillDetail(int index, PRISM.Produce.IngameSkillModel idolSkill, System.Func<PRISM.Produce.IngameSkillModel, PRISM.Produce.IngameActionEffectModel, PRISM.Produce.CardAndSkillPredictionModel> getPredictionFunc, bool isActionLogPos);
    public void ShowEnemySkillDetail(PRISM.Produce.IngameSkillModel trainerSkill, bool isActionLogPos);
    public void ShowBuffDebuffDetail(PRISM.Produce.ProduceInGameEffectGroup effectGroup);
    public void HideAllDetailUI();
    public void HideCardAndSkillDetail();
    public void HideBuffDebuffDetail();
    public void SetEnableFastForwarButton(bool isEnable);
    public void ShowPrediction(PRISM.Produce.CardAndSkillPredictionModel predictionModel);
    public void UpdatePrediction(PRISM.Produce.CardAndSkillPredictionModel predictionModel);
    public void HidePrediction();
    public void SetPredictionModel(PRISM.Produce.CardAndSkillPredictionModel predictionModel);
    public void SetCountDownObjectEnabled(bool setEnable);
    public Cysharp.Threading.Tasks.UniTask StartCountDownAsync(System.Threading.CancellationToken cancellationToken);
    public void OnPreShowResult();
    public void ShowSuccessResult();
    public void ShowFailureResult(bool isDisableEndBtn);
    public void HideResult();
    public void InitializeCountDown(InGameType inGameType);
    public void InitializeTimePanel(InGameType inGameType);
    public void InitializeFinishPanel(InGameType inGameType);
    public Cysharp.Threading.Tasks.UniTask LoadMyDeckDataTextureAsync(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngamePCardModel> deckCards, System.Threading.CancellationToken ct);
    public void UpdateBuffDebuffDetail();
    public void UpdateLeftTime(float timeCount);
    public void LeftTimeZero();
    public void ShowSuspendUnPauseButton();
    public void HidePauseButton();
    public void SetPauseButtonEnable(bool isEnable);
    public void UpdateFastForwardButtonView(FastForwardSpeedType speedType);
    public void ShakeUI();
    public void SetAnimationSpeed(float speed);
    public Cysharp.Threading.Tasks.UniTask TerminateAsync();
    protected void _initializeButtons();
    protected void _hidePrediction(PRISM.Produce.CardAndSkillPredictionModel predictionModel);
    protected void _showIdolSkillDetail(PRISM.Produce.IngameSkillModel idolSkill, System.Func<PRISM.Produce.IngameSkillModel, PRISM.Produce.IngameActionEffectModel, PRISM.Produce.CardAndSkillPredictionModel> getPredictionFunc);
    protected void _showTrainerSkillDetail(PRISM.Produce.IngameSkillModel trainerSkill);
    private void OnApplicationFocus(bool hasFocus);
    private void _setActiveDetailAndHint(bool isActionLogPos);
    private void <_initializeButtons>b__94_0();

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<ButtonType, PRISM.Produce.ProduceBaseView> <>9__53_0;
        private void <InitializeAsync>b__53_0(ButtonType buttonType, PRISM.Produce.ProduceBaseView state);
    }

    private class <>c__DisplayClass73_0
    {
        public PRISM.Produce.ProduceBaseView <>4__this;
        public PRISM.Produce.CardAndSkillPredictionModel predictionModel;
        private void <SetPredictionModel>b__0();
    }

    private class <>c__DisplayClass83_0
    {
        public PRISM.Produce.ProduceBaseView <>4__this;
        public System.Threading.CancellationToken ct;
        private Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> <LoadMyDeckDataTextureAsync>b__0(PRISM.Produce.IngamePCardModel e);
    }
}

// Namespace: PRISM.Produce
public class ProduceExitSequencer
{
    public static void ResetData();
    public static Cysharp.Threading.Tasks.UniTask FinishProduceAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceOptionSaveData : ENTERPRISE.Data.LegacySaveDataBase
{
    public bool IsAutoMode;
    public CommuSkipModeEnum CommuSkipMode;
    public bool IsSkipIdolSkillCutIn;
    public bool IsSkipConfirmView;
    public bool IsSkipSkit;
    public bool IsSkipMiniCharaAction;
    public bool IsNotStopAutoMode;
    public bool IsStopTapIngameContent;
    public bool IsShakeUIInGame;
    public bool IsSimpleBufferDisplay;
    public int DeleteCardCountInProduce;
    public bool IsDefault();
    public void Reset();
    public bool IsSkipCommu(bool isRead);

    public enum CommuSkipModeEnum : System.Enum
    {
        public int value__;
        public static CommuSkipModeEnum NotSkip;
        public static CommuSkipModeEnum AlreadySkip;
        public static CommuSkipModeEnum AllSkip;
    }
}

// Namespace: PRISM.Produce
public class ProduceSE
{
    public static string SheetName;
    public static PRISM.Definitions.SoundKey ResultActionSuccess;
    public static PRISM.Definitions.SoundKey DisplayFunUp;
    public static PRISM.Definitions.SoundKey UseIdleSkill;
    public static PRISM.Definitions.SoundKey UseIdleCard;
    public static PRISM.Definitions.SoundKey AlertPinch;
    public static PRISM.Definitions.SoundKey ResultActionFailure;
    public static PRISM.Definitions.SoundKey AlertMentalBreak;
    public static PRISM.Definitions.SoundKey AppealGuageUp;
    public static PRISM.Definitions.SoundKey MeGuageDown;
    public static PRISM.Definitions.SoundKey ActionMentalguard;
    public static PRISM.Definitions.SoundKey TimeleftAlert;
    public static PRISM.Definitions.SoundKey MeGuageRecovery;
    public static PRISM.Definitions.SoundKey ActionTrainerSkill;
    public static PRISM.Definitions.SoundKey EffectDeBuff;
    public static PRISM.Definitions.SoundKey EffectBuff;
    public static PRISM.Definitions.SoundKey TimeleftAlertLesson;
    public static PRISM.Definitions.SoundKey ResultStatusUp;
    public static PRISM.Definitions.SoundKey ResultRankUp;
    public static PRISM.Definitions.SoundKey ResultTassei;
    public static PRISM.Definitions.SoundKey ResultParameterUp;
    public static PRISM.Definitions.SoundKey ChibicharaOut;
    public static PRISM.Definitions.SoundKey ActionAvoid;
    public static PRISM.Definitions.SoundKey ResultActionPerfect;
    public static PRISM.Definitions.SoundKey EffectAppealWave;
    public static PRISM.Definitions.SoundKey EffectAppealLineRed;
    public static PRISM.Definitions.SoundKey EffectAppealLineGreen;
    public static PRISM.Definitions.SoundKey EffectAppealLineBlue;
    public static PRISM.Definitions.SoundKey ProduceStart;
    public static PRISM.Definitions.SoundKey SesonStart;
    public static PRISM.Definitions.SoundKey ScenarioChoice;
    public static PRISM.Definitions.SoundKey CardRivalTurn;
    public static PRISM.Definitions.SoundKey CardRefill;
    public static PRISM.Definitions.SoundKey UseIdleSkillIcon;
    public static PRISM.Definitions.SoundKey CountdownStart;
    public static PRISM.Definitions.SoundKey CountdownWord;
    public static PRISM.Definitions.SoundKey ResultLessonFinished;
    public static PRISM.Definitions.SoundKey ResultGageupLoop;
    public static PRISM.Definitions.SoundKey ResultPcardRankupCount;
    public static PRISM.Definitions.SoundKey ResultMissionTassei;
    public static PRISM.Definitions.SoundKey ResultClearLankGreat;
    public static PRISM.Definitions.SoundKey ResultClearLankGood;
    public static PRISM.Definitions.SoundKey ResultClearLankSS;
    public static PRISM.Definitions.SoundKey ResultClearLankS;
    public static PRISM.Definitions.SoundKey ResultClearLankA;
    public static PRISM.Definitions.SoundKey ResultTips;
    public static PRISM.Definitions.SoundKey DisplayAutoSchedule;
    public static PRISM.Definitions.SoundKey LessonJingleFailureShort;
    public static PRISM.Definitions.SoundKey LessonJingleFailure;
    public static PRISM.Definitions.SoundKey LessonJingleSuccess;
    public static PRISM.Definitions.SoundKey SeProduceSkillIrekae;
    public static PRISM.Definitions.SoundKey DisplayLvSchedule;
}

// Namespace: PRISM.Produce
public class SupportEffectContent : UnityEngine.MonoBehaviour
{
    private UnityEngine.Color releaseColor;
    private UnityEngine.Color nonReleaseColor;
    private ENTERPRISE.UI.UITextMeshProUGUI skillEffectNameText;
    private ENTERPRISE.UI.UITextMeshProUGUI skillEffectDescriptionText;
    private System.Collections.Generic.List<UnityEngine.GameObject> skillEffectTargetCharaObjectList;
    private System.Collections.Generic.List<UnityEngine.UI.Image> skillEffectTargetCharaImageList;
    private System.Collections.Generic.List<UnityEngine.GameObject> skillEffectTargetCharaCoverList;
    private UnityEngine.UI.Image bgImage;
    public Cysharp.Threading.Tasks.UniTask SetupAsync(System.Collections.Generic.KeyValuePair<int, System.Collections.Generic.List<System.ValueTuple<int, bool>>> oneSkillEffect, System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask _loadSdCharaIconAsync(int charaId, bool isRelease, int index, System.Threading.CancellationToken cancellationToken, bool isAllNotRelease);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<System.ValueTuple<int, bool>, bool> <>9__8_0;
        private bool <SetupAsync>b__8_0(System.ValueTuple<int, bool> data);
    }

    private struct <SetupAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.SupportEffectContent <>4__this;
        public System.Collections.Generic.KeyValuePair<int, System.Collections.Generic.List<System.ValueTuple<int, bool>>> oneSkillEffect;
        public System.Threading.CancellationToken cancellationToken;
        private System.Collections.Generic.List<System.ValueTuple<int, bool>> <charaList>5__2;
        private int <nonReleaseCount>5__3;
        private int <i>5__4;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_loadSdCharaIconAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public int charaId;
        public PRISM.Produce.SupportEffectContent <>4__this;
        public int index;
        public System.Threading.CancellationToken cancellationToken;
        public bool isRelease;
        private UnityEngine.UI.Image <>7__wrap1;
        private Awaiter<UnityEngine.Sprite> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialEpisodeFactory
{
    public static PRISM.Module.Networking.IEpisodeStatus Create();
}

// Namespace: PRISM.Produce
public class AuditionViewParameter : ENTERPRISE.IViewParameter
{
    public int UnitID;
    public int EpisodeID;
    public PRISM.UnitIdol[] UnitIdols;
    public PRISM.Module.Networking.IProduceUnitStatus ProduceUnit;
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IInProduceIdolStatus> ProduceIdols;
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceCardStatus> DeckCards;
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IInProducePotentialSupportSkillStatus> SupportSkills;
    public PRISM.Module.Networking.IRivalUnitStatus RivalUnitData;
    public PRISM.Module.Networking.IOpponentStatus OpponentData;
    public ProduceDifficultyType DifficultyType;
    public int Season;
}

// Namespace: PRISM.Produce
public class HowToPlayProduceManualData : UnityEngine.ScriptableObject
{
    public System.Collections.Generic.List<HowToPlayProduceManual> Datas;

    public class HowToPlayProduceManual
    {
        public string TitleName;
        public string assetKey;
        public int UnitId;
        public bool IsForceAddList;
    }
}

// Namespace: PRISM.Produce
public class LessonViewParameter : ENTERPRISE.IViewParameter
{
    public ScheduleDetailType ScheduleDetailType;
    public int ScheduleLevel;
    public int UnitID;
    public PRISM.Module.Networking.ISelectedEpisodeStatus Episode;
    public PRISM.UnitIdol[] UnitIdols;
    public PRISM.Module.Networking.IProduceUnitStatus ProduceUnit;
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceCardStatus> DeckCards;
    public PRISM.Module.Networking.ITrainerStatus TrainerData;
    public PRISM.Module.Networking.IOpponentStatus OpponentData;
    public ProduceDifficultyType DifficultyType;
    public PRISM.Module.Networking.IChallengeMissionStatus ChallengeMission;
    public PRISM.Module.Networking.IInProduceIdolStatus ChallengeMissionTargetPIdol;
    public PRISM.Module.Networking.IBuildUpParameterValueStatus ChallengeMissionUpParameter;
    private bool <.ctor>b__13_0(PRISM.Module.Networking.IInProduceIdolStatus e);
}

// Namespace: PRISM.Produce
public class ScheduleDefine
{
    public static string RestScenarioIDSuffix;
    public static string AdviceScenarioIDSuffix;
    public static string MstProduceStrategyTitle;
    public static string MstProduceStrategyDescription;
    public static string MstProduceStrategyDetail;
    public static string MstPotentialSupportSkillName;
    public static string MstPotentialSupportSkillDescription;
    public static string MstSupportSkillEffectName;
    public static string MstSupportSkillEffectDescription;
    public static string MstEpisodeTitle;
    public static string MstProduceIdolName;
    public static int OutGameMinDeckNum;
    public static int CurrentVitality;
    public static int TargetScheduleWeekIndex;
    public static bool IsMiniCharaActionSchedule(ScheduleDetailType type);
}

// Namespace: PRISM.Produce
public class ScheduleModel
{
    private PRISM.Module.Networking.IGetProduceTopReply cacheGetProduceTopReplyDto;
    private int selectedScheduleIndex;
    private bool isTouchMiniCharacterDisplay;
    private System.Collections.Generic.Dictionary<ScheduleType, int> scheduleIndexDic;
    private System.Collections.Generic.List<PRISM.Module.Networking.IWeekScheduleStatus> <WeekScheduleList>k__BackingField;
    private PRISM.Module.Networking.IProduceBaseInfoStatus <ProduceBaseInfo>k__BackingField;
    public System.Collections.Generic.List<PRISM.Module.Networking.IWeekScheduleStatus> WeekScheduleList { get; set; }
    public PRISM.Module.Networking.IProduceBaseInfoStatus ProduceBaseInfo { get; set; }
    public System.Collections.Generic.Dictionary<ScheduleType, int> ScheduleIndexDic { get; set; }
    public int SelectedScheduleIndex { get; set; }
    public bool IsTouchMiniCharacterDisplay { get; set; }
    public void Initialize();
    public int TargetWeekInitializeIndex(int weekIndex);
    public PRISM.Module.Networking.IScheduleStatus GetTargetSchedule(int weekIndex, int targetIndex);
    private void _calculateTagetWeek();
}

// Namespace: PRISM.Produce
public class TutorialData : UnityEngine.ScriptableObject
{
    public System.Collections.Generic.List<TutorialParam> TutorialParams;

    public class TutorialParam
    {
        public int id;
        public string TitleName;
        public int UnitId;
    }
}

// Namespace: PRISM.Produce
public class ChallengeMissionContent : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.RawImage characterImage;
    private ENTERPRISE.UI.UITextMeshProUGUI titleText;
    private ENTERPRISE.UI.UITextMeshProUGUI descriptionText;
    private UnityEngine.GameObject missionSuccessObj;
    private UnityEngine.GameObject missionFailureObj;
    private PRISM.Produce.ParameterContent parameterContent;
    public Cysharp.Threading.Tasks.UniTask SetupWithShowResultAsync(PRISM.Module.Networking.IChallengeMissionStatus challengeMission, int idolID, PRISM.Module.Networking.IParameterVariationStatus parameterVariation, PRISM.Module.Networking.IInProduceIdolBaseStatus idolBase, bool isMissionSuccess, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask SetupNotShowResultAsync(PRISM.Module.Networking.IChallengeMissionStatus challengeMission, PRISM.Module.Networking.IInProduceIdolStatus produceIdol, PRISM.Module.Networking.IBuildUpParameterValueStatus buildUpParameter, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask SetupShowProgressAsync(PRISM.Module.Networking.IChallengeMissionStatus challengeMission, int currentValue, PRISM.Module.Networking.IInProduceIdolStatus produceIdol, PRISM.Module.Networking.IBuildUpParameterValueStatus buildUpParameter, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask PlayParameterAnimationAsync(PRISM.Module.Networking.IParameterVariationStatus parameterVariation, System.Threading.CancellationToken cancellationToken);
    public void ShowParameterAfterValue(PRISM.Module.Networking.IParameterVariationStatus parameterVariation);
    private Cysharp.Threading.Tasks.UniTask _setupAsync(PRISM.Module.Networking.IChallengeMissionStatus challengeMission, int idolID, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask _loadIconAsync(int idolID, PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken cancellationToken);
}

// Namespace: PRISM.Produce
public class MiniCharacterActionContent : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject resultDisplayObject;
    private ENTERPRISE.UI.AnimatorWithEvent resultDisplayAnimator;
    private UnityEngine.UI.RawImage renderMiniCharacterActionImage;
    private UnityEngine.Animator miniCharacterActionAreaAnimator;
    private UnityEngine.GameObject successResultObject;
    private UnityEngine.GameObject perfectResultObject;
    private UnityEngine.GameObject failedResultObject;
    private UnityEngine.RenderTexture minicharaDisplayAreadRenderTexture;
    private PRISM.CameraController cameraForReservedBuffer;
    public ENTERPRISE.UI.AnimatorWithEvent ResultDisplayAnimator { get; set; }
    public UnityEngine.Animator MiniCharacterActionAreaAnimator { get; set; }
    public UnityEngine.GameObject ResultDisplayObject { get; set; }
    public Cysharp.Threading.Tasks.UniTask PlayResultAnimationAsync(bool isTrouble, bool isSupportBonus, System.Threading.CancellationToken ct);
    private void Awake();
    public void SetupCameraForReservedBuffer(PRISM.CameraController camera);
    private void Update();

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<string> <>9__16_0;
        private void <Awake>b__16_0(string tag);
    }
}

// Namespace: PRISM.Produce
public class OneSchedulePolicyContent : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UIButton producePolicyButton;
    private UnityEngine.UI.Image producePolicyImage;
    private ENTERPRISE.UI.UITextMeshProUGUI producePolicyTitleText;
    private ENTERPRISE.UI.UITextMeshProUGUI producePolicyDescriptionText;
    private UnityEngine.GameObject supportBalloon;
    public ENTERPRISE.UI.UIButton ProducePolicyButton { get; set; }
    public ENTERPRISE.UI.UITextMeshProUGUI ProducePolicyTitleText { get; set; }
    public ENTERPRISE.UI.UITextMeshProUGUI ProducePolicyDescriptionText { get; set; }
    public Cysharp.Threading.Tasks.UniTask SetupAsync(PRISM.Module.Networking.IProduceStrategyStatus produceStrategyStatus, bool isSpecifiedByPassiveEffect, System.Threading.CancellationToken ct);
    public void _setSupportBalloon(bool isSpecifiedByPassiveEffect);
    private Cysharp.Threading.Tasks.UniTask _loadProducePolicySelectSpriteIcon(int id, System.Threading.CancellationToken ct);
    private void _updateText(PRISM.Module.Networking.IProduceStrategyStatus produceStrategyStatus);

    private struct <SetupAsync>d__11 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.OneSchedulePolicyContent <>4__this;
        public PRISM.Module.Networking.IProduceStrategyStatus produceStrategyStatus;
        public bool isSpecifiedByPassiveEffect;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_loadProducePolicySelectSpriteIcon>d__13 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public int id;
        public System.Threading.CancellationToken ct;
        public PRISM.Produce.OneSchedulePolicyContent <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ParameterContent : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject VocalAreaObject;
    private UnityEngine.GameObject DanceAreaObject;
    private UnityEngine.GameObject VisualAreaObject;
    private UnityEngine.GameObject MentalAreaObject;
    private UnityEngine.UI.RawImage VocalRankText;
    private ENTERPRISE.UI.UITextMeshProUGUI VocalValueText;
    private UnityEngine.UI.RawImage DanceRankText;
    private ENTERPRISE.UI.UITextMeshProUGUI DanceValueText;
    private UnityEngine.UI.RawImage VisualRankText;
    private ENTERPRISE.UI.UITextMeshProUGUI VisualValueText;
    private UnityEngine.UI.RawImage MentalRankText;
    private ENTERPRISE.UI.UITextMeshProUGUI MentalValueText;
    private ENTERPRISE.UI.UITextMeshProUGUI VocalPointUpValueText;
    private ENTERPRISE.UI.UITextMeshProUGUI DancePointUpValueText;
    private ENTERPRISE.UI.UITextMeshProUGUI VisualPointUpValueText;
    private ENTERPRISE.UI.UITextMeshProUGUI MentalPointUpValueText;
    private System.Collections.Generic.List<UnityEngine.UI.RawImage> rawImageList;
    private System.Collections.Generic.List<UnityEngine.UI.RawImage> rawImageAfterList;
    private ParameterModel[] parameterModels;
    private UnityEngine.GameObject idolArea;
    private UnityEngine.UI.Image idolSDIcon;
    private UnityEngine.GameObject unitArea;
    private ENTERPRISE.UI.UITextMeshProUGUI unitIdolCountText;
    private System.Collections.Generic.List<System.IDisposable> disposables;
    private System.Threading.CancellationToken cancellationToken { get; set; }
    public ParameterModel[] ParameterModels { get; set; }
    public void SetupMissionParameter(PRISM.Module.Networking.IProduceParameterStatus produceParameterStatusDto, PRISM.Module.Networking.IBuildUpParameterValueStatus buildUpParameter, PRISM.Module.Networking.IInProduceIdolBaseStatus idolBase);
    public void SetupParameter(PRISM.Module.Networking.IParameterVariationStatus unitParameterVariation, PRISM.Module.Networking.IInProduceIdolBaseStatus idolBase);
    public void SetupParameterBeforeValue(PRISM.Module.Networking.IParameterVariationStatus unitParameterVariation, PRISM.Module.Networking.IInProduceIdolBaseStatus idolBase);
    public void DefaultParameterDisplay(PRISM.Module.Networking.IProduceParameterStatus parameter);
    public void CheckParameterRankUpDown(PRISM.Module.Networking.IParameterVariationStatus unitParameterVariation);
    public void SetAnimatorIntValue(UnityEngine.Animator animator, string parameterName, int value);
    public void ActivateAllParameterArea(bool isActive);
    public void SetupParameterValiation(PRISM.Module.Networking.IParameterVariationStatus parameterVariation, PRISM.Module.Networking.IInProduceIdolBaseStatus idolBase);
    public void SetupUnitParameterVariation(int idolCount, PRISM.Module.Networking.IParameterVariationStatus parameterVariation);
    public Cysharp.Threading.Tasks.UniTask SetupIdolParameterVariationAsync(PRISM.Module.Networking.IParameterVariationStatus parameterVariation, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask PlayParameterAnimationAsync(PRISM.Module.Networking.IParameterVariationStatus parameterVariation, System.Threading.CancellationToken cancellationToken);
    public void ShowAfterVariationValue(PRISM.Module.Networking.IParameterVariationStatus parameterVariation);
    private void Awake();
    private void _updateParameterUpColor(PRISM.Module.Networking.IParameterVariationStatus unitParameterVariation, bool isUpdateColor);
    private void _updateTotalParameterColor(PRISM.Module.Networking.IParameterVariationStatus unitParameterVariation, bool isUpdateColor);
    private Cysharp.Threading.Tasks.UniTask _loadParameterRankIconAsync(ProduceParameterRank rank, int index, bool isAfter, System.Threading.CancellationToken cancellationToken);
    private string _getParameterUpDisplayString(int upValue, ScheduleDetailType scheduleDetailType);
    private string _getParameterUpDisplayString(int upValue, bool istUpdateColor);
    private string _getParameterUpTotalDisplayString(int upValue, int totalValue);
    private void _setupParameterVariation(PRISM.Module.Networking.IParameterVariationStatus parameterVariation, PRISM.Module.Networking.IInProduceIdolBaseStatus idolBase);
    private void OnDestroy();

    public class ParameterModel
    {
        public ProduceParameterType ParameterType;
        public UnityEngine.Animator RankUpDownAnimator;
        public UnityEngine.Animator RankUpAlphabetAnimator;
        public ENTERPRISE.UI.AnimatorWithEvent RankUpAlphabetAnimatorEvent;
        public ENTERPRISE.UI.UITextMeshProUGUI TextValue;
        public RankUpDownType RankUpDownType;
    }

    public enum RankUpDownType : System.Enum
    {
        public int value__;
        public static RankUpDownType None;
        public static RankUpDownType RankUp;
        public static RankUpDownType RankDown;
    }

    public enum ResultAnimationType : System.Enum
    {
        public int value__;
        public static ResultAnimationType None;
        public static ResultAnimationType Parameter;
        public static ResultAnimationType Fan;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<string> <>9__43_0;
        private void <Awake>b__43_0(string eventTag);
    }

    private class <>c__DisplayClass41_0
    {
        public PRISM.Produce.ParameterContent <>4__this;
        public PRISM.Module.Networking.IParameterVariationStatus parameterVariation;
        public DG.Tweening.TweenCallback <>9__0;
        private void <PlayParameterAnimationAsync>b__0();
    }

    private struct <PlayParameterAnimationAsync>d__41 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ParameterContent <>4__this;
        public PRISM.Module.Networking.IParameterVariationStatus parameterVariation;
        public System.Threading.CancellationToken cancellationToken;
        private <>c__DisplayClass41_0 <>8__1;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetupIdolParameterVariationAsync>d__40 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ParameterContent <>4__this;
        public PRISM.Module.Networking.IParameterVariationStatus parameterVariation;
        public System.Threading.CancellationToken cancellationToken;
        private UnityEngine.UI.Image <>7__wrap1;
        private Awaiter<UnityEngine.Sprite> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ProduceCardContent : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.RawImage cardImage;
    private UnityEngine.UI.RawImage cardUnitFrame;
    private UnityEngine.UI.RawImage cardNoUnitFrame;
    private PRISM.VoDaViMeMultiView voDaViMeMultiView;
    private ENTERPRISE.UI.UITextMeshProUGUI costText;
    private ENTERPRISE.UI.UITextMeshProUGUI cardDescriptionText;
    private PRISM.Legacy.PCardEffectIconAreaContent[] effectIconAreas;
    private UnityEngine.GameObject cardRankArea;
    private UnityEngine.GameObject[] cardRankIcons;
    private PRISM.UIGrayOutController nonActiveGrayOut;
    private ENTERPRISE.UI.UIButton cardClickButton;
    private PRISM.Produce.ProduceIngameLoader resourceLoader;
    public System.IObservable<UniRx.Unit> OnClick { get; set; }
    public Cysharp.Threading.Tasks.UniTask SetupAsync(PRISM.Module.Networking.IProduceCardStatus produceCard, PRISM.ResourceManagement.IResourceLoader resourceLoader, int cardRank, DoubleCardUseType phase, System.Nullable<PRISM.Domain.BitProduceParameterType> appealTypes, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask SetupAsync(PRISM.Module.Networking.IProduceCardStatus produceCard, PRISM.Produce.ProduceIngameLoader resourceLoader, int cardRank, DoubleCardUseType phase, System.Nullable<PRISM.Domain.BitProduceParameterType> appealTypes, System.Threading.CancellationToken ct);
    public void Setup(PRISM.Module.Networking.IProduceCardStatus produceCard, int cardRank);
    public void SetGrayOut(bool isGrayOut);
    public void SetCostText(int cost);
    public void SetClickEnable(bool isEnable);
    public void SetLongPressEnable(bool isEnable);
    public void ResetDragging();
    public void UpdateAppealType(PRISM.Domain.BitProduceParameterType appealTypes);
    private Cysharp.Threading.Tasks.UniTask _loadProduceCardAsync(int id, DoubleCardUseType phase, System.Threading.CancellationToken ct);
    private Cysharp.Threading.Tasks.UniTask _displayDetailPopupAsync(PRISM.Module.Networking.IProduceCardStatus produceCard, System.Threading.CancellationToken ct);
    private static void _addIconIdsFromCard(PRISM.Module.Networking.IProduceCardStatus cardData, SimplePhase phase, int rank, System.Collections.Generic.List<int>& iconIds);

    private class <>c__DisplayClass15_0
    {
        public PRISM.Produce.ProduceCardContent <>4__this;
        public PRISM.Module.Networking.IProduceCardStatus produceCard;
        public System.Threading.CancellationToken ct;
        private void <SetupAsync>b__0();
    }

    private struct <SetupAsync>d__15 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ProduceCardContent <>4__this;
        public PRISM.Module.Networking.IProduceCardStatus produceCard;
        public System.Threading.CancellationToken ct;
        public PRISM.Produce.ProduceIngameLoader resourceLoader;
        public int cardRank;
        public DoubleCardUseType phase;
        public System.Nullable<PRISM.Domain.BitProduceParameterType> appealTypes;
        private <>c__DisplayClass15_0 <>8__1;
        private PRISM.Module.Networking.IProduceCardStatus <cardData>5__2;
        private int <rank>5__3;
        private int <contentGroupId>5__4;
        private DoubleCardUseType <phaseId>5__5;
        private int <validIndexEffectIconArea>5__6;
        private UnityEngine.Pool.PooledObject<System.Collections.Generic.List<int>> <_>5__7;
        private System.Collections.Generic.List<int> <iconIds>5__8;
        private Awaiter <>u__1;
        private int <i>5__9;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_loadProduceCardAsync>d__23 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ProduceCardContent <>4__this;
        public int id;
        public DoubleCardUseType phase;
        public System.Threading.CancellationToken ct;
        private UnityEngine.UI.RawImage <>7__wrap1;
        private Awaiter<UnityEngine.Texture2D> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ProducePolicyDetailContent : UnityEngine.MonoBehaviour
{
    private PRISM.Produce.OneSchedulePolicyContent oneSchedulePolicyContent;
    private ENTERPRISE.UI.UITextMeshProUGUI policyDescriptionText;
    private UnityEngine.RectTransform policyDescriptionContent;
    private ENTERPRISE.UI.UIButton agreeButton;
    private ENTERPRISE.UI.UIButton cancelButton;
    private System.Collections.Generic.List<UnityEngine.GameObject> agreeButtonBackImageObjectList;
    private UnityEngine.GameObject supportBalloon;
    private UnityEngine.GameObject bdgRecommend;
    public System.Action CallBackDecideScenario;
    public System.Action CallBackCancelScenario;
    public PRISM.Produce.OneSchedulePolicyContent OneSchedulePolicyContent { get; set; }
    public ENTERPRISE.UI.UITextMeshProUGUI PolicyDescriptionText { get; set; }
    public UnityEngine.RectTransform PolicyDescriptionContent { get; set; }
    public ENTERPRISE.UI.UIButton AgreeButton { get; set; }
    public ENTERPRISE.UI.UIButton CancelButton { get; set; }
    private void Start();
    public void Setup(PRISM.Produce.OneSchedulePolicyContent oneSchedulePolicyContentValue, PRISM.Module.Networking.IProduceStrategyStatus produceStrategyStatus, int index);
}

// Namespace: PRISM.Produce
public class RewardContent : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject rewardArea;
    private UnityEngine.UI.RawImage rewardIcon;
    private ENTERPRISE.UI.UITextMeshProUGUI rewardText;
    private UnityEngine.GameObject BlankUI;
    public Cysharp.Threading.Tasks.UniTask SetupAsync(int unitID, PRISM.Module.Networking.IScheduleRewardStatus scheduleRewardStatus, System.Threading.CancellationToken cancellationToken);
    public void ShowBlank();
    private Cysharp.Threading.Tasks.UniTask _loadRewardIconAsync(int unitID, ProduceRewardType rewardType, System.Threading.CancellationToken cancellationToken);
}

// Namespace: PRISM.Produce
public class ScheduleInfoContent : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject scheduleNameObject;
    private UnityEngine.GameObject scheduleLevelObject;
    private ENTERPRISE.UI.UITextMeshProUGUI scheduleLevelText;
    private UnityEngine.UI.Image scheduleCategoryImage;
    private UnityEngine.UI.Image scheduleNameImage;
    private UnityEngine.GameObject supportbonusObject;
    private UnityEngine.GameObject noBonusObject;
    public Cysharp.Threading.Tasks.UniTask SetupAsync(ScheduleDetailType scheduleDetailType, bool isSupportBonus, int scheduleLevel, System.Threading.CancellationToken ct);
    private Cysharp.Threading.Tasks.UniTask _loadScheduleCategoryIcon(int scheduleType, System.Threading.CancellationToken ct);
    private Cysharp.Threading.Tasks.UniTask _loadScheduleNameIcon(int id, System.Threading.CancellationToken ct);

    private struct <SetupAsync>d__7 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ScheduleInfoContent <>4__this;
        public ScheduleDetailType scheduleDetailType;
        public System.Threading.CancellationToken ct;
        public bool isSupportBonus;
        public int scheduleLevel;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_loadScheduleCategoryIcon>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ScheduleInfoContent <>4__this;
        public int scheduleType;
        public System.Threading.CancellationToken ct;
        private UnityEngine.UI.Image <>7__wrap1;
        private Awaiter<UnityEngine.Sprite> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_loadScheduleNameIcon>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ScheduleInfoContent <>4__this;
        public int id;
        public System.Threading.CancellationToken ct;
        private UnityEngine.UI.Image <>7__wrap1;
        private Awaiter<UnityEngine.Sprite> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ScheduleLevelUpContent : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.Image beforeLevelImage;
    private UnityEngine.UI.Image afterLevelImage;
    private ENTERPRISE.UI.AnimatorWithEvent levelUpAnimator;
    public Cysharp.Threading.Tasks.UniTask ShowAsync(PRISM.Module.Networking.IScheduleVariationStatus scheduleVariation, System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask _loadScheduleCategoryIconAsync(int scheduleLevel, UnityEngine.UI.Image updateImage, System.Threading.CancellationToken cancellationToken);
    private void Awake();

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<string> <>9__5_0;
        private void <Awake>b__5_0(string tag);
    }

    private struct <ShowAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ScheduleLevelUpContent <>4__this;
        public PRISM.Module.Networking.IScheduleVariationStatus scheduleVariation;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_loadScheduleCategoryIconAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public int scheduleLevel;
        public UnityEngine.UI.Image updateImage;
        public System.Threading.CancellationToken cancellationToken;
        private UnityEngine.UI.Image <>7__wrap1;
        private Awaiter<UnityEngine.Sprite> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ScheduleRewardContent : UnityEngine.MonoBehaviour
{
    private System.Collections.Generic.List<PRISM.Produce.RewardContent> rewardContents;
    private PRISM.Produce.ParameterContent parameterContent;
    public Cysharp.Threading.Tasks.UniTask SetupAsync(int unitID, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IScheduleRewardStatus> rewards, int idolCount, PRISM.Module.Networking.IParameterVariationStatus unitParameterVariation, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask PlayParameterAnimationAsync(PRISM.Module.Networking.IParameterVariationStatus parameterVariation, System.Threading.CancellationToken cancellationToken);
    public void ShowParameterAfterValue(PRISM.Module.Networking.IParameterVariationStatus parameterVariation);

    private struct <PlayParameterAnimationAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ScheduleRewardContent <>4__this;
        public PRISM.Module.Networking.IParameterVariationStatus parameterVariation;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetupAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IScheduleRewardStatus> rewards;
        public PRISM.Produce.ScheduleRewardContent <>4__this;
        public int unitID;
        public System.Threading.CancellationToken ct;
        public int idolCount;
        public PRISM.Module.Networking.IParameterVariationStatus unitParameterVariation;
        private int <i>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class SupportEffectDemonstrateUIContent : UnityEngine.MonoBehaviour
{
    private System.Collections.Generic.List<PRISM.Produce.SupportEffectContent> supportEffectContentList;
    private ENTERPRISE.UI.AnimatorWithEvent animatorWithEvent;
    public Cysharp.Threading.Tasks.UniTask SetupAsync(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IExertSupportEffectStatus> exertSupportEffectList, PRISM.Module.Networking.IProduceBaseInfoStatus produceBaseInfo, System.Threading.CancellationToken cancellationToken);
    private void Awake();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<bool> <>9__2_0;
        public static System.Action<string> <>9__3_0;
        private bool <SetupAsync>b__2_0();
        private void <Awake>b__3_0(string tag);
    }

    private class <>c__DisplayClass2_0
    {
        public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IExertSupportEffectStatus> exertSupportEffectList;
        public int i;
        public System.Func<PRISM.Module.Networking.IInProduceSupportCharacterStatus, bool> <>9__1;
        private bool <SetupAsync>b__1(PRISM.Module.Networking.IInProduceSupportCharacterStatus character);
    }

    private struct <SetupAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IExertSupportEffectStatus> exertSupportEffectList;
        public PRISM.Module.Networking.IProduceBaseInfoStatus produceBaseInfo;
        private <>c__DisplayClass2_0 <>8__1;
        public PRISM.Produce.SupportEffectDemonstrateUIContent <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IInProduceSupportCharacterStatus> <supportCharaList>5__2;
        private PRISM.Module.Networking.IInProduceSupportCharacterStatus <friendSupportChara>5__3;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ProduceSrOption : System.ComponentModel.INotifyPropertyChanged
{
    public static string CommonCategoryName;
    public static string IngameCategoryName;
    public static string OutgameCategoryName;
    private System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    public bool PPEternal { get; set; }
    public bool TimeEternal { get; set; }
    public bool AppealEternal { get; set; }
    public bool MentalEternal { get; set; }
    public bool EnableAi { get; set; }
    public bool DisableNPC { get; set; }
    public bool EnableAiLog { get; set; }
    public bool DisableCombo { get; set; }
    public bool EnableKeepMental { get; set; }
    public int KeepMentalValue { get; set; }
    public bool IsSetTypeCounterInitialValue { get; set; }
    public int InitialVocalCounter { get; set; }
    public int InitialDanceCounter { get; set; }
    public int InitialVisualCounter { get; set; }
    public bool IsShowSupportCharacters { get; set; }
    public MiniCharaActionType MiniCharaAction { get; set; }
    public MiniCharaActionResultType MiniCharaActionResult { get; set; }
    public bool CheckHazukiSupportBonus { get; set; }
    public AutoInGameResultType AutoInGameResult { get; set; }
    public bool IsSetAvoidRateInitialValue { get; set; }
    public int InitialAvoidRate { get; set; }
    public bool IsSetInitialHandCount { get; set; }
    public int InitialHandCount { get; set; }
    public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
    public void add_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler value);
    public void remove_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler value);
    public void ResetDebugSettings();
    public void ResetTutorial();
    public void FixTutorial();
    protected void OnPropertyChanged(string propertyName);

    public enum MiniCharaActionType : System.Enum
    {
        public int value__;
        public static MiniCharaActionType 無効;
        public static MiniCharaActionType お仕事_ラジオ出演;
        public static MiniCharaActionType お仕事_テレビ出演;
        public static MiniCharaActionType お仕事_撮影モデル;
        public static MiniCharaActionType お仕事_CM出演;
        public static MiniCharaActionType お仕事_雑誌取材;
        public static MiniCharaActionType 自主練_Vo;
        public static MiniCharaActionType 自主練_Da;
        public static MiniCharaActionType 自主練_Vi;
        public static MiniCharaActionType お出かけ_遊園地;
        public static MiniCharaActionType お出かけ_演劇鑑賞;
        public static MiniCharaActionType お出かけ_映画館;
        public static MiniCharaActionType お出かけ_占い;
        public static MiniCharaActionType 買い物_洋服;
        public static MiniCharaActionType 買い物_CD;
        public static MiniCharaActionType 買い物_コスメ;
        public static MiniCharaActionType 買い物_食べ物;
        public static MiniCharaActionType ミニライブ;
        public static MiniCharaActionType トークショー;
        public static MiniCharaActionType ミニドラマ_台本読み;
        public static MiniCharaActionType ミニドラマ_衣装合わせ;
        public static MiniCharaActionType ミニドラマ_PR活動;
        public static MiniCharaActionType ミニドラマ_演技指導;
    }

    public enum MiniCharaActionResultType : System.Enum
    {
        public int value__;
        public static MiniCharaActionResultType デバッグ無効;
        public static MiniCharaActionResultType 失敗;
        public static MiniCharaActionResultType 成功;
        public static MiniCharaActionResultType 大成功;
    }

    public enum AutoInGameResultType : System.Enum
    {
        public int value__;
        public static AutoInGameResultType デバッグ無効;
        public static AutoInGameResultType 失敗;
        public static AutoInGameResultType 成功;
    }
}

// Namespace: PRISM.Produce
public class TrainerSkillIconView : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.RawImage rawImage;
    private ENTERPRISE.UI.UITextMeshProUGUI costText;
    public Cysharp.Threading.Tasks.UniTask SetupAsync(int iconId, int cost, PRISM.Produce.ProduceIngameLoader resourceLoader, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask SetupAsync(int iconId, int cost, System.Threading.CancellationToken cancellationToken);
}

// Namespace: PRISM.Produce
public class ProduceTutorialDefine
{
    public static string TutorialConfigPath;
    public static string[] UnitName;
    public static string[] howToPlayPathList;
    public static string TutorialWindowPath;
    public static string AuditionHowToPath;
    public static string EndButtonHowToPath;
    public static string EndTutorialHowToPath;
    public static UnityEngine.Vector2 MentalMaskSize;
    public static UnityEngine.Vector2 AppealMaskSize;
    public static UnityEngine.Vector2 ExclusionSize;
    public static UnityEngine.Vector2 CardMaskSize;
    public static UnityEngine.Vector2 CardMaskXAllSize;
    public static UnityEngine.Vector2 Card3MaskAllSize;
    public static UnityEngine.Vector2 SkilMaskSize;
    public static UnityEngine.Vector2 skilMaskSizeAntica;
    public static UnityEngine.Vector2 CardHandMoveOffset;
    public static UnityEngine.Vector2 AvoidRateSize;
    public static UnityEngine.Vector2 StatusIconSize;
    public static UnityEngine.Vector2 StatusOneIconSize;
    public static UnityEngine.Vector2 StatusHandPosOffset;
    public static UnityEngine.Vector2 SkillDetaildSize;
    public static UnityEngine.Vector2 BuffDebuffDetaildSize;
    public static float HandAngleZ;
    public static float FirstWaitSec;
    public static float ShowInfoLocalY;
    public static string GetHowToPath(int unitId, int seasonId, int index);

    public enum SequenceType : System.Enum
    {
        public int value__;
        public static SequenceType Season1;
        public static SequenceType Season2;
        public static SequenceType Season3_Illumination;
        public static SequenceType Season3_Antica;
        public static SequenceType Season3_HokagoClimaxGirls;
        public static SequenceType Season3_Alst;
        public static SequenceType Season3_Straylight;
        public static SequenceType Season3_Noctyl;
        public static SequenceType Season3_Shhis;
        public static SequenceType Season3_Cometik;
        public static SequenceType cNum;
        public static SequenceType AllComplete;
        public static SequenceType Audition;
    }

    public enum AnchorType : System.Enum
    {
        public int value__;
        public static AnchorType None;
        public static AnchorType BottomCenter;
        public static AnchorType BottomRight;
        public static AnchorType MiddleRight;
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialEventBase
{
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken cancellation);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken cancellation);
}

// Namespace: PRISM.Produce
public class ProduceTutorialEventFactory
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    public PRISM.Produce.ProduceTutorialShowFadeEvent CreateShowFadeEvent();
    public PRISM.Produce.ProduceTutorialUseUnitSkillActionEvent CreateProduceTutorilalUseUnitSkillActionEvent(System.Action<int> action);
    public PRISM.ProduceTutorialShowInfoHandEvent CreateShowInfoHandEvent(int index, UnityEngine.Vector2 moveOffset, System.Nullable<UnityEngine.Vector2> localOffset);
    public PRISM.Produce.ProduceTutorialShowInfoHandSkillEvent CreateShowInfoHandSkillEvent(int index, UnityEngine.Vector2 offset);
    public PRISM.ProduceTutorialShowArrowEvent CreateProduceTutorilalShowArrowEvent(int index);
    public PRISM.Produce.ProduceTutorialShowAvoidRateArrowEvent CreateProduceTutorialShowAvoidRateArrowEvent();
    public PRISM.Produce.ProduceTutorialShowInfoTextEvent CreateProduceTutorilalShowInfoTextEvent(string text);
    public PRISM.Produce.ProduceTutorialShowInfoTextEnterOnlyEvent CreateProduceTutorialShowInfoTextEnterOnlyEvent(string text, int sec, float localY);
    public PRISM.Produce.ProduceTutorialShowInfoTextExitOnlyEvent CreateProduceTutorialShowInfoTextExitOnlyEvent(string text);
    public PRISM.Produce.ProduceTutorialShowMaskEvent CreateShowMaskEvent(System.Func<UnityEngine.Vector2> getMaskPosFanc, System.Func<UnityEngine.Vector2> getMaskSizeFanc, AnchorType anchorType);
    public PRISM.Produce.ProduceTutorialShowMaskCardEvent CreateShowMaskCardEvent(int index, System.Func<UnityEngine.Vector2> getMaskSizeFanc);
    public PRISM.Produce.ProduceTutorialShowMaskSkillDetaildEvent CreateProduceTutorialShowMaskSkillDetaildEvent(System.Func<UnityEngine.Vector2> getMaskSizeFanc);
    public PRISM.Produce.ProduceTutorialShowMaskBaffDebaffDetailEvent CreateProduceTutorialShowMaskBaffDebaffDetailEvent(System.Func<UnityEngine.Vector2> getMaskSizeFunc);
    public PRISM.Produce.ProduceTutorialShowMaskAvoidRateEvent CreateProduceTutorialShowMaskAvoidRateEvent(System.Func<UnityEngine.Vector2> getMaskSizeFanc);
    public PRISM.Produce.ProduceTutorialShowMaskStatusEvent CreateProduceTutorialShowMaskStatusEvent(int index, System.Func<UnityEngine.Vector2> getMaskSizeFanc, bool slidePos);
    public PRISM.Produce.ProduceTutorialShowStatusHandEvent CreateProduceTutorialShowStatusHandEvent(int statusIndex, UnityEngine.Vector2 moveOffset, System.Nullable<UnityEngine.Vector2> localOffset);
    public PRISM.Produce.ProduceTutorialShowMaskVitaltyEvent CreateProduceTutorialShowMaskVitaltyEvent(System.Func<UnityEngine.Vector2> getMaskSizeFanc);
    public PRISM.Produce.ProduceTutorialShowMaskAppealEvent CreateProduceTutorialShowMaskAppealEvent(System.Func<UnityEngine.Vector2> getMaskSizeFanc);
    public PRISM.Produce.ProduceTutorialShowMaskExclusionCardEvent CreateProduceTutorialShowMasktExclusionCardEvent(System.Func<UnityEngine.Vector2> getMaskSizeFanc);
    public PRISM.Produce.ProduceTutorialShowMaskIdolSkillEvent CreateProduceTutorialShowMaskIdolSkillEvent(System.Func<UnityEngine.Vector2> getMaskSizeFanc, int index);
    public PRISM.ProduceTutorialShowCommonPUEvent CreateProduceTutorilalShowCommonPUEvent(string configPath, System.Action onTapClose);
    public PRISM.Produce.ProduceTutorialAddCardUseActionEvent CreateProduceTutorilalAddCardUseActionEvent(System.Action action);
    public PRISM.Produce.ProduceTutorialUseEnemyCardActionEvent CreateProduceTutorialAddEnemyCardUseActionEvent(System.Action action);
    public PRISM.Produce.ProduceTutorialOnTapCanselActionEvent CreateProduceTutorialOnTapCanselActionEvent(System.Action action);
    public PRISM.Produce.ProduceTutorialOnTapCardActionEvent CreateProduceTutorialOnTapCardActionEvent(System.Action action);
    public PRISM.Produce.ProduceTutorialOnTapBuffIconActionEvent CreateProduceTutorialOnTapBuffIconActionEvent(System.Action action);
    public PRISM.Produce.ProduceTutorialAddChangePPEvent CreateProduceTutorilalAddChangePPEvent(int targetPP, System.Action action);
    public PRISM.Produce.ProduceTutorialRecoverMentalEvent CreateProduceTutorilalRecoverMentalEvent(System.Action action);
    public PRISM.Produce.ProduceTutorialStartGameEvent CreateProduceTutorialStartGameEvent(System.Action action);
    public PRISM.Produce.ProduceTutorialDisableDragEvent CreateProduceTutorialDisableDragEvent();
    public PRISM.Produce.ProduceTutorialAllTapInputEvent CreateProduceTutorialAllTapInputEvent(System.Action action);
    public PRISM.Produce.ProduceTutorialStartMentalEvent CreateProduceTutorialStartMentalEvent(System.Action action);
    public PRISM.ProduceTutorialStopGameEvent CreateProduceTutorilalStopGameEvent();
    public PRISM.Produce.ProduceTutorialSetPPEvent CreateProduceTutorilalSetPPEvent(int pp);
    public PRISM.Produce.ProduceTutorialWaitActionEvent CreateProduceTutorilalWaitActionEvent(float waitSec, System.Action action);
    public PRISM.Produce.ProduceTutorialResetGameEvent CreateProduceTutorilalResetGameEvent();
    public PRISM.Produce.ProduceTutorialChangeTimeLimitEvent CreateProduceTutorilalChangeTimeLimitEvent(float timeLimit, System.Action action);
    public PRISM.Produce.ProduceTutorialBreakMentalEvent CreateProduceTutorilalBreakMentalEvent();
    public PRISM.Produce.ProduceTutorialDebuffEffectEvent CreateProduceTutorialDebuffEffectEvent();
    public PRISM.Produce.ProduceTutorialSetTargetCardEvent CreateProduceTutorilalSetTargetCardEvent(int cardId);
    public PRISM.Produce.ProduceTutorialSetStartTargetCardListEvent CreateProduceTutorialSetStartTargetCardListEvent(int[] cardIds);
    public PRISM.Produce.ProduceTutorialDisableNPCEvent CreateProduceTutorilalDisableNPCEvent(bool isDisable);
    public PRISM.Produce.ProduceTutorialNotMaxAppealEvent CreateProduceTutorialNotMaxAppealEvent(bool isNotMaxAppeal);
    public PRISM.Produce.ProduceTutorialSetMentalEvent CreateProduceTutorilalSetMentalEvent(float mentalRate);
    public PRISM.Produce.ProduceTutorialDisableFixDrowEvent CreateProduceTutorialDisableFixDrowEvent();
    private void _calcAncor(AnchorType anchor, UnityEngine.Vector2& anchorMin, UnityEngine.Vector2& anchorMax);
}

// Namespace: PRISM.Produce
public class ProduceTutorialEventGroup
{
    private System.Collections.Generic.List<PRISM.Produce.ProduceTutorialEventBase> eventList;
    public void AddEvent(PRISM.Produce.ProduceTutorialEventBase tutorialEvent);
    public Cysharp.Threading.Tasks.UniTask Enter(System.Threading.CancellationToken cancellation);
    public Cysharp.Threading.Tasks.UniTask Exit(System.Threading.CancellationToken cancellation);

    private struct <Exit>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ProduceTutorialEventGroup <>4__this;
        public System.Threading.CancellationToken cancellation;
        private Enumerator<PRISM.Produce.ProduceTutorialEventBase> <>7__wrap1;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialInfoHand : UnityEngine.MonoBehaviour
{
    private static float MoveSec;
    private UnityEngine.RectTransform rectTransform;
    private UnityEngine.Vector3 defaultPos;
    private UnityEngine.Vector3 targetPos;
    private float sec;
    public void Show(UnityEngine.Vector3 pos, UnityEngine.Vector2 localOffset, UnityEngine.Vector2 moveOffset, float localAngleZ);
    public void Hide();
    private void Update();
}

// Namespace: PRISM.Produce
public class ProduceTutorialInfoTextView : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UITextMeshProUGUI meshText;
    private UnityEngine.CanvasGroup canvasGroup;
    public void Show(string text);
    public void Hide();
    public void SetAlpha(float alpha);
}

// Namespace: PRISM.Produce
public class ProduceTutorialModel
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private PRISM.Produce.ProduceTutorialSequenceBase sequence;
    private System.Threading.CancellationTokenSource cancellationTokenSource;
    private int inputBlockCouct;
    private int showTextCount;
    private int showFadeCount;
    private int inputBlockDragCount;
    protected UniRx.CompositeDisposable disposables;
    public void Initialize(PRISM.TutorialExternalAccess tutorialExternalAccess);
    public Cysharp.Threading.Tasks.UniTask PreloadAsync(SequenceType sequenceType, int unitId);
    public void Execute();
    public void EndTutorial();
    public void Terminate();

    private class <>c__DisplayClass8_0
    {
        public PRISM.Produce.ProduceTutorialModel <>4__this;
        public PRISM.TutorialExternalAccess tutorialExternalAccess;
        private void <Initialize>b__0(UniRx.Unit unit);
        private void <Initialize>b__1(UniRx.Unit unit);
        private void <Initialize>b__2(UniRx.Unit unit);
        private void <Initialize>b__3(UniRx.Unit unit);
        private void <Initialize>b__4(UniRx.Unit unit);
        private void <Initialize>b__5(System.ValueTuple<string, float> tuple);
        private void <Initialize>b__6(UniRx.Unit unit);
        private void <Initialize>b__7(UniRx.Unit unit);
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialPresenter
{
    private PRISM.Produce.ProduceTutorialModel model;
    private PRISM.Produce.ProduceTutorialView view;
    protected UniRx.CompositeDisposable disposables;
    private System.Action<PRISM.Produce.ProduceTutorialView> onDestroyView;
    public void Setup(PRISM.TutorialExternalAccess access, PRISM.Produce.ProduceTutorialView tutorialView, System.Action<PRISM.Produce.ProduceTutorialView> onDestroyView, System.Action<bool> onShowSkipConfirm);
    public void Terminate();
    public Cysharp.Threading.Tasks.UniTask PreloadAsync(SequenceType sequenceType, int unitId);
    public void Execute();
    public static void SetCompleteTutorial(SequenceType sequenceType);
    public static bool IsActiveTutorial(int unitId);
    public static void DisableTutorial();
    public static void ActiveTutorial(SequenceType sequence, int unitId);
    public static SequenceType GetAcriveSequence();
    public static void ResetBaseTutorial();
    public static SequenceType GetNextSequence(int unitId);

    private class <>c__DisplayClass4_0
    {
        public PRISM.Produce.ProduceTutorialPresenter <>4__this;
        public System.Action<bool> onShowSkipConfirm;
        public System.Action<bool> <>9__14;
        private void <Setup>b__0(UniRx.Unit unit);
        private void <Setup>b__1(UniRx.Unit unit);
        private void <Setup>b__2(UniRx.Unit unit);
        private void <Setup>b__3(UniRx.Unit unit);
        private void <Setup>b__4(UniRx.Unit unit);
        private void <Setup>b__5(UniRx.Unit unit);
        private void <Setup>b__6(UniRx.Unit unit);
        private void <Setup>b__7(int index);
        private void <Setup>b__8(System.ValueTuple<string, float> tuple);
        private void <Setup>b__9(UniRx.Unit unit);
        private void <Setup>b__10(UniRx.Unit unit);
        private void <Setup>b__11(System.Action action);
        private void <Setup>b__12(UniRx.Unit unit);
        private void <Setup>b__13();
        private void <Setup>b__14(bool result);
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialSequenceBase
{
    private System.Collections.Generic.List<PRISM.Produce.ProduceTutorialEventGroup> groupList;
    private int progress;
    private PRISM.Produce.ProduceTutorialEventGroup currentGruup;
    private System.Threading.CancellationTokenSource cts;
    private System.Action <OnEndSequence>k__BackingField;
    public System.Action OnEndSequence { get; set; }
    protected string[] _preloadAssetKeys { get; set; }
    public void Setup(PRISM.Produce.ProduceTutorialEventFactory factory, int unitId);
    public Cysharp.Threading.Tasks.UniTask PreloadAsync();
    public void Enter(System.Threading.CancellationTokenSource cts);
    public void Exit();
    public void AddGroup(PRISM.Produce.ProduceTutorialEventGroup group);
    public void ExecuteNext();
    private Cysharp.Threading.Tasks.UniTask _executeNext(System.Threading.CancellationToken ct);

    private struct <_executeNext>d__16 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ProduceTutorialSequenceBase <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialView : UnityEngine.MonoBehaviour
{
    private UnityEngine.GameObject root;
    private ENTERPRISE.UI.ButtonBase skipBtnBase;
    private ENTERPRISE.UI.ButtonBase allTapBtn;
    private UnityEngine.CanvasGroup fadeBG;
    private PRISM.Produce.ProduceTutorialInfoHand infoHand;
    private UnityEngine.RectTransform arrow;
    private UnityEngine.RectTransform avoidArrow;
    private UnityEngine.RectTransform[] unmaskList;
    private PRISM.Produce.ProduceTutorialInfoTextView infoTextView;
    private UnityEngine.GameObject inputBlock;
    public void AllHide();
    public void SetSkipBtnAction(System.Action action);
    public void ShowSkipBtn();
    public void HideSkipBtn();
    public void SetAllTapBtnAction(System.Action action);
    public void ShowAllTaBtn();
    public void HideAllTaBtn();
    public void ShowFade();
    public void HideFade();
    public void SetFadeAlpha(float alpha);
    public void ShowInfoHand(UnityEngine.Vector3 pos, UnityEngine.Vector2 localOffset, UnityEngine.Vector2 moveOffset, float localAngleZ);
    public void HideInfoHand();
    public void ShowMask(UnityEngine.Vector2 pos, UnityEngine.Vector2 size, UnityEngine.Vector2 anchorMin, UnityEngine.Vector2 anchorMax, int maskIndex);
    public void ShowMaskWorldPos(UnityEngine.Vector3 pos, UnityEngine.Vector2 size, UnityEngine.Vector2 localOffset, int maskIndex);
    public void HideMask(int maskIndex);
    public void ShowInfoText(string text, float localY);
    public void HideInfoText();
    public void SetInfoTextAlpha(float alpha);
    public void ShowArrow(UnityEngine.Vector3 pos, UnityEngine.Vector2 localOffset);
    public void HideArrow();
    public void ShowAvoidArrow(UnityEngine.Vector3 pos, UnityEngine.Vector2 localOffset);
    public void HideAvoidArrow();
    public static Cysharp.Threading.Tasks.UniTask ShowInfoPU(System.Action onHide, string path);
    public Cysharp.Threading.Tasks.UniTask ShowInputBlock();
    public Cysharp.Threading.Tasks.UniTask HideInputBlock();

    private struct <ShowInfoPU>d__32 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public string path;
        public System.Action onHide;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialAddCardUseActionEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Action action;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialAddChangePPEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Action action;
    private float targetPP;
    private void OnChangePP(int pp, int maxPP);
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialUseEnemyCardActionEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Action action;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialAllTapInputEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Action action;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialBreakMentalEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialChangeTimeLimitEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Action action;
    private float targetSec;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
    private void _onChangeTimeLimit(float timeLimit);
}

// Namespace: PRISM.Produce
public class ProduceTutorialDebuffEffectEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialDisableDragEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialDisableFixDrowEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private int pp;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialDisableNPCEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private bool isDisable;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialNotMaxAppealEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private bool isNotMaxAppeal;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialOnTapBuffIconActionEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Action action;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialOnTapCanselActionEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Action action;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialOnTapCardActionEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Action action;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialRecoverMentalEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Action action;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialResetGameEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialSetMentalEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private float mentalRate;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialSetPPEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private int pp;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialSetTargetCardEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private int cardId;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialSetStartTargetCardListEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private int[] cardIds;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialShowAvoidRateArrowEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Func<UnityEngine.Vector3> getPosFanc;
    private System.Func<UnityEngine.Vector2> getOffsetFanc;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);

    private class <>c__DisplayClass3_0
    {
        public PRISM.TutorialExternalAccess tutorialExternalAccess;
        private UnityEngine.Vector3 <.ctor>b__0();
        private UnityEngine.Vector2 <.ctor>b__1();
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialShowFadeEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private bool isCansel;
    private static int targetMilliSec;
    private static int sycleSecMilliSec;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);

    private struct <EnterAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ProduceTutorialShowFadeEvent <>4__this;
        public System.Threading.CancellationToken ct;
        private int <currentMilliSec>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ExitAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ProduceTutorialShowFadeEvent <>4__this;
        public System.Threading.CancellationToken ct;
        private int <currentMilliSec>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialShowInfoHandSkillEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Func<UnityEngine.Vector3> getHandPosFanc;
    private UnityEngine.Vector2 moveOffset;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);

    private class <>c__DisplayClass3_0
    {
        public PRISM.TutorialExternalAccess tutorialExternalAccess;
        public int skillIndex;
        private UnityEngine.Vector3 <.ctor>b__0();
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialShowInfoTextEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private string text;
    private bool isCansel;
    private int sec;
    private float localY;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);

    private struct <EnterAsync>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ProduceTutorialShowInfoTextEvent <>4__this;
        public System.Threading.CancellationToken ct;
        private float <targetSec>5__2;
        private float <sycleSec>5__3;
        private float <currentSec>5__4;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialShowInfoTextEnterOnlyEvent : PRISM.Produce.ProduceTutorialShowInfoTextEvent
{
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialShowInfoTextExitOnlyEvent : PRISM.Produce.ProduceTutorialShowInfoTextEvent
{
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialShowMaskAppealEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Func<UnityEngine.Vector3> getMaskPosFanc;
    private System.Func<UnityEngine.Vector2> getMaskSizeFanc;
    private System.Func<UnityEngine.Vector2> getMaskOffsetFanc;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);

    private class <>c__DisplayClass4_0
    {
        public PRISM.TutorialExternalAccess tutorialExternalAccess;
        private UnityEngine.Vector3 <.ctor>b__0();
        private UnityEngine.Vector2 <.ctor>b__1();
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialShowMaskAvoidRateEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Func<UnityEngine.Vector3> getMaskPosFanc;
    private System.Func<UnityEngine.Vector2> getMaskSizeFanc;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);

    private class <>c__DisplayClass3_0
    {
        public PRISM.TutorialExternalAccess tutorialExternalAccess;
        private UnityEngine.Vector3 <.ctor>b__0();
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialShowMaskBaffDebaffDetailEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Func<UnityEngine.Vector3> getMaskPosFanc;
    private System.Func<UnityEngine.Vector2> getMaskSizeFanc;
    private UnityEngine.Vector2 localOffset;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);

    private class <>c__DisplayClass4_0
    {
        public PRISM.TutorialExternalAccess tutorialExternalAccess;
        private UnityEngine.Vector3 <.ctor>b__0();
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialShowMaskCardEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Func<UnityEngine.Vector3> getMaskPosFanc;
    private System.Func<UnityEngine.Vector2> getMaskSizeFanc;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);

    private class <>c__DisplayClass3_0
    {
        public PRISM.TutorialExternalAccess tutorialExternalAccess;
        public int index;
        private UnityEngine.Vector3 <.ctor>b__0();
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialShowMaskEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Func<UnityEngine.Vector2> getMaskPosFanc;
    private System.Func<UnityEngine.Vector2> getMaskSizeFanc;
    private UnityEngine.Vector2 anchorMin;
    private UnityEngine.Vector2 anchorMax;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialShowMaskExclusionCardEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Func<UnityEngine.Vector3> getMaskPosFanc;
    private System.Func<UnityEngine.Vector2> getMaskSizeFanc;
    private System.Func<UnityEngine.Vector2> getMaskOffsetFanc;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);

    private class <>c__DisplayClass4_0
    {
        public PRISM.TutorialExternalAccess tutorialExternalAccess;
        private UnityEngine.Vector3 <.ctor>b__0();
        private UnityEngine.Vector2 <.ctor>b__1();
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialShowMaskIdolSkillEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Func<UnityEngine.Vector3> getMaskPosFanc;
    private System.Func<UnityEngine.Vector2> getMaskSizeFanc;
    private System.Func<UnityEngine.Vector2> getMaskOffsetFanc;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.Vector2> <>9__4_1;
        private UnityEngine.Vector2 <.ctor>b__4_1();
    }

    private class <>c__DisplayClass4_0
    {
        public PRISM.TutorialExternalAccess tutorialExternalAccess;
        public int index;
        private UnityEngine.Vector3 <.ctor>b__0();
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialShowMaskSkillDetaildEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Func<UnityEngine.Vector3> getMaskPosFanc;
    private System.Func<UnityEngine.Vector2> getMaskSizeFanc;
    private UnityEngine.Vector2 localOffset;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);

    private class <>c__DisplayClass4_0
    {
        public PRISM.TutorialExternalAccess tutorialExternalAccess;
        private UnityEngine.Vector3 <.ctor>b__0();
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialShowMaskStatusEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Func<UnityEngine.Vector3> getMaskPosFanc;
    private System.Func<UnityEngine.Vector2> getMaskSizeFanc;
    private System.Func<UnityEngine.Vector2> getOffsetFanc;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);

    private class <>c__DisplayClass4_0
    {
        public PRISM.TutorialExternalAccess tutorialExternalAccess;
        public int index;
        public bool slidePos;
        private UnityEngine.Vector3 <.ctor>b__0();
        private UnityEngine.Vector2 <.ctor>b__1();
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialShowMaskVitaltyEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Func<UnityEngine.Vector3> getMaskPosFanc;
    private System.Func<UnityEngine.Vector2> getMaskSizeFanc;
    private System.Func<UnityEngine.Vector2> getMaskOffsetFanc;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);

    private class <>c__DisplayClass4_0
    {
        public PRISM.TutorialExternalAccess tutorialExternalAccess;
        private UnityEngine.Vector3 <.ctor>b__0();
        private UnityEngine.Vector2 <.ctor>b__1();
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialShowStatusHandEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Func<UnityEngine.Vector3> getHandPosFanc;
    private UnityEngine.Vector2 moveOffset;
    private UnityEngine.Vector2 localOffset;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);

    private class <>c__DisplayClass4_0
    {
        public PRISM.TutorialExternalAccess tutorialExternalAccess;
        public int statusIndex;
        private UnityEngine.Vector3 <.ctor>b__0();
    }
}

// Namespace: PRISM.Produce
public class ProduceTutorialStartGameEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Action action;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialStartMentalEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Action action;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialUseUnitSkillActionEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Action<int> action;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Produce
public class ProduceTutorialWaitActionEvent : PRISM.Produce.ProduceTutorialEventBase
{
    private PRISM.TutorialExternalAccess tutorialExternalAccess;
    private System.Action action;
    private float waitSec;
    public Cysharp.Threading.Tasks.UniTask EnterAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask ExitAsync(System.Threading.CancellationToken ct);

    private struct <EnterAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ProduceTutorialWaitActionEvent <>4__this;
        public System.Threading.CancellationToken ct;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class SeasonAuditionSequence : PRISM.Produce.ProduceTutorialSequenceBase
{
    protected string[] _preloadAssetKeys { get; set; }
    public void Setup(PRISM.Produce.ProduceTutorialEventFactory factory, int unitId);
    private void <Setup>b__2_0();
    private void <Setup>b__2_1();
}

// Namespace: PRISM.Produce
public class SeasonOneSequence : PRISM.Produce.ProduceTutorialSequenceBase
{
    private int unitId;
    protected string[] _preloadAssetKeys { get; set; }
    private string _startHowToPlayKey { get; set; }
    private string _frameColorPUKey { get; set; }
    private string _ppPUKey { get; set; }
    private string _appealPointPUKey { get; set; }
    private string _appealPointSecondPUKey { get; set; }
    private string _warningTimeUpPUKey { get; set; }
    public void Setup(PRISM.Produce.ProduceTutorialEventFactory factory, int _unitId);
    private void <Setup>b__15_0();
    private void <Setup>b__15_1();
    private void <Setup>b__15_2();
    private void <Setup>b__15_4();
    private void <Setup>b__15_5();
    private void <Setup>b__15_6();
    private void <Setup>b__15_9();
    private void <Setup>b__15_11();
    private void <Setup>b__15_12();
    private void <Setup>b__15_13();
    private void <Setup>b__15_15();
    private void <Setup>b__15_16();
    private void <Setup>b__15_17();
    private void <Setup>b__15_19();
    private void <Setup>b__15_20();
    private void <Setup>b__15_21();
    private void <Setup>b__15_22();
    private void <Setup>b__15_23();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.Vector2> <>9__15_3;
        public static System.Func<UnityEngine.Vector2> <>9__15_7;
        public static System.Func<UnityEngine.Vector2> <>9__15_8;
        public static System.Func<UnityEngine.Vector2> <>9__15_10;
        public static System.Func<UnityEngine.Vector2> <>9__15_14;
        public static System.Func<UnityEngine.Vector2> <>9__15_18;
        private UnityEngine.Vector2 <Setup>b__15_3();
        private UnityEngine.Vector2 <Setup>b__15_7();
        private UnityEngine.Vector2 <Setup>b__15_8();
        private UnityEngine.Vector2 <Setup>b__15_10();
        private UnityEngine.Vector2 <Setup>b__15_14();
        private UnityEngine.Vector2 <Setup>b__15_18();
    }
}

// Namespace: PRISM.Produce
public class SeasonThreeAlstSequence : PRISM.Produce.ProduceTutorialSequenceBase
{
    private int unitId;
    protected string[] _preloadAssetKeys { get; set; }
    private string _startHowToPlayKey { get; set; }
    public void Setup(PRISM.Produce.ProduceTutorialEventFactory factory, int _unitId);
    private void <Setup>b__5_0();
    private void <Setup>b__5_1();
    private void <Setup>b__5_2();
    private void <Setup>b__5_4();
    private void <Setup>b__5_6();
    private void <Setup>b__5_8();
    private void <Setup>b__5_9();
    private void <Setup>b__5_11();
    private void <Setup>b__5_13();
    private void <Setup>b__5_14();
    private void <Setup>b__5_16();
    private void <Setup>b__5_17();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.Vector2> <>9__5_3;
        public static System.Func<UnityEngine.Vector2> <>9__5_5;
        public static System.Func<UnityEngine.Vector2> <>9__5_7;
        public static System.Func<UnityEngine.Vector2> <>9__5_10;
        public static System.Func<UnityEngine.Vector2> <>9__5_12;
        public static System.Func<UnityEngine.Vector2> <>9__5_15;
        private UnityEngine.Vector2 <Setup>b__5_3();
        private UnityEngine.Vector2 <Setup>b__5_5();
        private UnityEngine.Vector2 <Setup>b__5_7();
        private UnityEngine.Vector2 <Setup>b__5_10();
        private UnityEngine.Vector2 <Setup>b__5_12();
        private UnityEngine.Vector2 <Setup>b__5_15();
    }
}

// Namespace: PRISM.Produce
public class SeasonThreeAnticaSequence : PRISM.Produce.ProduceTutorialSequenceBase
{
    private int unitId;
    protected string[] _preloadAssetKeys { get; set; }
    private string _startHowToPlayKey { get; set; }
    public void Setup(PRISM.Produce.ProduceTutorialEventFactory factory, int _unitId);
    private void <Setup>b__5_0();
    private void <Setup>b__5_1();
    private void <Setup>b__5_2();
    private void <Setup>b__5_3();
    private void <Setup>b__5_5();
    private void <Setup>b__5_6();
    private void <Setup>b__5_8();
    private void <Setup>b__5_9();
    private void <Setup>b__5_11();
    private void <Setup>b__5_12();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.Vector2> <>9__5_4;
        public static System.Func<UnityEngine.Vector2> <>9__5_7;
        public static System.Func<UnityEngine.Vector2> <>9__5_10;
        private UnityEngine.Vector2 <Setup>b__5_4();
        private UnityEngine.Vector2 <Setup>b__5_7();
        private UnityEngine.Vector2 <Setup>b__5_10();
    }
}

// Namespace: PRISM.Produce
public class SeasonThreeCometikSequence : PRISM.Produce.ProduceTutorialSequenceBase
{
    private int unitId;
    protected string[] _preloadAssetKeys { get; set; }
    private string _startHowToPlayKey { get; set; }
    private string _explanationPUKey { get; set; }
    public void Setup(PRISM.Produce.ProduceTutorialEventFactory factory, int _unitId);
    private void <Setup>b__7_0();
    private void <Setup>b__7_1();
    private void <Setup>b__7_2();
    private void <Setup>b__7_4();
    private void <Setup>b__7_5();
    private void <Setup>b__7_7();
    private void <Setup>b__7_8();
    private void <Setup>b__7_10();
    private void <Setup>b__7_11();
    private void <Setup>b__7_13();
    private void <Setup>b__7_14();
    private void <Setup>b__7_16();
    private void <Setup>b__7_17();
    private void <Setup>b__7_19();
    private void <Setup>b__7_20();
    private void <Setup>b__7_22();
    private void <Setup>b__7_23();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.Vector2> <>9__7_3;
        public static System.Func<UnityEngine.Vector2> <>9__7_6;
        public static System.Func<UnityEngine.Vector2> <>9__7_9;
        public static System.Func<UnityEngine.Vector2> <>9__7_12;
        public static System.Func<UnityEngine.Vector2> <>9__7_15;
        public static System.Func<UnityEngine.Vector2> <>9__7_18;
        public static System.Func<UnityEngine.Vector2> <>9__7_21;
        private UnityEngine.Vector2 <Setup>b__7_3();
        private UnityEngine.Vector2 <Setup>b__7_6();
        private UnityEngine.Vector2 <Setup>b__7_9();
        private UnityEngine.Vector2 <Setup>b__7_12();
        private UnityEngine.Vector2 <Setup>b__7_15();
        private UnityEngine.Vector2 <Setup>b__7_18();
        private UnityEngine.Vector2 <Setup>b__7_21();
    }
}

// Namespace: PRISM.Produce
public class SeasonThreeHokagoClimaxGirlsSequence : PRISM.Produce.ProduceTutorialSequenceBase
{
    private int unitId;
    protected string[] _preloadAssetKeys { get; set; }
    private string _startHowToPlayPUKey { get; set; }
    private string _explanationPUKey { get; set; }
    public void Setup(PRISM.Produce.ProduceTutorialEventFactory factory, int _unitId);
    private void <Setup>b__7_0();
    private void <Setup>b__7_1();
    private void <Setup>b__7_2();
    private void <Setup>b__7_4();
    private void <Setup>b__7_5();
    private void <Setup>b__7_6();
    private void <Setup>b__7_8();
    private void <Setup>b__7_9();
    private void <Setup>b__7_10();
    private void <Setup>b__7_12();
    private void <Setup>b__7_13();
    private void <Setup>b__7_15();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.Vector2> <>9__7_3;
        public static System.Func<UnityEngine.Vector2> <>9__7_7;
        public static System.Func<UnityEngine.Vector2> <>9__7_11;
        public static System.Func<UnityEngine.Vector2> <>9__7_14;
        private UnityEngine.Vector2 <Setup>b__7_3();
        private UnityEngine.Vector2 <Setup>b__7_7();
        private UnityEngine.Vector2 <Setup>b__7_11();
        private UnityEngine.Vector2 <Setup>b__7_14();
    }
}

// Namespace: PRISM.Produce
public class SeasonThreeIlluminationSequence : PRISM.Produce.ProduceTutorialSequenceBase
{
    private int unitId;
    protected string[] _preloadAssetKeys { get; set; }
    private string _startHowToPlayKey { get; set; }
    private string _comboPUKey { get; set; }
    public void Setup(PRISM.Produce.ProduceTutorialEventFactory factory, int _unitId);
    private void <Setup>b__7_0();
    private void <Setup>b__7_1();
    private void <Setup>b__7_2();
    private void <Setup>b__7_4();
    private void <Setup>b__7_5();
    private void <Setup>b__7_7();
    private void <Setup>b__7_8();
    private void <Setup>b__7_10();
    private void <Setup>b__7_11();
    private void <Setup>b__7_13();
    private void <Setup>b__7_14();
    private void <Setup>b__7_15();
    private void <Setup>b__7_17();
    private void <Setup>b__7_18();
    private void <Setup>b__7_20();
    private void <Setup>b__7_21();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.Vector2> <>9__7_3;
        public static System.Func<UnityEngine.Vector2> <>9__7_6;
        public static System.Func<UnityEngine.Vector2> <>9__7_9;
        public static System.Func<UnityEngine.Vector2> <>9__7_12;
        public static System.Func<UnityEngine.Vector2> <>9__7_16;
        public static System.Func<UnityEngine.Vector2> <>9__7_19;
        private UnityEngine.Vector2 <Setup>b__7_3();
        private UnityEngine.Vector2 <Setup>b__7_6();
        private UnityEngine.Vector2 <Setup>b__7_9();
        private UnityEngine.Vector2 <Setup>b__7_12();
        private UnityEngine.Vector2 <Setup>b__7_16();
        private UnityEngine.Vector2 <Setup>b__7_19();
    }
}

// Namespace: PRISM.Produce
public class SeasonThreeNoctylSequence : PRISM.Produce.ProduceTutorialSequenceBase
{
    private int unitId;
    protected string[] _preloadAssetKeys { get; set; }
    private string _startHowToPlayKey { get; set; }
    private string _explanationPUKey { get; set; }
    public void Setup(PRISM.Produce.ProduceTutorialEventFactory factory, int _unitId);
    private void <Setup>b__7_0();
    private void <Setup>b__7_1();
    private void <Setup>b__7_2();
    private void <Setup>b__7_4();
    private void <Setup>b__7_5();
    private void <Setup>b__7_7();
    private void <Setup>b__7_8();
    private void <Setup>b__7_10();
    private void <Setup>b__7_11();
    private void <Setup>b__7_13();
    private void <Setup>b__7_14();
    private void <Setup>b__7_16();
    private void <Setup>b__7_17();
    private void <Setup>b__7_18();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.Vector2> <>9__7_3;
        public static System.Func<UnityEngine.Vector2> <>9__7_6;
        public static System.Func<UnityEngine.Vector2> <>9__7_9;
        public static System.Func<UnityEngine.Vector2> <>9__7_12;
        public static System.Func<UnityEngine.Vector2> <>9__7_15;
        private UnityEngine.Vector2 <Setup>b__7_3();
        private UnityEngine.Vector2 <Setup>b__7_6();
        private UnityEngine.Vector2 <Setup>b__7_9();
        private UnityEngine.Vector2 <Setup>b__7_12();
        private UnityEngine.Vector2 <Setup>b__7_15();
    }
}

// Namespace: PRISM.Produce
public class SeasonThreeShhisSequence : PRISM.Produce.ProduceTutorialSequenceBase
{
    private int unitId;
    protected string[] _preloadAssetKeys { get; set; }
    private string _startHowToPlayKey { get; set; }
    private string _explanationPUKey { get; set; }
    public void Setup(PRISM.Produce.ProduceTutorialEventFactory factory, int _unitId);
    private void <Setup>b__7_0();
    private void <Setup>b__7_1();
    private void <Setup>b__7_2();
    private void <Setup>b__7_4();
    private void <Setup>b__7_5();
    private void <Setup>b__7_7();
    private void <Setup>b__7_8();
    private void <Setup>b__7_10();
    private void <Setup>b__7_11();
    private void <Setup>b__7_13();
    private void <Setup>b__7_14();
    private void <Setup>b__7_16();
    private void <Setup>b__7_17();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.Vector2> <>9__7_3;
        public static System.Func<UnityEngine.Vector2> <>9__7_6;
        public static System.Func<UnityEngine.Vector2> <>9__7_9;
        public static System.Func<UnityEngine.Vector2> <>9__7_12;
        public static System.Func<UnityEngine.Vector2> <>9__7_15;
        private UnityEngine.Vector2 <Setup>b__7_3();
        private UnityEngine.Vector2 <Setup>b__7_6();
        private UnityEngine.Vector2 <Setup>b__7_9();
        private UnityEngine.Vector2 <Setup>b__7_12();
        private UnityEngine.Vector2 <Setup>b__7_15();
    }
}

// Namespace: PRISM.Produce
public class SeasonThreeStraylightSequence : PRISM.Produce.ProduceTutorialSequenceBase
{
    private int unitId;
    protected string[] _preloadAssetKeys { get; set; }
    private string _startHowToPlayKey { get; set; }
    private string _explanationPUKey { get; set; }
    public void Setup(PRISM.Produce.ProduceTutorialEventFactory factory, int _unitId);
    private void <Setup>b__7_0();
    private void <Setup>b__7_1();
    private void <Setup>b__7_2();
    private void <Setup>b__7_4();
    private void <Setup>b__7_5();
    private void <Setup>b__7_7();
    private void <Setup>b__7_8();
    private void <Setup>b__7_10();
    private void <Setup>b__7_11();
    private void <Setup>b__7_13();
    private void <Setup>b__7_14();
    private void <Setup>b__7_16();
    private void <Setup>b__7_17();
    private void <Setup>b__7_19();
    private void <Setup>b__7_20();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.Vector2> <>9__7_3;
        public static System.Func<UnityEngine.Vector2> <>9__7_6;
        public static System.Func<UnityEngine.Vector2> <>9__7_9;
        public static System.Func<UnityEngine.Vector2> <>9__7_12;
        public static System.Func<UnityEngine.Vector2> <>9__7_15;
        public static System.Func<UnityEngine.Vector2> <>9__7_18;
        private UnityEngine.Vector2 <Setup>b__7_3();
        private UnityEngine.Vector2 <Setup>b__7_6();
        private UnityEngine.Vector2 <Setup>b__7_9();
        private UnityEngine.Vector2 <Setup>b__7_12();
        private UnityEngine.Vector2 <Setup>b__7_15();
        private UnityEngine.Vector2 <Setup>b__7_18();
    }
}

// Namespace: PRISM.Produce
public class SeasonTwoSequence : PRISM.Produce.ProduceTutorialSequenceBase
{
    private int unitId;
    protected string[] _preloadAssetKeys { get; set; }
    private string _forceMentalBreakPUKey { get; set; }
    private string _recoverMentalBreakPUKey { get; set; }
    private string _idolSkillPUKey { get; set; }
    private string _explanationPUKey { get; set; }
    public void Setup(PRISM.Produce.ProduceTutorialEventFactory factory, int _unitId);
    private void <Setup>b__11_0();
    private void <Setup>b__11_1();
    private void <Setup>b__11_2();
    private void <Setup>b__11_3();
    private void <Setup>b__11_4();
    private void <Setup>b__11_5();
    private void <Setup>b__11_6();
    private void <Setup>b__11_8();
    private void <Setup>b__11_9();
    private void <Setup>b__11_11();
    private void <Setup>b__11_14();
    private void <Setup>b__11_15();
    private UnityEngine.Vector2 <Setup>b__11_16();
    private void <Setup>b__11_17(int id);
    private void <Setup>b__11_18();
    private void <Setup>b__11_19();
    private void <Setup>b__11_20();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.Vector2> <>9__11_7;
        public static System.Func<UnityEngine.Vector2> <>9__11_10;
        public static System.Func<UnityEngine.Vector2> <>9__11_12;
        public static System.Func<UnityEngine.Vector2> <>9__11_13;
        private UnityEngine.Vector2 <Setup>b__11_7();
        private UnityEngine.Vector2 <Setup>b__11_10();
        private UnityEngine.Vector2 <Setup>b__11_12();
        private UnityEngine.Vector2 <Setup>b__11_13();
    }
}

// Namespace: PRISM.Produce
public class ProduceInGameUtility
{
    public static int GetPPBonus(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameSupportSkillModel> skillList, InGameType inGameType);
    public static int GetMaxPPBonus(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameSupportSkillModel> skillList);
    public static int GetMentalGuardBonus(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameSupportSkillModel> skillList);
    public static int GetAvoidRateBonus(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameSupportSkillModel> skillList);
    public static System.Collections.Generic.List<PRISM.Produce.ProduceInGameEffect> GetSupportSkillBuffBonus(System.Collections.Generic.IReadOnlyList<PRISM.Produce.IngameSupportSkillModel> skillList, float gameStartTime, PRISM.Produce.IngamePlayerModel executor);
    public static Cysharp.Threading.Tasks.UniTask<ProduceNextOrderType> IngameDetectAdvConnectionAsync(ProduceNextOrderType produceNextOrderType, UnityEngine.RectTransform safeAreaRoot, PRISM.Legacy.IScheduleVitalityGaugeForLegacy vitalityGauge, PRISM.Produce.SupportEffectDemonstrateUIContent supportEffectDemonstrateUIContent, System.Threading.CancellationToken ct);
    private static Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISelectionSupportSkillStatus>> _showInheritanceSkillPopupAsync(PRISM.Module.Networking.IGettablePotentialSupportSkillStatus[] gettablePotentialSupportSkillDto, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IInProducePotentialSupportSkillStatus> supportSkillList, int maxSlot, int selectedCount, System.Threading.CancellationToken ct);
    private static Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IInheritanceSkillListReply> _getInheritanceSkillListAsync(System.Threading.CancellationToken ct);
    private static Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISelectInheritanceSkillReply> _selectInheritanceSkillAsync(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISelectionSupportSkillStatus> skillList, System.Threading.CancellationToken ct);
    private static PRISM.Produce.IngameEffectCauseModel <GetSupportSkillBuffBonus>g___constructCause|4_0(PRISM.Produce.IngameSupportSkillModel skill, <>c__DisplayClass4_0& );

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IGettablePotentialSupportSkillStatus, PRISM.Module.Networking.IPotentialSupportSkillStatus> <>9__6_0;
        public static System.Func<PRISM.Module.Networking.ISelectionSupportSkillStatus, PRISM.Module.Networking.ISelectionSupportSkillStatus> <>9__8_0;
        private PRISM.Module.Networking.IPotentialSupportSkillStatus <_showInheritanceSkillPopupAsync>b__6_0(PRISM.Module.Networking.IGettablePotentialSupportSkillStatus x);
        private PRISM.Module.Networking.ISelectionSupportSkillStatus <_selectInheritanceSkillAsync>b__8_0(PRISM.Module.Networking.ISelectionSupportSkillStatus x);
    }

    private struct <>c__DisplayClass4_0 : System.ValueType
    {
        public PRISM.Produce.IngamePlayerModel executor;
    }

    private struct <IngameDetectAdvConnectionAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<ProduceNextOrderType> <>t__builder;
        public ProduceNextOrderType produceNextOrderType;
        public UnityEngine.RectTransform safeAreaRoot;
        public PRISM.Produce.SupportEffectDemonstrateUIContent supportEffectDemonstrateUIContent;
        public PRISM.Legacy.IScheduleVitalityGaugeForLegacy vitalityGauge;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IFinishProduceAdvReply> <>u__1;
        private Awaiter<PRISM.Module.Networking.IInheritanceSkillListReply> <>u__2;
        private Awaiter<System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISelectionSupportSkillStatus>> <>u__3;
        private Awaiter<PRISM.Module.Networking.ISelectInheritanceSkillReply> <>u__4;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ViewProduceAudition : PRISM.Produce.ViewProduceIngameBase<PRISM.AuditionModel>
{
    private PRISM.Produce.AuditionPresenter auditionPresenter;
    private PRISM.LessonAudition LessonAuditionSource;
    private UnityEngine.SceneManagement.Scene lessonAuditionScene;
    private PRISM.Produce.AuditionViewParameter auditionViewParam;
    private PRISM.SceneLoader lessonAuditionLoader;
    private PRISM.Produce.ProduceTutorialPresenter tutorialPresenter;
    protected Gleipnir.Savedata.SavableJsonObject<PRISM.Produce.InGameSaveData> InGameSaveData { get; set; }
    protected Cysharp.Threading.Tasks.UniTask _beginViewAsync();
    protected Cysharp.Threading.Tasks.UniTask _terminateAsync();
    private void Update();
    private Cysharp.Threading.Tasks.UniTask<bool> _showConfirmProduceGiveUpPopupAsync(System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask _jumpSuccessResultAsync(System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask _jumpFailureResultAsync(System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask <>n__0();

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<PRISM.Produce.ProduceTutorialView> <>9__8_5;
        private void <_beginViewAsync>b__8_5(PRISM.Produce.ProduceTutorialView view);
    }

    private class <>c__DisplayClass8_0
    {
        public PRISM.Produce.ViewProduceAudition <>4__this;
        public string mvName;
        public System.Threading.CancellationToken ct;
        private bool <_beginViewAsync>b__0();
        private bool <_beginViewAsync>b__1(PRISM.Definitions.MstAuditionSettings x);
        private void <_beginViewAsync>b__3(bool isStop);
        private void <_beginViewAsync>b__4(System.Action action);
        private void <_beginViewAsync>b__6(bool isShowConfirmPopup);
        private void <_beginViewAsync>b__7(GameEndStatus _);
        private void <_beginViewAsync>b__2(bool isSuccess);
    }

    private class <>c__DisplayClass8_1
    {
        public System.Action action;
        private void <_beginViewAsync>b__8(UniRx.Unit _);
    }

    private struct <_beginViewAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewProduceAudition <>4__this;
        private <>c__DisplayClass8_0 <>8__1;
        private PRISM.Produce.AuditionPanel <auditionPanel>5__2;
        private StartData <startData>5__3;
        private Awaiter <>u__1;
        private PRISM.TutorialExternalAccess <tutorialExternalAccess>5__4;
        private PRISM.Produce.ProduceTutorialView <tutorialView>5__5;
        private Awaiter<PRISM.Produce.ProduceTutorialView> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_jumpFailureResultAsync>d__13 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter<PRISM.Produce.LegacyProduceFailureResultParameter> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_jumpSuccessResultAsync>d__12 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewProduceAudition <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter<PRISM.Produce.LegacyAuditionSuccessResultParameter> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_terminateAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewProduceAudition <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ViewProduceIngameBase`1<TModel> : ENTERPRISE.ViewBase
{
    private System.IDisposable suppressBackgroundDownloadScope;
    private System.IDisposable backKeyDisableScope;
    private System.IDisposable iosHomeBarAntiSwipableScope;
    private TModel <InGameModel>k__BackingField;
    private bool <IsActiveTutorial>k__BackingField;
    protected TModel InGameModel { get; set; }
    protected bool IsActiveTutorial { get; set; }
    protected Gleipnir.Savedata.SavableJsonObject<PRISM.Produce.InGameSaveData> InGameSaveData { get; set; }
    protected Cysharp.Threading.Tasks.UniTask _initializeAsync();
    protected Cysharp.Threading.Tasks.UniTask _terminateAsync();
    protected PhaseType _loadStartPhase(int unitId);
    protected void _saveStartPhase(int unitId, PhaseType phase);
    protected Cysharp.Threading.Tasks.UniTask<PRISM.Produce.ProduceTutorialView> _createTutorialViewAsync();

    private struct <_createTutorialViewAsync>d__17<TModel> : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Produce.ProduceTutorialView> <>t__builder;
        private PRISM.ResourceManagement.IResourceLoader <resourceLoader>5__2;
        private Awaiter<UnityEngine.GameObject> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_initializeAsync>d__13<TModel> : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewProduceIngameBase<TModel> <>4__this;
        private Awaiter <>u__1;
        private AsyncOperationAwaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce
public class ViewProduceLesson : PRISM.Produce.ViewProduceIngameBase<PRISM.Produce.LessonModel>
{
    private PRISM.Produce.LessonPresenter lessonPresenter;
    private PRISM.Produce.LessonPanel lessonPanel;
    private PRISM.Produce.ProduceTutorialPresenter tutorialPresenter;
    private static PRISM.SceneLoader sceneLoader;
    private PRISM.MvCutSceneSoundResources soundResources;
    private UniRx.CompositeDisposable disposables;
    protected Gleipnir.Savedata.SavableJsonObject<PRISM.Produce.InGameSaveData> InGameSaveData { get; set; }
    protected Cysharp.Threading.Tasks.UniTask _beginViewAsync();
    protected Cysharp.Threading.Tasks.UniTask _terminateAsync();
    private void Update();
    private Cysharp.Threading.Tasks.UniTask<bool> _showConfirmLessonFinishPopupAsync(System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask _jumpSuccessResultAsync(System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask _jumpFailureResultAsync(System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask <>n__0();

    private class <>c
    {
        public static <>c <>9;
        public static System.Action<bool, System.Action> <>9__8_58;
        public static System.Action<System.ValueTuple<float, float>, System.Action<float>> <>9__8_59;
        public static System.Action<PRISM.Produce.ProduceTutorialView> <>9__8_43;
        private void <_beginViewAsync>b__8_58(bool isMentalBreak, System.Action state);
        private void <_beginViewAsync>b__8_59(System.ValueTuple<float, float> tuple, System.Action<float> state);
        private void <_beginViewAsync>b__8_43(PRISM.Produce.ProduceTutorialView view);
    }

    private class <>c__DisplayClass8_0
    {
        public PRISM.Produce.ViewProduceLesson <>4__this;
        public PRISM.TutorialExternalAccess tutorialExternalAccess;
        public System.IDisposable onAddTapCardActionDisposable;
        public System.IDisposable onAddTapBuffIconActionDisposable;
        public System.IDisposable subscribeMentalBreakRecover;
        public System.IDisposable subscribeAddGetCurrentTimeLimit;
        public PRISM.Produce.InGamePlayerView playerView;
        public System.Threading.CancellationToken ct;
        public PRISM.LiveScene ss;
        private void <_beginViewAsync>b__0(System.Action action);
        private void <_beginViewAsync>b__1(System.Action action);
        private void <_beginViewAsync>b__2(System.Action<int> action);
        private void <_beginViewAsync>b__3(System.Action action);
        private void <_beginViewAsync>b__4(System.Action action);
        private void <_beginViewAsync>b__5(System.Action action);
        private void <_beginViewAsync>b__6(System.Action _);
        private void <_beginViewAsync>b__7(System.Action action);
        private void <_beginViewAsync>b__8(System.Action _);
        private void <_beginViewAsync>b__9(System.Action<int, int> action);
        private void <_beginViewAsync>b__10(System.Action action);
        private void <_beginViewAsync>b__11(System.Action action);
        private void <_beginViewAsync>b__12(System.Action action);
        private void <_beginViewAsync>b__13(System.Action action);
        private void <_beginViewAsync>b__14(System.Action<float> action);
        private void <_beginViewAsync>b__15(System.Action<float> _);
        private void <_beginViewAsync>b__16(bool isStop);
        private void <_beginViewAsync>b__17(int pp);
        private void <_beginViewAsync>b__18(float mentalRate);
        private void <_beginViewAsync>b__19(UniRx.Unit unit);
        private void <_beginViewAsync>b__20(UniRx.Unit unit);
        private void <_beginViewAsync>b__21(UniRx.Unit unit);
        private void <_beginViewAsync>b__22(UniRx.Unit unit);
        private void <_beginViewAsync>b__23(UniRx.Unit unit);
        private void <_beginViewAsync>b__24();
        private void <_beginViewAsync>b__25();
        private void <_beginViewAsync>b__26();
        private void <_beginViewAsync>b__27(int id);
        private void <_beginViewAsync>b__28(int[] idList);
        private void <_beginViewAsync>b__29(bool isDisable);
        private void <_beginViewAsync>b__30(bool isNotMaxAppeal);
        private void <_beginViewAsync>b__31(System.Action action);
        private void <_beginViewAsync>b__32(System.Action action);
        private UnityEngine.RectTransform <_beginViewAsync>b__33(int index);
        private UnityEngine.RectTransform <_beginViewAsync>b__34(int index);
        private UnityEngine.RectTransform <_beginViewAsync>b__35();
        private UnityEngine.RectTransform <_beginViewAsync>b__36(int index);
        private UnityEngine.RectTransform <_beginViewAsync>b__37();
        private UnityEngine.RectTransform <_beginViewAsync>b__38();
        private UnityEngine.RectTransform <_beginViewAsync>b__39();
        private UnityEngine.RectTransform <_beginViewAsync>b__40();
        private UnityEngine.RectTransform <_beginViewAsync>b__41();
        private void <_beginViewAsync>b__42(UniRx.Unit unit);
        private void <_beginViewAsync>b__44(bool isShowConfirmPopup);
        private void <_beginViewAsync>b__45(GameEndStatus _);
        private void <_beginViewAsync>b__46(bool isSuccess);
        private bool <_beginViewAsync>b__47();
    }

    private class <>c__DisplayClass8_1
    {
        public System.Action action;
        public System.IDisposable disposable;
        private void <_beginViewAsync>b__48(System.ValueTuple<PRISM.Produce.IngamePCardModel, PRISM.Produce.CardAndSkillExecResult> _);
        private void <_beginViewAsync>b__49(System.Action _);
    }

    private class <>c__DisplayClass8_2
    {
        public System.Action action;
        public System.IDisposable disposable;
        private void <_beginViewAsync>b__50(PRISM.Produce.IngamePCardModel _);
        private void <_beginViewAsync>b__51(System.Action _);
    }

    private class <>c__DisplayClass8_3
    {
        public System.Action<int> action;
        public System.IDisposable disposable;
        private void <_beginViewAsync>b__52(System.ValueTuple<int, PRISM.Produce.IngameSkillModel, PRISM.Produce.CardAndSkillExecResult> tuple);
        private void <_beginViewAsync>b__53(System.Action<int> _);
    }

    private class <>c__DisplayClass8_4
    {
        public System.Action action;
        private void <_beginViewAsync>b__54(UniRx.Unit unit);
    }

    private class <>c__DisplayClass8_5
    {
        public System.Action action;
        private void <_beginViewAsync>b__55(UniRx.Unit Unit);
    }

    private class <>c__DisplayClass8_6
    {
        public System.Action<int, int> action;
        public System.IDisposable disposable;
        private void <_beginViewAsync>b__56(System.ValueTuple<int, int> tuple);
        private void <_beginViewAsync>b__57(System.Action<int, int> _);
    }

    private class <>c__DisplayClass8_7
    {
        public System.Action action;
        private void <_beginViewAsync>b__60(UniRx.Unit _);
    }

    private class <>c__DisplayClass8_8
    {
        public System.Action action;
        private void <_beginViewAsync>b__61(GameEndStatus _);
    }

    private struct <_beginViewAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewProduceLesson <>4__this;
        private <>c__DisplayClass8_0 <>8__1;
        private PRISM.Produce.LessonViewParameter <lessonParam>5__2;
        private int <unitId>5__3;
        private string <mvName>5__4;
        private string <soundName>5__5;
        private string <sceneName>5__6;
        private Awaiter <>u__1;
        private Awaiter<PRISM.Produce.MvNameIdolOrderData> <>u__2;
        private Awaiter<PRISM.Produce.ProduceTutorialView> <>u__3;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_jumpFailureResultAsync>d__13 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewProduceLesson <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter<PRISM.Module.Networking.IFinishLessonReply> <>u__1;
        private Awaiter<PRISM.Module.Networking.IFinishSpecialLessonReply> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_jumpSuccessResultAsync>d__12 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewProduceLesson <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter<PRISM.Produce.LegacyLessonSuccessResultParameter> <>u__1;
        private Awaiter<PRISM.Produce.LegacySpecialLessonResultParameter> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_terminateAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Produce.ViewProduceLesson <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Produce.SubSeasonSelect
public interface IProduceSubSeasonSelectConnector
{
}

// Namespace: PRISM.Common
public enum ClientErrorCode : System.Enum
{
    public int value__;
    public static PRISM.Common.ClientErrorCode Timeout;
    public static PRISM.Common.ClientErrorCode AssetDownloadError;
    public static PRISM.Common.ClientErrorCode ApiUnknownError;
    public static PRISM.Common.ClientErrorCode ClientLoadError;
    public static PRISM.Common.ClientErrorCode DiskWriteError;
    public static PRISM.Common.ClientErrorCode SaveDataDestructionError;
}

// Namespace: PRISM.Common
public class CharacterSpeechBalloonView : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UITextMeshProUGUI txtName;
    private ENTERPRISE.UI.UITextMeshProUGUI txtMessage;
    private UnityEngine.CanvasGroup cg;
    private float fadeInDuration;
    private float fadeOutDuration;
    private void Awake();
    public void SetName(string name);
    public void SetMessage(string text);
    public Cysharp.Threading.Tasks.UniTask FadeIndAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask FadeOutAsync();
    public void ForcedHide();
}

// Namespace: PRISM.Common
public class BadgeSaveData : ENTERPRISE.Data.LegacySaveDataBase
{
    public long[] LastDateTimes;
    public bool IsDefault();
    public void Reset();
    public bool IsBadge(BadgeType type, System.DateTime dateTime);
    public void SetLastDate(BadgeType type, System.DateTime dateTime);

    public enum BadgeType : System.Enum
    {
        public int value__;
        public static BadgeType Friend;
        public static BadgeType Announce;
        public static BadgeType Num;
    }
}

// Namespace: PRISM.Common
public class UI3DModelViewer : System.IDisposable
{
    private PRISM.Legacy.SimpleModel3dLoader model3dLoader;
    private PRISM.LiveCharacterController liveCharacterController;
    private PRISM.CameraController cameraController;
    private PRISM.SwayBoneManager swayBoneManager;
    private PRISM.Rendering.ShadowResolution previousShadowResolution;
    private bool previousPostprocessEnabled;
    private PRISM.Rendering.CameraRenderData renderData;
    private PRISM.Scenario.ScenarioManager <ScenarioManager>k__BackingField;
    private UnityEngine.Camera captureCamera;
    private int cameraCaptureId;
    private UnityEngine.GameObject bgLayer;
    private UnityEngine.Transform saveReturnParent;
    private float keepRenderScale;
    public PRISM.LiveCharacterController LiveCharacterController { get; set; }
    public CameraWorkEvent CameraEvent { get; set; }
    public PRISM.Scenario.ScenarioManager ScenarioManager { get; set; }
    public UnityEngine.Camera CaptureCamera { get; set; }
    public Cysharp.Threading.Tasks.UniTask<bool> SetupRenderCharacterAsync(PRISM.UnitIdol[] unitIdols, UnityEngine.UI.RawImage rawImage, UnityEngine.GameObject bgLayerObject, System.Threading.CancellationToken ct);
    public void ChangeCostumePrepare(PRISM.UnitIdol[] unitIdols);
    public Cysharp.Threading.Tasks.UniTask ChangeCostumeAsync(PRISM.UnitIdol[] unitIdols, UnityEngine.UI.RawImage rawImage, UnityEngine.Texture lastTex);
    public void SetMotion(int charaIndex, string animation, string loopAnimation);
    public void StopVoiceAndMotion(int speakerIndex);
    public void ReturnBackGroundFrom3D();
    public Cysharp.Threading.Tasks.UniTask ReleaseAsync();
    private static UnityEngine.Rect _calculateUV(UnityEngine.Texture renderTex, UnityEngine.UI.RawImage rawImage);
    private static UnityEngine.Rect _uvFitFF(float offscreenSizeX, float offscreenSizeY, UnityEngine.Vector2 destinationSize);
    private void _updateCaptureBufferBinding(PRISM.Rendering.CameraRenderData renderData, UnityEngine.UI.RawImage destinationImage);
    public void Dispose();
    private void _changeBgMaterial(UnityEngine.Transform bgLayer);

    private class <>c__DisplayClass22_0
    {
        public PRISM.Common.UI3DModelViewer <>4__this;
        public UnityEngine.UI.RawImage rawImage;
        private bool <SetupRenderCharacterAsync>b__0();
        private void <SetupRenderCharacterAsync>b__1(PRISM.Rendering.CameraRenderData _);
    }

    private struct <ChangeCostumeAsync>d__24 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Common.UI3DModelViewer <>4__this;
        public UnityEngine.UI.RawImage rawImage;
        public UnityEngine.Texture lastTex;
        public PRISM.UnitIdol[] unitIdols;
        private ENTERPRISE.DisposableRenderTexture <lastScreen>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <ReleaseAsync>d__28 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Common.UI3DModelViewer <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetupRenderCharacterAsync>d__22 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<bool> <>t__builder;
        public PRISM.Common.UI3DModelViewer <>4__this;
        public UnityEngine.UI.RawImage rawImage;
        public PRISM.UnitIdol[] unitIdols;
        public System.Threading.CancellationToken ct;
        private <>c__DisplayClass22_0 <>8__1;
        public UnityEngine.GameObject bgLayerObject;
        private UnityEngine.Camera <camera>5__2;
        private Awaiter <>u__1;
        private Awaiter<bool> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Common
public class ValueFluctionTextPair : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UITextMeshProUGUI beforeValueText;
    private ENTERPRISE.UI.UITextMeshProUGUI afterValueText;
    private int digitNum;
    private UnityEngine.Color increaseColor;
    private UnityEngine.Color decreaseColor;
    public void SetValue(long before, long after);
    public void SetValueDesignationMinMax(long before, long after);
    public void SetValueWithLocalize(long before, long after, string beforeLocalizeKey, string afterLocalizeKey);
    public void SetValueWithFormat(long before, long after, string beforeFormat, string afterFormat);
    private void _setTextColor(long before, long after);
}

// Namespace: PRISM.Common.Model
public class CasualCostumeIdol : PRISM.Live.IIdol
{
    private int <CharacterId>k__BackingField;
    private IdolBaseCostumeTargetSceneType <TargetSceneType>k__BackingField;
    private PRISM.Domain.CostumeSetData <CostumeSet>k__BackingField;
    private bool <Enable>k__BackingField;
    public int CharacterId { get; set; }
    public IdolBaseCostumeTargetSceneType TargetSceneType { get; set; }
    public PRISM.Domain.CostumeSetData CostumeSet { get; set; }
    public bool Enable { get; set; }
}

// Namespace: PRISM.Common.Model
public class CharacterIcon : System.IDisposable
{
    private UniRx.BoolReactiveProperty onSelected;
    protected UniRx.IntReactiveProperty favoriteMarkIdRP;
    private PRISM.UI.CharacterType <Type>k__BackingField;
    private int <CharaId>k__BackingField;
    private int <BaseIdolId>k__BackingField;
    private System.DateTime <CreateDate>k__BackingField;
    private bool <Enable>k__BackingField;
    public System.IObservable<bool> OnSelected { get; set; }
    public System.IObservable<int> OnChangeFavoriteMarkId { get; set; }
    public bool Selected { get; set; }
    public PRISM.UI.CharacterType Type { get; set; }
    public int CharaId { get; set; }
    public int BaseIdolId { get; set; }
    public System.DateTime CreateDate { get; set; }
    public int FavoriteId { get; set; }
    public bool Enable { get; set; }
    public void SetOnSelected(bool selected);
    public void SetFavoriteMarkId(int markId);
    public void SetEnable(bool enable);
    public void Dispose();
}

// Namespace: PRISM.Common.Model
public class FIdolIcon : PRISM.Common.Model.CharacterIcon
{
    private int <ProduceIdolId>k__BackingField;
    private int <UnitId>k__BackingField;
    private ProduceParameterRank <Rank>k__BackingField;
    private int <Star>k__BackingField;
    private PRISM.Module.Networking.IProduceParameterStatus <VoDaViMe>k__BackingField;
    public int ProduceIdolId { get; set; }
    public int UnitId { get; set; }
    public ProduceParameterRank Rank { get; set; }
    public int Star { get; set; }
    public PRISM.Module.Networking.IProduceParameterStatus VoDaViMe { get; set; }
}

// Namespace: PRISM.Common.Model
public class FUnitIcon : System.IDisposable
{
    private UniRx.BoolReactiveProperty onSelected;
    private UniRx.ReactiveProperty<System.ValueTuple<bool, bool, bool, bool>> inTransferModeRP;
    private UniRx.IntReactiveProperty changeFavoriteInTransferModeRP;
    private UniRx.BoolReactiveProperty grayOutRP;
    private UniRx.IntReactiveProperty favoriteMarkIdRP;
    private UniRx.StringReactiveProperty unitNameRP;
    private int selectedFavoriteIconId;
    private bool inFavoriteMode;
    private bool isSelectedLimit;
    private string <FesUnitId>k__BackingField;
    private int <UnitId>k__BackingField;
    private ProduceParameterRank <Rank>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<int> <Idols>k__BackingField;
    private PRISM.Module.Networking.IProduceParameterStatus <Parameter>k__BackingField;
    private int <InheritanceCount>k__BackingField;
    private bool <InheritedByProduce>k__BackingField;
    private bool <InChallengeTour>k__BackingField;
    private OrderType <CurrentOrderType>k__BackingField;
    private System.DateTime <CreateDate>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProductWithAmountStatus> <TransferProductList>k__BackingField;
    public System.IObservable<System.ValueTuple<bool, bool, bool, bool>> OnChangeTransferMode { get; set; }
    public System.IObservable<int> OnChangeFavoriteInTransferMode { get; set; }
    public System.IObservable<bool> OnChangeGrayOut { get; set; }
    public System.IObservable<bool> OnSelected { get; set; }
    public System.IObservable<int> OnChangeFavoriteMarkId { get; set; }
    public System.IObservable<string> OnChangeUnitName { get; set; }
    public bool InTransferMode { get; set; }
    public bool Selected { get; set; }
    public string FesUnitId { get; set; }
    public string UnitName { get; set; }
    public int UnitId { get; set; }
    public ProduceParameterRank Rank { get; set; }
    public System.Collections.Generic.IReadOnlyList<int> Idols { get; set; }
    public int FavoriteMarkId { get; set; }
    public PRISM.Module.Networking.IProduceParameterStatus Parameter { get; set; }
    public int InheritanceCount { get; set; }
    public bool InheritedByProduce { get; set; }
    public bool InChallengeTour { get; set; }
    public OrderType CurrentOrderType { get; set; }
    public System.DateTime CreateDate { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProductWithAmountStatus> TransferProductList { get; set; }
    public void InitialModeSetting();
    public void ChangeFavoriteMode(bool inMode, int favoriteId);
    public void ChangeTransferMode(bool inMode);
    public void SetFavoriteMarkId(int markId);
    public bool SetFavoriteMarkIdInMode(int markId);
    public void SetOnSelected(bool selected);
    public void SetSelectedLimitGrayOutInTransferMode();
    public void ReleaseSelectedLimitGrayOut();
    public void SetUnitName(string unitName);
    public void SetOrderType(PRISM.Definitions.SortType sortType);
    public void Dispose();

    public enum OrderType : System.Enum
    {
        public int value__;
        public static OrderType Total;
        public static OrderType Vocal;
        public static OrderType Dance;
        public static OrderType Visual;
        public static OrderType Mental;
        public static OrderType UnitName;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IFesUnitIdolStatus, int> <>9__72_0;
        public static System.Func<PRISM.Module.Networking.IFesUnitIdolStatus, int> <>9__72_1;
        public static System.Func<PRISM.Module.Networking.IFesUnitIdolStatus, int> <>9__73_0;
        public static System.Func<PRISM.Module.Networking.IFesUnitIdolStatus, int> <>9__73_1;
        public static System.Func<PRISM.Module.Networking.IInheritanceFesUnitIdolStatus, int> <>9__74_0;
        public static System.Func<PRISM.Module.Networking.IInheritanceFesUnitIdolStatus, int> <>9__74_1;
        private int <.ctor>b__72_0(PRISM.Module.Networking.IFesUnitIdolStatus x);
        private int <.ctor>b__72_1(PRISM.Module.Networking.IFesUnitIdolStatus x);
        private int <.ctor>b__73_0(PRISM.Module.Networking.IFesUnitIdolStatus x);
        private int <.ctor>b__73_1(PRISM.Module.Networking.IFesUnitIdolStatus x);
        private int <.ctor>b__74_0(PRISM.Module.Networking.IInheritanceFesUnitIdolStatus x);
        private int <.ctor>b__74_1(PRISM.Module.Networking.IInheritanceFesUnitIdolStatus x);
    }
}

// Namespace: PRISM.Common.Model
public class PIdolIcon : PRISM.Common.Model.CharacterIcon
{
    public PRISM.Definitions.MstProduceIdol Master;
    private int <Star>k__BackingField;
    private int <AwakeningLv>k__BackingField;
    private PRISM.Definitions.IdolParameter <VoDaViMe>k__BackingField;
    public int Id { get; set; }
    public int UnitId { get; set; }
    public int Star { get; set; }
    public int AwakeningLv { get; set; }
    public PRISM.Definitions.IdolParameter VoDaViMe { get; set; }
}

// Namespace: PRISM.Common.Model
public class PieceIcon : System.IDisposable
{
    private UniRx.BoolReactiveProperty onSelectedRP;
    private UniRx.BoolReactiveProperty onGrayOutRP;
    private PRISM.Domain.ProductKey <Key>k__BackingField;
    private long <Amount>k__BackingField;
    private int <RequiredToMaxAmount>k__BackingField;
    private long <SurplusAmount>k__BackingField;
    public PRISM.Domain.ProductKey Key { get; set; }
    public long Amount { get; set; }
    public int RequiredToMaxAmount { get; set; }
    public long SurplusAmount { get; set; }
    public bool Selected { get; set; }
    public System.IObservable<bool> OnSelectedChanged { get; set; }
    public System.IObservable<bool> OnGrayOutChanged { get; set; }
    public void SetOnSelected(bool selected);
    public void SetOnGrayOut(bool isGrayOut);
    public void UpdateProduct(long amount);
    public bool ConvertSurplusOrAll();
    public void Dispose();
}

// Namespace: PRISM.Common.Model
public class SCharaIcon : PRISM.Common.Model.CharacterIcon
{
    private string <IconId>k__BackingField;
    private SupportCharacterRarity <Rarity>k__BackingField;
    private ScheduleDetailType <GoodSchedule>k__BackingField;
    private PRISM.Module.Networking.ILimitedValueStatus <Diamond>k__BackingField;
    private int <CharaLv>k__BackingField;
    private int <MasterTrainingLv>k__BackingField;
    private int <Slot>k__BackingField;
    private PRISM.Definitions.MstSupportCharacter <MstSupportCharacter>k__BackingField;
    private System.Collections.Generic.List<PRISM.Common.Model.SupportEffectPassiveEffect> <SupportEffectPassiveEffects>k__BackingField;
    private System.Collections.Generic.List<int> <PotentialSupportSkillGroupIdList>k__BackingField;
    private PRISM.Definitions.IdolParameter <Parameter>k__BackingField;
    private PRISM.Definitions.MstLiveSupportEffect <LiveSupportEffect>k__BackingField;
    private bool <IncludesNotYetAcquiredSkills>k__BackingField;
    private PRISM.UI.BitSupportCharaUpgradingFilterType <UpgradingFilterType>k__BackingField;
    public string IconId { get; set; }
    public SupportCharacterRarity Rarity { get; set; }
    public ScheduleDetailType GoodSchedule { get; set; }
    public PRISM.Module.Networking.ILimitedValueStatus Diamond { get; set; }
    public int CharaLv { get; set; }
    public int MasterTrainingLv { get; set; }
    public int Slot { get; set; }
    public PRISM.Definitions.MstSupportCharacter MstSupportCharacter { get; set; }
    public System.Collections.Generic.List<PRISM.Common.Model.SupportEffectPassiveEffect> SupportEffectPassiveEffects { get; set; }
    public System.Collections.Generic.List<int> PotentialSupportSkillGroupIdList { get; set; }
    public PRISM.Definitions.IdolParameter Parameter { get; set; }
    public PRISM.Definitions.MstLiveSupportEffect LiveSupportEffect { get; set; }
    public bool IncludesNotYetAcquiredSkills { get; set; }
    public PRISM.UI.BitSupportCharaUpgradingFilterType UpgradingFilterType { get; set; }
    public static int GetPotentialSupportSkillGroupId(int mstPotentialSupportSkillId);
    public void ChangeCanMasterTraining(bool canMasterTraining);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<int, int> <>9__54_1;
        private int <.ctor>b__54_1(int x);
    }

    private class <>c__DisplayClass54_0
    {
        public PRISM.Common.Model.SCharaIcon <>4__this;
        public PRISM.Module.Networking.ISupportCharacterStatus scStatus;
        public bool canTraining;
        public bool canMasterTraining;
        private bool <.ctor>b__0(PRISM.Definitions.MstSupportCharacterLimitBreakBonus x);
        private void <.ctor>g__SetUpgradingFilterType|2();
    }
}

// Namespace: PRISM.Common.Model
public class SupportEffectPassiveEffect
{
    private bool <AcquiredSkill>k__BackingField;
    private int <MstProducePassiveEffectTypeId>k__BackingField;
    private int <ScheduleType>k__BackingField;
    private int <ScheduleDetailType>k__BackingField;
    public bool AcquiredSkill { get; set; }
    public int MstProducePassiveEffectTypeId { get; set; }
    public int ScheduleType { get; set; }
    public int ScheduleDetailType { get; set; }
}

// Namespace: PRISM.UICharacter
public class CharacterUtility
{
    public static Cysharp.Threading.Tasks.UniTask<bool> HasIdolFromPieceAsync(PRISM.Module.Networking.IProductStatus pieceStatus, System.Threading.CancellationToken ct);
    public static Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.IProduceIdolStatus> GetProduceIdolFromPieceAsync(PRISM.Module.Networking.IProductStatus pieceProduct, System.Threading.CancellationToken ct);
    public static PRISM.Module.Networking.IProduceIdolStatus GetProduceIdolFromPieceWithCache(int pieceProductMstId);
    public static Cysharp.Threading.Tasks.UniTask<PRISM.Module.Networking.ISupportCharacterStatus> GetSupportCharacterFromPieceAsync(PRISM.Module.Networking.IProductStatus pieceProduct, System.Threading.CancellationToken ct);
    public static PRISM.Module.Networking.ISupportCharacterStatus GetSupportCharacterFromPieceWithCache(int pieceProductMstId);
    public static PRISM.Definitions.IdolParameter GetStarIdolParameter(int mstProduceIdolId, int currentStarLv);
    public static PRISM.Definitions.IdolParameter GetProduceIdolParameter(int mstProduceIdolId, int currentStarLv, PRISM.Module.Networking.IIdolBaseStatus idolBaseStatus);
    public static PRISM.Definitions.IdolParameter GetProduceIdolParameterWithLevel(int mstProduceIdolId, int currentStarLv, int currentLv);
    public static PRISM.Definitions.IdolParameter GetLiveProduceIdolParameter(int mstProduceIdolId, int currentStarLv, int currentLv, PRISM.Module.Networking.IIdolBaseStatus idolBaseStatus);
    public static PRISM.Definitions.IdolParameter GetSupportCharaParameter(int mstSupportCharaId, int currentLv);
    public static int GetIdolSkillIconId(int mstIdolSkillId);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Definitions.MstProduceIdolLevelExp, int> <>9__7_0;
        public static System.Func<PRISM.Definitions.MstSupportCharacterLevelExp, int> <>9__9_1;
        public static System.Func<int, bool> <>9__10_1;
        private int <GetProduceIdolParameterWithLevel>b__7_0(PRISM.Definitions.MstProduceIdolLevelExp x);
        private int <GetSupportCharaParameter>b__9_1(PRISM.Definitions.MstSupportCharacterLevelExp x);
        private bool <GetIdolSkillIconId>b__10_1(int x);
    }

    private class <>c__DisplayClass10_0
    {
        public int mstIdolSkillId;
        private bool <GetIdolSkillIconId>b__0(PRISM.Definitions.MstIdolSkillEffect x);
    }

    private class <>c__DisplayClass1_0
    {
        public PRISM.Definitions.SortedMasterTable<int, PRISM.Definitions.MstProduceIdol> mstProduceIdols;
        public PRISM.Module.Networking.IProductStatus pieceProduct;
        private bool <GetProduceIdolFromPieceAsync>b__0(PRISM.Module.Networking.IProduceIdolStatus x);
    }

    private class <>c__DisplayClass2_0
    {
        public PRISM.Definitions.SortedMasterTable<int, PRISM.Definitions.MstProduceIdol> mstProduceIdols;
        public int pieceProductMstId;
        private bool <GetProduceIdolFromPieceWithCache>b__0(PRISM.Module.Networking.IProduceIdolStatus x);
    }

    private class <>c__DisplayClass3_0
    {
        public PRISM.Definitions.SortedMasterTable<int, PRISM.Definitions.MstSupportCharacter> mstSupportCharacters;
        public PRISM.Module.Networking.IProductStatus pieceProduct;
        private bool <GetSupportCharacterFromPieceAsync>b__0(PRISM.Module.Networking.ISupportCharacterStatus x);
    }

    private class <>c__DisplayClass4_0
    {
        public PRISM.Definitions.SortedMasterTable<int, PRISM.Definitions.MstSupportCharacter> mstSupportCharacters;
        public int pieceProductMstId;
        private bool <GetSupportCharacterFromPieceWithCache>b__0(PRISM.Module.Networking.ISupportCharacterStatus x);
    }

    private class <>c__DisplayClass9_0
    {
        public PRISM.Definitions.MstSupportCharacter mstSc;
        private bool <GetSupportCharaParameter>b__0(PRISM.Definitions.MstSupportCharacterLevelExp x);
    }

    private struct <GetProduceIdolFromPieceAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.IProduceIdolStatus> <>t__builder;
        public PRISM.Module.Networking.IProductStatus pieceProduct;
        public System.Threading.CancellationToken ct;
        private <>c__DisplayClass1_0 <>8__1;
        private Awaiter<PRISM.Module.Networking.IGetProduceIdolListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <GetSupportCharacterFromPieceAsync>d__3 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Module.Networking.ISupportCharacterStatus> <>t__builder;
        public PRISM.Module.Networking.IProductStatus pieceProduct;
        public System.Threading.CancellationToken ct;
        private <>c__DisplayClass3_0 <>8__1;
        private Awaiter<PRISM.Module.Networking.IGetSupportCharacterListReply> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <HasIdolFromPieceAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<bool> <>t__builder;
        public PRISM.Module.Networking.IProductStatus pieceStatus;
        public System.Threading.CancellationToken ct;
        private Awaiter<PRISM.Module.Networking.IProduceIdolStatus> <>u__1;
        private Awaiter<PRISM.Module.Networking.ISupportCharacterStatus> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.UICharacter
public interface ICharacterTopConnector
{
}

// Namespace: PRISM.UICharacter
public interface IIdolBaseDetailConnector
{
}

// Namespace: PRISM.UICharacter
public class FUnitDetailFUnitInfoPresenter : UnityEngine.MonoBehaviour
{
    private PRISM.UICharacter.FUnitDetailFUnitInfoView view;
    public void Initialize(PRISM.Module.Networking.IFesUnitStatus fu, PRISM.Domain.ICachedIdolService idolService, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    private static string _unitNameInitialValueCorrection(PRISM.Module.Networking.IFesUnitStatus fu);
}

// Namespace: PRISM.UICharacter
public class FUnitDetailFUnitInfoView : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.RawImage imgUnitIcon;
    private PRISM.UI.FUnitIconView fUnitIconView;
    private ENTERPRISE.UI.UITextMeshProUGUI txtUnitName;
    private UnityEngine.UI.RawImage imgTotalRank;
    private PRISM.Legacy.ParamRememberableAnimator rankEffectAnimator;
    private ENTERPRISE.UI.UITextMeshProUGUI txtTotal;
    private UnityEngine.GameObject totalBonusObject;
    private ENTERPRISE.UI.UITextMeshProUGUI txtTotalBaseBonus;
    private PRISM.UI.VoDaViMeRankView voDaViMeRankView;
    private ENTERPRISE.UI.UITextMeshProUGUI txtVoBaseBonus;
    private ENTERPRISE.UI.UITextMeshProUGUI txtDaBaseBonus;
    private ENTERPRISE.UI.UITextMeshProUGUI txtViBaseBonus;
    private ENTERPRISE.UI.UITextMeshProUGUI txtMeBaseBonus;
    public void Setup(PRISM.Module.Networking.IFesUnitStatus fu, string unitName, PRISM.Domain.ICachedIdolService idolService, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    private System.Collections.Generic.IReadOnlyList<int> _getSortedPIdolIdList(int unitId, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IFesUnitIdolStatus> fesUnitIdols);
    private void _setRankEffect(ProduceParameterRank rank);
    private void _setBonusText(ENTERPRISE.UI.UITextMeshProUGUI text, int value);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IFesUnitIdolStatus, int> <>9__14_0;
        public static System.Func<PRISM.Module.Networking.IFesUnitIdolStatus, int> <>9__14_1;
        private int <_getSortedPIdolIdList>b__14_0(PRISM.Module.Networking.IFesUnitIdolStatus x);
        private int <_getSortedPIdolIdList>b__14_1(PRISM.Module.Networking.IFesUnitIdolStatus x);
    }
}

// Namespace: PRISM.UICharacter
public class FUnitDetailSupportPresenter : UnityEngine.MonoBehaviour
{
    private PRISM.UICharacter.FUnitDetailSupportView view;
    private PRISM.UICharacter.SupportSkillContentView goSSkillContentPrefab;
    private UnityEngine.Transform trSSkillParent;
    public void Initialize(System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IFesUnitSupportCharacterStatus> supportCharacters, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IFesUnitAttachedSupportSkillStatus> attachedSupportSkills, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    public void Show();
    public void Hide();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IFesUnitSupportCharacterStatus, int> <>9__3_0;
        public static System.Func<PRISM.Module.Networking.IFesUnitAttachedSupportSkillStatus, System.ValueTuple<int, bool>> <>9__3_1;
        public static System.Func<System.ValueTuple<int, bool>, bool> <>9__3_2;
        public static System.Func<System.ValueTuple<int, bool>, int> <>9__3_3;
        private int <Initialize>b__3_0(PRISM.Module.Networking.IFesUnitSupportCharacterStatus x);
        private System.ValueTuple<int, bool> <Initialize>b__3_1(PRISM.Module.Networking.IFesUnitAttachedSupportSkillStatus x);
        private bool <Initialize>b__3_2(System.ValueTuple<int, bool> x);
        private int <Initialize>b__3_3(System.ValueTuple<int, bool> x);
    }
}

// Namespace: PRISM.UICharacter
public class FUnitDetailSupportView : UnityEngine.MonoBehaviour
{
    private UnityEngine.CanvasGroup canvasGroup;
    private ENTERPRISE.UI.UITextMeshProUGUI txtSlotCount;
    private PRISM.UI.SCharaIconRectView[] sCharaIconRectViews;
    private PRISM.UI.SCharaIconRectView sCharaIconRectViewOfFriendSetting;
    public void Setup(PRISM.Module.Networking.IFesUnitSupportCharacterStatus[] fesUnitSupportCharacters, int totalSlotCount, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    public void Show();
    public void Hide();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IFesUnitSupportCharacterStatus, bool> <>9__4_0;
        public static System.Func<PRISM.Module.Networking.IFesUnitSupportCharacterStatus, bool> <>9__4_1;
        private bool <Setup>b__4_0(PRISM.Module.Networking.IFesUnitSupportCharacterStatus x);
        private bool <Setup>b__4_1(PRISM.Module.Networking.IFesUnitSupportCharacterStatus x);
    }
}

// Namespace: PRISM.UICharacter
public class SupportSkillContentView : UnityEngine.MonoBehaviour
{
    private UnityEngine.UI.RawImage imgSkillIcon;
    private UnityEngine.GameObject goInheritanceIcon;
    private ENTERPRISE.UI.UITextMeshProUGUI txtSkillName;
    private ENTERPRISE.UI.UITextMeshProUGUI txtSKillDetail;
    public void Setup(int mstSupportSkillId, bool isInheritance, PRISM.ResourceManagement.IResourceLoader loader);
}

// Namespace: PRISM.UICharacter
public interface IPIdolDetailPopupCaller : PRISM.Legacy.ILegacyCaller
{
    public Cysharp.Threading.Tasks.UniTask LaunchWithADVAsync(int mstProduceIdolId, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<bool> LaunchWithADVAsync(int mstProduceIdolId, System.Threading.CancellationToken ct, System.Action<PRISM.Module.Networking.IProduceIdolStatus> onChangeFavoriteMarkAction, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceIdolScenarioStatus> produceAdvStatusList, bool inLive);
    public Cysharp.Threading.Tasks.UniTask<bool> LaunchMaximumPIdolFromProductAsync(int mstProduceIdolId, System.Threading.CancellationToken ct, bool withAdvList);
}

// Namespace: PRISM.UICharacter
public interface ISCharaDetailPopupCaller : PRISM.Legacy.ILegacyCaller
{
    public Cysharp.Threading.Tasks.UniTask<bool> LaunchAsync(int mstSupportCharaId, System.Threading.CancellationToken ct, bool withAdvList, bool isChangeableFavorite, System.Action<PRISM.Module.Networking.ISupportCharacterStatus> onChangeFavoriteMarkAction, bool upgradingButtonActive);
    public Cysharp.Threading.Tasks.UniTask<bool> LaunchOtherSCharaAsync(PRISM.Module.Networking.ISupportCharacterStatus otherSChara, System.Threading.CancellationToken ct, bool asMax);
    public Cysharp.Threading.Tasks.UniTask<bool> LaunchMaximumSCharaFromProductAsync(int mstSupportCharaId, System.Threading.CancellationToken ct, bool withAdvList);
}

// Namespace: PRISM.UICharacter
public class IdolBaseDetailViewParameter : ENTERPRISE.IViewParameter
{
    private int <CharacterId>k__BackingField;
    private bool <ReturnFromCasualCostumeSelection>k__BackingField;
    public int CharacterId { get; set; }
    public bool ReturnFromCasualCostumeSelection { get; set; }
    public void SetReturnFromCasualCostumeSelection(bool isCasualCostumeSelection);
}

// Namespace: PRISM.UICharacter
public class IdolListViewParameter : ENTERPRISE.IViewParameter
{
    private int <DefaultTab>k__BackingField;
    public int DefaultTab { get; set; }
}

// Namespace: PRISM.Boot
public class BootMenuScene : UnityEngine.MonoBehaviour, PRISM.Boot.IBootMenuData
{
    private PRISM.BootUISingleton ui;
    private PRISM.ViewBundleData[] viewBundleDataList;
    private System.Collections.Generic.Dictionary<string, PRISM.ViewBundle> viewMapping;
    private string model3DScene;
    public Cysharp.Threading.Tasks.UniTaskVoid Start();
    private static Cysharp.Threading.Tasks.UniTask _showRevertMessageAsync();
    public Cysharp.Threading.Tasks.UniTask<UnityEngine.GameObject> LoadViewAssetAsync(string viewName, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    private void OnApplicationQuit();
    private Cysharp.Threading.Tasks.UniTask _setupManagersAsync();
    private Cysharp.Threading.Tasks.UniTask<ENTERPRISE.ViewBase> _selectViewAsync(System.Type viewType, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    private static Cysharp.Threading.Tasks.UniTask _onViewErrorAsync(System.Exception e);
    private static string _toErrorCode(string viewType);
    private ResultType _setupView();
    public static string GetUserId();
    private System.Collections.Generic.IEnumerable<PRISM.ViewBundle> _getViewBundles();

    private class <>O
    {
        public static System.Func<System.Exception, Cysharp.Threading.Tasks.UniTask> <0>___onViewErrorAsync;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.ViewBundle, bool> <>9__0_0;
        public static System.Func<PRISM.ViewBundle, string> <>9__0_1;
        public static System.Func<Cysharp.Threading.Tasks.UniTask> <>9__4_2;
        public static System.Func<PRISM.ViewBundleData, System.Collections.Generic.IEnumerable<PRISM.ViewBundle>> <>9__12_0;
        private bool <Start>b__0_0(PRISM.ViewBundle data);
        private string <Start>b__0_1(PRISM.ViewBundle data);
        private Cysharp.Threading.Tasks.UniTask <_setupManagersAsync>b__4_2();
        private System.Collections.Generic.IEnumerable<PRISM.ViewBundle> <_getViewBundles>b__12_0(PRISM.ViewBundleData x);
    }

    private class <>c__DisplayClass4_0
    {
        public PRISM.Legacy.ILoadingPresenterForLegacy loadingPresenter;
        private Cysharp.Threading.Tasks.UniTask <_setupManagersAsync>b__0();
        private Cysharp.Threading.Tasks.UniTask <_setupManagersAsync>b__1(int loadingViewType);
    }

    private struct <Start>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskVoidMethodBuilder <>t__builder;
        public PRISM.Boot.BootMenuScene <>4__this;
        private ENTERPRISE.ViewManager <manager>5__2;
        private ResultType <saveLoaderResult>5__3;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_selectViewAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<ENTERPRISE.ViewBase> <>t__builder;
        public PRISM.Boot.BootMenuScene <>4__this;
        public System.Type viewType;
        public PRISM.ResourceManagement.IResourceLoader resourceLoader;
        private Awaiter<UnityEngine.GameObject> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_setupManagersAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Boot.BootMenuScene <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_showRevertMessageAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Boot
public class BootSettings
{
    public static void ApplyGameOptions();
    public static Cysharp.Threading.Tasks.UniTask InitializeSoundAsync();

    private struct <InitializeSoundAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Boot
public interface IBootMenuData
{
}

// Namespace: PRISM.Boot
public class UserSaveDataInitializer
{
    public static System.ValueTuple<PRISM.Data.LoginUserData, ResultType> Run();
    public static Cysharp.Threading.Tasks.UniTask ShowReportAsync(ResultType report, System.Threading.CancellationToken token);

    public enum ResultType : System.Enum
    {
        public int value__;
        public static ResultType AllGreen;
        public static ResultType Salvaged;
        public static ResultType SalvationError;
    }

    private struct <ShowReportAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Adapters
public interface ILiveAutoLoopView : PRISM.Adapters.IRhythmGameSpecialView
{
    public void Initialize(PRISM.Live.ILiveAutoLoopViewModel viewModel, int loopCount);
}

// Namespace: PRISM.Adapters
public interface IRhythmGameSpecialView
{
}

// Namespace: PRISM.Adapters
public interface IRhythmGameSpecialViewLocator
{
    public T Get<T>();
}

// Namespace: PRISM.Adapters
public interface IRhythmGameTechnicalChallengeView : PRISM.Adapters.IRhythmGameSpecialView
{
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(PRISM.ResourceManagement.IResourceLoader resourceLoader, PRISM.Definitions.MstSong song, SongDifficultyLevel difficulty, int remainRetryCount, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask StartAsync(System.Threading.CancellationToken ct);
    public void AddJudge(PRISM.RhythmGame.JudgmentResultType judgmentResultType);
}

// Namespace: PRISM.Adapters
public class LiveResultBeforeAfterStatus
{
    private long <MoneyCount>k__BackingField;
    private long <NotebookCount>k__BackingField;
    private PRISM.Live.MusicData <MusicData>k__BackingField;
    private PRISM.Module.Networking.ITotalHighScoreRatingStatus <TotalHighScoreRating>k__BackingField;
    private PRISM.Module.Networking.ITotalTechnicalRatingStatus <TotalTechnicalRating>k__BackingField;
    private bool <IsShinyEnabled>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceIdolStatus> <ProduceIdols>k__BackingField;
    public long MoneyCount { get; set; }
    public long NotebookCount { get; set; }
    public PRISM.Live.MusicData MusicData { get; set; }
    public PRISM.Module.Networking.ITotalHighScoreRatingStatus TotalHighScoreRating { get; set; }
    public PRISM.Module.Networking.ITotalTechnicalRatingStatus TotalTechnicalRating { get; set; }
    public bool IsShinyEnabled { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceIdolStatus> ProduceIdols { get; set; }
    public static Cysharp.Threading.Tasks.UniTask<PRISM.Adapters.LiveResultBeforeAfterStatus> CreateAsync(int musicId, System.Collections.Generic.IEnumerable<int> produceIdolIds, System.Threading.CancellationToken ct);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IHavingProductStatus, long> <>9__28_0;
        private long <CreateAsync>b__28_0(PRISM.Module.Networking.IHavingProductStatus x);
    }

    private class <>c__DisplayClass28_0
    {
        public PRISM.Domain.ICachedProduceIdolService produceIdolService;
        private PRISM.Module.Networking.IProduceIdolStatus <CreateAsync>b__1(int x);
    }

    private struct <CreateAsync>d__28 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Adapters.LiveResultBeforeAfterStatus> <>t__builder;
        public int musicId;
        public System.Threading.CancellationToken ct;
        private <>c__DisplayClass28_0 <>8__1;
        public System.Collections.Generic.IEnumerable<int> produceIdolIds;
        private PRISM.Legacy.IServiceContainerForLegacy <serviceContainer>5__2;
        private PRISM.Domain.SongCacheForResult <songCache>5__3;
        private PRISM.Domain.IProductService <productService>5__4;
        private Awaiter<PRISM.Domain.SongCacheForResult> <>u__1;
        private Awaiter<PRISM.Domain.ICachedProduceIdolService> <>u__2;
        private PRISM.Adapters.LiveResultBeforeAfterStatus <>7__wrap4;
        private PRISM.Adapters.LiveResultBeforeAfterStatus <>7__wrap5;
        private PRISM.Adapters.LiveResultBeforeAfterStatus <>7__wrap6;
        private Awaiter<long> <>u__3;
        private Awaiter<System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IHavingProductStatus>> <>u__4;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Adapters
public interface IMessagePopupBuilderEmpty
{
    public PRISM.Adapters.IMessagePopupBuilderWithTitle SetTitle(string title);
    public PRISM.Adapters.IMessagePopupBuilderWithTitle SetTitle(PRISM.Definitions.LocalizationKey title);
}

// Namespace: PRISM.Adapters
public interface IMessagePopupBuilderWithTitle
{
    public PRISM.Adapters.IMessagePopupBuilderButton0 SetMessage(string message);
    public PRISM.Adapters.IMessagePopupBuilderButton0 SetMessage(PRISM.Definitions.LocalizationKey message);
}

// Namespace: PRISM.Adapters
public interface IMessagePopupBuilderButton0
{
    public PRISM.Adapters.IMessagePopupBuilderButton1 AddButton(string text, System.Nullable<PopupButtonType> type);
    public PRISM.Adapters.IMessagePopupBuilderButton1 AddButton(PRISM.Definitions.LocalizationKey text, System.Nullable<PopupButtonType> type);
    public PRISM.Adapters.IMessagePopupBuilderButton1 AddCancelButton();
    public Cysharp.Threading.Tasks.UniTask ShowClosePopupAsync(System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask ShowOkPopupAsync(System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask<bool> ShowYesNoPopupAsync(System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask<bool> ShowOkCancelPopupAsync(System.Threading.CancellationToken cancellationToken);
}

// Namespace: PRISM.Adapters
public interface IMessagePopupBuilderButton1
{
    public PRISM.Adapters.IMessagePopupBuilderButton2 AddButton(string text, System.Nullable<PopupButtonType> type);
    public PRISM.Adapters.IMessagePopupBuilderButton2 AddButton(PRISM.Definitions.LocalizationKey text, System.Nullable<PopupButtonType> type);
    public PRISM.Adapters.IMessagePopupBuilderButton2 AddDecideButton();
    public Cysharp.Threading.Tasks.UniTask ShowAsync(System.Threading.CancellationToken cancellationToken);
}

// Namespace: PRISM.Adapters
public interface IMessagePopupBuilderButton2
{
    public PRISM.Adapters.IMessagePopupBuilderButton3 AddButton(string text, System.Nullable<PopupButtonType> type);
    public PRISM.Adapters.IMessagePopupBuilderButton3 AddButton(PRISM.Definitions.LocalizationKey text, System.Nullable<PopupButtonType> type);
    public Cysharp.Threading.Tasks.UniTask<bool> ShowAsync(System.Threading.CancellationToken cancellationToken);
}

// Namespace: PRISM.Adapters
public interface IMessagePopupBuilderButton3
{
    public Cysharp.Threading.Tasks.UniTask<int> ShowAsync(System.Threading.CancellationToken cancellationToken);
}

// Namespace: PRISM.Adapters
public class ProduceGiveUpConfirmationPopupSequencer
{
    public static Cysharp.Threading.Tasks.UniTask<bool> ShowAsync(PRISM.Definitions.LocalizationKey titleKey, System.Threading.CancellationToken token);
}

// Namespace: PRISM.Adapters.Common
public class ReceiveRewardPopupViewModel
{
    private System.Collections.Generic.IReadOnlyList<PRISM.Domain.ProductKeyWithAmount> <RewardProducts>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.Domain.ProductKey> <StoryRewards>k__BackingField;
    private bool <NeedShowAmountOnItemIcon>k__BackingField;
    private bool <NeedShowDetailOnLongPressed>k__BackingField;
    private string <Title>k__BackingField;
    private string <HeaderText>k__BackingField;
    private string <FooterText>k__BackingField;
    public System.Collections.Generic.IReadOnlyList<PRISM.Domain.ProductKeyWithAmount> RewardProducts { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Domain.ProductKey> StoryRewards { get; set; }
    public bool NeedShowAmountOnItemIcon { get; set; }
    public bool NeedShowDetailOnLongPressed { get; set; }
    public string Title { get; set; }
    public string HeaderText { get; set; }
    public string FooterText { get; set; }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IProductWithAmountStatus, PRISM.Domain.ProductKeyWithAmount> <>9__26_0;
        public static System.Func<PRISM.Module.Networking.IRewardProductStatus, PRISM.Domain.ProductKeyWithAmount> <>9__27_0;
        public static System.Func<PRISM.Module.Networking.IRewardProductStatus, PRISM.Domain.ProductKeyWithAmount> <>9__28_0;
        public static System.Func<PRISM.Domain.ProductKeyWithAmount, PRISM.Domain.ProductKey> <>9__29_1;
        public static System.Func<PRISM.Domain.ProductKeyWithAmount, int> <>9__29_4;
        public static System.Func<System.Linq.IGrouping<PRISM.Domain.ProductKey, PRISM.Domain.ProductKeyWithAmount>, PRISM.Domain.ProductKeyWithAmount> <>9__29_2;
        public static System.Func<PRISM.Domain.ProductKeyWithAmount, bool> <>9__29_3;
        public static System.Func<PRISM.Domain.ProductKeyWithAmount, PRISM.Domain.ProductKey> <>9__29_5;
        private PRISM.Domain.ProductKeyWithAmount <.ctor>b__26_0(PRISM.Module.Networking.IProductWithAmountStatus x);
        private PRISM.Domain.ProductKeyWithAmount <.ctor>b__27_0(PRISM.Module.Networking.IRewardProductStatus x);
        private PRISM.Domain.ProductKeyWithAmount <.ctor>b__28_0(PRISM.Module.Networking.IRewardProductStatus x);
        private PRISM.Domain.ProductKey <.ctor>b__29_1(PRISM.Domain.ProductKeyWithAmount x);
        private PRISM.Domain.ProductKeyWithAmount <.ctor>b__29_2(System.Linq.IGrouping<PRISM.Domain.ProductKey, PRISM.Domain.ProductKeyWithAmount> x);
        private int <.ctor>b__29_4(PRISM.Domain.ProductKeyWithAmount p);
        private bool <.ctor>b__29_3(PRISM.Domain.ProductKeyWithAmount x);
        private PRISM.Domain.ProductKey <.ctor>b__29_5(PRISM.Domain.ProductKeyWithAmount x);
    }

    private class <>c__DisplayClass29_0
    {
        public PRISM.Definitions.MasterData masterData;
        private System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKeyWithAmount> <.ctor>b__0(PRISM.Domain.ProductKeyWithAmount x);
    }
}

// Namespace: PRISM.Adapters.Shop
public interface IShopCostumeProductModel : PRISM.Adapters.Shop.IShopProductModel
{
    public int MstCostumeShopItemCategoryId { get; set; }
    public int MstCostumeShopItemGroupId { get; set; }
}

// Namespace: PRISM.Adapters.Shop
public class ShopCostumeShopProductModel : PRISM.Adapters.Shop.IShopCostumeProductModel, PRISM.Adapters.Shop.IShopProductModel
{
    private PRISM.Adapters.Shop.ShopProductModelForShopItem <ProductModel>k__BackingField;
    private int <MstCostumeShopItemCategoryId>k__BackingField;
    private int <MstCostumeShopItemGroupId>k__BackingField;
    public PRISM.Adapters.Shop.ShopProductModelCore Core { get; set; }
    public PRISM.Adapters.Shop.ShopProductModelForShopItem ProductModel { get; set; }
    public int MstCostumeShopItemCategoryId { get; set; }
    public int MstCostumeShopItemGroupId { get; set; }
    public PRISM.Adapters.Shop.IPurchaseProductModel ToPurchaseModel();
    private System.Collections.Generic.IReadOnlyList<PRISM.Domain.ProductKeyWithAmount> _getContentListWithDifferenceCostume(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProductWithAmountStatus> productList);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Domain.ProductKeyWithAmount, System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKeyWithAmount>> <>9__13_1;
        public static System.Func<PRISM.Module.Networking.IProductWithAmountStatus, System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKeyWithAmount>> <>9__13_0;
        private System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKeyWithAmount> <_getContentListWithDifferenceCostume>b__13_0(PRISM.Module.Networking.IProductWithAmountStatus productWithAmountStatus);
        private System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKeyWithAmount> <_getContentListWithDifferenceCostume>b__13_1(PRISM.Domain.ProductKeyWithAmount product);
    }
}

// Namespace: PRISM.Adapters.Shop
public class ShopCostumeStoreProductModel : PRISM.Adapters.Shop.IShopCostumeProductModel, PRISM.Adapters.Shop.IShopProductModel
{
    private PRISM.Adapters.Shop.ShopProductModelForStoreItem <ProductModel>k__BackingField;
    private int <MstCostumeShopItemCategoryId>k__BackingField;
    private int <MstCostumeShopItemGroupId>k__BackingField;
    public PRISM.Adapters.Shop.ShopProductModelCore Core { get; set; }
    public PRISM.Adapters.Shop.ShopProductModelForStoreItem ProductModel { get; set; }
    public int MstCostumeShopItemCategoryId { get; set; }
    public int MstCostumeShopItemGroupId { get; set; }
    public PRISM.Adapters.Shop.IPurchaseProductModel ToPurchaseModel();
    private System.Collections.Generic.IReadOnlyList<PRISM.Domain.ProductKeyWithAmount> _getContentListWithDifferenceCostume(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProductWithAmountStatus> productList);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Domain.ProductKeyWithAmount, System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKeyWithAmount>> <>9__13_1;
        public static System.Func<PRISM.Module.Networking.IProductWithAmountStatus, System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKeyWithAmount>> <>9__13_0;
        private System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKeyWithAmount> <_getContentListWithDifferenceCostume>b__13_0(PRISM.Module.Networking.IProductWithAmountStatus productWithAmountStatus);
        private System.Collections.Generic.IEnumerable<PRISM.Domain.ProductKeyWithAmount> <_getContentListWithDifferenceCostume>b__13_1(PRISM.Domain.ProductKeyWithAmount product);
    }
}

// Namespace: PRISM.Adapters.Shop
public interface IShopPassProductModel : PRISM.Adapters.Shop.IShopProductModel
{
    public PRISM.Module.Networking.IStoreItemStatus StoreItem { get; set; }
    public string ValidPeriodText { get; set; }
    public string ValidPeriodDateText { get; set; }
}

// Namespace: PRISM.Adapters.Shop
public interface IShopProductModel
{
    public PRISM.Adapters.Shop.ShopProductModelCore Core { get; set; }
    public PRISM.Adapters.Shop.IPurchaseProductModel ToPurchaseModel();
}

// Namespace: PRISM.Adapters.Shop
public interface IShopItemProductModel : PRISM.Adapters.Shop.IShopProductModel
{
}

// Namespace: PRISM.Adapters.Shop
public class ShopItemShopProductModel : PRISM.Adapters.Shop.IShopItemProductModel, PRISM.Adapters.Shop.IShopProductModel
{
    private PRISM.Adapters.Shop.ShopProductModelForShopItem <ProductModel>k__BackingField;
    public PRISM.Adapters.Shop.ShopProductModelCore Core { get; set; }
    public PRISM.Adapters.Shop.ShopProductModelForShopItem ProductModel { get; set; }
    public PRISM.Adapters.Shop.IPurchaseProductModel ToPurchaseModel();
}

// Namespace: PRISM.Adapters.Shop
public class ShopItemStoreProductModel : PRISM.Adapters.Shop.IShopItemProductModel, PRISM.Adapters.Shop.IShopProductModel
{
    private PRISM.Adapters.Shop.ShopProductModelForStoreItem <ProductModel>k__BackingField;
    public PRISM.Adapters.Shop.ShopProductModelCore Core { get; set; }
    public PRISM.Adapters.Shop.ShopProductModelForStoreItem ProductModel { get; set; }
    public PRISM.Adapters.Shop.IPurchaseProductModel ToPurchaseModel();
}

// Namespace: PRISM.Adapters.Shop
public class ShopJewelProductModel : PRISM.Adapters.Shop.IShopProductModel
{
    private PRISM.Adapters.Shop.ShopProductModelForStoreItem <ProductModel>k__BackingField;
    public PRISM.Adapters.Shop.ShopProductModelCore Core { get; set; }
    public PRISM.Adapters.Shop.ShopProductModelForStoreItem ProductModel { get; set; }
    public PRISM.Adapters.Shop.IPurchaseProductModel ToPurchaseModel();
}

// Namespace: PRISM.Adapters.Shop
public class ShopLimitedTimeLoginBonusPassProductModel : PRISM.Adapters.Shop.IShopPassProductModel, PRISM.Adapters.Shop.IShopProductModel
{
    private PRISM.Adapters.Shop.ShopProductModelForStoreItem productModel;
    private int loginBonusAvailableDayCount;
    private PRISM.Module.Networking.ILimitedTimeLoginBonusPassStoreItemStatus <LimitedTimeLoginBonusPassStoreItem>k__BackingField;
    private PRISM.Module.Networking.IStoreItemStatus <StoreItem>k__BackingField;
    private int <MstLoginBonusPassId>k__BackingField;
    private string <ValidPeriodText>k__BackingField;
    public PRISM.Adapters.Shop.ShopProductModelCore Core { get; set; }
    public PRISM.Module.Networking.ILimitedTimeLoginBonusPassStoreItemStatus LimitedTimeLoginBonusPassStoreItem { get; set; }
    public PRISM.Module.Networking.IStoreItemStatus StoreItem { get; set; }
    public int MstLoginBonusPassId { get; set; }
    public string ValidPeriodText { get; set; }
    public string ValidPeriodDateText { get; set; }
    public PRISM.Adapters.Shop.IPurchaseProductModel ToPurchaseModel();
}

// Namespace: PRISM.Adapters.Shop
public class ShopLoginBonusPassProductModel : PRISM.Adapters.Shop.IShopPassProductModel, PRISM.Adapters.Shop.IShopProductModel
{
    private PRISM.Adapters.Shop.ShopProductModelForStoreItem productModel;
    private int loginBonusAvailableDayCount;
    private PRISM.Module.Networking.ILoginBonusPassStoreItemStatus <LoginBonusPassStoreItem>k__BackingField;
    private PRISM.Module.Networking.IStoreItemStatus <StoreItem>k__BackingField;
    private int <MstLoginBonusPassId>k__BackingField;
    private string <ValidPeriodText>k__BackingField;
    public PRISM.Adapters.Shop.ShopProductModelCore Core { get; set; }
    public PRISM.Module.Networking.ILoginBonusPassStoreItemStatus LoginBonusPassStoreItem { get; set; }
    public PRISM.Module.Networking.IStoreItemStatus StoreItem { get; set; }
    public int MstLoginBonusPassId { get; set; }
    public string ValidPeriodText { get; set; }
    public string ValidPeriodDateText { get; set; }
    public PRISM.Adapters.Shop.IPurchaseProductModel ToPurchaseModel();
}

// Namespace: PRISM.Adapters.Shop
public interface IPurchaseProductModel
{
    public PRISM.Adapters.Shop.ShopProductModelCore Core { get; set; }
}

// Namespace: PRISM.Adapters.Shop
public class PurchaseShopProductModel : PRISM.Adapters.Shop.IPurchaseProductModel
{
    private PRISM.Module.Networking.IShopItemStatus <ShopItem>k__BackingField;
    private PRISM.Adapters.Shop.ShopProductModelCore <Core>k__BackingField;
    public PRISM.Module.Networking.IShopItemStatus ShopItem { get; set; }
    public PRISM.Adapters.Shop.ShopProductModelCore Core { get; set; }
}

// Namespace: PRISM.Adapters.Shop
public class PurchaseStoreProductModel : PRISM.Adapters.Shop.IPurchaseProductModel
{
    private PRISM.Module.Networking.IStoreItemStatus <StoreItem>k__BackingField;
    private PRISM.Adapters.Shop.ShopProductModelCore <Core>k__BackingField;
    private string <DmmStoreProductIconKey>k__BackingField;
    public PRISM.Module.Networking.IStoreItemStatus StoreItem { get; set; }
    public PRISM.Adapters.Shop.ShopProductModelCore Core { get; set; }
    public string DmmStoreProductIconKey { get; set; }
}

// Namespace: PRISM.Adapters.Shop
public class ShopSeasonPassProductModel : PRISM.Adapters.Shop.IShopPassProductModel, PRISM.Adapters.Shop.IShopProductModel
{
    private PRISM.Adapters.Shop.ShopProductModelForStoreItem productModel;
    private PRISM.Module.Networking.ISeasonPassStoreItemStatus <SeasonPassStoreItem>k__BackingField;
    private PRISM.Module.Networking.IStoreItemStatus <StoreItem>k__BackingField;
    private string <ValidPeriodText>k__BackingField;
    private string <ValidPeriodDateText>k__BackingField;
    private string <ValidAutoLiveStaminaBoostPeriodText>k__BackingField;
    public PRISM.Adapters.Shop.ShopProductModelCore Core { get; set; }
    public PRISM.Module.Networking.ISeasonPassStoreItemStatus SeasonPassStoreItem { get; set; }
    public PRISM.Module.Networking.IStoreItemStatus StoreItem { get; set; }
    public string ValidPeriodText { get; set; }
    public string ValidPeriodDateText { get; set; }
    public string ValidAutoLiveStaminaBoostPeriodText { get; set; }
    public PRISM.Adapters.Shop.IPurchaseProductModel ToPurchaseModel();

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IProductWithAmountStatus, bool> <>9__18_0;
        private bool <.ctor>b__18_0(PRISM.Module.Networking.IProductWithAmountStatus item);
    }
}

// Namespace: PRISM.Adapters.Shop
public class ShopProductModelCore
{
    private int <MstItemId>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.Domain.ProductKeyWithAmount> <ContentProducts>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.Domain.ProductKeyWithAmount> <BonusProducts>k__BackingField;
    private PRISM.Domain.ProductKeyWithAmount <MainProduct>k__BackingField;
    private long <HavingMainProductAmount>k__BackingField;
    private ShopItemType <ShopItemType>k__BackingField;
    private ItemMasterType <ProductMasterType>k__BackingField;
    private ProductPriceType <ProductPriceType>k__BackingField;
    private int <Price>k__BackingField;
    private string <LocalizedPriceString>k__BackingField;
    private PRISM.Module.Networking.IPurchaseLimitStatus <PurchaseLimit>k__BackingField;
    private System.Nullable<System.DateTime> <BeginDate>k__BackingField;
    private System.Nullable<System.DateTime> <EndDate>k__BackingField;
    private int <DisplayOrder>k__BackingField;
    private bool <IsAlreadyAcquiredAllProducts>k__BackingField;
    private string <ProductName>k__BackingField;
    private string <CautionText>k__BackingField;
    public int MstItemId { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Domain.ProductKeyWithAmount> ContentProducts { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Domain.ProductKeyWithAmount> BonusProducts { get; set; }
    public PRISM.Domain.ProductKeyWithAmount MainProduct { get; set; }
    public long HavingMainProductAmount { get; set; }
    public ShopItemType ShopItemType { get; set; }
    public ItemMasterType ProductMasterType { get; set; }
    public ProductPriceType ProductPriceType { get; set; }
    public int Price { get; set; }
    public string LocalizedPriceString { get; set; }
    public PRISM.Module.Networking.IPurchaseLimitStatus PurchaseLimit { get; set; }
    public int RemainingPurchaseCount { get; set; }
    public System.Nullable<System.DateTime> BeginDate { get; set; }
    public System.Nullable<System.DateTime> EndDate { get; set; }
    public int DisplayOrder { get; set; }
    public bool IsAlreadyAcquiredAllProducts { get; set; }
    public string ProductName { get; set; }
    public string CautionText { get; set; }
    public string MultiLineProductName { get; set; }
    private bool <.ctor>b__55_0(PRISM.Module.Networking.IHavingProductStatus x);
}

// Namespace: PRISM.Adapters.Shop
public class ShopProductModelCoreExtensions
{
    public static bool IsSetProduct(PRISM.Adapters.Shop.ShopProductModelCore self);
    public static bool IsSoldOut(PRISM.Adapters.Shop.ShopProductModelCore self);
    public static bool CanPurchase(PRISM.Adapters.Shop.ShopProductModelCore self);
    public static bool HasPurchaseLimit(PRISM.Adapters.Shop.ShopProductModelCore self);
    public static bool HasExpireDate(PRISM.Adapters.Shop.ShopProductModelCore self);
    public static bool IsExpired(PRISM.Adapters.Shop.ShopProductModelCore self);
    public static System.ValueTuple<int, int> GetPurchaseLimitCount(PRISM.Adapters.Shop.ShopProductModelCore self, int purchaseCount);
    public static System.ValueTuple<long, long> GetItemAmount(PRISM.Adapters.Shop.ShopProductModelCore self, int purchaseCount);
}

// Namespace: PRISM.Adapters.Shop
public class ShopProductModelForShopItem : PRISM.Adapters.Shop.IShopProductModel
{
    private PRISM.Adapters.Shop.ShopProductModelCore <Core>k__BackingField;
    private PRISM.Module.Networking.IShopItemStatus <ShopItem>k__BackingField;
    public PRISM.Adapters.Shop.ShopProductModelCore Core { get; set; }
    public PRISM.Module.Networking.IShopItemStatus ShopItem { get; set; }
    public PRISM.Adapters.Shop.IPurchaseProductModel ToPurchaseModel();
    private static PRISM.Adapters.Shop.ShopProductModelCore _createCore(PRISM.Module.Networking.IShopItemStatus shopItem, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IHavingProductStatus> havingProducts, string productName, System.Collections.Generic.IReadOnlyList<PRISM.Domain.ProductKeyWithAmount> contentList, System.Collections.Generic.IReadOnlyList<PRISM.Domain.ProductKeyWithAmount> bonusList);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IProductWithAmountStatus, PRISM.Domain.ProductKeyWithAmount> <>9__6_0;
        public static System.Func<PRISM.Module.Networking.IProductWithAmountStatus, PRISM.Domain.ProductKeyWithAmount> <>9__6_1;
        private PRISM.Domain.ProductKeyWithAmount <.ctor>b__6_0(PRISM.Module.Networking.IProductWithAmountStatus product);
        private PRISM.Domain.ProductKeyWithAmount <.ctor>b__6_1(PRISM.Module.Networking.IProductWithAmountStatus product);
    }
}

// Namespace: PRISM.Adapters.Shop
public class ShopProductModelForStoreItem : PRISM.Adapters.Shop.IShopProductModel
{
    private string dmmStoreProductIconKey;
    private PRISM.Adapters.Shop.ShopProductModelCore <Core>k__BackingField;
    private PRISM.Module.Networking.IStoreItemStatus <StoreItem>k__BackingField;
    public PRISM.Adapters.Shop.ShopProductModelCore Core { get; set; }
    public PRISM.Module.Networking.IStoreItemStatus StoreItem { get; set; }
    public PRISM.Adapters.Shop.IPurchaseProductModel ToPurchaseModel();
    private static PRISM.Adapters.Shop.ShopProductModelCore _createCore(PRISM.Module.Networking.IStoreItemStatus storeItem, System.Collections.Generic.IEnumerable<PRISM.Module.Networking.IHavingProductStatus> havingProducts, string productName, string localizedPriceString, System.Collections.Generic.IReadOnlyList<PRISM.Domain.ProductKeyWithAmount> contentList, System.Collections.Generic.IReadOnlyList<PRISM.Domain.ProductKeyWithAmount> bonusList);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IProductWithAmountStatus, PRISM.Domain.ProductKeyWithAmount> <>9__7_0;
        public static System.Func<PRISM.Module.Networking.IProductWithAmountStatus, PRISM.Domain.ProductKeyWithAmount> <>9__7_1;
        private PRISM.Domain.ProductKeyWithAmount <.ctor>b__7_0(PRISM.Module.Networking.IProductWithAmountStatus product);
        private PRISM.Domain.ProductKeyWithAmount <.ctor>b__7_1(PRISM.Module.Networking.IProductWithAmountStatus product);
    }
}

// Namespace: PRISM.Adapters.Adv
public class AdvSkipConfirmationPopupViewModel
{
    private string <OuterHeadline>k__BackingField;
    private string <InnerHeadline>k__BackingField;
    private string <Summary>k__BackingField;
    private bool <HasAdvInformation>k__BackingField;
    public string OuterHeadline { get; set; }
    public string InnerHeadline { get; set; }
    public string Summary { get; set; }
    public bool HasAdvInformation { get; set; }
}

// Namespace: PRISM.Legacy
public interface IPRISMMainAccessor
{
    public Cysharp.Threading.Tasks.UniTask SetupAsync(System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Legacy
public class PRISMMainFactory
{
    public static Cysharp.Threading.Tasks.UniTask CreateAsync(System.Threading.CancellationToken ct);

    private struct <CreateAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Threading.CancellationToken ct;
        private Awaiter<UnityEngine.GameObject> <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Legacy
public interface IProduceIdolSelectionConnector
{
}

// Namespace: PRISM.Legacy
public interface ISupportCharaSelectionConnector
{
}

// Namespace: PRISM.Legacy
public interface ILegacyCaller
{
}

// Namespace: PRISM.Legacy
public interface ILegacyCallerResolver
{
    public T Resolve<T>();
}

// Namespace: PRISM.Legacy
public interface IOverlayManagerCaller : PRISM.Legacy.ILegacyCaller
{
    public Cysharp.Threading.Tasks.UniTask PopAllOverlayAsync();
}

// Namespace: PRISM.Legacy
public class ParamRememberableAnimator : UnityEngine.MonoBehaviour
{
    private UnityEngine.Animator animator;
    private System.Collections.Generic.Dictionary<int, int> intParams;
    private System.Collections.Generic.Dictionary<int, float> floatParams;
    private System.Collections.Generic.Dictionary<int, bool> boolParams;
    private System.Collections.Generic.HashSet<int> triggerParams;
    public UnityEngine.Animator RawAnimator { get; set; }
    public void SetInteger(string name, int value);
    public void SetInteger(int id, int value);
    public void SetFloat(string name, float value);
    public void SetFloat(int id, float value);
    public void SetBool(string name, bool value);
    public void SetBool(int id, bool value);
    public void SetTrigger(string name, bool isResetAll);
    public void SetTrigger(int id, bool isResetAll);
    public void ResetTrigger(string name);
    public void ResetTrigger(int id);
    public void ResetAllTriggers();
    private void OnEnable();
    public void Skip(int stateNameHash);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.AnimatorControllerParameter, bool> <>9__17_0;
        private bool <ResetAllTriggers>b__17_0(UnityEngine.AnimatorControllerParameter p);
    }
}

// Namespace: PRISM.Legacy
public interface IIdolSkillDetailListPopupCaller : PRISM.Legacy.ILegacyCaller
{
    public Cysharp.Threading.Tasks.UniTask ShowAsync(int mstIdolSkillId, int currentSkillLv, System.Threading.CancellationToken cancellationToken);
}

// Namespace: PRISM.Legacy
public interface IIdolSkillSingleDetailPopupCaller : PRISM.Legacy.ILegacyCaller
{
    public Cysharp.Threading.Tasks.UniTask ShowAsync(int mstIdolSkillId, int iconId, int pp, System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypeList, int level, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IIdolSkillActionEffectStatus> skillDetailValueList, PRISM.Module.Networking.IIdolSkillActionConditionStatus condition, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask ShowAsync(int mstIdolSkillId, int iconId, int pp, System.Collections.Generic.IReadOnlyList<ProduceParameterType> appealTypeList, int level, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceActionEffectStatus> skillDetailValueList, PRISM.Module.Networking.IProduceActionConditionStatus condition, System.Threading.CancellationToken cancellationToken);
}

// Namespace: PRISM.Legacy
public interface ISystemSettingsCaller : PRISM.Legacy.ILegacyCaller
{
    public UpScalingMode UpScalingMode { get; set; }
    public QualityType Quality3D { get; set; }
    public QualityType ShadowQuality { get; set; }
    public QualityType ReflectionQuality { get; set; }
    public AntiAliasingSMAA AntiAliasingSmaa { get; set; }
    public OutlineForMV OutlineForMV { get; set; }
    public PowerSaving PowerSaving { get; set; }
    public PhysicsSetting PhysicsSetting { get; set; }
    public RhythmGameMVEffectLevel RhythmGame3DEffectLevel { get; set; }
    public void GPUDetectIfNeeded();
    public void ApplySettings(bool isIngame, bool isRhythmGame);
    public void Save();
    public float CalculateCategoryVolume(PRISM.SoundCategory category);
    public void ApplySMAA();
    public void ApplyGraphicProperty(GraphicProperty graphicProperty, bool isIngame, bool isRhythmGame);
}

// Namespace: PRISM.Legacy
public struct SoundVolumeSettings : System.ValueType, System.IEquatable<PRISM.Legacy.SoundVolumeSettings>
{
    private static float[] VolumeTable;
    private bool isMute;
    private int volumeIndex;
    public bool IsMute { get; set; }
    public int VolumeIndex { get; set; }
    public float CalculateCategoryVolume();
    public bool Equals(PRISM.Legacy.SoundVolumeSettings other);
    public bool Equals(object obj);
    public int GetHashCode();
    public static bool op_Equality(PRISM.Legacy.SoundVolumeSettings x, PRISM.Legacy.SoundVolumeSettings y);
    public static bool op_Inequality(PRISM.Legacy.SoundVolumeSettings x, PRISM.Legacy.SoundVolumeSettings y);
}

// Namespace: PRISM.Legacy
public class MstIdolSkillExtension
{
    public static int GetIconId(PRISM.Definitions.MstIdolSkill skill, int currentLevel);
    public static int GetCost(PRISM.Definitions.MstIdolSkill skill, int currentLevel);
    public static System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IIdolSkillActionEffectStatus> GetActionEffectList(PRISM.Definitions.MstIdolSkill skill, int currentLevel);
    public static PRISM.Module.Networking.IIdolSkillActionConditionStatus CreateActionConditionStatus(PRISM.Definitions.MstIdolSkill skill, int currentLevel);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<int, bool> <>9__2_1;
        public static System.Func<int, PRISM.Definitions.MstProduceActionEffect> <>9__2_2;
        public static System.Func<PRISM.Definitions.MstProduceActionEffect, PRISM.Module.Networking.IIdolSkillActionEffectStatus> <>9__2_3;
        private bool <GetActionEffectList>b__2_1(int x);
        private PRISM.Definitions.MstProduceActionEffect <GetActionEffectList>b__2_2(int x);
        private PRISM.Module.Networking.IIdolSkillActionEffectStatus <GetActionEffectList>b__2_3(PRISM.Definitions.MstProduceActionEffect x);
    }

    private class <>c__DisplayClass0_0
    {
        public PRISM.Definitions.MstIdolSkill skill;
        public int currentLevel;
        private bool <GetIconId>b__0(PRISM.Definitions.MstIdolSkillEffect x);
    }

    private class <>c__DisplayClass1_0
    {
        public PRISM.Definitions.MstIdolSkill skill;
        public int currentLevel;
        private bool <GetCost>b__0(PRISM.Definitions.MstIdolSkillEffect x);
    }

    private class <>c__DisplayClass2_0
    {
        public PRISM.Definitions.MstIdolSkill skill;
        public int currentLevel;
        private bool <GetActionEffectList>b__0(PRISM.Definitions.MstIdolSkillEffect x);
    }

    private class <>c__DisplayClass3_0
    {
        public PRISM.Definitions.MstIdolSkill skill;
        public int currentLevel;
        private bool <CreateActionConditionStatus>b__0(PRISM.Definitions.MstIdolSkillEffect x);
    }
}

// Namespace: PRISM.Legacy
public class TimelineExtensions
{
    public static UnityEngine.Timeline.TrackAsset FindTrackRecursively<T>(UnityEngine.Timeline.TrackAsset parentTrack);
    public static System.Collections.Generic.IEnumerable<UnityEngine.Timeline.TrackAsset> FindTracksRecursively<T>(UnityEngine.Timeline.TrackAsset parentTrack);
    public static T GetGenericBinding<T>(UnityEngine.Playables.PlayableDirector director, UnityEngine.Object key);
    public static UnityEngine.Timeline.TimelineAsset GetTimelineAsset(UnityEngine.Playables.PlayableDirector director);
    public static TTrackAsset GetTrack<TTrackAsset>(UnityEngine.Playables.PlayableDirector director, string trackPath);
    public static UnityEngine.Timeline.TrackAsset GetTrack(UnityEngine.Playables.PlayableDirector director, string trackPath);
    public static UnityEngine.Timeline.TimelineClip GetPrevClipOrDefault(UnityEngine.Timeline.TrackAsset trackasset, double targetTime);
    public static UnityEngine.Timeline.TimelineClip GetPrevClipOrDefault(System.Collections.Generic.IEnumerable<UnityEngine.Timeline.TimelineClip> clips, double targetTime);
    public static UnityEngine.Timeline.TimelineClip GetCurrentClipOrDefault(UnityEngine.Timeline.TrackAsset trackAsset, double targetTime);
    public static UnityEngine.Timeline.TimelineClip GetCurrentClipOrDefault(System.Collections.Generic.IEnumerable<UnityEngine.Timeline.TimelineClip> clips, double targetTime);
    public static UnityEngine.Timeline.TimelineClip GetNextClipOrDefault(UnityEngine.Timeline.TrackAsset trackAsset, double targetTime);
    public static UnityEngine.Timeline.TimelineClip GetNextClipOrDefault(System.Collections.Generic.IEnumerable<UnityEngine.Timeline.TimelineClip> clips, double targetTime);
    public static System.Collections.Generic.IEnumerable<System.ValueTuple<UnityEngine.Playables.PlayableDirector, UnityEngine.Timeline.TimelineClip>> GetChildPlayableDirectorClipPairs(UnityEngine.Timeline.ControlTrack controlTrack, UnityEngine.Playables.PlayableDirector parentDirector);
    public static double GetDurationExcludingMutedTracks(UnityEngine.Playables.PlayableDirector director);
    private static double <GetDurationExcludingMutedTracks>g__GetEnd|13_1(UnityEngine.Timeline.TrackAsset track);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<UnityEngine.Timeline.TrackAsset, double> <>9__13_0;
        public static System.Func<UnityEngine.Timeline.TrackAsset, double> <>9__13_2;
        private double <GetDurationExcludingMutedTracks>b__13_0(UnityEngine.Timeline.TrackAsset x);
        private double <GetDurationExcludingMutedTracks>b__13_2(UnityEngine.Timeline.TrackAsset x);
    }

    private class <GetChildPlayableDirectorClipPairs>d__12 : System.Collections.Generic.IEnumerable<System.ValueTuple<UnityEngine.Playables.PlayableDirector, UnityEngine.Timeline.TimelineClip>>, System.Collections.IEnumerable, System.Collections.Generic.IEnumerator<System.ValueTuple<UnityEngine.Playables.PlayableDirector, UnityEngine.Timeline.TimelineClip>>, System.Collections.IEnumerator, System.IDisposable
    {
        private int <>1__state;
        private System.ValueTuple<UnityEngine.Playables.PlayableDirector, UnityEngine.Timeline.TimelineClip> <>2__current;
        private int <>l__initialThreadId;
        private UnityEngine.Timeline.ControlTrack controlTrack;
        public UnityEngine.Timeline.ControlTrack <>3__controlTrack;
        private UnityEngine.Playables.PlayableDirector parentDirector;
        public UnityEngine.Playables.PlayableDirector <>3__parentDirector;
        private ZLinq.ValueEnumerator<ZLinq.Linq.FromEnumerable<UnityEngine.Timeline.TimelineClip>, UnityEngine.Timeline.TimelineClip> <>7__wrap1;
        private System.ValueTuple<UnityEngine.Playables.PlayableDirector, UnityEngine.Timeline.TimelineClip> System.Collections.Generic.IEnumerator<(UnityEngine.Playables.PlayableDirectorPlayableDirector,UnityEngine.Timeline.TimelineClipTimelineClip)>.Current { get; set; }
        private object System.Collections.IEnumerator.Current { get; set; }
        private void System.IDisposable.Dispose();
        private bool MoveNext();
        private void <>m__Finally1();
        private void System.Collections.IEnumerator.Reset();
        private System.Collections.Generic.IEnumerator<System.ValueTuple<UnityEngine.Playables.PlayableDirector, UnityEngine.Timeline.TimelineClip>> System.Collections.Generic.IEnumerable<(UnityEngine.Playables.PlayableDirectorPlayableDirector,UnityEngine.Timeline.TimelineClipTimelineClip)>.GetEnumerator();
        private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator();
    }
}

// Namespace: PRISM.Legacy
public interface IButtonGotoTypeProcessorForLegacy
{
    public Cysharp.Threading.Tasks.UniTask<bool> JumpOrOpenAsync(PRISM.Module.Networking.IJumpStatus jumpStatus, System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask<bool> JumpOrOpenAsync(ButtonGoToType buttonGoToType, string paramStr, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Legacy
public interface ILoadingPresenterForLegacy
{
    public Cysharp.Threading.Tasks.UniTask ShowAsync(int loadingViewType, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask HideAsync(System.Threading.CancellationToken cancellationToken);
    public void ReloadAssets();
}

// Namespace: PRISM.Legacy
public interface INotificationManagerForLegacy
{
    public void Initialize();
    public Cysharp.Threading.Tasks.UniTask AskNotificationPermissionAsync();
    public Cysharp.Threading.Tasks.UniTask SetScheduleStaminaRecoveryAsync(System.Threading.CancellationToken ct);
    public void RemoveScheduleStaminaRecovery();
    public Cysharp.Threading.Tasks.UniTask SetScheduleLiveBoostRecoveryAsync(System.Threading.CancellationToken ct);
    public void RemoveScheduleLiveBoostRecovery();
    public void SetScheduleDailyMission();
    public void RemoveScheduleDailyMission();
    public void SetScheduleProducerBirthday(string birthday);
    public void SetComebackNotification();
    public Cysharp.Threading.Tasks.UniTask ActivateServerNotificationAsync(bool enable, System.Threading.CancellationToken token);
}

// Namespace: PRISM.Legacy
public interface IServiceContainerForLegacy
{
    public PRISM.Domain.IAnnounceService GetAnnounceService(bool forTitle);
    public PRISM.Domain.IAuthService GetAuthService();
    public PRISM.Domain.IBannerService GetBannerService();
    public PRISM.Domain.IBillingService GetBillingService();
    public PRISM.Domain.IChallengeTourService GetChallengeTourService();
    public PRISM.Domain.ICostumeService GetCostumeService();
    public PRISM.Domain.IDirectMessageService GetDirectMessageService();
    public PRISM.Domain.IDressUpRoomService GetDressUpRoomService();
    public PRISM.Domain.IEventRankingService GetEventRankingService();
    public PRISM.Domain.IExchangeService GetExchangeService();
    public PRISM.Domain.IFesUnitService GetFesUnitService();
    public PRISM.Domain.IFriendService GetFriendService();
    public PRISM.Domain.IFriendInvitationService GetFriendInvitationService();
    public PRISM.Domain.IGalleryService GetGalleryService();
    public PRISM.Domain.IGameService GetGameService();
    public PRISM.Domain.IGameSettingService GetGameSettingService();
    public PRISM.Domain.IGashaService GetGashaService();
    public PRISM.Domain.IHomeService GetHomeService();
    public PRISM.Domain.IIdolService GetIdolService();
    public PRISM.Domain.IInspectService GetInspectService();
    public PRISM.Domain.IIntroductionService GetIntroductionService();
    public PRISM.Domain.ILiveService GetLiveService();
    public PRISM.Domain.ILiveEventAlphaService GetLiveEventAlphaService();
    public PRISM.Domain.ILiveEventAllSongService GetLiveEventAllSongService();
    public PRISM.Domain.ILoginBonusService GetLoginBonusService();
    public PRISM.Domain.IMedalGashaService GetMedalGashaService();
    public PRISM.Domain.IMissionService GetMissionService();
    public PRISM.Domain.IMobileService GetMobileService();
    public PRISM.Domain.IPieceService GetPieceService();
    public PRISM.Domain.IPresentService GetPresentService();
    public PRISM.Domain.IProduceService GetProduceService();
    public PRISM.Domain.IProduceIdolService GetProduceIdolService();
    public PRISM.Domain.IProductService GetProductService();
    public PRISM.Domain.IProfileService GetProfileService();
    public PRISM.Domain.ISeasonMissionService GetSeasonMissionService();
    public PRISM.Domain.IShinyCompetitionService GetShinyCompetitionService();
    public PRISM.Domain.IShopService GetShopService();
    public PRISM.Domain.ISpecialMissionService GetSpecialMissionService();
    public PRISM.Domain.IStaminaService GetStaminaService();
    public PRISM.Domain.IStoryService GetStoryService();
    public PRISM.Domain.IStreamProgramService GetStreamProgramService();
    public PRISM.Domain.ISupportCharacterService GetSupportCharacterService();
    public PRISM.Domain.ITransferService GetTransferService();
    public PRISM.Domain.ITutorialService GetTutorialService();
    public PRISM.Domain.IUserService GetUserService();
    public PRISM.Domain.IAchievementService GetAchievementService();
    public PRISM.Domain.ILoginBonusPassService GetLoginBonusPassService();
    public PRISM.Domain.IGiftEventService GetGiftEventService();
    public PRISM.Domain.IRunwayService GetRunwayService();
    public PRISM.Domain.ITechnicalChallengeService GetTechnicalChallengeService();
}

// Namespace: PRISM.Legacy
public interface ISystemCallForLegacy
{
    public void OpenURL(string url);
    public System.IDisposable CreateIOSHomeBarAntiSwipableScope();
}

// Namespace: PRISM.Legacy
public class GGInitializer : UnityEngine.MonoBehaviour
{
    private void Awake();
}

// Namespace: PRISM.Legacy
public class GashaProductItemPresenter : UnityEngine.MonoBehaviour
{
    private PRISM.Legacy.GashaProductItemView view;
    private System.IDisposable onLongPressDisposable;
    public void Setup(PRISM.Domain.ProductKey product, int amount, PRISM.ResourceManagement.IResourceLoader resourceLoader, bool isMaxDetail, bool isShowAmount);
    public void Setup(PRISM.Module.Networking.IProductWithAmountStatus productWithAmount, PRISM.ResourceManagement.IResourceLoader resourceLoader, bool isMaxDetail, bool isShowAmount);

    private class <>c__DisplayClass2_0
    {
        public bool isMaxDetail;
        private Cysharp.Threading.Tasks.UniTaskVoid <Setup>b__0(PRISM.Domain.ProductKey product);

        private struct <<Setup>b__0>d : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
        {
            public int <>1__state;
            public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskVoidMethodBuilder <>t__builder;
            public PRISM.Domain.ProductKey product;
            public <>c__DisplayClass2_0 <>4__this;
            private Awaiter<bool> <>u__1;
            private Awaiter<PRISM.Module.Networking.IGetProduceIdolScenarioListReply> <>u__2;
            private void MoveNext();
            private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
        }
    }
}

// Namespace: PRISM.Legacy
public class GashaProductItemView : UnityEngine.MonoBehaviour
{
    private PRISM.UI.PFIdolIconView pFIdolIconView;
    private PRISM.UI.SCharaIconView sCharaIconView;
    private ENTERPRISE.OutGame.RewardItem rewardItem;
    private UniRx.Subject<PRISM.Domain.ProductKey> <OnLongPressProduct>k__BackingField;
    private System.IDisposable onClickDisposable;
    public UniRx.Subject<PRISM.Domain.ProductKey> OnLongPressProduct { get; set; }
    public void SetUp(PRISM.Domain.ProductKey product, int amount, bool isShowAmount, PRISM.ResourceManagement.IResourceLoader resourceLoader);
    private void OnDestroy();

    private class <>c__DisplayClass7_0
    {
        public PRISM.Legacy.GashaProductItemView <>4__this;
        public PRISM.Domain.ProductKey product;
        private void <SetUp>b__0(System.ValueTuple<int, UnityEngine.GameObject> param);
        private void <SetUp>b__1(System.ValueTuple<int, UnityEngine.GameObject> param);
    }
}

// Namespace: PRISM.Legacy
public interface IGiftEventDetailConnector
{
}

// Namespace: PRISM.Legacy
public interface IGiftEventTopConnector
{
}

// Namespace: PRISM.Legacy
public interface ILiveMVOverlayCaller : PRISM.Legacy.ILegacyCaller
{
    public Cysharp.Threading.Tasks.UniTask Start3DMVAsync(PRISM.Live.LiveMVStartData startData, PRISM.Live.LiveProgressManager progressManager, PRISM.EffectPlayer effectPlayer, PRISM.IPausable mvPauser, PRISM.TimelineController timelineController, System.Collections.Generic.IEnumerable<float> cameraChangeTimes);
    public Cysharp.Threading.Tasks.UniTask Start2DMVAsync(PRISM.Live.LiveMVStartData startData, PRISM.Live.LiveProgressManager progressManager);
}

// Namespace: PRISM.Legacy
public interface ILoadingMiniCharaViewForLegacy
{
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(PRISM.ResourceManagement.IResourceLoader resourceLoader, System.Threading.CancellationToken ct);
    public void Show();
    public void Terminate();
}

// Namespace: PRISM.Legacy
public enum LoadingViewType : System.Enum
{
    public int value__;
    public static PRISM.Legacy.LoadingViewType Common;
    public static PRISM.Legacy.LoadingViewType CautionToTitle;
    public static PRISM.Legacy.LoadingViewType HomeToCharacter;
    public static PRISM.Legacy.LoadingViewType HomeToStory;
    public static PRISM.Legacy.LoadingViewType HomeToProduce;
    public static PRISM.Legacy.LoadingViewType HomeToLive;
    public static PRISM.Legacy.LoadingViewType HomeToShop;
    public static PRISM.Legacy.LoadingViewType HomeToGasha;
    public static PRISM.Legacy.LoadingViewType SoftReset;
}

// Namespace: PRISM.Legacy
public class MasterDataExtensions
{
    public static PRISM.Definitions.MasterData GetMasterData(ENTERPRISE.SingletonContainer container);
    public static string GetText(PRISM.Definitions.LocalizationKey key);
    public static PRISM.Definitions.MstOutgameVoiceMotion GetVoiceMotion(PRISM.Definitions.MasterData masterData, int mstCharacterInfoId, ScreenType screenType);
    public static PRISM.Definitions.MstOutgameVoiceMotion GetPIdolVoiceMotionAtEnhancement(PRISM.Definitions.MasterData masterData, int pIdolId, bool isMax, ScreenType screenType);
    public static PRISM.Definitions.MstOutgameVoiceMotion GetSCharaVoiceMotionAtLowRarityEnhancement(PRISM.Definitions.MasterData masterData, int characterInfoId, bool isMax, ScreenType screenType);
    public static PRISM.Definitions.MstOutgameVoiceMotion GetSCharaVoiceMotionAtEnhancement(PRISM.Definitions.MasterData masterData, int sCharaId, bool isMax, ScreenType screenType);
    public static PRISM.Definitions.MstEvent GetCurrentLiveEvent(PRISM.Definitions.MasterData masterData);
    public static bool IsInLiveEvent(PRISM.Definitions.MasterData masterData);
    public static bool IsLiveOnly(PRISM.Definitions.MstProduceIdol mst);
    public static System.Collections.Generic.IEnumerable<System.ValueTuple<int, int>> GetCostumeSetList(PRISM.Definitions.MstProduceIdol produceIdol);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<int, int, System.ValueTuple<int, int>> <>9__9_0;
        public static System.Func<PRISM.Definitions.MstProduceIdolReleaseCostumeSet, System.ValueTuple<int, int>> <>9__9_2;
        private System.ValueTuple<int, int> <GetCostumeSetList>b__9_0(int a, int b);
        private System.ValueTuple<int, int> <GetCostumeSetList>b__9_2(PRISM.Definitions.MstProduceIdolReleaseCostumeSet x);
    }

    private class <>c__DisplayClass2_0
    {
        public int mstCharacterInfoId;
        public ScreenType screenType;
        private bool <GetVoiceMotion>b__0(PRISM.Definitions.MstOutgameVoiceMotion x);
    }

    private class <>c__DisplayClass3_0
    {
        public int pIdolId;
        public bool isMax;
        public ScreenType screenType;
        private bool <GetPIdolVoiceMotionAtEnhancement>b__0(PRISM.Definitions.MstOutgameVoiceMotion x);
    }

    private class <>c__DisplayClass4_0
    {
        public int characterInfoId;
        public bool isMax;
        public ScreenType screenType;
        private bool <GetSCharaVoiceMotionAtLowRarityEnhancement>b__0(PRISM.Definitions.MstOutgameVoiceMotion x);
    }

    private class <>c__DisplayClass5_0
    {
        public int sCharaId;
        public bool isMax;
        public ScreenType screenType;
        private bool <GetSCharaVoiceMotionAtEnhancement>b__0(PRISM.Definitions.MstOutgameVoiceMotion x);
    }

    private class <>c__DisplayClass6_0
    {
        public System.DateTime now;
        private bool <GetCurrentLiveEvent>b__0(PRISM.Definitions.MstEvent e);
    }

    private class <>c__DisplayClass9_0
    {
        public PRISM.Definitions.MstProduceIdol produceIdol;
        private bool <GetCostumeSetList>b__1(PRISM.Definitions.MstProduceIdolReleaseCostumeSet x);
    }
}

// Namespace: PRISM.Legacy
public class MasterDataFactory
{
    public static PRISM.Definitions.MasterData Create();
}

// Namespace: PRISM.Legacy
public class MstLiveComboRankTargetExtensions
{
    public static int GetBorder(PRISM.Definitions.MstLiveComboRankTarget self, ComboRank comboRank);
    public static ComboRank GetRank(PRISM.Definitions.MstLiveComboRankTarget self, int combo);
}

// Namespace: PRISM.Legacy
public class MstLiveSupportEffectExtensions
{
    public static string GetDescription(PRISM.Definitions.MstLiveSupportEffect effect, int diamond);

    private class <>c__DisplayClass0_0
    {
        public int diamond;
        private string <GetDescription>b__0(PRISM.Definitions.MstLiveSupportEffectDetail x);
    }
}

// Namespace: PRISM.Legacy
public class ProduceLogData
{
    public LogItemType Type;
    public PRISM.Module.Networking.IProduceBaseInfoStatus Info;
    private int <ProducePolicyId>k__BackingField;
    private int <ProducePolicyTypeId>k__BackingField;
    private int <Season>k__BackingField;
    private ScheduleType <ScheduleType>k__BackingField;
    private ScheduleDetailType <ScheduleDetailType>k__BackingField;
    private int <ScheduleLevel>k__BackingField;
    private ProduceClearRank <ClearRank>k__BackingField;
    private bool <IsExistChallengeMission>k__BackingField;
    private bool <IsClearChallengeMission>k__BackingField;
    private int <IdolId>k__BackingField;
    private PRISM.Scenario.ScenarioId <ScenarioId>k__BackingField;
    private int <ScenarioSelectNo>k__BackingField;
    private bool <IsSupportBonus>k__BackingField;
    private bool <IsSupportChara>k__BackingField;
    private bool <IsTrouble>k__BackingField;
    public PRISM.Module.Networking.IVitalityVariationStatus VitalityVariation;
    public PRISM.Module.Networking.IFanVariationStatus FanVariation;
    public PRISM.Module.Networking.IScheduleVariationStatus ScheduleVariation;
    public PRISM.Module.Networking.IParameterVariationStatus IdolParamVariation;
    public PRISM.Module.Networking.IParameterVariationStatus UnitParamVariation;
    public System.Collections.Generic.List<PRISM.Module.Networking.IExertSupportEffectStatus> ExertSupportEffectList;
    public bool IsExistGetProduceCard;
    public System.Collections.Generic.List<PRISM.Module.Networking.IProduceCardStatus> GetProduceCards;
    public bool IsExistDeleteProduceCard;
    public System.Collections.Generic.List<PRISM.Module.Networking.IProduceCardStatus> DeleteProduceCards;
    public System.Collections.Generic.IReadOnlyList<string> RankUpProduceCardIds;
    public bool IsExistGetSupportSkill;
    private System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISelectionSupportSkillStatus> <GetSupportSkillList>k__BackingField;
    private bool <IsInheritanceSkill>k__BackingField;
    private System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceCardStatus> <DeckList>k__BackingField;
    public int ProducePolicyId { get; set; }
    public int ProducePolicyTypeId { get; set; }
    public int Season { get; set; }
    public ScheduleType ScheduleType { get; set; }
    public ScheduleDetailType ScheduleDetailType { get; set; }
    public int ScheduleLevel { get; set; }
    public ProduceClearRank ClearRank { get; set; }
    public bool IsExistChallengeMission { get; set; }
    public bool IsClearChallengeMission { get; set; }
    public int IdolId { get; set; }
    public PRISM.Scenario.ScenarioId ScenarioId { get; set; }
    public int ScenarioSelectNo { get; set; }
    public bool IsSupportBonus { get; set; }
    public bool IsSupportChara { get; set; }
    public bool IsTrouble { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISelectionSupportSkillStatus> GetSupportSkillList { get; set; }
    public bool IsInheritanceSkill { get; set; }
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceCardStatus> DeckList { get; set; }
    public void SetProducePolicyLog(int typeId, int id);
    public void SetProduceScheduleLog(ScheduleDetailType scheduleDetailType, int scheduleLevel, int idolId, PRISM.Module.Networking.IVitalityVariationStatus vitalityVariation, PRISM.Module.Networking.IFanVariationStatus fanVariation, PRISM.Module.Networking.IParameterVariationStatus unitParameterVariation, bool isTrouble, bool isSupportBonus, bool isSupportChara, System.Collections.Generic.List<PRISM.Module.Networking.IExertSupportEffectStatus> exertSupportEffectList);
    public void UpdateScheduleLog(PRISM.Module.Networking.IScheduleVariationStatus scheduleVariation);
    public void SetAdvSelectNo(int selectNo);
    public void SetFlagExistGetProduceCard(bool isExistGetProduceCard);
    public void SetFlagExistDeleteProduceCard(bool isExistDeleteProduceCard);
    public void SetFlagExistGetSupportSkill(bool isExistGetSupportSkill);
    public void SetRewardLog(System.Collections.Generic.List<PRISM.Module.Networking.IProduceCardStatus> getProduceCardList, System.Collections.Generic.List<PRISM.Module.Networking.IProduceCardStatus> deleteProduceCardList, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISelectionSupportSkillStatus> selectSupportSkills, int idolId, PRISM.Scenario.ScenarioId scenarioId, PRISM.Module.Networking.IParameterVariationStatus idolParameterVariation, PRISM.Module.Networking.IParameterVariationStatus unitParameterVariation, System.Collections.Generic.List<PRISM.Module.Networking.IExertSupportEffectStatus> exertSupportEffectList, bool isInheritanceSkill);
    public void SetCardRankUpParam(System.Collections.Generic.IReadOnlyList<string> rankUpCardIdList, PRISM.Module.Networking.IProduceBaseInfoStatus info);
    public void SetInheritanceSkillLog(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISelectionSupportSkillStatus> skills);
    public void SetLessonParam(ProduceClearRank clearRank, bool isClearChallengeMission, bool isSuccess, int idolId, PRISM.Module.Networking.IParameterVariationStatus idolParamVariation, PRISM.Module.Networking.IParameterVariationStatus unitParamVariation, System.Collections.Generic.List<PRISM.Module.Networking.IExertSupportEffectStatus> exertSupportEffectList, bool isExistGetProduceCard, bool isExistChallngeMission);
    public void SetAuditionParam(ProduceClearRank clearRank, bool isSuccess, PRISM.Module.Networking.IFanVariationStatus fanVariation, PRISM.Module.Networking.IParameterVariationStatus unitParamVariation, System.Collections.Generic.List<PRISM.Module.Networking.IExertSupportEffectStatus> exertSupportEffectList);
    public LogItemType _getLogItemTypeByScenarioID(PRISM.Scenario.ScenarioId scenarioID);
    public bool IsAdvLog();
}

// Namespace: PRISM.Legacy
public interface IScheduleVitalityGaugeForLegacy
{
    public Cysharp.Threading.Tasks.UniTask GaugeAnimationDisplayAsync(int current, int changeValue, int max, bool isCrease, float delay, bool isIdle, System.Action endTween, System.Threading.CancellationToken ct);
    public void DefaultDisplay(PRISM.Module.Networking.IProduceBaseInfoStatus cacheProduceBaseInfo);
    public void SetActive(bool isActive);
}

// Namespace: PRISM.Legacy
public interface IProduceFrontMenuConnector
{
}

// Namespace: PRISM.Legacy
public interface IGetSupportSkillPopupCaller : PRISM.Legacy.ILegacyCaller
{
    public Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.ISelectionSupportSkillStatus>> ShowAsync(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IPotentialSupportSkillStatus> gettableSupportSkillList, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IInProducePotentialSupportSkillStatus> skillList, int maxSlotNum, int selectableCount, bool isInheritance, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Legacy
public class ChallengeTourInGameViewParam : ENTERPRISE.IViewParameter
{
    public PRISM.Module.Networking.IChallengeTourInGameUnitStatus Unit;
    public PRISM.Module.Networking.IChallengeTourRivalUnitStatus RivalUnit;
    public PRISM.Module.Networking.IChallengeTourInGameStageStatus Stage;
    public PRISM.Module.Networking.IChallengeTourOpponentStatus Opponent;
    public System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IChallengeTourStageRewardStatus> Rewards;
    public PRISM.UnitIdol[] UnitIdols;
    public int UnitIndex;
    public int StageIndex;
    public int UnitId;

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.UnitIdol, int> <>9__9_1;
        private int <.ctor>b__9_1(PRISM.UnitIdol e);
    }

    private class <>c__DisplayClass9_0
    {
        public PRISM.Definitions.MasterData masterData;
        private PRISM.UnitIdol <.ctor>b__0(PRISM.Module.Networking.IChallengeTourInGameIdolStatus e);
    }
}

// Namespace: PRISM.Legacy
public class ChallengeTourInGamePausePopupCaller : UnityEngine.MonoBehaviour
{
    public System.IObservable<PRISM.Produce.ProduceOptionSaveData> OnApplyProduceOption { get; set; }
    public System.IObservable<UniRx.Unit> OnClickRetryButton { get; set; }
    public System.IObservable<UniRx.Unit> OnClickGiveUpButton { get; set; }
    public System.IObservable<UniRx.Unit> OnHidePopup { get; set; }
    public void Setup(System.Collections.Generic.IReadOnlyList<PRISM.Produce.EnemySkillContentViewModel> enemySkillModelList, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IChallengeTourStageRewardStatus> missionList, PRISM.Produce.ChallengeTourMissionProgressCalcModel calcModel);
    public Cysharp.Threading.Tasks.UniTask ShowAsync(System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask TerminateAsync();
}

// Namespace: PRISM.Legacy
public interface IModel3dLoaderForPlayScenarioController
{
    public bool IsSceneLoaded();
    public bool Is2dBgSet();
    public void FinishScenario();
    public Cysharp.Threading.Tasks.UniTask ReleaseAsync();
    public void HideAdvScreen();
    public Cysharp.Threading.Tasks.UniTask SetupWithoutTitleAsync(string scenarioName, System.Threading.CancellationToken cancellationToken);
}

// Namespace: PRISM.Legacy
public class Model3dLoaderForPlayScenarioController : PRISM.Legacy.IModel3dLoaderForPlayScenarioController
{
    private PRISM.Scenario.Model3dLoaderCore core;
    public bool IsSceneLoaded();
    public PRISM.Scenario.ScenarioManager GetScenarioManager();
    public bool Is2dBgSet();
    public void FinishScenario();
    public void HideAdvScreen();
    public Cysharp.Threading.Tasks.UniTask SetUpAsync(string scenarioName, PRISM.UnitIdol[] unitIdols, bool needContinueBgm, PRISM.Adv.AdvChoiceButtonGroupViewModel advChoiceButtonGroupViewModel, System.Collections.Generic.Dictionary<string, int> additionalSetValue, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask SetupWithoutTitleAsync(string scenarioName, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask ReleaseAsync();
}

// Namespace: PRISM.Legacy
public interface IDeckConfirmPopupCaller : PRISM.Legacy.ILegacyCaller
{
    public Cysharp.Threading.Tasks.UniTask RunAsync(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceCardStatus> deckCards, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Legacy
public interface IGetProduceCardPopupCaller : PRISM.Legacy.ILegacyCaller
{
    public Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.IReadOnlyList<string>> RunAsync(System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceCardStatus> gettableCards, int gettableAmount, System.Collections.Generic.IReadOnlyList<PRISM.Module.Networking.IProduceCardStatus> deckCards, System.Threading.CancellationToken ct);
}

// Namespace: PRISM.Legacy
public class PCardEffectIconAreaContent : UnityEngine.MonoBehaviour
{
    private System.Collections.Generic.List<UnityEngine.UI.RawImage> cardEffectIconImageList;
    public Cysharp.Threading.Tasks.UniTask SetupAsync(System.Collections.Generic.IReadOnlyList<int> ids, PRISM.Produce.ProduceIngameLoader resourceLoader, System.Threading.CancellationToken ct);
    private Cysharp.Threading.Tasks.UniTask _loadProduceEffectIconAsync(int id, UnityEngine.UI.RawImage effectImage, PRISM.Produce.ProduceIngameLoader resourceLoader, System.Threading.CancellationToken ct);

    private struct <SetupAsync>d__1 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Legacy.PCardEffectIconAreaContent <>4__this;
        public System.Collections.Generic.IReadOnlyList<int> ids;
        public PRISM.Produce.ProduceIngameLoader resourceLoader;
        public System.Threading.CancellationToken ct;
        private UnityEngine.Pool.PooledObject<System.Collections.Generic.List<Cysharp.Threading.Tasks.UniTask>> <_>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_loadProduceEffectIconAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public UnityEngine.UI.RawImage effectImage;
        public PRISM.Produce.ProduceIngameLoader resourceLoader;
        public int id;
        public System.Threading.CancellationToken ct;
        private UnityEngine.UI.RawImage <>7__wrap1;
        private Awaiter<UnityEngine.Texture2D> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Legacy
public class ConstraintUtility
{
    public static void RotationConstraint(UnityEngine.Quaternion& transformRotation, UnityEngine.Quaternion& parentRotation, UnityEngine.Quaternion& targetRotation, float& weight, bool& constrainX, bool& constrainY, bool& constrainZ, UnityEngine.Vector3& offset);
    public static void LookAtConstraint(UnityEngine.Quaternion& transformRotation, UnityEngine.Vector3& transformPosition, UnityEngine.Quaternion& parentRotation, UnityEngine.Vector3& targetPosition, UnityEngine.Vector3& upObjectPosition, float& weight, bool& useUpObject, bool& constrainX, bool& constrainY, bool& constrainZ, UnityEngine.Vector3& offset);
    public static void XRotConstrain(UnityEngine.Quaternion& localRotation, float& x_rot, float& rot_scale, float& center_rot, UnityEngine.Quaternion& angleRotation, float& scale);
    public static void InverseConstrain(float& x_inv, UnityEngine.Quaternion& localRotation, UnityEngine.Quaternion& angleRotation);
    public static bool TryGetTargetPosition(System.Collections.Generic.IReadOnlyList<PRISM.IConstraintTarget> targets, float weightSum, UnityEngine.Vector3& targetPosition);
    public static bool TryGetTargetRotation(System.Collections.Generic.IReadOnlyList<PRISM.IConstraintTarget> targets, float weightSum, UnityEngine.Quaternion& targetRotation);
    public static bool TryGetTargetLossyScale(System.Collections.Generic.IReadOnlyList<PRISM.IConstraintTarget> targets, float weightSum, UnityEngine.Vector3& targetLossyScale);
    public static bool TryGetTargetTransformData(System.Collections.Generic.IReadOnlyList<PRISM.IConstraintTarget> targets, float weightSum, UnityEngine.Vector3& targetPosition, UnityEngine.Quaternion& targetRotation, UnityEngine.Vector3& targetLossyScale);
    public static void RotationConstraint$BurstManaged(UnityEngine.Quaternion& transformRotation, UnityEngine.Quaternion& parentRotation, UnityEngine.Quaternion& targetRotation, float& weight, bool& constrainX, bool& constrainY, bool& constrainZ, UnityEngine.Vector3& offset);
    public static void LookAtConstraint$BurstManaged(UnityEngine.Quaternion& transformRotation, UnityEngine.Vector3& transformPosition, UnityEngine.Quaternion& parentRotation, UnityEngine.Vector3& targetPosition, UnityEngine.Vector3& upObjectPosition, float& weight, bool& useUpObject, bool& constrainX, bool& constrainY, bool& constrainZ, UnityEngine.Vector3& offset);
    public static void XRotConstrain$BurstManaged(UnityEngine.Quaternion& localRotation, float& x_rot, float& rot_scale, float& center_rot, UnityEngine.Quaternion& angleRotation, float& scale);
    public static void InverseConstrain$BurstManaged(float& x_inv, UnityEngine.Quaternion& localRotation, UnityEngine.Quaternion& angleRotation);

// Namespace: PRISM.Legacy
    public class RotationConstraint_00003E54$PostfixBurstDelegate : System.MulticastDelegate
    {
        public void Invoke(UnityEngine.Quaternion& transformRotation, UnityEngine.Quaternion& parentRotation, UnityEngine.Quaternion& targetRotation, float& weight, bool& constrainX, bool& constrainY, bool& constrainZ, UnityEngine.Vector3& offset);
        public System.IAsyncResult BeginInvoke(UnityEngine.Quaternion& transformRotation, UnityEngine.Quaternion& parentRotation, UnityEngine.Quaternion& targetRotation, float& weight, bool& constrainX, bool& constrainY, bool& constrainZ, UnityEngine.Vector3& offset, System.AsyncCallback , object );
        public void EndInvoke(System.IAsyncResult );
    }

// Namespace: PRISM.Legacy
    class RotationConstraint_00003E54$BurstDirectCall
    {
        private static System.IntPtr Pointer;
        private static System.IntPtr DeferredCompilation;
        private static void GetFunctionPointerDiscard(System.IntPtr& );
        private static System.IntPtr GetFunctionPointer();
        public static void Constructor();
        public static void Initialize();
        public static void Invoke(UnityEngine.Quaternion& transformRotation, UnityEngine.Quaternion& parentRotation, UnityEngine.Quaternion& targetRotation, float& weight, bool& constrainX, bool& constrainY, bool& constrainZ, UnityEngine.Vector3& offset);
    }

// Namespace: PRISM.Legacy
    public class LookAtConstraint_00003E55$PostfixBurstDelegate : System.MulticastDelegate
    {
        public void Invoke(UnityEngine.Quaternion& transformRotation, UnityEngine.Vector3& transformPosition, UnityEngine.Quaternion& parentRotation, UnityEngine.Vector3& targetPosition, UnityEngine.Vector3& upObjectPosition, float& weight, bool& useUpObject, bool& constrainX, bool& constrainY, bool& constrainZ, UnityEngine.Vector3& offset);
        public System.IAsyncResult BeginInvoke(UnityEngine.Quaternion& transformRotation, UnityEngine.Vector3& transformPosition, UnityEngine.Quaternion& parentRotation, UnityEngine.Vector3& targetPosition, UnityEngine.Vector3& upObjectPosition, float& weight, bool& useUpObject, bool& constrainX, bool& constrainY, bool& constrainZ, UnityEngine.Vector3& offset, System.AsyncCallback , object );
        public void EndInvoke(System.IAsyncResult );
    }

// Namespace: PRISM.Legacy
    class LookAtConstraint_00003E55$BurstDirectCall
    {
        private static System.IntPtr Pointer;
        private static System.IntPtr DeferredCompilation;
        private static void GetFunctionPointerDiscard(System.IntPtr& );
        private static System.IntPtr GetFunctionPointer();
        public static void Constructor();
        public static void Initialize();
        public static void Invoke(UnityEngine.Quaternion& transformRotation, UnityEngine.Vector3& transformPosition, UnityEngine.Quaternion& parentRotation, UnityEngine.Vector3& targetPosition, UnityEngine.Vector3& upObjectPosition, float& weight, bool& useUpObject, bool& constrainX, bool& constrainY, bool& constrainZ, UnityEngine.Vector3& offset);
    }

// Namespace: PRISM.Legacy
    public class XRotConstrain_00003E56$PostfixBurstDelegate : System.MulticastDelegate
    {
        public void Invoke(UnityEngine.Quaternion& localRotation, float& x_rot, float& rot_scale, float& center_rot, UnityEngine.Quaternion& angleRotation, float& scale);
        public System.IAsyncResult BeginInvoke(UnityEngine.Quaternion& localRotation, float& x_rot, float& rot_scale, float& center_rot, UnityEngine.Quaternion& angleRotation, float& scale, System.AsyncCallback , object );
        public void EndInvoke(System.IAsyncResult );
    }

// Namespace: PRISM.Legacy
    class XRotConstrain_00003E56$BurstDirectCall
    {
        private static System.IntPtr Pointer;
        private static System.IntPtr DeferredCompilation;
        private static void GetFunctionPointerDiscard(System.IntPtr& );
        private static System.IntPtr GetFunctionPointer();
        public static void Constructor();
        public static void Initialize();
        public static void Invoke(UnityEngine.Quaternion& localRotation, float& x_rot, float& rot_scale, float& center_rot, UnityEngine.Quaternion& angleRotation, float& scale);
    }

// Namespace: PRISM.Legacy
    public class InverseConstrain_00003E57$PostfixBurstDelegate : System.MulticastDelegate
    {
        public void Invoke(float& x_inv, UnityEngine.Quaternion& localRotation, UnityEngine.Quaternion& angleRotation);
        public System.IAsyncResult BeginInvoke(float& x_inv, UnityEngine.Quaternion& localRotation, UnityEngine.Quaternion& angleRotation, System.AsyncCallback , object );
        public void EndInvoke(System.IAsyncResult );
    }

// Namespace: PRISM.Legacy
    class InverseConstrain_00003E57$BurstDirectCall
    {
        private static System.IntPtr Pointer;
        private static System.IntPtr DeferredCompilation;
        private static void GetFunctionPointerDiscard(System.IntPtr& );
        private static System.IntPtr GetFunctionPointer();
        public static void Constructor();
        public static void Initialize();
        public static void Invoke(float& x_inv, UnityEngine.Quaternion& localRotation, UnityEngine.Quaternion& angleRotation);
    }
}

// Namespace: PRISM.Legacy
public class BurstDirectCall
{
    private static float sinPi30;
    private static float sinPi40;
    private static float sinPi60;
    private static float sinPi40cosPi40;
    private static float sinPi60cos40;
    private static void _bezier3(float t, Unity.Mathematics.float3& p0, Unity.Mathematics.float3& p1, Unity.Mathematics.float3& p2, Unity.Mathematics.float3& p3, Unity.Mathematics.float3& result);
    private static void _bezier3(float t, float& p0, float& p1, float& p2, float& p3, float& result);
    public static float BezierInterpolate(float t, float[] scaler);
    public static void _bezierInterpolate(float& t, System.Single* scaler, int length, float& result);
    public static Unity.Mathematics.float3 BezierInterpolate(float t, UnityEngine.Vector3[] vector);
    private static void _bezierInterpolate(float& t, Unity.Mathematics.float3* vec, int length, Unity.Mathematics.float3& result);
    private static float _magnitude(Unity.Mathematics.float3 v);
    private static Unity.Mathematics.float3 _normalized(Unity.Mathematics.float3 value);
    public static void GetInterpolateVector(float& x, float& y, InterpolateValue& interpolateValue);
    public static void GetPositionRotation(InterpolateValue& interpolateValue, PRISM.Legacy.FaceBonePostureNativeArray& posture, bool xflip, Unity.Mathematics.quaternion& rotationResult, Unity.Mathematics.float3& positionResult);
    private static void _index2Rate(InterpolateValue& interpolateValue, PRISM.Legacy.FaceBoneInterpolateVector3NativeArray& values, Unity.Mathematics.float3& result);
    public static void Index2Rate(InterpolateValue& interpolateValue, PRISM.Legacy.FaceBoneInterpolateFloatNativeArray& values, float& result);
    private static Unity.Mathematics.float3 _mirrorRot(Unity.Mathematics.float3 v);
    private static Unity.Mathematics.float3 _mirrorTra(Unity.Mathematics.float3 v);
    public static void GetPixelBilinear(float x, float y, int width, int height, Unity.Collections.NativeArray<UnityEngine.Color>& colors, UnityEngine.Color& result);
    private static UnityEngine.Color _getPixel(Unity.Collections.NativeArray<UnityEngine.Color>& arrays, int x, int y, int width);
    public static void ConvertEulerToAxis(UnityEngine.Vector3& e, UnityEngine.Vector3& forward, UnityEngine.Vector3& up);
    public static void DeltaAngle(UnityEngine.Vector3& vec, UnityEngine.Vector3& result);
    public static void RangeDetection(UnityEngine.Vector3& cameraPosition, float inRange, Unity.Collections.NativeArray<UnityEngine.Bounds>& bounds, Unity.Collections.NativeArray<bool>& result);
    public static void ReflectionPlane(UnityEngine.Vector3& baseCameraPos, UnityEngine.Matrix4x4& baseCameraWorldToCameraMatrix, UnityEngine.Matrix4x4& baseCameraProjectionMatrix, UnityEngine.Vector3& pos, UnityEngine.Vector3& normal, float clipPlaneOffset, UnityEngine.Vector3& newPosition, UnityEngine.Matrix4x4& worldToCameraMatrix, UnityEngine.Matrix4x4& projectionMatrix);
    private static UnityEngine.Matrix4x4 _calculateReflectionMatrix(UnityEngine.Vector4 plane);
    private static void _calculateObliqueMatrix(UnityEngine.Matrix4x4& projection, UnityEngine.Vector4& clipPlane);
    private static void _cameraSpacePlane(UnityEngine.Vector4& result, UnityEngine.Matrix4x4& worldToCameraMatrix, UnityEngine.Vector3& pos, UnityEngine.Vector3& normal, float sideSign, float clipPlaneOffset);
    public static void _bezier3$BurstManaged(float t, Unity.Mathematics.float3& p0, Unity.Mathematics.float3& p1, Unity.Mathematics.float3& p2, Unity.Mathematics.float3& p3, Unity.Mathematics.float3& result);
    public static void _bezier3$BurstManaged(float t, float& p0, float& p1, float& p2, float& p3, float& result);
    public static void _bezierInterpolate$BurstManaged(float& t, System.Single* scaler, int length, float& result);
    public static void _bezierInterpolate$BurstManaged(float& t, Unity.Mathematics.float3* vec, int length, Unity.Mathematics.float3& result);
    public static void GetInterpolateVector$BurstManaged(float& x, float& y, InterpolateValue& interpolateValue);
    public static void GetPositionRotation$BurstManaged(InterpolateValue& interpolateValue, PRISM.Legacy.FaceBonePostureNativeArray& posture, bool xflip, Unity.Mathematics.quaternion& rotationResult, Unity.Mathematics.float3& positionResult);
    public static void Index2Rate$BurstManaged(InterpolateValue& interpolateValue, PRISM.Legacy.FaceBoneInterpolateFloatNativeArray& values, float& result);
    public static void GetPixelBilinear$BurstManaged(float x, float y, int width, int height, Unity.Collections.NativeArray<UnityEngine.Color>& colors, UnityEngine.Color& result);
    public static void ConvertEulerToAxis$BurstManaged(UnityEngine.Vector3& e, UnityEngine.Vector3& forward, UnityEngine.Vector3& up);
    public static void DeltaAngle$BurstManaged(UnityEngine.Vector3& vec, UnityEngine.Vector3& result);
    public static void RangeDetection$BurstManaged(UnityEngine.Vector3& cameraPosition, float inRange, Unity.Collections.NativeArray<UnityEngine.Bounds>& bounds, Unity.Collections.NativeArray<bool>& result);
    public static void ReflectionPlane$BurstManaged(UnityEngine.Vector3& baseCameraPos, UnityEngine.Matrix4x4& baseCameraWorldToCameraMatrix, UnityEngine.Matrix4x4& baseCameraProjectionMatrix, UnityEngine.Vector3& pos, UnityEngine.Vector3& normal, float clipPlaneOffset, UnityEngine.Vector3& newPosition, UnityEngine.Matrix4x4& worldToCameraMatrix, UnityEngine.Matrix4x4& projectionMatrix);

// Namespace: PRISM.Legacy
    public class _bezier3_00003E5C$PostfixBurstDelegate : System.MulticastDelegate
    {
        public void Invoke(float t, Unity.Mathematics.float3& p0, Unity.Mathematics.float3& p1, Unity.Mathematics.float3& p2, Unity.Mathematics.float3& p3, Unity.Mathematics.float3& result);
        public System.IAsyncResult BeginInvoke(float t, Unity.Mathematics.float3& p0, Unity.Mathematics.float3& p1, Unity.Mathematics.float3& p2, Unity.Mathematics.float3& p3, Unity.Mathematics.float3& result, System.AsyncCallback , object );
        public void EndInvoke(System.IAsyncResult );
    }

// Namespace: PRISM.Legacy
    class _bezier3_00003E5C$BurstDirectCall
    {
        private static System.IntPtr Pointer;
        private static System.IntPtr DeferredCompilation;
        private static void GetFunctionPointerDiscard(System.IntPtr& );
        private static System.IntPtr GetFunctionPointer();
        public static void Constructor();
        public static void Initialize();
        public static void Invoke(float t, Unity.Mathematics.float3& p0, Unity.Mathematics.float3& p1, Unity.Mathematics.float3& p2, Unity.Mathematics.float3& p3, Unity.Mathematics.float3& result);
    }

// Namespace: PRISM.Legacy
    public class _bezier3_00003E5D$PostfixBurstDelegate : System.MulticastDelegate
    {
        public void Invoke(float t, float& p0, float& p1, float& p2, float& p3, float& result);
        public System.IAsyncResult BeginInvoke(float t, float& p0, float& p1, float& p2, float& p3, float& result, System.AsyncCallback , object );
        public void EndInvoke(System.IAsyncResult );
    }

// Namespace: PRISM.Legacy
    class _bezier3_00003E5D$BurstDirectCall
    {
        private static System.IntPtr Pointer;
        private static System.IntPtr DeferredCompilation;
        private static void GetFunctionPointerDiscard(System.IntPtr& );
        private static System.IntPtr GetFunctionPointer();
        public static void Constructor();
        public static void Initialize();
        public static void Invoke(float t, float& p0, float& p1, float& p2, float& p3, float& result);
    }

// Namespace: PRISM.Legacy
    public class _bezierInterpolate_00003E5F$PostfixBurstDelegate : System.MulticastDelegate
    {
        public void Invoke(float& t, System.Single* scaler, int length, float& result);
        public System.IAsyncResult BeginInvoke(float& t, System.Single* scaler, int length, float& result, System.AsyncCallback , object );
        public void EndInvoke(System.IAsyncResult );
    }

// Namespace: PRISM.Legacy
    class _bezierInterpolate_00003E5F$BurstDirectCall
    {
        private static System.IntPtr Pointer;
        private static System.IntPtr DeferredCompilation;
        private static void GetFunctionPointerDiscard(System.IntPtr& );
        private static System.IntPtr GetFunctionPointer();
        public static void Constructor();
        public static void Initialize();
        public static void Invoke(float& t, System.Single* scaler, int length, float& result);
    }

// Namespace: PRISM.Legacy
    public class _bezierInterpolate_00003E61$PostfixBurstDelegate : System.MulticastDelegate
    {
        public void Invoke(float& t, Unity.Mathematics.float3* vec, int length, Unity.Mathematics.float3& result);
        public System.IAsyncResult BeginInvoke(float& t, Unity.Mathematics.float3* vec, int length, Unity.Mathematics.float3& result, System.AsyncCallback , object );
        public void EndInvoke(System.IAsyncResult );
    }

// Namespace: PRISM.Legacy
    class _bezierInterpolate_00003E61$BurstDirectCall
    {
        private static System.IntPtr Pointer;
        private static System.IntPtr DeferredCompilation;
        private static void GetFunctionPointerDiscard(System.IntPtr& );
        private static System.IntPtr GetFunctionPointer();
        public static void Constructor();
        public static void Initialize();
        public static void Invoke(float& t, Unity.Mathematics.float3* vec, int length, Unity.Mathematics.float3& result);
    }

// Namespace: PRISM.Legacy
    public class GetInterpolateVector_00003E64$PostfixBurstDelegate : System.MulticastDelegate
    {
        public void Invoke(float& x, float& y, InterpolateValue& interpolateValue);
        public System.IAsyncResult BeginInvoke(float& x, float& y, InterpolateValue& interpolateValue, System.AsyncCallback , object );
        public void EndInvoke(System.IAsyncResult );
    }

// Namespace: PRISM.Legacy
    class GetInterpolateVector_00003E64$BurstDirectCall
    {
        private static System.IntPtr Pointer;
        private static System.IntPtr DeferredCompilation;
        private static void GetFunctionPointerDiscard(System.IntPtr& );
        private static System.IntPtr GetFunctionPointer();
        public static void Constructor();
        public static void Initialize();
        public static void Invoke(float& x, float& y, InterpolateValue& interpolateValue);
    }

// Namespace: PRISM.Legacy
    public class GetPositionRotation_00003E65$PostfixBurstDelegate : System.MulticastDelegate
    {
        public void Invoke(InterpolateValue& interpolateValue, PRISM.Legacy.FaceBonePostureNativeArray& posture, bool xflip, Unity.Mathematics.quaternion& rotationResult, Unity.Mathematics.float3& positionResult);
        public System.IAsyncResult BeginInvoke(InterpolateValue& interpolateValue, PRISM.Legacy.FaceBonePostureNativeArray& posture, bool xflip, Unity.Mathematics.quaternion& rotationResult, Unity.Mathematics.float3& positionResult, System.AsyncCallback , object );
        public void EndInvoke(System.IAsyncResult );
    }

// Namespace: PRISM.Legacy
    class GetPositionRotation_00003E65$BurstDirectCall
    {
        private static System.IntPtr Pointer;
        private static System.IntPtr DeferredCompilation;
        private static void GetFunctionPointerDiscard(System.IntPtr& );
        private static System.IntPtr GetFunctionPointer();
        public static void Constructor();
        public static void Initialize();
        public static void Invoke(InterpolateValue& interpolateValue, PRISM.Legacy.FaceBonePostureNativeArray& posture, bool xflip, Unity.Mathematics.quaternion& rotationResult, Unity.Mathematics.float3& positionResult);
    }

// Namespace: PRISM.Legacy
    public class Index2Rate_00003E67$PostfixBurstDelegate : System.MulticastDelegate
    {
        public void Invoke(InterpolateValue& interpolateValue, PRISM.Legacy.FaceBoneInterpolateFloatNativeArray& values, float& result);
        public System.IAsyncResult BeginInvoke(InterpolateValue& interpolateValue, PRISM.Legacy.FaceBoneInterpolateFloatNativeArray& values, float& result, System.AsyncCallback , object );
        public void EndInvoke(System.IAsyncResult );
    }

// Namespace: PRISM.Legacy
    class Index2Rate_00003E67$BurstDirectCall
    {
        private static System.IntPtr Pointer;
        private static System.IntPtr DeferredCompilation;
        private static void GetFunctionPointerDiscard(System.IntPtr& );
        private static System.IntPtr GetFunctionPointer();
        public static void Constructor();
        public static void Initialize();
        public static void Invoke(InterpolateValue& interpolateValue, PRISM.Legacy.FaceBoneInterpolateFloatNativeArray& values, float& result);
    }

// Namespace: PRISM.Legacy
    public class GetPixelBilinear_00003E6A$PostfixBurstDelegate : System.MulticastDelegate
    {
        public void Invoke(float x, float y, int width, int height, Unity.Collections.NativeArray<UnityEngine.Color>& colors, UnityEngine.Color& result);
        public System.IAsyncResult BeginInvoke(float x, float y, int width, int height, Unity.Collections.NativeArray<UnityEngine.Color>& colors, UnityEngine.Color& result, System.AsyncCallback , object );
        public void EndInvoke(System.IAsyncResult );
    }

// Namespace: PRISM.Legacy
    class GetPixelBilinear_00003E6A$BurstDirectCall
    {
        private static System.IntPtr Pointer;
        private static System.IntPtr DeferredCompilation;
        private static void GetFunctionPointerDiscard(System.IntPtr& );
        private static System.IntPtr GetFunctionPointer();
        public static void Constructor();
        public static void Initialize();
        public static void Invoke(float x, float y, int width, int height, Unity.Collections.NativeArray<UnityEngine.Color>& colors, UnityEngine.Color& result);
    }

// Namespace: PRISM.Legacy
    public class ConvertEulerToAxis_00003E6C$PostfixBurstDelegate : System.MulticastDelegate
    {
        public void Invoke(UnityEngine.Vector3& e, UnityEngine.Vector3& forward, UnityEngine.Vector3& up);
        public System.IAsyncResult BeginInvoke(UnityEngine.Vector3& e, UnityEngine.Vector3& forward, UnityEngine.Vector3& up, System.AsyncCallback , object );
        public void EndInvoke(System.IAsyncResult );
    }

// Namespace: PRISM.Legacy
    class ConvertEulerToAxis_00003E6C$BurstDirectCall
    {
        private static System.IntPtr Pointer;
        private static System.IntPtr DeferredCompilation;
        private static void GetFunctionPointerDiscard(System.IntPtr& );
        private static System.IntPtr GetFunctionPointer();
        public static void Constructor();
        public static void Initialize();
        public static void Invoke(UnityEngine.Vector3& e, UnityEngine.Vector3& forward, UnityEngine.Vector3& up);
    }

// Namespace: PRISM.Legacy
    public class DeltaAngle_00003E6D$PostfixBurstDelegate : System.MulticastDelegate
    {
        public void Invoke(UnityEngine.Vector3& vec, UnityEngine.Vector3& result);
        public System.IAsyncResult BeginInvoke(UnityEngine.Vector3& vec, UnityEngine.Vector3& result, System.AsyncCallback , object );
        public void EndInvoke(System.IAsyncResult );
    }

// Namespace: PRISM.Legacy
    class DeltaAngle_00003E6D$BurstDirectCall
    {
        private static System.IntPtr Pointer;
        private static System.IntPtr DeferredCompilation;
        private static void GetFunctionPointerDiscard(System.IntPtr& );
        private static System.IntPtr GetFunctionPointer();
        public static void Constructor();
        public static void Initialize();
        public static void Invoke(UnityEngine.Vector3& vec, UnityEngine.Vector3& result);
    }

// Namespace: PRISM.Legacy
    public class RangeDetection_00003E6E$PostfixBurstDelegate : System.MulticastDelegate
    {
        public void Invoke(UnityEngine.Vector3& cameraPosition, float inRange, Unity.Collections.NativeArray<UnityEngine.Bounds>& bounds, Unity.Collections.NativeArray<bool>& result);
        public System.IAsyncResult BeginInvoke(UnityEngine.Vector3& cameraPosition, float inRange, Unity.Collections.NativeArray<UnityEngine.Bounds>& bounds, Unity.Collections.NativeArray<bool>& result, System.AsyncCallback , object );
        public void EndInvoke(System.IAsyncResult );
    }

// Namespace: PRISM.Legacy
    class RangeDetection_00003E6E$BurstDirectCall
    {
        private static System.IntPtr Pointer;
        private static System.IntPtr DeferredCompilation;
        private static void GetFunctionPointerDiscard(System.IntPtr& );
        private static System.IntPtr GetFunctionPointer();
        public static void Constructor();
        public static void Initialize();
        public static void Invoke(UnityEngine.Vector3& cameraPosition, float inRange, Unity.Collections.NativeArray<UnityEngine.Bounds>& bounds, Unity.Collections.NativeArray<bool>& result);
    }

// Namespace: PRISM.Legacy
    public class ReflectionPlane_00003E6F$PostfixBurstDelegate : System.MulticastDelegate
    {
        public void Invoke(UnityEngine.Vector3& baseCameraPos, UnityEngine.Matrix4x4& baseCameraWorldToCameraMatrix, UnityEngine.Matrix4x4& baseCameraProjectionMatrix, UnityEngine.Vector3& pos, UnityEngine.Vector3& normal, float clipPlaneOffset, UnityEngine.Vector3& newPosition, UnityEngine.Matrix4x4& worldToCameraMatrix, UnityEngine.Matrix4x4& projectionMatrix);
        public System.IAsyncResult BeginInvoke(UnityEngine.Vector3& baseCameraPos, UnityEngine.Matrix4x4& baseCameraWorldToCameraMatrix, UnityEngine.Matrix4x4& baseCameraProjectionMatrix, UnityEngine.Vector3& pos, UnityEngine.Vector3& normal, float clipPlaneOffset, UnityEngine.Vector3& newPosition, UnityEngine.Matrix4x4& worldToCameraMatrix, UnityEngine.Matrix4x4& projectionMatrix, System.AsyncCallback , object );
        public void EndInvoke(System.IAsyncResult );
    }

// Namespace: PRISM.Legacy
    class ReflectionPlane_00003E6F$BurstDirectCall
    {
        private static System.IntPtr Pointer;
        private static System.IntPtr DeferredCompilation;
        private static void GetFunctionPointerDiscard(System.IntPtr& );
        private static System.IntPtr GetFunctionPointer();
        public static void Constructor();
        public static void Initialize();
        public static void Invoke(UnityEngine.Vector3& baseCameraPos, UnityEngine.Matrix4x4& baseCameraWorldToCameraMatrix, UnityEngine.Matrix4x4& baseCameraProjectionMatrix, UnityEngine.Vector3& pos, UnityEngine.Vector3& normal, float clipPlaneOffset, UnityEngine.Vector3& newPosition, UnityEngine.Matrix4x4& worldToCameraMatrix, UnityEngine.Matrix4x4& projectionMatrix);
    }
}

// Namespace: PRISM.Legacy
public class CachedRendererListExecutor
{
    private System.Collections.Generic.List<UnityEngine.Material> cachedMaterialList;
    private UnityEngine.GameObject cachedRoot;
    public void Clear();
    public void Execute(UnityEngine.GameObject obj, System.Action<UnityEngine.Material> act);
    private void _executeAllAction(System.Action<UnityEngine.Material> act);
}

// Namespace: PRISM.Legacy
public struct FaceBoneInterpolateVector3NativeArray : System.ValueType, System.IDisposable
{
    private Unity.Collections.NativeArray<Unity.Mathematics.float3> down;
    private Unity.Collections.NativeArray<Unity.Mathematics.float3> center;
    private Unity.Collections.NativeArray<Unity.Mathematics.float3> up;
    public static PRISM.Legacy.FaceBoneInterpolateVector3NativeArray Create(PRISM.Legacy.FaceBoneInterpolateVector3 faceBoneInterpolateVector3);
    public void Dispose();
    public Unity.Mathematics.float3 GetValue(int vertical, int horizontal);
}

// Namespace: PRISM.Legacy
public struct FaceBoneInterpolateFloatNativeArray : System.ValueType, System.IDisposable
{
    private Unity.Collections.NativeArray<float> down;
    private Unity.Collections.NativeArray<float> center;
    private Unity.Collections.NativeArray<float> up;
    public static PRISM.Legacy.FaceBoneInterpolateFloatNativeArray Create(PRISM.Legacy.FaceBoneInterpolateFloat faceBoneInterpolateFloat);
    public void Dispose();
    public float GetValue(int vertical, int horizontal);
}

// Namespace: PRISM.Legacy
public struct FaceBonePostureNativeArray : System.ValueType, System.IDisposable
{
    public PRISM.Legacy.FaceBoneInterpolateVector3NativeArray position;
    public PRISM.Legacy.FaceBoneInterpolateVector3NativeArray rotation;
    public PRISM.Legacy.FaceBoneInterpolateFloatNativeArray scale;
    public Unity.Mathematics.float3 basePosition;
    public static PRISM.Legacy.FaceBonePostureNativeArray Create(PRISM.Legacy.FaceBonePosture faceBonePosture);
    public void Dispose();
}

// Namespace: PRISM.Legacy
public struct FaceBoneDataNativeArray : System.ValueType, System.IDisposable
{
    public PRISM.Legacy.FaceBonePostureNativeArray eyeL;
    public PRISM.Legacy.FaceBonePostureNativeArray eyeR;
    public PRISM.Legacy.FaceBonePostureNativeArray nose;
    public PRISM.Legacy.FaceBonePostureNativeArray mouth;
    public PRISM.Legacy.FaceBonePostureNativeArray chin;
    public PRISM.Legacy.FaceBonePostureNativeArray eyeBrowL;
    public PRISM.Legacy.FaceBonePostureNativeArray eyeBrowR;
    public PRISM.Legacy.FaceBoneInterpolateVector3NativeArray zBias;
    public PRISM.Legacy.FaceBoneInterpolateFloatNativeArray animHighlight;
    public PRISM.Legacy.FaceBoneInterpolateFloatNativeArray animJoeDraw;
    public PRISM.Legacy.FaceBoneInterpolateFloatNativeArray animNoseDelete;
    public PRISM.Legacy.FaceBoneInterpolateFloatNativeArray animNoseRot;
    public PRISM.Legacy.FaceBoneInterpolateFloatNativeArray animEyeLashOpL;
    public PRISM.Legacy.FaceBoneInterpolateFloatNativeArray animEyeLashOpR;
    public static PRISM.Legacy.FaceBoneDataNativeArray Create(PRISM.Legacy.FaceBoneData faceBoneData);
    public void Dispose();
}

// Namespace: PRISM.Legacy
public class FaceBoneInterpolateVector3
{
    public Unity.Mathematics.float3[] down;
    public Unity.Mathematics.float3[] center;
    public Unity.Mathematics.float3[] up;
    public void SetValues(PRISM.Legacy.FaceBoneEditData[] data, int index, int flipOffset);
    public Unity.Mathematics.float3 GetValue(int vertical, int horizontal);
}

// Namespace: PRISM.Legacy
public class FaceBoneInterpolateFloat
{
    public float[] down;
    public float[] center;
    public float[] up;
    public void SetValues(PRISM.Legacy.FaceBoneEditData[] data, int index, int flipOffset, int valueIndex);
    public float GetValue(int vertical, int horizontal);
}

// Namespace: PRISM.Legacy
public class FaceBonePosture
{
    public PRISM.Legacy.FaceBoneInterpolateVector3 rotation;
    public PRISM.Legacy.FaceBoneInterpolateVector3 position;
    public PRISM.Legacy.FaceBoneInterpolateFloat scale;
    public Unity.Mathematics.float3 basePosition;
}

// Namespace: PRISM.Legacy
public class FaceBoneEditData
{
    public Unity.Mathematics.float3[] values;
}

// Namespace: PRISM.Legacy
public class FaceBoneData : UnityEngine.ScriptableObject
{
    public static int HorizontalValueNum;
    public PRISM.Legacy.FaceBoneEditData[] saveData;
    public PRISM.Legacy.FaceBonePosture eyeL;
    public PRISM.Legacy.FaceBonePosture eyeR;
    public PRISM.Legacy.FaceBonePosture nose;
    public PRISM.Legacy.FaceBonePosture mouth;
    public PRISM.Legacy.FaceBonePosture chin;
    public PRISM.Legacy.FaceBonePosture eyeBrowL;
    public PRISM.Legacy.FaceBonePosture eyeBrowR;
    public PRISM.Legacy.FaceBoneInterpolateVector3 zBias;
    public PRISM.Legacy.FaceBoneInterpolateFloat animHighlight;
    public PRISM.Legacy.FaceBoneInterpolateFloat animJoeDraw;
    public PRISM.Legacy.FaceBoneInterpolateFloat animNoseDelete;
    public PRISM.Legacy.FaceBoneInterpolateFloat animNoseRot;
    public PRISM.Legacy.FaceBoneInterpolateFloat animEyeLashOpL;
    public PRISM.Legacy.FaceBoneInterpolateFloat animEyeLashOpR;
    public void ApplySaveData();

    public enum ValueIndexType : System.Enum
    {
        public int value__;
        public static ValueIndexType X;
        public static ValueIndexType Y;
        public static ValueIndexType Z;
    }
}

// Namespace: PRISM.Legacy
public enum FaceBoneAnimationParamType : System.Enum
{
    public int value__;
    public static PRISM.Legacy.FaceBoneAnimationParamType Highlight;
    public static PRISM.Legacy.FaceBoneAnimationParamType JoeDraw;
    public static PRISM.Legacy.FaceBoneAnimationParamType NoseDelete;
    public static PRISM.Legacy.FaceBoneAnimationParamType NoseRot;
    public static PRISM.Legacy.FaceBoneAnimationParamType EyeLashOpL;
    public static PRISM.Legacy.FaceBoneAnimationParamType EyeLashOpR;
}

// Namespace: PRISM.Legacy
public class FaceBonePlayableGraph : UnityEngine.MonoBehaviour
{
    private UnityEngine.AnimationClip highlightAnimationClip;
    private UnityEngine.AnimationClip joeDrawAnimationClip;
    private UnityEngine.AnimationClip noseDeleteAnimationClip;
    private UnityEngine.AnimationClip noseRotAnimationClip;
    private UnityEngine.AnimationClip eyeLashOpLAnimationClip;
    private UnityEngine.AnimationClip eyeLashOpRAnimationClip;
    private UnityEngine.Playables.PlayableGraph graph;
    private UnityEngine.Animations.AnimationPlayableOutput output;
    private UnityEngine.Animations.AnimationLayerMixerPlayable mixer;
    private UnityEngine.Animations.AnimationLayerMixerPlayable paramMixer;
    public void Setup(UnityEngine.Animator targetAnimator);
    private void _setupConnection(PRISM.Legacy.FaceBoneAnimationParamType type, UnityEngine.AnimationClip clip);
    public void SetNormalizeTime(PRISM.Legacy.FaceBoneAnimationParamType type, float weight);
    public void Evaluate();
    public void Cleanup();
}

// Namespace: PRISM.Legacy
public class FaceConstraintPair
{
    public PRISM.TransformConstraintBase constraint;
    public string path;
}

// Namespace: PRISM.Legacy
public class FaceController : UnityEngine.MonoBehaviour
{
    private UnityEngine.Animator animator;
    private PRISM.Legacy.FaceConstraintPair[] autoAttachPairs;
    public UnityEngine.Animator Animator { get; set; }
    public void AttachConstraint();
    private static void _attachConstraint(UnityEngine.Transform baseTransform, PRISM.TransformConstraintBase constraint, string path);
}

// Namespace: PRISM.Legacy
public class CharacterMaterialSetter
{
    private static int CharacterSlotMaxSize;
    private static System.Collections.Generic.List<PRISM.Legacy.ICharacter> CharacterSlotList;
    private int characterIndex;
    private System.Collections.Generic.List<UnityEngine.Material> allMaterials;
    public int CharacterIndex { get; set; }
    public bool IsInitialized { get; set; }
    private static int _findSlot(PRISM.Legacy.ICharacter target);
    public void AddSlot(PRISM.Legacy.ICharacter target);
    public void RemoveSlot(PRISM.Legacy.ICharacter target);
    public void Init(UnityEngine.Renderer[] renderers);
    public void SetMaterialProperty<TState>(TState state, System.Action<UnityEngine.Material, TState> setProperty);
    public void SetCharacterIndex(int index);
}

// Namespace: PRISM.Legacy
public interface ICharacter
{
}

// Namespace: PRISM.Legacy
public class LiveSceneTimelineTrackForcedMute : UnityEngine.MonoBehaviour
{
    private string trackPath;
    private bool mute;
    public void Apply(PRISM.TimelineController timelineController);
}

// Namespace: PRISM.Legacy
public class SimpleModel3dLoader
{
    private PRISM.Scenario.Model3dLoaderCore core;
    public PRISM.Scenario.ScenarioManager GetScenarioManager();
    public PRISM.LiveCharacterController GetLiveCharacterController();
    public UnityEngine.Rendering.PostProcessing.PostProcessLayer GetPostProcessLayer();
    public PRISM.CameraController GetCameraController();
    public SceneCameraController GetSceneCameraController();
    public Cysharp.Threading.Tasks.UniTask SetUpAsync(string scenarioName, PRISM.UnitIdol[] unitIdols, int bgValue, string sceneAsset, System.Func<Cysharp.Threading.Tasks.UniTask> onInitFunc, System.Threading.CancellationToken cancellationToken);
    public Cysharp.Threading.Tasks.UniTask ReleaseAsync();
}

// Namespace: PRISM.Legacy
public class ReflectedCharacter : UnityEngine.MonoBehaviour, PRISM.Legacy.ICharacter
{
    private static float OutlineInclusive;
    private UnityEngine.Color personalLightColor;
    public PRISM.Character originalCharacter;
    private PRISM.MirrorCharacter mirrorCharacter;
    public PRISM.AngelRingController originalAngelRingController;
    private System.Collections.Generic.Dictionary<UnityEngine.Transform, UnityEngine.Transform> dicTrans;
    private System.Collections.Generic.Dictionary<UnityEngine.Transform, bool> dicHipTransform;
    public PRISM.Legacy.CharacterMaterialSetter MaterialSetter;
    private UnityEngine.GameObject baseObject;
    private System.IDisposable registerActionDisposable;
    private System.Action<UnityEngine.Rendering.ScriptableRenderContext, UnityEngine.Camera> registerCallback;
    private void SetOutlineAdjust(float adjust, float inclusive);
    private void SetPersonalLight(UnityEngine.Color col);
    private void OnEnable();
    private void OnDisable();
    private void _onBeginCameraRendering(UnityEngine.Rendering.ScriptableRenderContext context, UnityEngine.Camera targetCamera);
    public void Setup(PRISM.Character original, PRISM.MirrorCharacter mirror);
    private void LateUpdate();
    private void _entryTransform(UnityEngine.Transform baseTransform);
    private void _entryTransformRecursive(UnityEngine.Transform parentFrom);
}

// Namespace: PRISM.Legacy
public class CharacterLighting : UnityEngine.MonoBehaviour
{
    public UnityEngine.Color _RimColor;
    public UnityEngine.Vector3 _RimLightDirection;
    public float _RimFeather;
    public float _RimDiffuseRate;
    public bool _EnableDepthOffsetRimLight;
    public bool _EnableToonRimLight;
    public float _RimPower;
    public float _RimIntensity;
    public float _RimWidth;
    public float _RimSpread;
    public float _RimBorder;
    public float _RimBlur;
    public float _RimAntiAlias;
    public float _DiffuseBlur;
    public float _DiffuseBorder;
    private static System.Collections.Generic.List<PRISM.Legacy.CharacterLighting> CharacterLightingList;
    private static UnityEngine.Rendering.GlobalKeyword DepthOffsetRimLightGlobalKeyword;
    private static UnityEngine.Rendering.GlobalKeyword ToonRimLightGlobalKeyword;
    private void OnEnable();
    private void OnDisable();
    public static void Execute();
    public static void SetupRimLight();
    private void OnValidate();
    private void _updateShaderProperties();
    private void OnDrawGizmos();
    private static void _drawArrow(UnityEngine.Vector3 from, UnityEngine.Vector3 to, float arrowHeadLength, float arrowHeadAngle);
}

// Namespace: PRISM.Legacy
public class ReflectionBillboardParticleController : UnityEngine.MonoBehaviour
{
    private static System.Collections.Generic.List<System.ValueTuple<UnityEngine.Material, int>> SharedMaterialList;
    private System.Collections.Generic.List<UnityEngine.Material> materialList;
    private void Reset();
    private void OnEnable();
    private void OnDisable();
    public static void BeginReflectionPlane();
    public static void EndReflectionPlane();
}

// Namespace: PRISM.Legacy
public class OnDemandRenderingController
{
    public static void Enable(int targetFrameRate);
    public static void Disable();
}

// Namespace: PRISM.Legacy
public struct OnDemandRenderingScope : System.ValueType, System.IDisposable
{
    public void Dispose();
}

// Namespace: PRISM.Legacy
public class FacialPresetEyeBlowType : UnityEngine.MonoBehaviour
{
    private void Start();
    private void Update();
}

// Namespace: PRISM.Legacy
public class AnimationOverrideTrackAdditiveChanger : UnityEngine.MonoBehaviour
{
    private UnityEngine.Playables.PlayableDirector director;
    private void OnEnable();
    private void OnDisable();
    private void Update();
    private static bool _existsAdditiveAnimationTrack(UnityEngine.Playables.PlayableDirector director);
    private static bool _existsAdditiveAnimationTrack(System.Collections.Generic.IEnumerable<UnityEngine.Timeline.TrackAsset> tracks);
    private static void _onPlayed(UnityEngine.Playables.PlayableDirector director);
    private static void _changeAdditiveRecursive(UnityEngine.Playables.Playable target);
    private static bool _isAdditive(UnityEngine.Playables.Playable check);

    private class <>O
    {
        public static System.Action<UnityEngine.Playables.PlayableDirector> <0>___onPlayed;
    }
}

// Namespace: PRISM.Legacy
public class ScenarioSilhouette
{
    private UnityEngine.GameObject silhouette;
    private bool isActive;
    private bool isDisplay;
    public bool IsActive { get; set; }
    public bool IsDisplay { get; set; }
    private void _update();
}

// Namespace: PRISM.Legacy
public class AudienceLayoutScriptableObject : UnityEngine.ScriptableObject
{
    public System.Collections.Generic.List<CyaQuad> CyalumeQuadList;
    public void Load(System.Collections.Generic.List<CyaQuad> cyaQuads);
}

// Namespace: PRISM.Legacy
public struct MeshVertexData : System.ValueType
{
    public UnityEngine.Vector2 uv;
    public UnityEngine.Vector3 vertex;
}

// Namespace: PRISM.Legacy
public struct CreateMeshData : System.ValueType
{
    public int indexStart;
    public int indexLength;
    public UnityEngine.Vector3 minVec;
    public UnityEngine.Vector3 maxVec;
}

// Namespace: PRISM.Legacy
public struct CyaSilData : System.ValueType
{
    public bool enable;
    public int movpat;
    public int texpat;
    public float silRnd;
    public UnityEngine.Vector3 cyaPosi;
    public UnityEngine.Vector3 silPosi;
}

// Namespace: PRISM.Legacy
public struct QuadData : System.ValueType
{
    public UnityEngine.GameObject cyalumeBaseObject;
    public UnityEngine.GameObject[] cyalumeSubObjects;
}

// Namespace: PRISM.Legacy
public struct VertexData : System.ValueType
{
    public ushort posx;
    public ushort posy;
    public ushort posz;
    public ushort posw;
    public ushort u;
    public ushort v;
    public byte r0;
    public byte r1;
    public byte r2;
    public byte r3;
}

// Namespace: PRISM.Legacy
public struct MeshOut : System.ValueType
{
    public System.IntPtr randBuf;
    public System.IntPtr vertCya;
    public System.IntPtr idxCya;
    public System.IntPtr vertSil;
    public System.IntPtr idxSil;
    public System.IntPtr vertArm;
    public System.IntPtr idxArm;
}

// Namespace: PRISM.Legacy
public struct MeshOutInner : System.ValueType
{
    public Unity.Collections.NativeArray<float> randBuf;
    public Unity.Collections.NativeArray<PRISM.Legacy.VertexData> vertCya;
    public Unity.Collections.NativeArray<ushort> idxCya;
    public Unity.Collections.NativeArray<PRISM.Legacy.VertexData> vertSil;
    public Unity.Collections.NativeArray<ushort> idxSil;
    public Unity.Collections.NativeArray<PRISM.Legacy.VertexData> vertArm;
    public Unity.Collections.NativeArray<ushort> idxArm;
}

// Namespace: PRISM.Legacy
private struct CreateMeshJob : System.ValueType, Unity.Jobs.IJobParallelFor
{
    public static int[] CyalumeTriangles;
    public static UnityEngine.Vector3[] CyalumeVertices;
    private static UnityEngine.Vector2[] uv4;
    public static UnityEngine.Vector2[] CyalumeUVs;
    public Unity.Collections.NativeArray<PRISM.Legacy.CreateMeshData> createMeshDatas;
    public Unity.Collections.NativeArray<PRISM.Legacy.CyaSilData> cyalumeSilhouetteDataArray;
    public Unity.Collections.NativeArray<PRISM.Legacy.MeshVertexData> cyalumeVertexDatas;
    public Unity.Collections.NativeArray<PRISM.Legacy.MeshVertexData> silhouette0VertexDatas;
    public Unity.Collections.NativeArray<ushort> silhouette0IndexDatas;
    public Unity.Collections.NativeArray<PRISM.Legacy.MeshVertexData> silhouette1VertexDatas;
    public Unity.Collections.NativeArray<ushort> silhouette1IndexDatas;
    public Unity.Collections.NativeArray<PRISM.Legacy.MeshVertexData> silhouette2VertexDatas;
    public Unity.Collections.NativeArray<ushort> silhouette2IndexDatas;
    public Unity.Collections.NativeArray<PRISM.Legacy.MeshVertexData> armVertexDatas;
    public Unity.Collections.NativeArray<ushort> armIndexDatas;
    public Unity.Collections.NativeArray<PRISM.Legacy.MeshOut> outMeshDatas;
    private static void AddVertex(PRISM.Legacy.VertexData* vertexPtr, UnityEngine.Vector3 position, UnityEngine.Vector2 uv, UnityEngine.Color32 ctrl);
    private static UnityEngine.Color32 PackControlData(int movementPattern, int handCyaIndex, int vertexIndex, float silhouetteRandomFactor, float handRandomFactor, float cyalumeRandomFactor);
    public void Execute(int t);
    public static Unity.Collections.NativeArray<ushort> CreateMeshIndexData(int[] indices);
    public static Unity.Collections.NativeArray<PRISM.Legacy.MeshVertexData> CreateMeshVertexData(UnityEngine.Vector3[] vertices, UnityEngine.Vector2[] uvs);
}

// Namespace: PRISM.Legacy
public class TimelineTimeUpdater : UnityEngine.MonoBehaviour
{
    private float time;
    private void Update();
    public static void SetTimelineTime(float value);
}

// Namespace: PRISM.Legacy
public class BirthdayParam
{
    private static string DateTimeFormat;
    private static int MonthAndDayStartIndex;
    private static int YearAndMonthStartIndex;
    private int <BirthYear>k__BackingField;
    private int <BirthMonth>k__BackingField;
    private int <BirthDay>k__BackingField;
    public int BirthYear { get; set; }
    public int BirthMonth { get; set; }
    public int BirthDay { get; set; }
    public void SetBirthData(string birthDate);
    public bool IsRegisterBirthDay();
    public int GetAge();
}

// Namespace: PRISM.Legacy
public interface ITitleConnector
{
}

// Namespace: PRISM.Legacy
public class TitleParameter : ENTERPRISE.IViewParameter
{
    private int <LoadingViewType>k__BackingField;
    public int LoadingViewType { get; set; }
}

// Namespace: PRISM.Legacy
public class UISafeArea : UnityEngine.MonoBehaviour
{
    private ViewType execType;
    private void Start();

    public enum ViewType : System.Enum
    {
        public int value__;
        public static ViewType UnitySafeAreaMargin;
        public static ViewType UnitySafeArea;
    }

    private class <>c__DisplayClass2_0
    {
        public UnityEngine.RectTransform rectTransform;
        private void <Start>b__0(PRISM.Interactions.ScreenWrapper screen);
    }
}

// Namespace: PRISM.Legacy
public interface IWebTextureLoader
{
    public Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadAsync(string url, System.Threading.CancellationToken cancellationToken);
}

// Namespace: PRISM.Legacy
public class WebTextureLoader : PRISM.Legacy.IWebTextureLoader, System.IDisposable
{
    private static string CacheDirectoryName;
    private System.Collections.Generic.HashSet<string> downloadings;
    private System.Collections.Generic.Dictionary<string, UnityEngine.Texture2D> loadedTextures;
    private bool disposed;
    public Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> LoadAsync(string url, System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask<UnityEngine.Texture2D> _loadAsync(string url, string fileName, System.Threading.CancellationToken cancellationToken);
    public void Dispose();
    public static void DeleteCache(System.TimeSpan preservePeriod);

    private struct <LoadAsync>d__4 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<UnityEngine.Texture2D> <>t__builder;
        public PRISM.Legacy.WebTextureLoader <>4__this;
        public string url;
        public System.Threading.CancellationToken cancellationToken;
        private string <fileName>5__2;
        private Awaiter <>u__1;
        private Awaiter<UnityEngine.Texture2D> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_loadAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<UnityEngine.Texture2D> <>t__builder;
        public string fileName;
        public string url;
        public System.Threading.CancellationToken cancellationToken;
        public PRISM.Legacy.WebTextureLoader <>4__this;
        private string <path>5__2;
        private UnityEngine.Networking.UnityWebRequest <req>5__3;
        private UnityWebRequestAsyncOperationAwaiter <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Legacy
public class LegacyChallengeTourResultParameter : ENTERPRISE.IViewParameter
{
    private PRISM.Module.Networking.IFinishChallengeTourStageReply <FinishReply>k__BackingField;
    private PRISM.UnitIdol[] <UnitIdols>k__BackingField;
    private int <UnitIndex>k__BackingField;
    private int <StageIndex>k__BackingField;
    private int <UnitId>k__BackingField;
    public PRISM.Module.Networking.IFinishChallengeTourStageReply FinishReply { get; set; }
    public PRISM.UnitIdol[] UnitIdols { get; set; }
    public int UnitIndex { get; set; }
    public int StageIndex { get; set; }
    public int UnitId { get; set; }
}

// Namespace: PRISM.Legacy
public class LegacyChallengeTourTopParameter : ENTERPRISE.IViewParameter
{
    private bool <IsUnitStageDesignation>k__BackingField;
    private int <SelectUnitIndex>k__BackingField;
    private int <SelectStageIndex>k__BackingField;
    private bool <IsStageDetailFirstView>k__BackingField;
    public bool IsUnitStageDesignation { get; set; }
    public int SelectUnitIndex { get; set; }
    public int SelectStageIndex { get; set; }
    public bool IsStageDetailFirstView { get; set; }
    public static PRISM.Legacy.LegacyChallengeTourTopParameter FromEpisodeSelect(int unitId);
    public static PRISM.Legacy.LegacyChallengeTourTopParameter FromInGame(int unitIndex, int stageIndex);
}

// Namespace: PRISM.Legacy.UI
public class FontCleaner : UnityEngine.MonoBehaviour
{
    private TMPro.TMP_FontAsset[] fonts;
    private static int disableCounter;
    public void CleanDynamicAtlas();
    public static PRISM.Legacy.UI.FontCleaner FindCleaner();
    public static System.IDisposable CreateDisableScope();

    private class <>c
    {
        public static <>c <>9;
        public static System.Action <>9__4_0;
        private void <CreateDisableScope>b__4_0();
    }
}

// Namespace: PRISM.Legacy.Story
public interface IIdolSubStoryIdolSelectConnector
{
}

// Namespace: PRISM.Legacy.Story
public interface IProduceMainScenarioEpisodeSelectConnector
{
}

// Namespace: PRISM.Legacy.Story
public interface IProduceMainScenarioSelectConnector
{
}

// Namespace: PRISM.Legacy.Story
public interface IStoryTopConnector
{
}

// Namespace: PRISM.Legacy.Story
public interface IUnitSubStoryUnitSelectConnector
{
}

// Namespace: PRISM.Legacy.Produce
public class ProduceTopBgmVolumeAdjuster
{
    private string cueName;
    private int label;
    private bool isSubSeason;
    public void UpdateTargetScenarioBgmInformation(string cueName, int label, bool isSubSeason);
    public void UpdateTargetScenarioBgmInformation(PRISM.Module.Networking.IProduceBaseInfoStatus produceBaseInfo);
    public Cysharp.Threading.Tasks.UniTask PlayProduceTopBgmWithChangeVolumeAsync(bool isDown, System.Threading.CancellationToken ct);

    private class <>c
    {
        public static <>c <>9;
        public static DG.Tweening.Core.DOGetter<float> <>9__5_0;
        public static DG.Tweening.Core.DOGetter<float> <>9__5_1;
        private float <PlayProduceTopBgmWithChangeVolumeAsync>b__5_0();
        private float <PlayProduceTopBgmWithChangeVolumeAsync>b__5_1();
    }

    private class <>c__DisplayClass5_0
    {
        public CriWare.CriAtomExPlayback playback;
        private void <PlayProduceTopBgmWithChangeVolumeAsync>g___setVolume|2(float volume);
    }

    private struct <PlayProduceTopBgmWithChangeVolumeAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public System.Threading.CancellationToken ct;
        public PRISM.Legacy.Produce.ProduceTopBgmVolumeAdjuster <>4__this;
        private <>c__DisplayClass5_0 <>8__1;
        public bool isDown;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Legacy.Produce.ShinyCompetition
public interface IShinyCompetitionTopViewConnector
{
}

// Namespace: PRISM.Legacy.Mobile
public interface IMobileLauncherConnector
{
}

// Namespace: PRISM.Legacy.Introduction
public interface IIntroductionUnitLetterConnector
{
}

// Namespace: PRISM.Legacy.Drama
public interface IDramaLauncherConnector
{
}

// Namespace: PRISM.Legacy.Adv
public class AdvScreenBuilderForLegacy : UnityEngine.MonoBehaviour
{
    public void SetViewActive(bool isActive);
    public PRISM.Legacy.Adv.IAdvScreenPresenterForLegacy Build(PRISM.Adv.AdvScreenViewModel viewModel, PRISM.Scenario.ScenarioManager scenarioManager);
}

// Namespace: PRISM.Legacy.Adv
public interface IAdvScreenPresenterForLegacy
{
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(System.Threading.CancellationToken ct);
    public Cysharp.Threading.Tasks.UniTask BeginViewAsync(System.Threading.CancellationToken ct);
    public void HideAdvScreen();
}

// Namespace: PRISM.Scenario
public class ADVLocalizeTextUtility
{
    private static int PrologueStoryNo;
    private static int EpilogueStoryNo;

    public class GetText
    {
        private static string _getLocalizeText(string category, int index);

        public class Log
        {
            public static string ConcatSubTitleAndTitle(string subTitle, string title);
        }

        public class SkipPU
        {
            public string TopText { get; set; }
            public static string MainStorySubTitle(string chapterTitle);
            public static string IdolStorySubTitle(string chapterTitle);
        }

        public class StoryTitle
        {
            public static string MainStoryChapterTitle(string chapterTitle, int storyNo);
            public static string IdolStoryChapterTitle(string chapterTitle, int storyNo);
        }
    }

    public class Utilities
    {
        public static string GetChapterTitleWithStoryNo(string chapterTitle, long storyNo);
        public static string GetSkipPUTitleWithStoryNo(string title, long storyNo);
    }
}

// Namespace: PRISM.Scenario
public class ADVUtility
{
    public static Cysharp.Threading.Tasks.UniTask PrepareUnitIdol(PRISM.Scenario.ScenarioId scenarioID);
    public static Cysharp.Threading.Tasks.UniTask<PRISM.UnitIdol[]> ReadUnitIdolsAsync(PRISM.Scenario.ScenarioId scenarioID);
    public static Cysharp.Threading.Tasks.UniTask<PRISM.UnitIdol[]> GetUnitIdolsChangeClothAsync(PRISM.UnitIdol[] originalUnitIdols);
    public static PRISM.UnitIdol[] AddUnitIdols(PRISM.UnitIdol[] unitIdols, PRISM.UnitIdol[] additionalUnitIdolList, PRISM.Scenario.ScenarioId scenarioID);
    private static bool _canCostumeChange(PRISM.UnitIdol originalUnitIdol, PRISM.Domain.ICachedCostumeService service);
    private static System.Collections.Generic.IEnumerable<int> _addAdvOriginalAccessories(System.Collections.Generic.IEnumerable<int> accessoryIds, PRISM.UnitIdol originalUnitIdol, PRISM.Domain.ICostumeSetData defaultCostume);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Module.Networking.IIdolBaseCostumeStatus, bool> <>9__2_0;
        public static System.Func<PRISM.Module.Networking.IAccessoryStatus, int> <>9__5_0;
        private bool <GetUnitIdolsChangeClothAsync>b__2_0(PRISM.Module.Networking.IIdolBaseCostumeStatus x);
        private int <_addAdvOriginalAccessories>b__5_0(PRISM.Module.Networking.IAccessoryStatus x);
    }

    private struct <GetUnitIdolsChangeClothAsync>d__2 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.UnitIdol[]> <>t__builder;
        public PRISM.UnitIdol[] originalUnitIdols;
        private System.Collections.Generic.List<PRISM.UnitIdol> <unitIdols>5__2;
        private PRISM.Domain.IdolService <idolService>5__3;
        private PRISM.Domain.ICachedCostumeService <costumeService>5__4;
        private PRISM.Definitions.MasterData <masterData>5__5;
        private Awaiter<PRISM.Domain.ICachedCostumeService> <>u__1;
        private PRISM.UnitIdol[] <>7__wrap5;
        private int <>7__wrap6;
        private PRISM.UnitIdol <originalUnitIdol>5__8;
        private Awaiter<PRISM.Module.Networking.IIdolBaseStatus> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <PrepareUnitIdol>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Scenario.ScenarioId scenarioID;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Scenario
public class ADVWindowSeConst
{
    public static string SheetName;
    public static PRISM.Definitions.SoundKey ButtonTurnPage;
    public static PRISM.Definitions.SoundKey WordOn;
    public static PRISM.Definitions.SoundKey ButtonSkip;
}

// Namespace: PRISM.Scenario
public interface PlayableADV
{
    public PRISM.Legacy.Adv.IAdvScreenPresenterForLegacy CreateAdvScreenPresenter(PRISM.Adv.AdvScreenViewModel viewModel, PRISM.Scenario.ScenarioManager scenarioManager);
    public void DisactivateWholeButton();
    public void ActivateWholeButton();
}

// Namespace: PRISM.Scenario
public class Model3dLoaderCore
{
    private PRISM.Scenario.ScenarioManager scenarioManager;
    private PRISM.SceneLoader sceneLoader;
    private System.Action hideAdvScreenAction;
    public PRISM.Scenario.ScenarioManager GetScenarioManager();
    public T FindComponentInHandledScene<T>();
    public void FinishScenarioManager();
    public void SetActiveInScene(bool isActive);
    public void HideAdvScreen();
    public Cysharp.Threading.Tasks.UniTask ReleaseAsync();
    public Cysharp.Threading.Tasks.UniTask SetupAsync(string scenarioName, PRISM.UnitIdol[] unitIdols, int bgValue, bool isAdv, string sceneAsset, System.Func<Cysharp.Threading.Tasks.UniTask> onInitAsyncFunc, int supportCharaCount, bool needContinueBgm, PRISM.Adv.AdvChoiceButtonGroupViewModel advChoiceButtonGroupViewModel, System.Collections.Generic.Dictionary<string, int> additionalSetValue, System.Collections.Generic.Dictionary<string, bool> additionalSetFlag, int unitCount, int unitId, bool doFadeIn, bool isShowTitleView, System.Threading.CancellationToken cancellationToken);
    private Cysharp.Threading.Tasks.UniTask _initializeAdvScreenAsync(string scenarioName, PRISM.Adv.AdvChoiceButtonGroupViewModel advChoiceButtonGroupViewModel);
    private PRISM.Scenario.ScenarioManager _instantiateScenarioManagerIn(UnityEngine.SceneManagement.Scene targetScene);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.UnitIdol, bool> <>9__9_0;
        private bool <SetupAsync>b__9_0(PRISM.UnitIdol u);
    }

    private struct <ReleaseAsync>d__8 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Scenario.Model3dLoaderCore <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetupAsync>d__9 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public string sceneAsset;
        public PRISM.UnitIdol[] unitIdols;
        public string scenarioName;
        public int unitCount;
        public int unitId;
        public int bgValue;
        public int supportCharaCount;
        public System.Collections.Generic.Dictionary<string, int> additionalSetValue;
        public System.Collections.Generic.Dictionary<string, bool> additionalSetFlag;
        public PRISM.Scenario.Model3dLoaderCore <>4__this;
        public bool isAdv;
        public bool needContinueBgm;
        public bool isShowTitleView;
        public PRISM.Adv.AdvChoiceButtonGroupViewModel advChoiceButtonGroupViewModel;
        public System.Func<Cysharp.Threading.Tasks.UniTask> onInitAsyncFunc;
        public bool doFadeIn;
        public System.Threading.CancellationToken cancellationToken;
        private System.IDisposable <_>5__2;
        private bool <isFirstTime>5__3;
        private AsyncOperationAwaiter <>u__1;
        private PRISM.Scenario.ScenarioId <scenarioID>5__4;
        private Awaiter <>u__2;
        private Awaiter<PRISM.UnitIdol[]> <>u__3;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_initializeAdvScreenAsync>d__10 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public string scenarioName;
        public PRISM.Adv.AdvChoiceButtonGroupViewModel advChoiceButtonGroupViewModel;
        public PRISM.Scenario.Model3dLoaderCore <>4__this;
        private PRISM.Scenario.PlayableADV <playableAdvView>5__2;
        private PRISM.Legacy.Adv.IAdvScreenPresenterForLegacy <advScreenPresenter>5__3;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Scenario
public class AutoApplyPrefferedTextWidth : UnityEngine.MonoBehaviour
{
    private float minWidth;
    private float maxWidth;
    private float mergin;
    private ENTERPRISE.UI.UITextMeshProUGUI text;
    private UnityEngine.RectTransform appliedRectTransform;
    private void Update();
}

// Namespace: PRISM.Scenario
public class DummyModel : UnityEngine.MonoBehaviour
{
    private UnityEngine.AnimationClip animClip;
    public void ApplyAnimation();
    public string GetAnimationName();
}

// Namespace: PRISM.Scenario
public class ScenarioIDExtensions
{
    public static bool NeedContinueBgm(PRISM.Scenario.ScenarioId scenarioId);
}

// Namespace: PRISM.Scenario
public class ScenarioID_EventStoryExtensions
{
    public static int GetEventIdFromMasterData(EventStory scenarioIdEventStory, PRISM.Definitions.MasterData masterData);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Definitions.MstEvent, int> <>9__0_1;
        private int <GetEventIdFromMasterData>b__0_1(PRISM.Definitions.MstEvent x);
    }

    private class <>c__DisplayClass0_0
    {
        public EventStory scenarioIdEventStory;
        public int mstUnitIdFromMstEventStory;
        public System.Collections.Generic.HashSet<int> targetMstEventIds;
        private bool <GetEventIdFromMasterData>b__0(PRISM.Definitions.MstEvent x);
        private bool <GetEventIdFromMasterData>b__2(PRISM.Definitions.MstEventStory x);
        private bool <GetEventIdFromMasterData>b__3(PRISM.Definitions.MstEventStory x);
    }
}

// Namespace: PRISM.Scenario
public class ProducerSpeaker : System.IDisposable
{
    private bool isSpeakProducer;
    private float speakDuration;
    private bool registerSpeak;
    private float beforeSpeakTime;
    private CriWare.CriAtomExPlayer soundPlayer;
    private bool isSoundLoaded;
    private string cueSheetName;
    private string cueName;
    public void InitParameter(bool _isSpeakProducer, float _speakDuration);
    public Cysharp.Threading.Tasks.UniTask LoadSoundAsync(System.Threading.CancellationToken token);
    public void Dispose();
    public void Update();
    public void UpdateSpeaking(float deltaTime, bool forceQuiet);

    private struct <LoadSoundAsync>d__10 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Scenario.ProducerSpeaker <>4__this;
        public System.Threading.CancellationToken token;
        private Awaiter<System.ValueTuple<bool, PRISM.CriAtomCache>> <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Scenario
public class AutoLog
{
    private System.Collections.Generic.Dictionary<string, string> textDic;
    private int currentScene;
    private int currentScript;
    private string[] speakerTable;
    private string[] choicesTable;
    public Cysharp.Threading.Tasks.UniTask<PRISM.Scenario.TextLog> MakeAutoLogAsync(string scrName, int selectNo);
    private void JumpScript(SceneData[] sceneData, int scriptLine);

    private struct <MakeAutoLogAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<PRISM.Scenario.TextLog> <>t__builder;
        public PRISM.Scenario.AutoLog <>4__this;
        public string scrName;
        public int selectNo;
        private PRISM.Scenario.TextLog <textLog>5__2;
        private string <scriptPath>5__3;
        private string <textPath>5__4;
        private string <unitPath>5__5;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Scenario
public class ScenarioCharacterActionManager : UnityEngine.MonoBehaviour
{
    private static int CharaMaxNum;
    private PRISM.CameraController characterCamera;
    private PRISM.LiveCharacterController liveCharacter;
    public UnityEngine.Transform charaParent;
    private CharacterActData[] actDataArray;
    private PRISM.UnitIdol[] unitIdols;
    private float <SequenceTime>k__BackingField;
    private int[] convertTables;
    private int swayReset;
    public bool NoVoice;
    public float NoVoiceLipSyncRate;
    private bool <IsShakeEyeHighlight>k__BackingField;
    private System.Collections.Generic.List<int> speakerList;
    private System.Collections.Generic.List<int> lastSpeakerList;
    private FrameData[] cancelPoseData;
    private float cancelLerpTimer;
    private bool noLerpFlag;
    private string[] actMotionClip;
    private string[] actAnimState;
    private CriWare.CriAtomExOutputAnalyzer scenarioVoiceAnalyzer;
    public float SequenceTime { get; set; }
    public bool IsShakeEyeHighlight { get; set; }
    private float CancelLerpTime { get; set; }
    private float AutoBlinkDuration { get; set; }
    public CharacterActData GetCharacterActData(int i);
    public void SetParentTransformForSetup(UnityEngine.GameObject parentObject);
    public void Setup(PRISM.CameraController _camera, PRISM.LiveCharacterController _liveCharacter, PRISM.UnitIdol[] _unitIdol);
    public void ChangeCharacter(PRISM.UnitIdol[] _unitIdol);
    public void ChangeCharacterNotTakeOverAnimation(PRISM.UnitIdol[] _unitIdol);
    public void ChangeCharacterOnlyModel(PRISM.UnitIdol[] _unitIdol);
    public void Init();
    public int GetCharaIndex(int id);
    public int SearchCharacterIDIndex(int charID);
    public void SetConvertList(int[] convertList);
    public void UpdateInner(float deltaTime, bool loop);
    public void ReserveLastAnimHead();
    public void LateUpdateInner(float deltaTime);
    public void CleanupChara();
    public void CleanupChara(int i);
    public void CreateChara(int i, int id, string defaultWait);
    private void SetAnimationController(int i);
    private UnityEngine.AnimationClip ChangeAnimation(CharacterActData actData, string fromName, string toName, bool sequenceFlag, bool reset);
    private void _updatePosition();
    private void _updateAnimationTime(bool cancel);
    public void SetPositionAndRotation(int i, UnityEngine.Vector3 pos, UnityEngine.Vector3 rot);
    public void GetPosition(int i, UnityEngine.Vector3& pos, UnityEngine.Vector3& rot);
    private void HipsAdjust(int i);
    public void ResetPhysics();
    public void SetAction(int i, string actName, string nextActName, float transitionTime, float offsetTime, bool sequenceFlag, UnityEngine.AnimationCurve interpolateCurve);
    public void SetAction(CharacterActData actData, string actName, string nextActName, float transitionTime, float offsetTime, bool sequenceFlag, UnityEngine.AnimationCurve interpolateCurve);
    public void Move(int i, UnityEngine.Vector3 position, UnityEngine.Vector3 rotation, float time);
    public void SetExpression(int i, string name, float transitionFrame, bool sequenceMode);
    public void SetExpressionTimeDirect(int i, float time);
    public void SetLipSync(int i, string name);
    public void SetPersonalLight(int i, float rate);
    public void SetAutoNeckParam(int i, int speed, float delayTime, int sense);
    private UnityEngine.AnimationClip _getAnimationClip(int i);
    public float GetAnimationTotalTime(int i);
    public void SetupSimpleLipSync(int id);
    public void ResetSimpleLipSyncFlags();
    public void SetGenerateLipSyncFlag(int id);
    private void _updateLip();
    private float GenerateLipSync(CharacterActData characterActData, float rate);
    public void SetNeckIK(CharacterActData characterActData, NeckIKMode onoff, float hangle, float vangle, float rate, float speed, float delay);
    private void _updateIK(bool cancel);
    public int GetCharacterID(int i);
    public string GetCurrentAct(int id);
    public int GetUnitIdolId(int index);
    public void _setMotionSequence(int index, SequenceData sequenceData);
    public void SetMotionSequence(int index, SequenceData sqd);
    public void SetIndividualMotionSequence(int index, SequenceData sequenceData);
    private string _convertCustomActionID(int i, string actionId);
    public static string ConvertCustomActionId(string actionId, int charaId);
    public void SetupCurrentMotionSequence(float startTime);
    public SequenceData GetMotionSequence(CharacterActData characterActData);
    public void ResetMotionSequence();
    public void SetSequenceTime(float time);
    public void CountupSequenceTime(float deltaTime);
    private float _getSequenceTime(CharacterActData characterActData);
    public bool IsEndSequence();
    public bool IsSequenceEnd(CharacterActData characterActData);
    public float CancelSequence();
    private void SetLerpPose();
    private FrameData ReserveCancelPose(PRISM.Character _character);
    private void LerpPose(float t, PRISM.Character _character, FrameData fd);
    public void ResetLerpCount();
    public System.Collections.Generic.List<int> GetIndexList();
    private float _getStartSequenceTime();
    private void _updateSequenceTime(float startTime, float nowTime);
    private void _updateMotionSequence(bool cancel);
    private void _updateMotionSequenceLate(bool animStop, bool cancel);
    private Cysharp.Threading.Tasks.UniTaskVoid _lastUpdateInner(System.Threading.CancellationToken cancellationToken);
    private void _updateMotionSequenceLastUpdate(bool cancel);
    private void _updateMotionSequenceLastUpdate(CharacterActData actData, int index, bool cancel);
    private void _updateEyeControllerBlinkFlag();
    private void CheckMove();
    public void ResetActEditor(float startTime);
    public void SetSpeakerList(System.Collections.Generic.List<int> list);
    public void SetSkitLookAt(int i);
    public void SetEyeTargetNo(int i, int targetNo);
    private void UpdateMoveForSpeaker();
    public void FastForwardAnimation();
    private void _resetAutoBlink(CharacterActData characterActData);
    private bool _checkNoEyeExpression(UnityEngine.Animator animator, CharacterActData actData);
    private void _updateAutoBlink();
    public int GetCharaID(int i);
    public bool CheckDontMoveCharacter(int i);
    private float _getScenarioVoiceRms();

    public enum ActState : System.Enum
    {
        public int value__;
        public static ActState Action;
        public static ActState Transition;
    }

    public enum NeckIKMode : System.Enum
    {
        public int value__;
        public static NeckIKMode Off;
        public static NeckIKMode On;
        public static NeckIKMode OnlyNeck;
        public static NeckIKMode NeckRate;
    }

    public class CharacterActData
    {
        public int id;
        public PRISM.Character character;
        public UnityEngine.AnimatorOverrideController overrideController;
        public ActState state;
        public string currentAct;
        public string nextAct;
        public UnityEngine.WrapMode wrapMode;
        public int loopTime;
        public NeckIKMode neckIK;
        public float neckRate;
        public UnityEngine.Vector3 neckTarget;
        public UnityEngine.Vector3 neckLastTarget;
        public float neckChestRate;
        public float neckLerpSpeed;
        public float neckDelay;
        public int handLeftTarget;
        public int handRightTarget;
        public bool flagEnd;
        public bool flagLipsync;
        public bool flagGenerateLipsync;
        public int flipState;
        public string defaultWait;
        public ExpressionAndIkController expressionAndIk;
        public PRISM.FaceAnimParam faceParam;
        public UnityEngine.GameObject headBone;
        public UnityEngine.GameObject hipsBone;
        public SequenceData sequenceData;
        public ActData currentBody;
        public ActData currentFace;
        public FaceAnimData currentFaceAnim;
        public NeckIKData currentNeckIK;
        public EyeTargetData currentEyeTarget;
        public HandIKData currentHandIK;
        public bool faceReset;
        public FaceActValue faceActValue;
        public AutoNeckParam autoNeckParam;
        public UnityEngine.Quaternion lastAnimHead;
        public MoveData moveData;
        public UnityEngine.AnimationCurve interpolateCurve;
        public bool individualSequenceFlag;
        private float <IndividualSequenceTime>k__BackingField;
        private float <AnimationTime>k__BackingField;
        private float <ElapsedTime>k__BackingField;
        private float <TotalTime>k__BackingField;
        private float <TransitionTime>k__BackingField;
        private float <OffsetTime>k__BackingField;
        private float <BlinkTime>k__BackingField;
        public float IndividualSequenceTime { get; set; }
        public float AnimationTime { get; set; }
        public float ElapsedTime { get; set; }
        public float TotalTime { get; set; }
        public float TransitionTime { get; set; }
        public float OffsetTime { get; set; }
        public float BlinkTime { get; set; }
        public bool IsEnd();
        public void SetPositionAndRotation(UnityEngine.Vector3 pos, UnityEngine.Vector3 eular);
    }

    public class FaceActValue
    {
        public float hangle;
        public float vangle;
        public float rangle;
        public float close;
        public float closeSmile;
    }

    public class AutoNeckParam
    {
        public int speed;
        public float delayTime;
        public int sense;
    }

    public class MoveData
    {
        public float time;
        public float duration;
        public UnityEngine.Vector3 srcPos;
        public UnityEngine.Vector3 srcRot;
        public UnityEngine.Vector3 dstPos;
        public UnityEngine.Vector3 dstRot;
    }

    private struct <_lastUpdateInner>d__101 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskVoidMethodBuilder <>t__builder;
        public PRISM.Scenario.ScenarioCharacterActionManager <>4__this;
        public System.Threading.CancellationToken cancellationToken;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Scenario
public class ScenarioDef
{
    public static int Command_text_wait;
    public static int Command_text_no_wait;
    public static int Command_wait;
    public static int Command_tap_wait;
    public static int Command_jump;
    public static int Command_cond_flag;
    public static int Command_cond_flag_not;
    public static int Command_cond_value_eq;
    public static int Command_cond_value_neq;
    public static int Command_cond_value_ge;
    public static int Command_cond_value_le;
    public static int Command_flag;
    public static int Command_value;
    public static int Command_value_add;
    public static int Command_terminate;
    public static int Command_chara_put;
    public static int Command_chara_do;
    public static int Command_chara_exp;
    public static int Command_chara_move;
    public static int Command_chara_delete;
    public static int Command_fade;
    public static int Command_bg_change;
    public static int Command_camera_next;
    public static int Command_window_begin;
    public static int Command_window_nega;
    public static int Command_window_end;
    public static int Command_window_offset;
    public static int Command_set_active_textwindow;
    public static int Command_chara_turn;
    public static int Command_chara_wait_do;
    public static int Command_chara_light;
    public static int Command_sound_keyon;
    public static int Command_bg_2dset;
    public static int Command_call_cutscene;
    public static int Command_return_cutscene;
    public static int Command_chara_preset;
    public static int Command_camera_preset;
    public static int Command_text_speaker;
    public static int Command_chara_preset_pos;
    public static int Command_chara_clear_all;
    public static int Command_choices_num;
    public static int Command_text_choices;
    public static int Command_sound_volume;
    public static int Command_chara_eye_auto;
    public static int Command_sound_replace;
    public static int Command_wind_param;
    public static int Command_add_prefab;
    public static int Command_play_prefab;
    public static int Command_delete_prefab;
    public static int Command_env_param;
    public static int Command_shake_param;
    public static int Command_text_prefab;
    public static int Command_change_unit;
}

// Namespace: PRISM.Scenario
public class ScenarioId
{
    private static int E2;
    private static int E3;
    private static int E4;
    private static int E5;
    private static int E6;
    private static int E7;
    private static string InvalidConstructorMessage;
    public string ScenarioName;
    public ScenarioType Type { get; set; }
    public static PRISM.Scenario.ScenarioId Create(string id);
    private int _getParamFromPattern(int start, int length);
    private int _getCenter(int start, int length);
    private int _getTail();
    private static PRISM.Scenario.ScenarioId <Create>g__ReturnNull|12_0(string errorText);

    public enum ScenarioType : System.Enum
    {
        public int value__;
        public static ScenarioType Home;
        public static ScenarioType Main;
        public static ScenarioType MainIdol;
        public static ScenarioType UnitCommunication;
        public static ScenarioType Event;
        public static ScenarioType Schedule;
        public static ScenarioType ScheduleRecommended;
        public static ScenarioType SupportEvent;
        public static ScenarioType SubSeasonEvent;
        public static ScenarioType SubSeasonIdolEvent;
        public static ScenarioType ProduceIdol;
        public static ScenarioType SupportCharacter;
        public static ScenarioType MainStory;
        public static ScenarioType IdolStory;
        public static ScenarioType EventStory;
        public static ScenarioType ExtraStory;
        public static ScenarioType EpisodeZero;
        public static ScenarioType Webcast;
        public static ScenarioType Chain;
        public static ScenarioType SystemVoice;
        public static ScenarioType Voice;
        public static ScenarioType ProduceIdolVoice;
        public static ScenarioType SupportCharacterVoice;
        public static ScenarioType Tutorial;
        public static ScenarioType Other;
    }

    public enum IdolBaseProduceScenarioTypeId : System.Enum
    {
        public int value__;
        public static IdolBaseProduceScenarioTypeId LessonStart;
        public static IdolBaseProduceScenarioTypeId AuditionStart;
        public static IdolBaseProduceScenarioTypeId LessonTimeElapsed;
        public static IdolBaseProduceScenarioTypeId RequiredAppealPointsRemainingHalf;
        public static IdolBaseProduceScenarioTypeId MentalBreak;
        public static IdolBaseProduceScenarioTypeId RivalTeamVictory;
        public static IdolBaseProduceScenarioTypeId LessonAuditionVictory;
        public static IdolBaseProduceScenarioTypeId LessonAuditionLose;
        public static IdolBaseProduceScenarioTypeId LessonVictoryFirstHalf;
        public static IdolBaseProduceScenarioTypeId LessonVictorySecondHalf;
        public static IdolBaseProduceScenarioTypeId LessonVictoryChallengeMissionFirstHalf;
        public static IdolBaseProduceScenarioTypeId LessonVictoryChallengeMissionSecondHalf;
        public static IdolBaseProduceScenarioTypeId AuditionVictoryFirstHalf;
        public static IdolBaseProduceScenarioTypeId AuditionVictorySecondHalf;
        public static IdolBaseProduceScenarioTypeId LessonLoseFirstHalf;
        public static IdolBaseProduceScenarioTypeId LessonLoseSecondHalf;
        public static IdolBaseProduceScenarioTypeId AuditionLoseFirstHalf;
        public static IdolBaseProduceScenarioTypeId AuditionLoseSecondHalf;
        public static IdolBaseProduceScenarioTypeId ProduceTopFewVitality;
        public static IdolBaseProduceScenarioTypeId ProduceTopNexwSchedule;
        public static IdolBaseProduceScenarioTypeId MinicharaEffectNormal;
        public static IdolBaseProduceScenarioTypeId MinicharaEffectSupportBonus;
        public static IdolBaseProduceScenarioTypeId MinicharaEffectSupportBonusAndChara;
        public static IdolBaseProduceScenarioTypeId MinicharaEffectTrouble;
        public static IdolBaseProduceScenarioTypeId DayOffSkit;
        public static IdolBaseProduceScenarioTypeId AdviceSkit;
        public static IdolBaseProduceScenarioTypeId ProduceEndRankEFirstHalf;
        public static IdolBaseProduceScenarioTypeId ProduceEndRankDFirstHalf;
        public static IdolBaseProduceScenarioTypeId ProduceEndRankCFirstHalf;
        public static IdolBaseProduceScenarioTypeId ProduceEndRankBFirstHalf;
        public static IdolBaseProduceScenarioTypeId ProduceEndRankAFirstHalf;
        public static IdolBaseProduceScenarioTypeId ProduceEndRankSFirstHalf;
        public static IdolBaseProduceScenarioTypeId ProduceEndRankESecondHalf;
        public static IdolBaseProduceScenarioTypeId ProduceEndRankDSecondHalf;
        public static IdolBaseProduceScenarioTypeId ProduceEndRankCSecondHalf;
        public static IdolBaseProduceScenarioTypeId ProduceEndRankBSecondHalf;
        public static IdolBaseProduceScenarioTypeId ProduceEndRankASecondHalf;
        public static IdolBaseProduceScenarioTypeId ProduceEndRankSSecondHalf;
    }

    public class Home : PRISM.Scenario.ScenarioId
    {
    }

    public class MainScenario : PRISM.Scenario.ScenarioId
    {
        public int UnitId { get; set; }
        public int EpisodeNo { get; set; }
        public int StoryNo { get; set; }
    }

    public class MainIdol : PRISM.Scenario.ScenarioId
    {
        public int EpisodeId { get; set; }
        public int CharacterId { get; set; }
        public int StoryNo { get; set; }
    }

    public class UnitCommunication : PRISM.Scenario.ScenarioId
    {
        public int UnitId { get; set; }
        public int ScenarioNo { get; set; }
        public int Choice { get; set; }
    }

    public class Event : PRISM.Scenario.ScenarioId
    {
        public int EventType { get; set; }
        public int StoryNo { get; set; }
    }

    public class Schedule : PRISM.Scenario.ScenarioId
    {
        public int ScheduleType { get; set; }
        public int ScenarioNo { get; set; }
    }

    public class ScheduleRecommended : PRISM.Scenario.ScenarioId
    {
        public int CharacterId { get; set; }
        public int ScheduleId { get; set; }
        public int Week { get; set; }
    }

    public class SupportEvent : PRISM.Scenario.ScenarioId
    {
        public int CharacterId { get; set; }
        public int ScenarioNo { get; set; }
    }

    public class SubSeasonEvent : PRISM.Scenario.ScenarioId
    {
        public int UnitId { get; set; }
        public int EpisodeNo { get; set; }
        public int Index { get; set; }
        public int ScenarioNo { get; set; }
        public bool IsOpeningAdv { get; set; }
    }

    public class SubSeasonIdolEvent : PRISM.Scenario.ScenarioId
    {
        public int EpisodeNo { get; set; }
        public int Index { get; set; }
        public int CharacterId { get; set; }
        public int ScenarioNo { get; set; }
    }

    public class ProduceIdol : PRISM.Scenario.ScenarioId
    {
        public int ProduceIdolId { get; set; }
        public int Rarity { get; set; }
        public int CharacterId { get; set; }
        public int ScenarioNo { get; set; }
    }

    public class SupportCharacter : PRISM.Scenario.ScenarioId
    {
        public int SupportCharacterId { get; set; }
        public int Rarity { get; set; }
        public int CharacterId { get; set; }
        public int ScenarioNo { get; set; }
    }

    public class MainStory : PRISM.Scenario.ScenarioId
    {
        public int Chapter { get; set; }
        public int UnitId { get; set; }
        public int StoryNo { get; set; }
    }

    public class IdolStory : PRISM.Scenario.ScenarioId
    {
        public int CharacterId { get; set; }
        public int StoryNo { get; set; }
    }

    public class EventStory : PRISM.Scenario.ScenarioId
    {
        public int EventType { get; set; }
        public int UnitId { get; set; }
        public int ScenarioNo { get; set; }
        public int StoryNo { get; set; }
    }

    public class ExtraStory : PRISM.Scenario.ScenarioId
    {
        public int ExtraType { get; set; }
        public int ScenarioNo { get; set; }
        public int StoryNo { get; set; }
    }

    public class EpisodeZero : PRISM.Scenario.ScenarioId
    {
        public int EpisodeZeroType { get; set; }
        public int CharacterId { get; set; }
        public int ScenarioNo { get; set; }
        public int StoryNo { get; set; }
    }

    public class Webcast : PRISM.Scenario.ScenarioId
    {
        public int Situation { get; set; }
        public int WebcastType { get; set; }
        public int CharaId { get; set; }
        public int ScenarioNo { get; set; }
    }

    public class Chain : PRISM.Scenario.ScenarioId
    {
        public int Situation { get; set; }
        public int ChainType { get; set; }
        public int CharacterId { get; set; }
        public int ScenarioNo { get; set; }
    }

    public class SystemVoice : PRISM.Scenario.ScenarioId
    {
        public SituationType Situation { get; set; }
        public int TypeId { get; set; }
        public int CharaId { get; set; }
        public int UnitId { get; set; }
        public int StoryNo { get; set; }

        public enum SituationType : System.Enum
        {
            public int value__;
            public static SituationType BirthdayEvent;
            public static SituationType Invalid;
        }
    }

    public class Voice : PRISM.Scenario.ScenarioId
    {
        public int CharacterId { get; set; }
        public SituationType Situation { get; set; }
        public int VoiceType { get; set; }
        public string CueSheetName { get; set; }
        public bool IsOffSkit { get; set; }
        public static string GetCueSheetName(int characterId, SituationType situation);

        public enum SituationType : System.Enum
        {
            public int value__;
            public static SituationType Home;
            public static SituationType Live;
            public static SituationType Character;
            public static SituationType Gasha;
            public static SituationType LoginBonus;
            public static SituationType DressUpRoom;
            public static SituationType StoryTop;
            public static SituationType CharacterTop;
            public static SituationType Chara;
            public static SituationType Produce;
            public static SituationType Story;
            public static SituationType April2025;
            public static SituationType Etc;
        }
    }

    public class ProduceIdolVoice : PRISM.Scenario.ScenarioId
    {
        public int ProduceIdolId { get; set; }
        public int Rarity { get; set; }
        public int CharacterId { get; set; }
        public int Situation { get; set; }
        public int VoiceType { get; set; }
    }

    public class SupportCharacterVoice : PRISM.Scenario.ScenarioId
    {
        public int SupportCharacterId { get; set; }
        public int Rarity { get; set; }
        public int CharacterId { get; set; }
        public int Situation { get; set; }
        public int VoiceType { get; set; }
    }

    public class Tutorial : PRISM.Scenario.ScenarioId
    {
    }

    public class Other : PRISM.Scenario.ScenarioId
    {
    }
}

// Namespace: PRISM.Scenario
public class ScenarioLoadUtility
{
    public static Cysharp.Threading.Tasks.UniTask<System.Collections.Generic.IEnumerable<string>> GetPreloadAssetListAsync(string scrName, PRISM.UnitIdol[] unitIdol);
    public static System.Collections.Generic.IEnumerable<string> GetVoiceAssetListAsync(string scrName);
    public static Limelight.Downloader.IDownloadJobProvider GetDownloadJob(System.Collections.Generic.IEnumerable<string> assetList);
    private static System.Collections.Generic.IEnumerable<string> _getUnitIdolAssetList(PRISM.UnitIdol[] unitIdolData, bool sd);
    private static System.Collections.Generic.IEnumerable<string> _getAssembleCharacterAssetList(PRISM.UnitIdol idol, bool flagSD, bool isCoordinationEnabled);
    private static FileNameInfo _getFileNameExist(AssembleInfo asm, bool flagSD);
    public static System.Collections.Generic.IEnumerable<string> _getMotionSequenceAssetList(string msName, PRISM.UnitIdol[] _unitIdol);
    private static System.Collections.Generic.IEnumerable<string> _facePreLoad(string faName);

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<string, string> <>9__2_0;
        private string <GetDownloadJob>b__2_0(string key);
    }

    private struct <GetPreloadAssetListAsync>d__0 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<System.Collections.Generic.IEnumerable<string>> <>t__builder;
        public string scrName;
        public PRISM.UnitIdol[] unitIdol;
        private string <homeCutScene>5__2;
        private string <scriptPath>5__3;
        private string <positionPath>5__4;
        private string <unitPath>5__5;
        private string <textPath>5__6;
        private string <motionSequenceName>5__7;
        private PRISM.DownloadKeyContainer <downloadKeyContainer>5__8;
        private System.Collections.Generic.List<string> <loadFileList>5__9;
        private bool <sdFlag>5__10;
        private Awaiter <>u__1;
        private System.Collections.Generic.Dictionary<string, string> <tableDictionary>5__11;
        private System.ValueTuple<SceneData[], string[], string[], ScriptData[]> <script>5__12;
        private System.Collections.Generic.List<string> <cutList>5__13;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Scenario
public class ScenarioManager : UnityEngine.MonoBehaviour
{
    private static string CommonPreset;
    private static int MaxCharacter;
    private static int MaxPosition;
    private static UnityEngine.GameObject ScenarioObject;
    private UnityEngine.Camera uiCamera;
    private PRISM.Scenario.TextArea textArea;
    private UnityEngine.UI.RawImage bgImage;
    private PRISM.ScreenEffectEx screenEffectEx;
    private UnityEngine.Light defaultLight;
    private UnityEngine.GameObject presidentSilhouette;
    private UnityEngine.GameObject shakeCamera;
    private UnityEngine.AnimationCurve interpolateCurve;
    private float autoTapWaitSeconds;
    private UnityEngine.Material material2DBg;
    private UnityEngine.Material materialUIDefault;
    private System.Collections.Generic.List<MaterialPair> materialUIReplaceList;
    private PRISM.Legacy.ScenarioSilhouette silhouette;
    private PRISM.LiveCharacterController liveCharacter;
    private CameraWorkEvent camEvent;
    private PRISM.Scenario.ScenarioCharacterActionManager scenarioCharacterActionManager;
    private PRISM.CameraController cameraController;
    private PRISM.Scenario.WindController windController;
    private PRISM.Scenario.TextLog textLog;
    private PRISM.Scenario.ScenarioSound scenarioScenarioSound;
    private System.Collections.Generic.List<CommandQueue> commandQueue;
    private static ChangeUnitDatas changeUnitDatas;
    private UnityEngine.GameObject currentBG;
    private string currentBGName;
    private bool isAdv;
    private System.Action <TerminatedCallBack>k__BackingField;
    private System.Action<string> <ChangeTextCallBack>k__BackingField;
    private static System.Collections.Generic.Dictionary<string, string> tableDictionary;
    private static bool isPreLoaded;
    public static string preLoadName;
    public static bool IsPause;
    public static bool NoVoice;
    private bool existsNoVoiceCharacter;
    public bool TextAreaOff;
    private System.Collections.Generic.Dictionary<string, SequenceData> dicSequence;
    private UnityEngine.GameObject advInstance;
    private System.Collections.Generic.Dictionary<string, UnityEngine.GameObject> dicCommonPrefab;
    private System.Collections.Generic.List<UnityEngine.Playables.PlayableDirector> commonTimelineList;
    private System.Collections.Generic.List<string> movingList;
    private System.Collections.Generic.Dictionary<string, System.Collections.IEnumerator> dicCoroutine;
    private UnityEngine.Playables.PlayableDirector timeline;
    private System.Collections.Generic.Dictionary<string, UnityEngine.Material> dicReplaceUIMaterial;
    private static string homeCutScene;
    private static string homeAddPrefab;
    private bool skipFlag;
    private bool autoFlag;
    private bool initFlag;
    private bool <Is2dBgSet>k__BackingField;
    private bool <IsAdjustZOn>k__BackingField;
    private bool isDirectVoice;
    private int directSpeakerIndex;
    private System.Action[] updateFuncTable;
    private string[] speakerTable;
    private string[] choicesTable;
    private int currentScript;
    private int currentScene;
    private float currentStartTime;
    private int currentBgScript;
    private int[] currentCharaScript;
    private string currentTextKey;
    private int currentSpeaker;
    private string text_key;
    private string voice_key;
    private bool flagWait;
    private static float waitTime;
    private SceneData[] sceneData;
    private string[] cutSceneName;
    private string[] soundCueName;
    private ScriptData[] scriptData;
    private ScriptData scr;
    private ScenarioTextList[] ScenarioText;
    private bool startFadePatch;
    private PositionDatas positionDatas;
    private System.Collections.Generic.Dictionary<string, int> positionDic;
    public string[] currentPosKey;
    private UnityEngine.Transform[] currentPosIdTransform;
    private string currentScriptName;
    private bool clearCharacter;
    private static PRISM.UnitIdol[] preloadUnit;
    private static string motionSequenceName;
    private int playMode;
    private int lastCameraScript;
    public bool editMode;
    public bool ffMode;
    private bool waitCancel;
    private bool notFastForward;
    private static int CannotCancel;
    private static int CancelNoFF;
    private UnityEngine.Light tempLight;
    private bool noChangeBG;
    private bool noChangeChara;
    private UnityEngine.RenderTexture bgRenderTexture;
    private UnityEngine.RenderTexture bgTexture;
    private UnityEngine.Material keepMaterial;
    private int renderLoop;
    private bool cutSceneSetUpEnd;
    private UnityEngine.GameObject cutInstance;
    private UnityEngine.Transform cutCharacterDir;
    private PRISM.CutScene cutScene;
    private CameraWorkEvent cutCamEvent;
    private System.Collections.Generic.List<UnityEngine.Transform> offList;
    private UnityEngine.Playables.PlayableDirector cutTimeline;
    private PRISM.MvCutSceneSoundResources soundResources;
    private UnityEngine.Matrix4x4 lastPM;
    private bool shakeFlag;
    private bool preloadingChangeUnit;
    private static int TrueValue;
    private float voiceTime;
    private string sequenceKey;
    private bool ffWait;
    private ScriptStack scriptStack;
    private int[] convertList;
    private int lastScript;
    public System.Func<bool> onTapScreen;
    private AutoTapWaiter autoTapWaiter;
    private bool terminateFlag;
    public static bool IsDisplayScenarioID;
    private float CameraStopMarginTime { get; set; }
    public CameraWorkEvent CameraEvent { get; set; }
    public PRISM.Scenario.ScenarioCharacterActionManager CharaActionManager { get; set; }
    public System.Action TerminatedCallBack { get; set; }
    public System.Action<string> ChangeTextCallBack { get; set; }
    public bool IsPreLoaded { get; set; }
    public bool Is2dBgSet { get; set; }
    public bool IsAdjustZOn { get; set; }
    public PRISM.ScreenEffectEx ScreenEffectEx { get; set; }
    public static string GetPreLoadName();
    public UnityEngine.Material GetUIMaterial();
    public System.Collections.Generic.Dictionary<string, UnityEngine.Material> GetReplaceUIMaterialDictionary();
    public Cysharp.Threading.Tasks.UniTask SetupAsync(string scenario_name, PRISM.UnitIdol[] _unitIdol, bool isAdventure, bool isContinueBGM, bool isWhite);
    private string GetScenarioText(string key);
    private void CheckFirstFade();
    public static void LoadTableData(System.Collections.Generic.Dictionary<string, string> dictionary);
    private Cysharp.Threading.Tasks.UniTask _initializeAsync(string scrName);
    private void Update();
    private void UpdateInner(bool loop);
    private void _lateUpdate();
    private void LateUpdateInner();
    private void OnDestroy();
    private void ReleaseAssets();
    private void _funcTextWait();
    private void _funcTextNoWait();
    private void _funcWait();
    private void _funcTapWait();
    private void _funcJump();
    private void _funcCondFlag();
    private void _funcCondFlagNot();
    private void _funcCondValueEqual();
    private void _funcCondValueNotEqual();
    private void _funcCondValueGreaterEqual();
    private void _funcCondValueLessEqual();
    private void _funcSetFlag();
    private void _funcSetValue();
    private void _funcAddValue();
    private void _funcTerminate();
    public void Terminate();
    private void _funcDummy();
    private void _funcPutChara();
    private void _funcActionChara();
    private void _funcExpressionChara();
    private void _funcMoveChara();
    private void _funcDeleteChara();
    private void _funcTurnChara();
    private void _funcWaitActionChara();
    private void _funcLightChara();
    private void _funcCharaAutoNeckParam();
    private void _funcFade();
    private void _funcBgChange();
    private void _setupBgModel(string key);
    private void _setupBGMirror(UnityEngine.GameObject bgObject);
    private void _setupBGCamera(UnityEngine.GameObject bgObject);
    private void _setupBGLights(UnityEngine.GameObject bgObject);
    private void _funcCameraNext();
    private void _setCameraTime(CommandQueue com);
    private void _funcWindowBegin();
    private void _funcWindowNega();
    private void _funcWindowEnd();
    private void _funcWindowOffset();
    private void _funcSetActiveTextwindow();
    private void _funcSoundKeyOn();
    private void _funcSoundReplace();
    private void SoundKeyOn(CommandQueue com);
    private void _funcSoundVolume();
    private void SoundVolume(CommandQueue com);
    private void _funcSet2Dbg();
    private void _funcCallCutScene();
    private void _funcReturnCutScene();
    public Cysharp.Threading.Tasks.UniTask SetupCutSceneAsync(string tableString);
    private void _funcCharaPreset();
    private void _funcCameraPreset();
    private void _funcCharaPresetPos();
    private void _funcClearAllChara();
    private void _funcChangeSpeakerText();
    private void _funcChoicesSetNum();
    private void _funcChoicesSetText();
    private void _funcWindParam();
    private void _funcAddPrefab();
    private void _funcPlayPrefab();
    private System.Collections.IEnumerator PlayPrefab(ScriptData scrSave);
    private void _funcDeletePrefab();
    private void _funcEnvParam();
    private void _funcShakeParam();
    private void _shakeLateUpdateInner();
    private void _funcTextPrefab();
    private void _funcChangeUnit();
    private void JumpScript(int script);
    private void ChangeText(string id);
    private void PlayVoice();
    private System.Collections.Generic.List<int> GetSpeakerIdList();
    private System.Collections.Generic.List<int> GetSpeakerIdList(string cueName, System.Collections.Generic.List<string> cueInfoList);
    private void SetupLipSync(System.Collections.Generic.List<int> list);
    private static void _applySwitchIdHolder(UnityEngine.GameObject backgroundObject, PRISM.Character[] _characters);
    private void ForwardToNextWait();
    public void FastForwardToUI();
    public void AutoPlayModeEnable(bool _autoFlag);
    private void ForwardTime(float t);
    public void SetSkip();
    public void SkipResume(bool selectComFlag);
    private void ExecuteCommand(CommandQueue com);
    public bool IsCharacterActive(int id);
    private void AttachCharacterToTimeline(UnityEngine.Playables.PlayableDirector _timeline, PRISM.LiveCharacterController lcc);
    private void AttachCharacter(UnityEngine.Playables.PlayableDirector _timeline, string trackGroupName, PRISM.Character character);
    public void BindObject(UnityEngine.Playables.PlayableDirector _timeline, UnityEngine.Timeline.TrackAsset targetTrack, UnityEngine.Object bindObject);
    private UnityEngine.Timeline.TrackAsset GetTrackAsset(UnityEngine.Playables.PlayableDirector _timeline, string trackPath);
    public int GetChoicesNum();
    public string GetChoicesText(int i);
    public void SetSubScript(string subScriptName, int[] charList);
    public bool ResetSubScript();
    public int SearchCharacterIDIndex(int charId);
    private void ScriptProc();
    public static bool IsSkit();
    public static string SearchAnimationName(int charaID, int actID, string actName, string externalExtension);
    public static string SearchAnimationName(int charaID, int actID, string actName);
    public static string SearchAnimationName(int charaID, string actName);
    private static string ChangeAnimationName(int charaID, int actID, string actName);
    public static bool DefaultTapScreen();
    private bool AutoTap();
    private void _setupMotionSequence(PRISM.UnitIdol[] _unitIdol);
    private static void _checkAndPreloadChangeUnitData(PRISM.DownloadKeyContainer downloadKeyContainer, string fileName);
    private static void _checkAndLoadChangeUnitData(string fileName);
    private static void _preloadChangeUnit(PRISM.DownloadKeyContainer downloadKeyContainer, PRISM.UnitIdol[] unitIdol, bool sdFlag);
    private Cysharp.Threading.Tasks.UniTask _preloadChangeUnitWaitAsync(PRISM.UnitIdol[] unitIdol);
    private PositionData GetPosition(int pos_id, int idx);
    public void SetLipSyncFlag(int charaIndex);
    public void AddLog(int speakerFlag, string text, bool isChoice);
    private static void ReplaceCutTable(string[] table);
    public static Cysharp.Threading.Tasks.UniTask PreLoadAsync(string scrName, PRISM.UnitIdol[] unitIdol);
    public static PRISM.UnitIdol[] GetPreloadUnit();
    public bool ExistChoice();
    public void ChangeCharacter(PRISM.UnitIdol[] _unitIdol);
    public void ChangeCharacterNotTakeOverAnimation(PRISM.UnitIdol[] _unitIdol);
    public void SetAnimation(int i, string animationName, string loopAnimation, float transitionTime, bool autoSelect);
    public static void SetHomeCutScene(string toTableString);
    public static void SetAddPrefab(string toTableString);
    public void SetVoice(string voiceName, int _speakerIndex);
    public void SetSequenceDirect(int index, string sequenceName);
    public bool CheckDontMoveCharacter(int index);
    public void SetupForHome();
    public void SetAdjustZ(bool _onoff);
    public Cysharp.Threading.Tasks.UniTask LoadVoiceCueSheetAsync(string cueSheetName, PRISM.UnitIdol[] unitIdol, string requiredMotionCueSheetName);
    public System.Collections.Generic.List<TextLogData> GetTextLogList();
    public string GetCurrentTextKey();
    public Cysharp.Threading.Tasks.UniTask WaitSkipToChoiceAsync();
    public void SetEyeTargetNo(int i, int targetNo);
    public void PauseAllScenarioSounds();
    public void ResumeAllScenarioSounds();
    public UnityEngine.Canvas GetBgCanvas();
    private bool <WaitSkipToChoiceAsync>b__288_0();

    private class MaterialPair
    {
        public UnityEngine.Material fromMaterial;
        public UnityEngine.Material toMaterial;
    }

    public enum CommandType : System.Enum
    {
        public int value__;
        public static CommandType Camera;
        public static CommandType Sound;
        public static CommandType SoundVolume;
    }

    public class CommandQueue
    {
        public CommandType type;
        public float delayFrame;
        public int param1;
        public int param2;
        public int param3;
        private float <Time>k__BackingField;
        public float Time { get; set; }
        public float Param1Time { get; set; }
        public float DelayTime { get; set; }
    }

    public class ChangeUnitDatas
    {
        public ChangeUnitData[] changeUnitData;
    }

    public class ChangeUnitData
    {
        public PRISM.UnitIdol[] unitIdolData;
    }

    public class ScenarioTextList
    {
        private string <key>k__BackingField;
        private string <text>k__BackingField;
        public string key { get; set; }
        public string text { get; set; }
    }

    public class PositionDatas
    {
        public PositionData[] positionData;
    }

    public class PositionData
    {
        public string pos_id;
        public UnityEngine.Vector3 position;
        public UnityEngine.Vector3 rotation;
    }

    private class ScriptStack
    {
        public string scriptName;
        public int sceneCount;
        public int scriptDataCount;
        public float cameraTime;
        public string[] positionID;
        public PositionData[] positionData;
    }

    private class AutoTapWaiter
    {
        private bool isWaiting;
        private float startTime;
        private float waitSeconds;
        public void Start(float _waitSeconds);
        public void Reset();
        public bool IsTap();
    }

    private class <>O
    {
        public static System.Func<bool> <0>__DefaultTapScreen;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<bool> <>9__154_0;
        public static System.Action<System.ValueTuple<string, int>> <>9__157_0;
        public static System.Comparison<CommandQueue> <>9__238_0;
        private bool <SetupAsync>b__154_0();
        private void <LoadTableData>b__157_0(System.ValueTuple<string, int> x);
        private int <ForwardToNextWait>b__238_0(CommandQueue a, CommandQueue b);
    }

    private class <>c__DisplayClass249_0
    {
        public string trackName;
        private bool <GetTrackAsset>b__0(UnityEngine.Timeline.TrackAsset t);
    }

    private struct <LoadVoiceCueSheetAsync>d__285 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public string cueSheetName;
        public PRISM.Scenario.ScenarioManager <>4__this;
        public string requiredMotionCueSheetName;
        public PRISM.UnitIdol[] unitIdol;
        private string <motionCueSheetName>5__2;
        private PRISM.DownloadKeyContainer <downloadKeyContainer>5__3;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private class <PlayPrefab>d__224 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
    {
        private int <>1__state;
        private object <>2__current;
        public PRISM.Scenario.ScenarioManager <>4__this;
        public ScriptData scrSave;
        private bool <outFlag>5__2;
        private object System.Collections.Generic.IEnumerator<System.Object>.Current { get; set; }
        private object System.Collections.IEnumerator.Current { get; set; }
        private void System.IDisposable.Dispose();
        private bool MoveNext();
        private void System.Collections.IEnumerator.Reset();
    }

    private struct <PreLoadAsync>d__272 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public string scrName;
        public PRISM.UnitIdol[] unitIdol;
        private string <scriptPath>5__2;
        private string <positionPath>5__3;
        private string <unitPath>5__4;
        private string <textPath>5__5;
        private PRISM.DownloadKeyContainer <downloadKeyContainer>5__6;
        private bool <sdFlag>5__7;
        private Awaiter <>u__1;
        private System.ValueTuple<SceneData[], string[], string[], ScriptData[]> <script>5__8;
        private System.Collections.Generic.List<string> <cutList>5__9;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetupAsync>d__154 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Scenario.ScenarioManager <>4__this;
        public bool isWhite;
        public bool isAdventure;
        public string scenario_name;
        public PRISM.UnitIdol[] _unitIdol;
        public bool isContinueBGM;
        private Awaiter<Cysharp.Threading.Tasks.UniTask> <>u__1;
        private Awaiter <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <SetupCutSceneAsync>d__213 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public string tableString;
        public PRISM.Scenario.ScenarioManager <>4__this;
        private string[] <cutName>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <WaitSkipToChoiceAsync>d__288 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Scenario.ScenarioManager <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_initializeAsync>d__158 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Scenario.ScenarioManager <>4__this;
        public string scrName;
        private int <i>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <_preloadChangeUnitWaitAsync>d__267 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Scenario.ScenarioManager <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Scenario
public class ScenarioPresetPos : UnityEngine.MonoBehaviour
{
    private static System.Collections.Generic.Dictionary<string, PresetData> presetData;
    private static System.Collections.Generic.List<string> presetList;
    private static string camDataName;
    private static string charaDataName;
    private static string camIndexName;
    private static string charaIndexName;
    private static string skitIndexName;
    public static void Reset();
    public static void Preload(PRISM.DownloadKeyContainer downloadKeyContainer, string bgName);
    public static void LoadAll();
    public static void SetCamera(CameraWorkEvent camEvent, string bgName, string commonName, int index, float offsetY, bool skitFlag);
    public static void SetCharacter(PRISM.Scenario.ScenarioCharacterActionManager scenarioCharacterActionManager, string bgName, string commonName, int index, bool skitFlag);
    public static void SetCharacterActPosition(PRISM.Scenario.ScenarioCharacterActionManager scenarioCharacterActionManager, string bgName, string commonName, int index, int no, int charaIndex, bool skitFlag);
    public static string GetPresetStr(string bgName);
    private void SetPreset(string bgName);

    private class PresetData
    {
        public System.Collections.Generic.Dictionary<string, CameraData> cameraData;
        public System.Collections.Generic.Dictionary<string, CharacterData> characterData;
    }

    private class CameraData
    {
        public UnityEngine.Vector3 pos;
        public UnityEngine.Quaternion rot;
        public float fov;
    }

    private class CharacterData
    {
        public CharaData[] chara;
    }

    private class CharaData
    {
        public UnityEngine.Vector3 pos;
        public float rotY;
        public string animName;
    }
}

// Namespace: PRISM.Scenario
public class ScenarioScene : UnityEngine.MonoBehaviour
{
    private PRISM.Scenario.ScenarioManager scenarioManager;
    private PRISM.Adv.AdvParameter advParameter;
    private bool isInitialized;
    private void Start();
    public Cysharp.Threading.Tasks.UniTask InitializeAsync(PRISM.Adv.AdvParameter advParameter, OnScenarioManagerInitializedFunc onScenarioManagerInitializedFunc);
    private void Update();
    private Cysharp.Threading.Tasks.UniTask _backOutGameAsync();
    private System.Collections.Generic.IEnumerable<PRISM.UnitIdol> _overwriteProduceMainScenarioStageCostumes(System.Collections.Generic.IReadOnlyList<PRISM.UnitIdol> unitIdols);

    public class OnScenarioManagerInitializedFunc : System.MulticastDelegate
    {
        public Cysharp.Threading.Tasks.UniTask Invoke(PRISM.Scenario.ScenarioManager scenarioManager, System.Threading.CancellationToken ct);
        public System.IAsyncResult BeginInvoke(PRISM.Scenario.ScenarioManager scenarioManager, System.Threading.CancellationToken ct, System.AsyncCallback callback, object object);
        public Cysharp.Threading.Tasks.UniTask EndInvoke(System.IAsyncResult result);
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<PRISM.Definitions.MstProduceIdol, int> <>9__8_1;
        private int <_overwriteProduceMainScenarioStageCostumes>b__8_1(PRISM.Definitions.MstProduceIdol x);
    }

    private class <>c__DisplayClass5_0
    {
        public PRISM.Adv.AdvParameter advParameter;
        public PRISM.Scenario.ScenarioScene <>4__this;
        private void <InitializeAsync>b__0();
    }

    private class <>c__DisplayClass8_0
    {
        public PRISM.Definitions.MstEpisode mstEpisode;
        public PRISM.Definitions.MasterData masterData;
        public System.Collections.Generic.Dictionary<int, PRISM.UnitIdol> episodeStageCostumeIdols;
        private bool <_overwriteProduceMainScenarioStageCostumes>b__0(PRISM.Definitions.MstProduceIdol x);
        private PRISM.UnitIdol <_overwriteProduceMainScenarioStageCostumes>b__2(PRISM.Definitions.MstProduceIdol x);
        private PRISM.UnitIdol <_overwriteProduceMainScenarioStageCostumes>b__3(PRISM.UnitIdol unitIdol);
    }

    private class <>c__DisplayClass8_1
    {
        public MainScenario <mainScenario>5__2;
        public MainIdol <mainIdolScenario>5__3;
        private bool <_overwriteProduceMainScenarioStageCostumes>b__4(PRISM.Definitions.MstEpisode x);
    }

    private class <>c__DisplayClass8_2
    {
        public int mstUnitId;
        public <>c__DisplayClass8_1 CS$<>8__locals3;
        private bool <_overwriteProduceMainScenarioStageCostumes>b__5(PRISM.Definitions.MstEpisode x);
    }

    private struct <InitializeAsync>d__5 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Adv.AdvParameter advParameter;
        public PRISM.Scenario.ScenarioScene <>4__this;
        private <>c__DisplayClass5_0 <>8__1;
        public OnScenarioManagerInitializedFunc onScenarioManagerInitializedFunc;
        private System.Threading.CancellationToken <ct>5__2;
        private Awaiter <>u__1;
        private Awaiter<PRISM.UnitIdol[]> <>u__2;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <Update>d__6 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public System.Runtime.CompilerServices.AsyncVoidMethodBuilder <>t__builder;
        public PRISM.Scenario.ScenarioScene <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Scenario
public class ScenarioScriptParser
{
    public static string FlagTextFileName;
    public static string TableTextFileName;
    public static System.ValueTuple<SceneData[], string[], string[], ScriptData[]> Parse(byte[] bytes);
    public static void ParseFlagData(byte[] flagBytes, System.Action<System.ValueTuple<string, int>> onParseFlag);
    public static void ParseTableData(byte[] tableBytes, System.Collections.Generic.Dictionary<string, string> dictionary);
    private static string _readString(System.IO.BinaryReader reader, int count);

    public struct SceneData : System.ValueType
    {
        public int startScript;
        public string labelName;
    }

    public struct ScriptData : System.ValueType
    {
        public int command;
        public int idata1;
        public float fdata1;
        public int idata2;
        public float fdata2;
        public int idata3;
        public float fdata3;
        public int idata4;
        public float fdata4;
        public float IData2Time { get; set; }
        public float IData3Time { get; set; }
        public float IData4Time { get; set; }
    }
}

// Namespace: PRISM.Scenario
public class ScenarioSound
{
    private bool noVoiceCueSheet;
    private string currentVoiceCueSheet;
    private System.Collections.Generic.List<string> cueSheetNameList;
    private bool isContinueBGM;
    private System.Collections.Generic.HashSet<string> bgmCueSheetNameList;
    private System.Collections.Generic.List<SoundQueue> soundQueue;
    private System.Collections.Generic.Dictionary<string, SoundPlayback> dicSetVolume;
    private System.Collections.Generic.Dictionary<string, CriWare.CriAtomExPlayback> voicePlaybacks;
    public Cysharp.Threading.Tasks.UniTask<Cysharp.Threading.Tasks.UniTask> InitAsync(string scenario_name, bool isAdv, bool _isContinueBGM, bool isSkipSound);
    public Cysharp.Threading.Tasks.UniTask InitSoundCueSheetAsync(string scrName);
    public string GetVoiceCueSheet();
    public bool IsNoVoiceCueSheet();
    public static string FindCueSheetName(string scrName);
    public void UpdateInner(float deltaTime);
    public void Terminate();
    public void KeyOn(string keyString, CommandQueue com);
    public void Volume(string keyString, CommandQueue com);
    private void SetVolume(CriWare.CriAtomExPlayer player, string cueName, float vol);
    public System.Collections.Generic.List<string> GetPlayVoiceCueList(string cueName);
    public void PlayVoice(string cueName);
    public void PauseAll();
    public void ResumeAll();
    public bool IsExistVoice(string cueName);
    public Cysharp.Threading.Tasks.UniTask LoadCueSheetAsync(string cueSheetName);
    public void UnloadLoadCueSheetList();
    private System.Collections.Generic.IEnumerable<CriWare.CriAtomExPlayback> _getSoundPlaybacks();

    private class SoundQueue
    {
        public PRISM.AudioType audioType;
        public CriWare.CriAtomExPlayer player;
        public int duration;
        public float startVolume;
        public float volumeRate;
        public float time;
        public string cueName;
        public float DurationTime { get; set; }
    }

    private class SoundPlayback
    {
        public CriWare.CriAtomExPlayback playback;
        public float volume;
    }

    private class <>c
    {
        public static <>c <>9;
        public static System.Func<SoundPlayback, CriWare.CriAtomExPlayback> <>9__27_0;
        private CriWare.CriAtomExPlayback <_getSoundPlaybacks>b__27_0(SoundPlayback x);
    }

    private class <>c__DisplayClass20_0
    {
        public string cueName;
        private bool <GetPlayVoiceCueList>b__0(CueInfo x);
    }

    private class <>c__DisplayClass21_0
    {
        public string cueName;
        private bool <PlayVoice>b__0(CueInfo x);
    }

    private class <>c__DisplayClass24_0
    {
        public string cueName;
        private bool <IsExistVoice>b__0(CueInfo x);
    }

    private struct <InitAsync>d__10 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder<Cysharp.Threading.Tasks.UniTask> <>t__builder;
        public PRISM.Scenario.ScenarioSound <>4__this;
        public bool _isContinueBGM;
        public bool isAdv;
        public bool isSkipSound;
        public string scenario_name;
        private Cysharp.Threading.Tasks.UniTask <bgmFadeOutTask>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <InitSoundCueSheetAsync>d__11 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public string scrName;
        public PRISM.Scenario.ScenarioSound <>4__this;
        private string <voiceCueSheet>5__2;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }

    private struct <LoadCueSheetAsync>d__25 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public string cueSheetName;
        public PRISM.Scenario.ScenarioSound <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Scenario
public class ScenarioStatus
{
    private static System.Collections.Generic.Dictionary<string, int> dic;
    private static int MAX_FLAG;
    private static int MAX_IN_BOX;
    private static int MAX_BOX;
    private static int MAX_VALUE;
    public static int MAX_PROGRESS;
    private static System.Collections.BitArray flag;
    private static System.Collections.BitArray flagOnTrigger;
    private static System.Collections.BitArray localFlag;
    private static int[] value;
    private static bool isEnable;
    public static void Initialize();
    public static void Add(string id, int val);
    private static void CheckFirstTime(int idx);
    public static void SetFlag(string id, bool torf);
    public static void SetFlag(int idx, bool torf);
    public static void SetValue(string id, int val);
    public static void SetValue(int idx, int val);
    public static void AddValue(int idx, int val);
    public static bool Check(int idx);
    public static int CheckValue(int idx, int val);
    public static int GetValue(string id, int val);
    public static int GetValue(int idx);
    public static bool GetFlag(string id);
    public static void ClearFlagAll();
    public static void SetEnable(bool torf);
    public static bool IsEnable();
    public static int GetProgress();
    public static int GetIndex(string name);
    public static bool IsAdvFinished();
}

// Namespace: PRISM.Scenario
public class TextLog
{
    private System.Collections.Generic.Dictionary<string, int> dicConvertID;
    private System.Collections.Generic.Dictionary<string, int> dicConvertIdolID;
    private string[] speakerTable;
    private System.Collections.Generic.List<TextLogData> listTextLogData;
    private PRISM.UnitIdol[] unitIdol;
    private int[] convertList;
    public void Init(PRISM.UnitIdol[] _unitIdol, int[] _convertList);
    public void SetConvertList(int[] _convertList);
    public string[] GetStartSpeakerTable();
    public string GetSpeakersName(int speakerFlag);
    public void AddLog(int speakerFlag, string textID, string text, bool isChoice);
    public System.Collections.Generic.List<TextLogData> GetTextLogList();

    public class TextLogData
    {
        public int speakerID;
        public string speakerName;
        public string voiceID;
        public string text;
        public bool isChoice;
    }
}

// Namespace: PRISM.Scenario
public class TextArea : UnityEngine.MonoBehaviour
{
    private ENTERPRISE.UI.UITextMeshProUGUI textArea;
    private ENTERPRISE.UI.UITextMeshProUGUI nameText;
    private UnityEngine.GameObject arrowImage;
    private int displayLengthPerSecond;
    private float newLineWaitTimePerCharacter;
    private float producerSpeakDuration;
    private UnityEngine.CanvasGroup canvasGroup;
    private float areaFadeDuration;
    private bool isDisplay;
    private DG.Tweening.Core.TweenerCore<float, float, DG.Tweening.Plugins.Options.FloatOptions> areaFadeTween;
    private char[] buffer;
    private int currentLength;
    private int totalLength;
    private float remainder;
    private int dashCount;
    private PRISM.Scenario.ProducerSpeaker producerSpeaker;
    public bool IsAutoPlay;
    public bool IsDisplay { get; set; }
    public void ChangeText(string text, string speaker);
    private void Awake();
    private void Update();
    private void OnDestroy();
    public void UpdateInner(float delta);
    private void _moveBuffer(int srcIndex, int destIndex);
    public bool IsTextDispAll();
    public void DispAllText();
    public void UpdateInDisplayOff();
    public bool IsDispText();
    public void EraseImmediately();
    private Cysharp.Threading.Tasks.UniTask _loadSoundAsync();

    private struct <_loadSoundAsync>d__31 : System.ValueType, System.Runtime.CompilerServices.IAsyncStateMachine
    {
        public int <>1__state;
        public Cysharp.Threading.Tasks.CompilerServices.AsyncUniTaskMethodBuilder <>t__builder;
        public PRISM.Scenario.TextArea <>4__this;
        private Awaiter <>u__1;
        private void MoveNext();
        private void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine);
    }
}

// Namespace: PRISM.Scenario
public class WindController : UnityEngine.MonoBehaviour
{
    private float power;
    private float degree;
    private float powerRange;
    private float degreeRange;
    public void SetParam(int kmh, int deg, int pper, int dper);
    private void Update();
}

// Namespace: PRISM.Adv
public class AdvChoiceButtonGroupViewModel
{
    private System.Collections.Generic.IReadOnlyDictionary<int, PRISM.Adv.AdvChoiceButtonViewModel> <AdvChoiceButtonViewModels>k__BackingField;
    private System.Func<int, System.Threading.CancellationToken, Cysharp.Threading.Tasks.UniTask> <OnChoiceSelectedAsyncFunc>k__BackingField;
    public System.Collections.Generic.IReadOnlyDictionary<int, PRISM.Adv.AdvChoiceButtonViewModel> AdvChoiceButtonViewModels { get; set; }
    public System.Func<int, System.Threading.CancellationToken, Cysharp.Threading.Tasks.UniTask> OnChoiceSelectedAsyncFunc { get; set; }
}

// Namespace: PRISM.Adv
public class AdvChoiceButtonViewModel
{
    private System.Collections.Generic.IEnumerable<ProduceParameterType> <ProduceParameterTypes>k__BackingField;
    private System.Nullable<int> <SdCharaIconId>k__BackingField;
    public System.Collections.Generic.IEnumerable<ProduceParameterType> ProduceParameterTypes { get; set; }
    public System.Nullable<int> SdCharaIconId { get; set; }
}

// Namespace: PRISM.Adv
public class AdvParameter
{
    private PRISM.Scenario.ScenarioId <ScenarioId>k__BackingField;
    private System.Type <NextViewType>k__BackingField;
    private PRISM.UnitIdol[] <AdditionalUnitIdols>k__BackingField;
    private Cysharp.Threading.Tasks.AsyncLazy <OnUIControlLazyTask>k__BackingField;
    private PRISM.Adv.AdvScreenViewModel <AdvScreenViewModel>k__BackingField;
    private bool <IsContinueBGM>k__BackingField;
    private bool <IsNoVoice>k__BackingField;
    private System.Action<PRISM.Scenario.ScenarioId, PRISM.Scenario.ScenarioManager> <OnAdvEnd>k__BackingField;
    private Cysharp.Threading.Tasks.UniTaskCompletionSource <FinishScenarioTcs>k__BackingField;
    private bool <OverwriteProduceMainScenarioStageCostume>k__BackingField;
    private System.Nullable<int> <CharacterId>k__BackingField;
    public PRISM.Scenario.ScenarioId ScenarioId { get; set; }
    public System.Type NextViewType { get; set; }
    public PRISM.UnitIdol[] AdditionalUnitIdols { get; set; }
    public Cysharp.Threading.Tasks.AsyncLazy OnUIControlLazyTask { get; set; }
    public PRISM.Adv.AdvScreenViewModel AdvScreenViewModel { get; set; }
    public bool IsContinueBGM { get; set; }
    public bool IsNoVoice { get; set; }
    public System.Action<PRISM.Scenario.ScenarioId, PRISM.Scenario.ScenarioManager> OnAdvEnd { get; set; }
    public Cysharp.Threading.Tasks.UniTaskCompletionSource FinishScenarioTcs { get; set; }
    public bool OverwriteProduceMainScenarioStageCostume { get; set; }
    public System.Nullable<int> CharacterId { get; set; }
}

// Namespace: PRISM.Adv
public interface IAdvLauncherConnector
{
}

// Namespace: PRISM.Adv
public class AdvFavoriteStatus
{
    private bool <IsFavorite>k__BackingField;
    private PRISM.Module.Networking.IStoryIDStatus <StoryId>k__BackingField;
    public bool IsFavorite { get; set; }
    public PRISM.Module.Networking.IStoryIDStatus StoryId { get; set; }
    public void Update(bool isFavorite);
}

// Namespace: PRISM.Adv
public class AdvScenarioInfo : PRISM.Adv.IAdvScenarioInfo
{
    private string <MainTitle>k__BackingField;
    private string <SubTitle>k__BackingField;
    private string <Summary>k__BackingField;
    private PRISM.IAdvTitleViewModel <AdvTitleViewModel>k__BackingField;
    private PRISM.Adapters.Adv.AdvSkipConfirmationPopupViewModel <AdvSkipConfirmationPopupViewModel>k__BackingField;
    private string <AdvTextLogTitle>k__BackingField;
    private PRISM.Scenario.ScenarioId <ScenarioId>k__BackingField;
    private PRISM.Adv.AdvFavoriteStatus <AdvFavoriteStatus>k__BackingField;
    public string MainTitle { get; set; }
    public string SubTitle { get; set; }
    public string Summary { get; set; }
    public PRISM.IAdvTitleViewModel AdvTitleViewModel { get; set; }
    public PRISM.Adapters.Adv.AdvSkipConfirmationPopupViewModel AdvSkipConfirmationPopupViewModel { get; set; }
    public string AdvTextLogTitle { get; set; }
    public PRISM.Scenario.ScenarioId ScenarioId { get; set; }
    public PRISM.Adv.AdvFavoriteStatus AdvFavoriteStatus { get; set; }
    public static PRISM.Adv.IAdvScenarioInfo CreateFromMstAdvInfo(PRISM.Scenario.ScenarioId scenarioId, PRISM.Definitions.MstAdvInfo mstAdvInfo, string subTitle, string advTextLogTitle, PRISM.IAdvTitleViewModel advTitleViewModel, PRISM.Adapters.Adv.AdvSkipConfirmationPopupViewModel advSkipConfirmationPopupViewModel, PRISM.Adv.AdvFavoriteStatus advFavoriteStatus);
    public static PRISM.Adv.IAdvScenarioInfo CreateFromScratch(PRISM.Scenario.ScenarioId scenarioId, string mainTitle, string subTitle, string summary, string advTextLogTitle, PRISM.IAdvTitleViewModel advTitleViewModel, PRISM.Adapters.Adv.AdvSkipConfirmationPopupViewModel advSkipConfirmationPopupViewModel, PRISM.Adv.AdvFavoriteStatus advFavoriteStatus);
    public static PRISM.Adv.IAdvScenarioInfo CreateMakeshiftAdvScenarioInfo(PRISM.Scenario.ScenarioId scenarioId, PRISM.Adv.AdvFavoriteStatus advFavoriteStatus);

    private class <>c__DisplayClass26_0
    {
        public PRISM.Scenario.ScenarioId scenarioId;
        private bool <CreateMakeshiftAdvScenarioInfo>b__0(PRISM.Definitions.MstExtraStory x);
    }
}

// Namespace: PRISM.Adv
public class AdvScenarioInfoFactoryForEventStory
{
    public static PRISM.Adv.IStoryAdvScenarioInfo Create(EventStory scenarioId, PRISM.Adv.AdvFavoriteStatus advFavoriteStatus);
    public static PRISM.Adv.IStoryAdvScenarioInfo Create(int mstEventStoryId, bool isFavorite);
    private static PRISM.Adv.IStoryAdvScenarioInfo _create(EventStory scenarioId, PRISM.Definitions.MstEventStory mstEventStory, PRISM.Adv.AdvFavoriteStatus advFavoriteStatus);

    private class <>c__DisplayClass0_0
    {
        public int mstEventId;
        public EventStory scenarioId;
        private bool <Create>b__0(PRISM.Definitions.MstEventStory x);
    }
}

// Namespace: PRISM.Adv
public class AdvScenarioInfoFactoryForExtraStory
{
    public static PRISM.Adv.IStoryAdvScenarioInfo Create(ExtraStory scenarioId, PRISM.Adv.AdvFavoriteStatus advFavoriteStatus);
    public static PRISM.Adv.IStoryAdvScenarioInfo Create(int mstExtraStoryId, System.Nullable<bool> isFavorite);
    public static PRISM.Adv.IStoryAdvScenarioInfo Create(PRISM.Definitions.MstExtraStory mstExtraStory, System.Nullable<bool> isFavorite);

    private class <>c__DisplayClass0_0
    {
        public ExtraStory scenarioId;
        private bool <Create>b__0(PRISM.Definitions.MstExtraStory x);
    }
}

// Namespace: PRISM.Adv
public class AdvScenarioInfoFactoryForIdolStory
{
    public static PRISM.Adv.IStoryAdvScenarioInfo Create(IdolStory scenarioId, PRISM.Adv.AdvFavoriteStatus advFavoriteStatus);
    public static PRISM.Adv.IStoryAdvScenarioInfo Create(int mstIdolStoryId, bool isFavorite);
    private static PRISM.Adv.IStoryAdvScenarioInfo _create(IdolStory scenarioId, PRISM.Definitions.MstIdolStory mstIdolStory, PRISM.Adv.AdvFavoriteStatus advFavoriteStatus);

    private class <>c__DisplayClass0_0
    {
        public IdolStory scenarioId;
        private bool <Create>b__0(PRISM.Definitions.MstIdolStory x);
    }
}

// Namespace: PRISM.Adv
public class AdvScenarioInfoFactoryForMainIdolScenario
{
    public static PRISM.Adv.IStoryAdvScenarioInfo Create(MainIdol scenarioId, PRISM.Adv.AdvFavoriteStatus advFavoriteStatus);
    public static PRISM.Adv.IStoryAdvScenarioInfo Create(PRISM.Module.Networking.IProduceMainIdolScenarioStatus status);

    private class <>c__DisplayClass0_0
    {
        public MainIdol scenarioId;
        public PRISM.Definitions.MasterData masterData;
        private bool <Create>b__0(PRISM.Definitions.MstProduceMainIdolScenario x);
        private bool <Create>b__1(int x);
    }
}

// Namespace: PRISM.Adv
public class AdvScenarioInfoFactoryForMainScenario
{
    public static PRISM.Adv.IStoryAdvScenarioInfo Create(MainScenario scenarioId, PRISM.Adv.AdvFavoriteStatus advFavoriteStatus);
    public static PRISM.Adv.IStoryAdvScenarioInfo Create(PRISM.Module.Networking.IProduceMainScenarioStatus status);

    private class <>c__DisplayClass0_0
    {
        public MainScenario scenarioId;
        private bool <Create>b__0(PRISM.Definitions.MstProduceMainScenario x);
    }
}

// Namespace: PRISM.Adv
public class AdvScenarioInfoFactoryForMainStory
{
    public static PRISM.Adv.IStoryAdvScenarioInfo Create(MainStory scenarioId, PRISM.Adv.AdvFavoriteStatus advFavoriteStatus);
    public static PRISM.Adv.IStoryAdvScenarioInfo Create(int mstMainStoryId, bool isFavorite);
    private static PRISM.Adv.IStoryAdvScenarioInfo _create(MainStory scenarioId, PRISM.Definitions.MstMainStory mstMainStory, PRISM.Adv.AdvFavoriteStatus advFavoriteStatus);

    private class <>c__DisplayClass0_0
    {
        public MainStory scenarioId;
        private bool <Create>b__0(PRISM.Definitions.MstMainStory x);
    }
}

// Namespace: PRISM.Adv
public class AdvScenarioInfoFactoryForProduceIdol
{
    public static PRISM.Adv.IStoryAdvScenarioInfo Create(ProduceIdol scenarioId, PRISM.Adv.AdvFavoriteStatus advFavoriteStatus);
    public static PRISM.Adv.IStoryAdvScenarioInfo Create(PRISM.Module.Networking.IProduceIdolScenarioStatus status);

    private class <>c__DisplayClass0_0
    {
        public ProduceIdol scenarioId;
        private bool <Create>b__0(PRISM.Definitions.MstProduceIdolEvent x);
    }
}

// Namespace: PRISM.Adv
public class AdvScenarioInfoFactoryForRecommendedSchedule
{
    public static PRISM.Adv.IAdvScenarioInfo Create(ScheduleRecommended scenarioId);
    private static string _getMainTitle(int characterId, int scheduleId);
}

// Namespace: PRISM.Adv
public class AdvScenarioInfoFactoryForSubSeasonEvent
{
    public static PRISM.Adv.IAdvScenarioInfo Create(SubSeasonEvent scenarioId);

    private class <>c__DisplayClass0_0
    {
        public SubSeasonEvent scenarioId;
        private bool <Create>b__0(PRISM.Definitions.MstEpisode x);
    }
}

// Namespace: PRISM.Adv
public class AdvScenarioInfoFactoryForSubSeasonIdolEvent
{
    public static PRISM.Adv.IAdvScenarioInfo Create(SubSeasonIdolEvent scenarioId);

    private class <>c__DisplayClass0_0
    {
        public int unitId;
        public SubSeasonIdolEvent scenarioId;
        private bool <Create>b__0(PRISM.Definitions.MstEpisode x);
    }
}

// Namespace: PRISM.Adv
public class AdvScenarioInfoFactoryForSupportCharacter
{
    public static PRISM.Adv.IStoryAdvScenarioInfo Create(SupportCharacter scenarioId, PRISM.Adv.AdvFavoriteStatus advFavoriteStatus);
    public static PRISM.Adv.IStoryAdvScenarioInfo Create(PRISM.Module.Networking.ISupportCharacterScenarioStatus status);

    private class <>c__DisplayClass0_0
    {
        public SupportCharacter scenarioId;
        private bool <Create>b__0(PRISM.Definitions.MstSupportCharacterEvent x);
    }
}

// Namespace: PRISM.Adv
public class AdvScenarioInfoFactoryForSupportEvent
{
    public static PRISM.Adv.IAdvScenarioInfo Create(SupportEvent scenarioId);
}

// Namespace: PRISM.Adv
public class AdvScenarioInfoFactoryForSystemVoice
{
    public static PRISM.Adv.IAdvScenarioInfo Create(SystemVoice scenarioId);
}

// Namespace: PRISM.Adv
public class AdvScenarioInfoFactoryForTutorial
{
    public static PRISM.Adv.IAdvScenarioInfo Create(Tutorial scenarioId);
}

// Namespace: PRISM.Adv
public class AdvScenarioInfoFactoryForUnitCommunication
{
    public static PRISM.Adv.IAdvScenarioInfo Create(UnitCommunication scenarioId);
}

// Namespace: PRISM.Adv
public class AdvScenarioInfoFactoryForVoice
{
    public static PRISM.Adv.IAdvScenarioInfo Create(Voice scenarioId);
    private static string _getProduceVoiceMainTitle(Voice scenarioId);
}

// Namespace: PRISM.Adv
public class AdvScenarioInfoFactoryForEpisodeZeroStory
{
    public static PRISM.Adv.IStoryAdvScenarioInfo Create(EpisodeZero scenarioId);
    public static PRISM.Adv.IStoryAdvScenarioInfo Create(PRISM.Module.Networking.IEpisodeZeroStoryStatus storyStatus);
    private static PRISM.Adv.IStoryAdvScenarioInfo _create(EpisodeZero scenarioId, PRISM.Definitions.MstEpisodeZeroStory mstStory, PRISM.Adv.AdvFavoriteStatus advFavoriteStatus);

    private class <>c__DisplayClass0_0
    {
        public EpisodeZero scenarioId;
        private bool <Create>b__0(PRISM.Definitions.MstEpisodeZeroStory x);
    }
}

// Namespace: PRISM.Adv
public class AdvScenarioInfoSelector
{
    public static PRISM.Adv.IAdvScenarioInfo Create(PRISM.Scenario.ScenarioId scenarioId);
}

// Namespace: PRISM.Adv
public class AdvScenarioInfoUtility
{
    public static string GetMainTitle(PRISM.Scenario.ScenarioId scenarioID);
}

// Namespace: PRISM.Adv
public interface IAdvScenarioInfo
{
    public string MainTitle { get; set; }
    public string SubTitle { get; set; }
    public string Summary { get; set; }
    public string AdvTextLogTitle { get; set; }
    public PRISM.IAdvTitleViewModel AdvTitleViewModel { get; set; }
    public PRISM.Adapters.Adv.AdvSkipConfirmationPopupViewModel AdvSkipConfirmationPopupViewModel { get; set; }
    public PRISM.Scenario.ScenarioId ScenarioId { get; set; }
    public PRISM.Adv.AdvFavoriteStatus AdvFavoriteStatus { get; set; }
}

// Namespace: PRISM.Adv
public interface IStoryAdvScenarioInfo : PRISM.Adv.IAdvScenarioInfo
{
    public PRISM.Module.Networking.IStoryIDStatus StoryIdStatus { get; set; }
    public PRISM.IStoryThumbnailViewModel ThumbnailViewModel { get; set; }
    public string StorySubTitle { get; set; }
    public string StorySortFilterSubTitle { get; set; }
}

// Namespace: PRISM.Adv
public class StoryAdvScenarioInfo : PRISM.Adv.IStoryAdvScenarioInfo, PRISM.Adv.IAdvScenarioInfo
{
    private PRISM.Scenario.ScenarioId <ScenarioId>k__BackingField;
    private string <MainTitle>k__BackingField;
    private string <SubTitle>k__BackingField;
    private string <Summary>k__BackingField;
    private string <AdvTextLogTitle>k__BackingField;
    private PRISM.IAdvTitleViewModel <AdvTitleViewModel>k__BackingField;
    private PRISM.Adapters.Adv.AdvSkipConfirmationPopupViewModel <AdvSkipConfirmationPopupViewModel>k__BackingField;
    private PRISM.Adv.AdvFavoriteStatus <AdvFavoriteStatus>k__BackingField;
    private PRISM.Module.Networking.IStoryIDStatus <StoryIdStatus>k__BackingField;
    private PRISM.IStoryThumbnailViewModel <ThumbnailViewModel>k__BackingField;
    private string <StorySubTitle>k__BackingField;
    private string <StorySortFilterSubTitle>k__BackingField;
    public PRISM.Scenario.ScenarioId ScenarioId { get; set; }
    public string MainTitle { get; set; }
    public string SubTitle { get; set; }
    public string Summary { get; set; }
    public string AdvTextLogTitle { get; set; }
    public PRISM.IAdvTitleViewModel AdvTitleViewModel { get; set; }
    public PRISM.Adapters.Adv.AdvSkipConfirmationPopupViewModel AdvSkipConfirmationPopupViewModel { get; set; }
    public PRISM.Adv.AdvFavoriteStatus AdvFavoriteStatus { get; set; }
    public PRISM.Module.Networking.IStoryIDStatus StoryIdStatus { get; set; }
    public PRISM.IStoryThumbnailViewModel ThumbnailViewModel { get; set; }
    public string StorySubTitle { get; set; }
    public string StorySortFilterSubTitle { get; set; }
}

// Namespace: PRISM.Adv
public class AdvScreenViewModel
{
    private PRISM.Adv.IAdvScenarioInfo <AdvScenarioInfo>k__BackingField;
    private PRISM.Adv.AdvChoiceButtonGroupViewModel <AdvChoiceButtonGroupViewModel>k__BackingField;
    public PRISM.Adv.IAdvScenarioInfo AdvScenarioInfo { get; set; }
    public PRISM.Adv.AdvChoiceButtonGroupViewModel AdvChoiceButtonGroupViewModel { get; set; }
}

// Namespace: PRISM.Adv
public class AdvTextLogTalkCellViewModel
{
    private int <CharacterId>k__BackingField;
    private string <SpeakerName>k__BackingField;
    private string <ContentText>k__BackingField;
    private string <VoiceId>k__BackingField;
    private string <CueSheetName>k__BackingField;
    private bool <IsChoice>k__BackingField;
    private string <CharacterIconPathForNotIdol>k__BackingField;
    public int CharacterId { get; set; }
    public string SpeakerName { get; set; }
    public string ContentText { get; set; }
    public string VoiceId { get; set; }
    public string CueSheetName { get; set; }
    public bool IsChoice { get; set; }
    public bool HasVoice { get; set; }
    public string CharacterIconPathForNotIdol { get; set; }
    public bool IsProducer { get; set; }
    private bool _isPresident { get; set; }
    private bool _isMob { get; set; }
    private bool _isIdolMultiple { get; set; }
    public static PRISM.Adv.AdvTextLogTalkCellViewModel Create(TextLogData textLogData, string scenarioName);
    private string _getCharacterIconNameForNotIdol();
}

// Namespace: PRISM.Adv
public class MstAdvInfoExtensions
{
    public static string GetModifiedSubTitle(PRISM.Definitions.MstAdvInfo mstAdvInfo, string subTitle);
}

private class <PrivateImplementationDetails>
{
    private static __StaticArrayInitTypeSize=164033 06B05CB23A835EC87D7BC6F00A66AA403E5B75AA5C6BC70BE75E61F871EB02E5;
    private static __StaticArrayInitTypeSize=24 0E5BBE3004972CD87328C53E2FB42E2A7BF2A821367E524BA1939BE0E921F616;
    private static __StaticArrayInitTypeSize=12 12076FB6F81F792AE8D8A7BD8019732631FD31E0989FEAF1AFB11C2888CC2603;
    private static __StaticArrayInitTypeSize=40 272BC3456B7CE85DE2CE18D1964316879E840A1201A4664E967EF42BA3F76B96;
    private static __StaticArrayInitTypeSize=84154 3110E5389BF34782F5A43AD197BE0C658F614A412E7AE1FB1A3BBCA9A5B7F407;
    private static __StaticArrayInitTypeSize=5 377A23F52C6B357696238C3318F677A082DD3430BB6691042BD550A5CDA28EBB;
    private static __StaticArrayInitTypeSize=12 3909877581FC0513531077845C8A39A67C8B4A09178AA95F7921CC3E5A870CB9;
    private static __StaticArrayInitTypeSize=12 4636993D3E1DA4E9D6B8F87B79E8F7C6D018580D52661950EABC3845C5897A4D;
    private static __StaticArrayInitTypeSize=40 4BADAECFE0316D15E6CE4F30B735C207C484607DB14BFE0099C531041D16B46D;
    private static __StaticArrayInitTypeSize=12 5E5CC89B94E7580D7CF2B2D44BC465F068981C585A3D53F7B29484F4639F8C47;
    private static __StaticArrayInitTypeSize=40 6ECD0F0BD7CF53C56D2129820911A26F815949EEE418CA46B4F3D7A80CD969A7;
    private static __StaticArrayInitTypeSize=24 752A6E22358C492163D1DE31BFAFB249C23A54C303CE495A18ABF04CF82E01B2;
    private static __StaticArrayInitTypeSize=40 7AF3D4F0549ECF16571845FA4C6D89E2BD673763D785BBBC733D3ECCAF9729E9;
    private static __StaticArrayInitTypeSize=12 80B592F0F58BCE2D3C85708C7EB403BD26B8A84FD10D1DC1E6A546762B48F8B4;
    private static __StaticArrayInitTypeSize=48 82CB42CB8477B26B7048CFC967B3BF2AE80A84508EB5D9F53A5575B471E0956A;
    private static long 958641630079318773AD7061D83CC14CCBB1B16054FFEEAEFE5FBF2D24AA828D;
    private static __StaticArrayInitTypeSize=32 9785BCE40FF2606A76EF26AC356E8FCD2FBCB0611B085782CF020C45384D41F2;
    private static __StaticArrayInitTypeSize=12 ADE9755ECF4CE11DAC8C91CF67920F009EAEAC5B8C312241B0AD83295519EB11;
    private static __StaticArrayInitTypeSize=12 B01614700F3AB1E9A9AF2F97CEE80467211364B16CBC74097D2BCD3A7CC5E34D;
    private static __StaticArrayInitTypeSize=12 BAE9AA969922DE466A208A5197D8CD6B3ACD09240F3F06D8FAA67A5A0CB8B07E;
    private static __StaticArrayInitTypeSize=20 BCA6B79553D3170F44A05CC4AA2A8A50F7953EE292CCC2B210FA23AC9059F42A;
    private static __StaticArrayInitTypeSize=12 CB876DF0D6142E8AC8C4A402E209E5A735C30960C0C0B6A7422E17D55CDB7FBA;
    private static __StaticArrayInitTypeSize=44 CD4356A1A19B608F3A21A34B195921599C5660F055C4B2CB60A5C1B4466F7308;
    private static __StaticArrayInitTypeSize=16 E8845519DB154B41E620A98F949B9EDCEFB1F9060DC8290A9F7D2C3200ABD0CB;
    private static __StaticArrayInitTypeSize=40 FD3D8601A3CE250EF89C114B9B7BAA791FD664FBFF0B8F79FED9940D419675B2;
    private static uint ComputeStringHash(string s);

    private struct __StaticArrayInitTypeSize=5 : System.ValueType
    {
    }

    private struct __StaticArrayInitTypeSize=12 : System.ValueType
    {
    }

    private struct __StaticArrayInitTypeSize=16 : System.ValueType
    {
    }

    private struct __StaticArrayInitTypeSize=20 : System.ValueType
    {
    }

    private struct __StaticArrayInitTypeSize=24 : System.ValueType
    {
    }

    private struct __StaticArrayInitTypeSize=32 : System.ValueType
    {
    }

    private struct __StaticArrayInitTypeSize=40 : System.ValueType
    {
    }

    private struct __StaticArrayInitTypeSize=44 : System.ValueType
    {
    }

    private struct __StaticArrayInitTypeSize=48 : System.ValueType
    {
    }

    private struct __StaticArrayInitTypeSize=84154 : System.ValueType
    {
    }

    private struct __StaticArrayInitTypeSize=164033 : System.ValueType
    {
    }
}

private class __JobReflectionRegistrationOutput__1892493334
{
    public static void CreateJobReflectionData();
    public static void EarlyInit();
}

private class $BurstDirectCallInitializer
{
    private static void Initialize();
}
